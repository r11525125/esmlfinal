// =============================================================================
// Generated by efx_ipmgr
// Version: 2021.M.137
// IP Version: 3.00
// =============================================================================

////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2013-2021 Efinix Inc. All rights reserved.              
//
// This   document  contains  proprietary information  which   is        
// protected by  copyright. All rights  are reserved.  This notice       
// refers to original work by Efinix, Inc. which may be derivitive       
// of other work distributed under license of the authors.  In the       
// case of derivative work, nothing in this notice overrides the         
// original author's license agreement.  Where applicable, the           
// original license agreement is included in it's original               
// unmodified form immediately below this header.                        
//                                                                       
// WARRANTY DISCLAIMER.                                                  
//     THE  DESIGN, CODE, OR INFORMATION ARE PROVIDED “AS IS” AND        
//     EFINIX MAKES NO WARRANTIES, EXPRESS OR IMPLIED WITH               
//     RESPECT THERETO, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES,  
//     INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF          
//     MERCHANTABILITY, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR    
//     PURPOSE.  SOME STATES DO NOT ALLOW EXCLUSIONS OF AN IMPLIED       
//     WARRANTY, SO THIS DISCLAIMER MAY NOT APPLY TO LICENSEE.           
//                                                                       
// LIMITATION OF LIABILITY.                                              
//     NOTWITHSTANDING ANYTHING TO THE CONTRARY, EXCEPT FOR BODILY       
//     INJURY, EFINIX SHALL NOT BE LIABLE WITH RESPECT TO ANY SUBJECT    
//     MATTER OF THIS AGREEMENT UNDER TORT, CONTRACT, STRICT LIABILITY   
//     OR ANY OTHER LEGAL OR EQUITABLE THEORY (I) FOR ANY INDIRECT,      
//     SPECIAL, INCIDENTAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES OF ANY    
//     CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF      
//     GOODWILL, DATA OR PROFIT, WORK STOPPAGE, OR COMPUTER FAILURE OR   
//     MALFUNCTION, OR IN ANY EVENT (II) FOR ANY AMOUNT IN EXCESS, IN    
//     THE AGGREGATE, OF THE FEE PAID BY LICENSEE TO EFINIX HEREUNDER    
//     (OR, IF THE FEE HAS BEEN WAIVED, $100), EVEN IF EFINIX SHALL HAVE 
//     BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGES.  SOME STATES DO 
//     NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR            
//     CONSEQUENTIAL DAMAGES, SO THIS LIMITATION AND EXCLUSION MAY NOT   
//     APPLY TO LICENSEE.                                                
//
////////////////////////////////////////////////////////////////////////////////

module default_soc (
    io_systemClk,
    io_ddrA_w_payload_strb,
    io_ddrA_w_payload_data,
    axiA_awready,
    axiA_awlen,
    axiA_awsize,
    axiA_arburst,
    axiA_awlock,
    axiA_arcache,
    axiA_awqos,
    axiA_awprot,
    axiA_arsize,
    axiA_arregion,
    axiA_arready,
    axiA_arqos,
    axiA_arprot,
    axiA_arlock,
    axiA_arlen,
    axiA_arid,
    axiA_awcache,
    axiA_awburst,
    axiA_awaddr,
    axiAInterrupt,
    axiA_rlast,
    jtagCtrl_enable,
    jtagCtrl_tdi,
    jtagCtrl_capture,
    jtagCtrl_shift,
    jtagCtrl_update,
    jtagCtrl_reset,
    jtagCtrl_tdo,
    jtagCtrl_tck,
    axiA_araddr,
    axiA_wvalid,
    axiA_wready,
    axiA_wdata,
    axiA_wstrb,
    axiA_wlast,
    axiA_bvalid,
    axiA_bready,
    axiA_bid,
    axiA_bresp,
    axiA_rvalid,
    axiA_rready,
    axiA_rdata,
    axiA_rid,
    axiA_rresp,
    axiA_arvalid,
    axiA_awid,
    axiA_awregion,
    axiA_awvalid,
    io_ddrA_w_payload_id,
    io_ddrA_r_payload_last,
    io_ddrA_r_payload_resp,
    io_ddrA_r_payload_id,
    io_ddrA_r_payload_data,
    io_ddrA_r_ready,
    io_ddrA_r_valid,
    io_ddrA_b_payload_resp,
    io_ddrA_b_payload_id,
    io_ddrA_b_ready,
    io_ddrA_b_valid,
    io_ddrA_w_payload_last,
    io_ddrA_w_ready,
    io_ddrA_w_valid,
    io_ddrA_arw_payload_write,
    io_ddrA_arw_payload_prot,
    io_ddrA_arw_payload_qos,
    io_ddrA_arw_payload_cache,
    io_ddrA_arw_payload_lock,
    io_ddrA_arw_payload_burst,
    io_ddrA_arw_payload_size,
    io_ddrA_arw_payload_len,
    io_ddrA_arw_payload_region,
    io_ddrA_arw_payload_id,
    io_ddrA_arw_payload_addr,
    io_ddrA_arw_ready,
    io_ddrA_arw_valid,
    system_spi_0_io_data_0_read,
    system_spi_0_io_data_0_write,
    system_spi_0_io_data_0_writeEnable,
    system_spi_0_io_data_1_read,
    system_spi_0_io_data_1_write,
    system_spi_0_io_data_1_writeEnable,
    system_spi_0_io_data_2_read,
    system_spi_0_io_data_2_write,
    system_spi_0_io_data_2_writeEnable,
    system_spi_0_io_data_3_read,
    system_spi_0_io_data_3_write,
    system_spi_0_io_data_3_writeEnable,
    system_spi_0_io_sclk_write,
    system_spi_0_io_ss,
    userInterruptA,
    io_apbSlave_0_PADDR,
    io_apbSlave_0_PENABLE,
    io_apbSlave_0_PRDATA,
    io_apbSlave_0_PREADY,
    io_apbSlave_0_PSEL,
    io_apbSlave_0_PSLVERROR,
    io_apbSlave_0_PWDATA,
    io_apbSlave_0_PWRITE,
    io_asyncReset,
    io_memoryClk,
    io_systemReset,
    system_uart_0_io_txd,
    io_memoryReset,
    system_uart_0_io_rxd,
    system_i2c_0_io_scl_read,
    system_i2c_0_io_scl_write,
    system_i2c_0_io_sda_read,
    system_i2c_0_io_sda_write,
    system_gpio_0_io_writeEnable,
    io_ddrMasters_0_reset,
    io_ddrMasters_0_clk,
    io_ddrMasters_0_r_payload_last,
    io_ddrMasters_0_r_payload_resp,
    io_ddrMasters_0_r_payload_id,
    io_ddrMasters_0_r_payload_data,
    io_ddrMasters_0_r_ready,
    io_ddrMasters_0_r_valid,
    io_ddrMasters_0_ar_payload_prot,
    io_ddrMasters_0_ar_payload_qos,
    io_ddrMasters_0_ar_payload_cache,
    io_ddrMasters_0_ar_payload_lock,
    io_ddrMasters_0_ar_payload_burst,
    io_ddrMasters_0_ar_payload_size,
    io_ddrMasters_0_ar_payload_len,
    io_ddrMasters_0_ar_payload_region,
    io_ddrMasters_0_ar_payload_id,
    io_ddrMasters_0_ar_payload_addr,
    io_ddrMasters_0_ar_ready,
    io_ddrMasters_0_ar_valid,
    io_ddrMasters_0_b_payload_resp,
    io_ddrMasters_0_b_payload_id,
    io_ddrMasters_0_b_ready,
    io_ddrMasters_0_b_valid,
    io_ddrMasters_0_w_payload_last,
    io_ddrMasters_0_w_payload_strb,
    io_ddrMasters_0_w_payload_data,
    io_ddrMasters_0_w_ready,
    io_ddrMasters_0_w_valid,
    io_ddrMasters_0_aw_payload_prot,
    io_ddrMasters_0_aw_payload_qos,
    io_ddrMasters_0_aw_payload_cache,
    io_ddrMasters_0_aw_payload_lock,
    io_ddrMasters_0_aw_payload_burst,
    io_ddrMasters_0_aw_payload_size,
    io_ddrMasters_0_aw_payload_len,
    io_ddrMasters_0_aw_payload_region,
    io_ddrMasters_0_aw_payload_id,
    io_ddrMasters_0_aw_payload_addr,
    io_ddrMasters_0_aw_ready,
    io_ddrMasters_0_aw_valid,
    system_gpio_0_io_write,
    system_gpio_0_io_read
);

    localparam FREQ = 100;

    input io_systemClk;
    output [15:0] io_ddrA_w_payload_strb;
    output [127:0] io_ddrA_w_payload_data;
    input axiA_awready;
    output [7:0] axiA_awlen;
    output [2:0] axiA_awsize;
    output [1:0] axiA_arburst;
    output axiA_awlock;
    output [3:0] axiA_arcache;
    output [3:0] axiA_awqos;
    output [2:0] axiA_awprot;
    output [2:0] axiA_arsize;
    output [3:0] axiA_arregion;
    input axiA_arready;
    output [3:0] axiA_arqos;
    output [2:0] axiA_arprot;
    output axiA_arlock;
    output [7:0] axiA_arlen;
    output [7:0] axiA_arid;
    output [3:0] axiA_awcache;
    output [1:0] axiA_awburst;
    output [31:0] axiA_awaddr;
    input axiAInterrupt;
    input axiA_rlast;
    input jtagCtrl_enable;
    input jtagCtrl_tdi;
    input jtagCtrl_capture;
    input jtagCtrl_shift;
    input jtagCtrl_update;
    input jtagCtrl_reset;
    output jtagCtrl_tdo;
    input jtagCtrl_tck;
    output [31:0] axiA_araddr;
    output axiA_wvalid;
    input axiA_wready;
    output [31:0] axiA_wdata;
    output [3:0] axiA_wstrb;
    output axiA_wlast;
    input axiA_bvalid;
    output axiA_bready;
    input axiA_bid;
    input axiA_bresp;
    input axiA_rvalid;
    output axiA_rready;
    input [31:0] axiA_rdata;
    input [7:0] axiA_rid;
    input [1:0] axiA_rresp;
    output axiA_arvalid;
    output [7:0] axiA_awid;
    output [3:0] axiA_awregion;
    output axiA_awvalid;
    output io_ddrA_w_payload_id;
    input io_ddrA_r_payload_last;
    input [1:0] io_ddrA_r_payload_resp;
    input [7:0] io_ddrA_r_payload_id;
    input [127:0] io_ddrA_r_payload_data;
    output io_ddrA_r_ready;
    input io_ddrA_r_valid;
    input [1:0] io_ddrA_b_payload_resp;
    input [7:0] io_ddrA_b_payload_id;
    output io_ddrA_b_ready;
    input io_ddrA_b_valid;
    output io_ddrA_w_payload_last;
    input io_ddrA_w_ready;
    output io_ddrA_w_valid;
    output io_ddrA_arw_payload_write;
    output [2:0] io_ddrA_arw_payload_prot;
    output [3:0] io_ddrA_arw_payload_qos;
    output [3:0] io_ddrA_arw_payload_cache;
    output io_ddrA_arw_payload_lock;
    output [1:0] io_ddrA_arw_payload_burst;
    output [2:0] io_ddrA_arw_payload_size;
    output [7:0] io_ddrA_arw_payload_len;
    output [3:0] io_ddrA_arw_payload_region;
    output [7:0] io_ddrA_arw_payload_id;
    output [31:0] io_ddrA_arw_payload_addr;
    input io_ddrA_arw_ready;
    output io_ddrA_arw_valid;
    input system_spi_0_io_data_0_read;
    output system_spi_0_io_data_0_write;
    output system_spi_0_io_data_0_writeEnable;
    input system_spi_0_io_data_1_read;
    output system_spi_0_io_data_1_write;
    output system_spi_0_io_data_1_writeEnable;
    input system_spi_0_io_data_2_read;
    output system_spi_0_io_data_2_write;
    output system_spi_0_io_data_2_writeEnable;
    input system_spi_0_io_data_3_read;
    output system_spi_0_io_data_3_write;
    output system_spi_0_io_data_3_writeEnable;
    output system_spi_0_io_sclk_write;
    output system_spi_0_io_ss;
    input userInterruptA;
    output [15:0] io_apbSlave_0_PADDR;
    output io_apbSlave_0_PENABLE;
    input [31:0] io_apbSlave_0_PRDATA;
    input io_apbSlave_0_PREADY;
    output io_apbSlave_0_PSEL;
    input io_apbSlave_0_PSLVERROR;
    output [31:0] io_apbSlave_0_PWDATA;
    output io_apbSlave_0_PWRITE;
    input io_asyncReset;
    input io_memoryClk;
    output io_systemReset;
    output system_uart_0_io_txd;
    output io_memoryReset;
    input system_uart_0_io_rxd;
    input system_i2c_0_io_scl_read;
    output system_i2c_0_io_scl_write;
    input system_i2c_0_io_sda_read;
    output system_i2c_0_io_sda_write;
    output [7:0] system_gpio_0_io_writeEnable;
    output io_ddrMasters_0_reset;
    input io_ddrMasters_0_clk;
    output io_ddrMasters_0_r_payload_last;
    output [1:0] io_ddrMasters_0_r_payload_resp;
    output [3:0] io_ddrMasters_0_r_payload_id;
    output [31:0] io_ddrMasters_0_r_payload_data;
    input io_ddrMasters_0_r_ready;
    output io_ddrMasters_0_r_valid;
    input [2:0] io_ddrMasters_0_ar_payload_prot;
    input [3:0] io_ddrMasters_0_ar_payload_qos;
    input [3:0] io_ddrMasters_0_ar_payload_cache;
    input io_ddrMasters_0_ar_payload_lock;
    input [1:0] io_ddrMasters_0_ar_payload_burst;
    input [2:0] io_ddrMasters_0_ar_payload_size;
    input [7:0] io_ddrMasters_0_ar_payload_len;
    input [3:0] io_ddrMasters_0_ar_payload_region;
    input [3:0] io_ddrMasters_0_ar_payload_id;
    input [31:0] io_ddrMasters_0_ar_payload_addr;
    output io_ddrMasters_0_ar_ready;
    input io_ddrMasters_0_ar_valid;
    output [1:0] io_ddrMasters_0_b_payload_resp;
    output [3:0] io_ddrMasters_0_b_payload_id;
    input io_ddrMasters_0_b_ready;
    output io_ddrMasters_0_b_valid;
    input io_ddrMasters_0_w_payload_last;
    input [3:0] io_ddrMasters_0_w_payload_strb;
    input [31:0] io_ddrMasters_0_w_payload_data;
    output io_ddrMasters_0_w_ready;
    input io_ddrMasters_0_w_valid;
    input [2:0] io_ddrMasters_0_aw_payload_prot;
    input [3:0] io_ddrMasters_0_aw_payload_qos;
    input [3:0] io_ddrMasters_0_aw_payload_cache;
    input io_ddrMasters_0_aw_payload_lock;
    input [1:0] io_ddrMasters_0_aw_payload_burst;
    input [2:0] io_ddrMasters_0_aw_payload_size;
    input [7:0] io_ddrMasters_0_aw_payload_len;
    input [3:0] io_ddrMasters_0_aw_payload_region;
    input [3:0] io_ddrMasters_0_aw_payload_id;
    input [31:0] io_ddrMasters_0_aw_payload_addr;
    output io_ddrMasters_0_aw_ready;
    input io_ddrMasters_0_aw_valid;
    output [7:0] system_gpio_0_io_write;
    input [7:0] system_gpio_0_io_read;

    EfxSapphireSoc_e12a9decc0704226832aec4017b36e8d EfxSapphireSoc_u  (
        .io_systemClk ( io_systemClk ),
        .io_ddrA_w_payload_strb ( io_ddrA_w_payload_strb ),
        .io_ddrA_w_payload_data ( io_ddrA_w_payload_data ),
        .axiA_awready ( axiA_awready ),
        .axiA_awlen ( axiA_awlen ),
        .axiA_awsize ( axiA_awsize ),
        .axiA_arburst ( axiA_arburst ),
        .axiA_awlock ( axiA_awlock ),
        .axiA_arcache ( axiA_arcache ),
        .axiA_awqos ( axiA_awqos ),
        .axiA_awprot ( axiA_awprot ),
        .axiA_arsize ( axiA_arsize ),
        .axiA_arregion ( axiA_arregion ),
        .axiA_arready ( axiA_arready ),
        .axiA_arqos ( axiA_arqos ),
        .axiA_arprot ( axiA_arprot ),
        .axiA_arlock ( axiA_arlock ),
        .axiA_arlen ( axiA_arlen ),
        .axiA_arid ( axiA_arid ),
        .axiA_awcache ( axiA_awcache ),
        .axiA_awburst ( axiA_awburst ),
        .axiA_awaddr ( axiA_awaddr ),
        .axiAInterrupt ( axiAInterrupt ),
        .axiA_rlast ( axiA_rlast ),
        .jtagCtrl_enable ( jtagCtrl_enable ),
        .jtagCtrl_tdi ( jtagCtrl_tdi ),
        .jtagCtrl_capture ( jtagCtrl_capture ),
        .jtagCtrl_shift ( jtagCtrl_shift ),
        .jtagCtrl_update ( jtagCtrl_update ),
        .jtagCtrl_reset ( jtagCtrl_reset ),
        .jtagCtrl_tdo ( jtagCtrl_tdo ),
        .jtagCtrl_tck ( jtagCtrl_tck ),
        .axiA_araddr ( axiA_araddr ),
        .axiA_wvalid ( axiA_wvalid ),
        .axiA_wready ( axiA_wready ),
        .axiA_wdata ( axiA_wdata ),
        .axiA_wstrb ( axiA_wstrb ),
        .axiA_wlast ( axiA_wlast ),
        .axiA_bvalid ( axiA_bvalid ),
        .axiA_bready ( axiA_bready ),
        .axiA_bid ( axiA_bid ),
        .axiA_bresp ( axiA_bresp ),
        .axiA_rvalid ( axiA_rvalid ),
        .axiA_rready ( axiA_rready ),
        .axiA_rdata ( axiA_rdata ),
        .axiA_rid ( axiA_rid ),
        .axiA_rresp ( axiA_rresp ),
        .axiA_arvalid ( axiA_arvalid ),
        .axiA_awid ( axiA_awid ),
        .axiA_awregion ( axiA_awregion ),
        .axiA_awvalid ( axiA_awvalid ),
        .io_ddrA_w_payload_id ( io_ddrA_w_payload_id ),
        .io_ddrA_r_payload_last ( io_ddrA_r_payload_last ),
        .io_ddrA_r_payload_resp ( io_ddrA_r_payload_resp ),
        .io_ddrA_r_payload_id ( io_ddrA_r_payload_id ),
        .io_ddrA_r_payload_data ( io_ddrA_r_payload_data ),
        .io_ddrA_r_ready ( io_ddrA_r_ready ),
        .io_ddrA_r_valid ( io_ddrA_r_valid ),
        .io_ddrA_b_payload_resp ( io_ddrA_b_payload_resp ),
        .io_ddrA_b_payload_id ( io_ddrA_b_payload_id ),
        .io_ddrA_b_ready ( io_ddrA_b_ready ),
        .io_ddrA_b_valid ( io_ddrA_b_valid ),
        .io_ddrA_w_payload_last ( io_ddrA_w_payload_last ),
        .io_ddrA_w_ready ( io_ddrA_w_ready ),
        .io_ddrA_w_valid ( io_ddrA_w_valid ),
        .io_ddrA_arw_payload_write ( io_ddrA_arw_payload_write ),
        .io_ddrA_arw_payload_prot ( io_ddrA_arw_payload_prot ),
        .io_ddrA_arw_payload_qos ( io_ddrA_arw_payload_qos ),
        .io_ddrA_arw_payload_cache ( io_ddrA_arw_payload_cache ),
        .io_ddrA_arw_payload_lock ( io_ddrA_arw_payload_lock ),
        .io_ddrA_arw_payload_burst ( io_ddrA_arw_payload_burst ),
        .io_ddrA_arw_payload_size ( io_ddrA_arw_payload_size ),
        .io_ddrA_arw_payload_len ( io_ddrA_arw_payload_len ),
        .io_ddrA_arw_payload_region ( io_ddrA_arw_payload_region ),
        .io_ddrA_arw_payload_id ( io_ddrA_arw_payload_id ),
        .io_ddrA_arw_payload_addr ( io_ddrA_arw_payload_addr ),
        .io_ddrA_arw_ready ( io_ddrA_arw_ready ),
        .io_ddrA_arw_valid ( io_ddrA_arw_valid ),
        .system_spi_0_io_data_0_read ( system_spi_0_io_data_0_read ),
        .system_spi_0_io_data_0_write ( system_spi_0_io_data_0_write ),
        .system_spi_0_io_data_0_writeEnable ( system_spi_0_io_data_0_writeEnable ),
        .system_spi_0_io_data_1_read ( system_spi_0_io_data_1_read ),
        .system_spi_0_io_data_1_write ( system_spi_0_io_data_1_write ),
        .system_spi_0_io_data_1_writeEnable ( system_spi_0_io_data_1_writeEnable ),
        .system_spi_0_io_data_2_read ( system_spi_0_io_data_2_read ),
        .system_spi_0_io_data_2_write ( system_spi_0_io_data_2_write ),
        .system_spi_0_io_data_2_writeEnable ( system_spi_0_io_data_2_writeEnable ),
        .system_spi_0_io_data_3_read ( system_spi_0_io_data_3_read ),
        .system_spi_0_io_data_3_write ( system_spi_0_io_data_3_write ),
        .system_spi_0_io_data_3_writeEnable ( system_spi_0_io_data_3_writeEnable ),
        .system_spi_0_io_sclk_write ( system_spi_0_io_sclk_write ),
        .system_spi_0_io_ss ( system_spi_0_io_ss ),
        .userInterruptA ( userInterruptA ),
        .io_apbSlave_0_PADDR ( io_apbSlave_0_PADDR ),
        .io_apbSlave_0_PENABLE ( io_apbSlave_0_PENABLE ),
        .io_apbSlave_0_PRDATA ( io_apbSlave_0_PRDATA ),
        .io_apbSlave_0_PREADY ( io_apbSlave_0_PREADY ),
        .io_apbSlave_0_PSEL ( io_apbSlave_0_PSEL ),
        .io_apbSlave_0_PSLVERROR ( io_apbSlave_0_PSLVERROR ),
        .io_apbSlave_0_PWDATA ( io_apbSlave_0_PWDATA ),
        .io_apbSlave_0_PWRITE ( io_apbSlave_0_PWRITE ),
        .io_asyncReset ( io_asyncReset ),
        .io_memoryClk ( io_memoryClk ),
        .io_systemReset ( io_systemReset ),
        .system_uart_0_io_txd ( system_uart_0_io_txd ),
        .io_memoryReset ( io_memoryReset ),
        .system_uart_0_io_rxd ( system_uart_0_io_rxd ),
        .system_i2c_0_io_scl_read ( system_i2c_0_io_scl_read ),
        .system_i2c_0_io_scl_write ( system_i2c_0_io_scl_write ),
        .system_i2c_0_io_sda_read ( system_i2c_0_io_sda_read ),
        .system_i2c_0_io_sda_write ( system_i2c_0_io_sda_write ),
        .system_gpio_0_io_writeEnable ( system_gpio_0_io_writeEnable ),
        .io_ddrMasters_0_reset ( io_ddrMasters_0_reset ),
        .io_ddrMasters_0_clk ( io_ddrMasters_0_clk ),
        .io_ddrMasters_0_r_payload_last ( io_ddrMasters_0_r_payload_last ),
        .io_ddrMasters_0_r_payload_resp ( io_ddrMasters_0_r_payload_resp ),
        .io_ddrMasters_0_r_payload_id ( io_ddrMasters_0_r_payload_id ),
        .io_ddrMasters_0_r_payload_data ( io_ddrMasters_0_r_payload_data ),
        .io_ddrMasters_0_r_ready ( io_ddrMasters_0_r_ready ),
        .io_ddrMasters_0_r_valid ( io_ddrMasters_0_r_valid ),
        .io_ddrMasters_0_ar_payload_prot ( io_ddrMasters_0_ar_payload_prot ),
        .io_ddrMasters_0_ar_payload_qos ( io_ddrMasters_0_ar_payload_qos ),
        .io_ddrMasters_0_ar_payload_cache ( io_ddrMasters_0_ar_payload_cache ),
        .io_ddrMasters_0_ar_payload_lock ( io_ddrMasters_0_ar_payload_lock ),
        .io_ddrMasters_0_ar_payload_burst ( io_ddrMasters_0_ar_payload_burst ),
        .io_ddrMasters_0_ar_payload_size ( io_ddrMasters_0_ar_payload_size ),
        .io_ddrMasters_0_ar_payload_len ( io_ddrMasters_0_ar_payload_len ),
        .io_ddrMasters_0_ar_payload_region ( io_ddrMasters_0_ar_payload_region ),
        .io_ddrMasters_0_ar_payload_id ( io_ddrMasters_0_ar_payload_id ),
        .io_ddrMasters_0_ar_payload_addr ( io_ddrMasters_0_ar_payload_addr ),
        .io_ddrMasters_0_ar_ready ( io_ddrMasters_0_ar_ready ),
        .io_ddrMasters_0_ar_valid ( io_ddrMasters_0_ar_valid ),
        .io_ddrMasters_0_b_payload_resp ( io_ddrMasters_0_b_payload_resp ),
        .io_ddrMasters_0_b_payload_id ( io_ddrMasters_0_b_payload_id ),
        .io_ddrMasters_0_b_ready ( io_ddrMasters_0_b_ready ),
        .io_ddrMasters_0_b_valid ( io_ddrMasters_0_b_valid ),
        .io_ddrMasters_0_w_payload_last ( io_ddrMasters_0_w_payload_last ),
        .io_ddrMasters_0_w_payload_strb ( io_ddrMasters_0_w_payload_strb ),
        .io_ddrMasters_0_w_payload_data ( io_ddrMasters_0_w_payload_data ),
        .io_ddrMasters_0_w_ready ( io_ddrMasters_0_w_ready ),
        .io_ddrMasters_0_w_valid ( io_ddrMasters_0_w_valid ),
        .io_ddrMasters_0_aw_payload_prot ( io_ddrMasters_0_aw_payload_prot ),
        .io_ddrMasters_0_aw_payload_qos ( io_ddrMasters_0_aw_payload_qos ),
        .io_ddrMasters_0_aw_payload_cache ( io_ddrMasters_0_aw_payload_cache ),
        .io_ddrMasters_0_aw_payload_lock ( io_ddrMasters_0_aw_payload_lock ),
        .io_ddrMasters_0_aw_payload_burst ( io_ddrMasters_0_aw_payload_burst ),
        .io_ddrMasters_0_aw_payload_size ( io_ddrMasters_0_aw_payload_size ),
        .io_ddrMasters_0_aw_payload_len ( io_ddrMasters_0_aw_payload_len ),
        .io_ddrMasters_0_aw_payload_region ( io_ddrMasters_0_aw_payload_region ),
        .io_ddrMasters_0_aw_payload_id ( io_ddrMasters_0_aw_payload_id ),
        .io_ddrMasters_0_aw_payload_addr ( io_ddrMasters_0_aw_payload_addr ),
        .io_ddrMasters_0_aw_ready ( io_ddrMasters_0_aw_ready ),
        .io_ddrMasters_0_aw_valid ( io_ddrMasters_0_aw_valid ),
        .system_gpio_0_io_write ( system_gpio_0_io_write ),
        .system_gpio_0_io_read ( system_gpio_0_io_read )
    );

endmodule

// Generator : SpinalHDL v1.4.1    git head : 6f284301f1ac043f58d3ed183957e344c95c107b
// Component : EfxSapphireSoc_e12a9decc0704226832aec4017b36e8d


`define UartStopType_defaultEncoding_type [0:0]
`define UartStopType_defaultEncoding_ONE 1'b0
`define UartStopType_defaultEncoding_TWO 1'b1

`define UartParityType_defaultEncoding_type [1:0]
`define UartParityType_defaultEncoding_NONE 2'b00
`define UartParityType_defaultEncoding_EVEN 2'b01
`define UartParityType_defaultEncoding_ODD 2'b10

`define UartCtrlTxState_defaultEncoding_type [2:0]
`define UartCtrlTxState_defaultEncoding_IDLE 3'b000
`define UartCtrlTxState_defaultEncoding_START 3'b001
`define UartCtrlTxState_defaultEncoding_DATA 3'b010
`define UartCtrlTxState_defaultEncoding_PARITY 3'b011
`define UartCtrlTxState_defaultEncoding_STOP 3'b100

`define UartCtrlRxState_defaultEncoding_type [2:0]
`define UartCtrlRxState_defaultEncoding_IDLE 3'b000
`define UartCtrlRxState_defaultEncoding_START 3'b001
`define UartCtrlRxState_defaultEncoding_DATA 3'b010
`define UartCtrlRxState_defaultEncoding_PARITY 3'b011
`define UartCtrlRxState_defaultEncoding_STOP 3'b100

`define I2cSlaveCmdMode_defaultEncoding_type [2:0]
`define I2cSlaveCmdMode_defaultEncoding_NONE 3'b000
`define I2cSlaveCmdMode_defaultEncoding_START 3'b001
`define I2cSlaveCmdMode_defaultEncoding_RESTART 3'b010
`define I2cSlaveCmdMode_defaultEncoding_STOP 3'b011
`define I2cSlaveCmdMode_defaultEncoding_DROP 3'b100
`define I2cSlaveCmdMode_defaultEncoding_DRIVE 3'b101
`define I2cSlaveCmdMode_defaultEncoding_READ 3'b110

`define bridge_masterLogic_fsm_enumDefinition_defaultEncoding_type [3:0]
`define bridge_masterLogic_fsm_enumDefinition_defaultEncoding_boot 4'b0000
`define bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_IDLE 4'b0001
`define bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START1 4'b0010
`define bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START2 4'b0011
`define bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_LOW 4'b0100
`define bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_HIGH 4'b0101
`define bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_RESTART 4'b0110
`define bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP1 4'b0111
`define bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP2 4'b1000
`define bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_TBUF 4'b1001

`define EnvCtrlEnum_defaultEncoding_type [1:0]
`define EnvCtrlEnum_defaultEncoding_NONE 2'b00
`define EnvCtrlEnum_defaultEncoding_XRET 2'b01
`define EnvCtrlEnum_defaultEncoding_ECALL 2'b10

`define BranchCtrlEnum_defaultEncoding_type [1:0]
`define BranchCtrlEnum_defaultEncoding_INC 2'b00
`define BranchCtrlEnum_defaultEncoding_B 2'b01
`define BranchCtrlEnum_defaultEncoding_JAL 2'b10
`define BranchCtrlEnum_defaultEncoding_JALR 2'b11

`define ShiftCtrlEnum_defaultEncoding_type [1:0]
`define ShiftCtrlEnum_defaultEncoding_DISABLE_1 2'b00
`define ShiftCtrlEnum_defaultEncoding_SLL_1 2'b01
`define ShiftCtrlEnum_defaultEncoding_SRL_1 2'b10
`define ShiftCtrlEnum_defaultEncoding_SRA_1 2'b11

`define AluBitwiseCtrlEnum_defaultEncoding_type [1:0]
`define AluBitwiseCtrlEnum_defaultEncoding_XOR_1 2'b00
`define AluBitwiseCtrlEnum_defaultEncoding_OR_1 2'b01
`define AluBitwiseCtrlEnum_defaultEncoding_AND_1 2'b10

`define AluCtrlEnum_defaultEncoding_type [1:0]
`define AluCtrlEnum_defaultEncoding_ADD_SUB 2'b00
`define AluCtrlEnum_defaultEncoding_SLT_SLTU 2'b01
`define AluCtrlEnum_defaultEncoding_BITWISE 2'b10

`define Src2CtrlEnum_defaultEncoding_type [1:0]
`define Src2CtrlEnum_defaultEncoding_RS 2'b00
`define Src2CtrlEnum_defaultEncoding_IMI 2'b01
`define Src2CtrlEnum_defaultEncoding_IMS 2'b10
`define Src2CtrlEnum_defaultEncoding_PC 2'b11

`define Src1CtrlEnum_defaultEncoding_type [1:0]
`define Src1CtrlEnum_defaultEncoding_RS 2'b00
`define Src1CtrlEnum_defaultEncoding_IMU 2'b01
`define Src1CtrlEnum_defaultEncoding_PC_INCREMENT 2'b10
`define Src1CtrlEnum_defaultEncoding_URS1 2'b11


module EfxSapphireSoc_e12a9decc0704226832aec4017b36e8d (
  input               io_systemClk,
  input               io_asyncReset,
  input               io_memoryClk,
  input               jtagCtrl_tck,
  output reg          io_memoryReset,
  output              system_uart_0_io_txd,
  input               system_uart_0_io_rxd,
  output              system_i2c_0_io_sda_write,
  input               system_i2c_0_io_sda_read,
  output              system_i2c_0_io_scl_write,
  input               system_i2c_0_io_scl_read,
  input      [7:0]    system_gpio_0_io_read,
  output     [7:0]    system_gpio_0_io_write,
  output     [7:0]    system_gpio_0_io_writeEnable,
  output     [15:0]   io_apbSlave_0_PADDR,
  output     [0:0]    io_apbSlave_0_PSEL,
  output              io_apbSlave_0_PENABLE,
  input               io_apbSlave_0_PREADY,
  output              io_apbSlave_0_PWRITE,
  output     [31:0]   io_apbSlave_0_PWDATA,
  input      [31:0]   io_apbSlave_0_PRDATA,
  input               io_apbSlave_0_PSLVERROR,
  input               userInterruptA,
  output              io_systemReset,
  input               jtagCtrl_tdi,
  input               jtagCtrl_enable,
  input               jtagCtrl_capture,
  input               jtagCtrl_shift,
  input               jtagCtrl_update,
  input               jtagCtrl_reset,
  output              jtagCtrl_tdo,
  output              io_ddrA_arw_valid,
  input               io_ddrA_arw_ready,
  output     [31:0]   io_ddrA_arw_payload_addr,
  output     [7:0]    io_ddrA_arw_payload_id,
  output     [3:0]    io_ddrA_arw_payload_region,
  output     [7:0]    io_ddrA_arw_payload_len,
  output     [2:0]    io_ddrA_arw_payload_size,
  output     [1:0]    io_ddrA_arw_payload_burst,
  output     [0:0]    io_ddrA_arw_payload_lock,
  output     [3:0]    io_ddrA_arw_payload_cache,
  output     [3:0]    io_ddrA_arw_payload_qos,
  output     [2:0]    io_ddrA_arw_payload_prot,
  output              io_ddrA_arw_payload_write,
  output              io_ddrA_w_valid,
  input               io_ddrA_w_ready,
  output     [127:0]  io_ddrA_w_payload_data,
  output     [15:0]   io_ddrA_w_payload_strb,
  output              io_ddrA_w_payload_last,
  input               io_ddrA_b_valid,
  output              io_ddrA_b_ready,
  input      [7:0]    io_ddrA_b_payload_id,
  input      [1:0]    io_ddrA_b_payload_resp,
  input               io_ddrA_r_valid,
  output              io_ddrA_r_ready,
  input      [127:0]  io_ddrA_r_payload_data,
  input      [7:0]    io_ddrA_r_payload_id,
  input      [1:0]    io_ddrA_r_payload_resp,
  input               io_ddrA_r_payload_last,
  output     [7:0]    io_ddrA_w_payload_id,
  input               io_ddrMasters_0_aw_valid,
  output              io_ddrMasters_0_aw_ready,
  input      [31:0]   io_ddrMasters_0_aw_payload_addr,
  input      [3:0]    io_ddrMasters_0_aw_payload_id,
  input      [3:0]    io_ddrMasters_0_aw_payload_region,
  input      [7:0]    io_ddrMasters_0_aw_payload_len,
  input      [2:0]    io_ddrMasters_0_aw_payload_size,
  input      [1:0]    io_ddrMasters_0_aw_payload_burst,
  input      [0:0]    io_ddrMasters_0_aw_payload_lock,
  input      [3:0]    io_ddrMasters_0_aw_payload_cache,
  input      [3:0]    io_ddrMasters_0_aw_payload_qos,
  input      [2:0]    io_ddrMasters_0_aw_payload_prot,
  input               io_ddrMasters_0_w_valid,
  output              io_ddrMasters_0_w_ready,
  input      [31:0]   io_ddrMasters_0_w_payload_data,
  input      [3:0]    io_ddrMasters_0_w_payload_strb,
  input               io_ddrMasters_0_w_payload_last,
  output              io_ddrMasters_0_b_valid,
  input               io_ddrMasters_0_b_ready,
  output     [3:0]    io_ddrMasters_0_b_payload_id,
  output     [1:0]    io_ddrMasters_0_b_payload_resp,
  input               io_ddrMasters_0_ar_valid,
  output              io_ddrMasters_0_ar_ready,
  input      [31:0]   io_ddrMasters_0_ar_payload_addr,
  input      [3:0]    io_ddrMasters_0_ar_payload_id,
  input      [3:0]    io_ddrMasters_0_ar_payload_region,
  input      [7:0]    io_ddrMasters_0_ar_payload_len,
  input      [2:0]    io_ddrMasters_0_ar_payload_size,
  input      [1:0]    io_ddrMasters_0_ar_payload_burst,
  input      [0:0]    io_ddrMasters_0_ar_payload_lock,
  input      [3:0]    io_ddrMasters_0_ar_payload_cache,
  input      [3:0]    io_ddrMasters_0_ar_payload_qos,
  input      [2:0]    io_ddrMasters_0_ar_payload_prot,
  output              io_ddrMasters_0_r_valid,
  input               io_ddrMasters_0_r_ready,
  output     [31:0]   io_ddrMasters_0_r_payload_data,
  output     [3:0]    io_ddrMasters_0_r_payload_id,
  output     [1:0]    io_ddrMasters_0_r_payload_resp,
  output              io_ddrMasters_0_r_payload_last,
  input               io_ddrMasters_0_clk,
  output              io_ddrMasters_0_reset,
  output     [0:0]    system_spi_0_io_sclk_write,
  output              system_spi_0_io_data_0_writeEnable,
  input      [0:0]    system_spi_0_io_data_0_read,
  output     [0:0]    system_spi_0_io_data_0_write,
  output              system_spi_0_io_data_1_writeEnable,
  input      [0:0]    system_spi_0_io_data_1_read,
  output     [0:0]    system_spi_0_io_data_1_write,
  output              system_spi_0_io_data_2_writeEnable,
  input      [0:0]    system_spi_0_io_data_2_read,
  output     [0:0]    system_spi_0_io_data_2_write,
  output              system_spi_0_io_data_3_writeEnable,
  input      [0:0]    system_spi_0_io_data_3_read,
  output     [0:0]    system_spi_0_io_data_3_write,
  output     [0:0]    system_spi_0_io_ss,
  output              axiA_awvalid,
  input               axiA_awready,
  output     [31:0]   axiA_awaddr,
  output     [7:0]    axiA_awid,
  output     [3:0]    axiA_awregion,
  output     [7:0]    axiA_awlen,
  output     [2:0]    axiA_awsize,
  output     [1:0]    axiA_awburst,
  output     [0:0]    axiA_awlock,
  output     [3:0]    axiA_awcache,
  output     [3:0]    axiA_awqos,
  output     [2:0]    axiA_awprot,
  output              axiA_wvalid,
  input               axiA_wready,
  output     [31:0]   axiA_wdata,
  output     [3:0]    axiA_wstrb,
  output              axiA_wlast,
  input               axiA_bvalid,
  output              axiA_bready,
  input      [7:0]    axiA_bid,
  input      [1:0]    axiA_bresp,
  output              axiA_arvalid,
  input               axiA_arready,
  output     [31:0]   axiA_araddr,
  output     [7:0]    axiA_arid,
  output     [3:0]    axiA_arregion,
  output     [7:0]    axiA_arlen,
  output     [2:0]    axiA_arsize,
  output     [1:0]    axiA_arburst,
  output     [0:0]    axiA_arlock,
  output     [3:0]    axiA_arcache,
  output     [3:0]    axiA_arqos,
  output     [2:0]    axiA_arprot,
  input               axiA_rvalid,
  output              axiA_rready,
  input      [31:0]   axiA_rdata,
  input      [7:0]    axiA_rid,
  input      [1:0]    axiA_rresp,
  input               axiA_rlast,
  input               axiAInterrupt
);
  wire       [3:0]    _zz_69;
  wire       [4:0]    _zz_70;
  wire       [7:0]    _zz_71;
  wire       [11:0]   _zz_72;
  wire                _zz_73;
  wire                _zz_74;
  wire                _zz_75;
  wire                _zz_76;
  wire                _zz_77;
  wire                _zz_78;
  wire                _zz_79;
  wire       [7:0]    _zz_80;
  wire                _zz_81;
  wire                _zz_82;
  wire                _zz_83;
  wire       [31:0]   _zz_84;
  wire       [3:0]    _zz_85;
  wire       [0:0]    _zz_86;
  wire       [1:0]    _zz_87;
  wire       [1:0]    _zz_88;
  wire       [0:0]    _zz_89;
  wire       [3:0]    _zz_90;
  wire                _zz_91;
  wire                _zz_92;
  wire       [6:0]    _zz_93;
  wire       [6:0]    _zz_94;
  wire                _zz_95;
  wire                _zz_96;
  wire                _zz_97;
  wire                _zz_98;
  wire                _zz_99;
  wire       [7:0]    _zz_100;
  wire                _zz_101;
  wire                _zz_102;
  wire                _zz_103;
  wire       [11:0]   _zz_104;
  wire                _zz_105;
  wire                _zz_106;
  wire                _zz_107;
  wire       [23:0]   _zz_108;
  wire                _zz_109;
  wire                system_machineTimer_logic_io_bus_PREADY;
  wire       [31:0]   system_machineTimer_logic_io_bus_PRDATA;
  wire                system_machineTimer_logic_io_bus_PSLVERROR;
  wire                system_machineTimer_logic_io_mTimeInterrupt;
  wire                system_uart_0_io_logic_io_apb_PREADY;
  wire       [31:0]   system_uart_0_io_logic_io_apb_PRDATA;
  wire                system_uart_0_io_logic_io_uart_txd;
  wire                system_uart_0_io_logic_io_interrupt;
  wire                system_i2c_0_io_logic_io_apb_PREADY;
  wire       [31:0]   system_i2c_0_io_logic_io_apb_PRDATA;
  wire                system_i2c_0_io_logic_io_i2c_scl_write;
  wire                system_i2c_0_io_logic_io_i2c_sda_write;
  wire                system_i2c_0_io_logic_io_interrupt;
  wire       [7:0]    system_gpio_0_io_logic_io_gpio_write;
  wire       [7:0]    system_gpio_0_io_logic_io_gpio_writeEnable;
  wire                system_gpio_0_io_logic_io_bus_PREADY;
  wire       [31:0]   system_gpio_0_io_logic_io_bus_PRDATA;
  wire                system_gpio_0_io_logic_io_bus_PSLVERROR;
  wire       [7:0]    system_gpio_0_io_logic_io_interrupt;
  wire                userInterruptA_buffercc_io_dataOut;
  wire                bufferCC_29_io_dataOut;
  wire                bufferCC_30_io_dataOut;
  wire                bufferCC_31_io_dataOut;
  wire                system_cpu_logic_cpu_debug_bus_cmd_ready;
  wire       [31:0]   system_cpu_logic_cpu_debug_bus_rsp_data;
  wire                system_cpu_logic_cpu_debug_resetOut;
  wire                system_cpu_logic_cpu_iBus_cmd_valid;
  wire       [31:0]   system_cpu_logic_cpu_iBus_cmd_payload_address;
  wire       [2:0]    system_cpu_logic_cpu_iBus_cmd_payload_size;
  wire                system_cpu_logic_cpu_dBus_cmd_valid;
  wire                system_cpu_logic_cpu_dBus_cmd_payload_wr;
  wire       [31:0]   system_cpu_logic_cpu_dBus_cmd_payload_address;
  wire       [31:0]   system_cpu_logic_cpu_dBus_cmd_payload_data;
  wire       [3:0]    system_cpu_logic_cpu_dBus_cmd_payload_mask;
  wire       [2:0]    system_cpu_logic_cpu_dBus_cmd_payload_length;
  wire                system_cpu_logic_cpu_dBus_cmd_payload_last;
  wire                jtagBridgeNoTap_1_io_ctrl_tdo;
  wire                jtagBridgeNoTap_1_io_remote_cmd_valid;
  wire                jtagBridgeNoTap_1_io_remote_cmd_payload_last;
  wire       [0:0]    jtagBridgeNoTap_1_io_remote_cmd_payload_fragment;
  wire                jtagBridgeNoTap_1_io_remote_rsp_ready;
  wire                systemDebugger_1_io_remote_cmd_ready;
  wire                systemDebugger_1_io_remote_rsp_valid;
  wire                systemDebugger_1_io_remote_rsp_payload_error;
  wire       [31:0]   systemDebugger_1_io_remote_rsp_payload_data;
  wire                systemDebugger_1_io_mem_cmd_valid;
  wire       [31:0]   systemDebugger_1_io_mem_cmd_payload_address;
  wire       [31:0]   systemDebugger_1_io_mem_cmd_payload_data;
  wire                systemDebugger_1_io_mem_cmd_payload_wr;
  wire       [1:0]    systemDebugger_1_io_mem_cmd_payload_size;
  wire                system_cpu_iBus_decoder_io_input_cmd_ready;
  wire                system_cpu_iBus_decoder_io_input_rsp_valid;
  wire                system_cpu_iBus_decoder_io_input_rsp_payload_last;
  wire       [0:0]    system_cpu_iBus_decoder_io_input_rsp_payload_fragment_opcode;
  wire       [31:0]   system_cpu_iBus_decoder_io_input_rsp_payload_fragment_data;
  wire                system_cpu_iBus_decoder_io_outputs_0_cmd_valid;
  wire                system_cpu_iBus_decoder_io_outputs_0_cmd_payload_last;
  wire       [0:0]    system_cpu_iBus_decoder_io_outputs_0_cmd_payload_fragment_opcode;
  wire       [31:0]   system_cpu_iBus_decoder_io_outputs_0_cmd_payload_fragment_address;
  wire       [4:0]    system_cpu_iBus_decoder_io_outputs_0_cmd_payload_fragment_length;
  wire                system_cpu_iBus_decoder_io_outputs_0_rsp_ready;
  wire                system_cpu_dBus_decoder_io_input_cmd_ready;
  wire                system_cpu_dBus_decoder_io_input_rsp_valid;
  wire                system_cpu_dBus_decoder_io_input_rsp_payload_last;
  wire       [0:0]    system_cpu_dBus_decoder_io_input_rsp_payload_fragment_opcode;
  wire       [31:0]   system_cpu_dBus_decoder_io_input_rsp_payload_fragment_data;
  wire       [0:0]    system_cpu_dBus_decoder_io_input_rsp_payload_fragment_context;
  wire                system_cpu_dBus_decoder_io_outputs_0_cmd_valid;
  wire                system_cpu_dBus_decoder_io_outputs_0_cmd_payload_last;
  wire       [0:0]    system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_opcode;
  wire       [31:0]   system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_address;
  wire       [4:0]    system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_length;
  wire       [31:0]   system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_data;
  wire       [3:0]    system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_mask;
  wire       [0:0]    system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_context;
  wire                system_cpu_dBus_decoder_io_outputs_0_rsp_ready;
  wire                system_bridge_bmb_arbiter_io_inputs_0_cmd_ready;
  wire                system_bridge_bmb_arbiter_io_inputs_0_rsp_valid;
  wire                system_bridge_bmb_arbiter_io_inputs_0_rsp_payload_last;
  wire       [0:0]    system_bridge_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode;
  wire       [31:0]   system_bridge_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data;
  wire       [0:0]    system_bridge_bmb_arbiter_io_inputs_0_rsp_payload_fragment_context;
  wire                system_bridge_bmb_arbiter_io_inputs_1_cmd_ready;
  wire                system_bridge_bmb_arbiter_io_inputs_1_rsp_valid;
  wire                system_bridge_bmb_arbiter_io_inputs_1_rsp_payload_last;
  wire       [0:0]    system_bridge_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode;
  wire       [31:0]   system_bridge_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data;
  wire       [0:0]    system_bridge_bmb_arbiter_io_inputs_1_rsp_payload_fragment_context;
  wire                system_bridge_bmb_arbiter_io_output_cmd_valid;
  wire                system_bridge_bmb_arbiter_io_output_cmd_payload_last;
  wire       [0:0]    system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_source;
  wire       [0:0]    system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_opcode;
  wire       [31:0]   system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_address;
  wire       [4:0]    system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_length;
  wire       [31:0]   system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_data;
  wire       [3:0]    system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_mask;
  wire       [0:0]    system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_context;
  wire                system_bridge_bmb_arbiter_io_output_rsp_ready;
  wire                system_ddr_systemLogic_bmbToAxiBridge_io_input_cmd_ready;
  wire                system_ddr_systemLogic_bmbToAxiBridge_io_input_rsp_valid;
  wire                system_ddr_systemLogic_bmbToAxiBridge_io_input_rsp_payload_last;
  wire       [0:0]    system_ddr_systemLogic_bmbToAxiBridge_io_input_rsp_payload_fragment_opcode;
  wire       [127:0]  system_ddr_systemLogic_bmbToAxiBridge_io_input_rsp_payload_fragment_data;
  wire       [5:0]    system_ddr_systemLogic_bmbToAxiBridge_io_input_rsp_payload_fragment_context;
  wire                system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_valid;
  wire       [31:0]   system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_addr;
  wire       [7:0]    system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_len;
  wire       [2:0]    system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_size;
  wire       [3:0]    system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_cache;
  wire       [2:0]    system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_prot;
  wire                system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_write;
  wire                system_ddr_systemLogic_bmbToAxiBridge_io_output_w_valid;
  wire       [127:0]  system_ddr_systemLogic_bmbToAxiBridge_io_output_w_payload_data;
  wire       [15:0]   system_ddr_systemLogic_bmbToAxiBridge_io_output_w_payload_strb;
  wire                system_ddr_systemLogic_bmbToAxiBridge_io_output_w_payload_last;
  wire                system_ddr_systemLogic_bmbToAxiBridge_io_output_b_ready;
  wire                system_ddr_systemLogic_bmbToAxiBridge_io_output_r_ready;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_input_arw_ready;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_input_w_ready;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_input_b_valid;
  wire       [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_input_b_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_input_b_payload_resp;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_input_r_valid;
  wire       [127:0]  system_ddr_ddrLogic_systemToMemoryBridge_io_input_r_payload_data;
  wire       [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_input_r_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_input_r_payload_resp;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_input_r_payload_last;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_valid;
  wire       [31:0]   system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_addr;
  wire       [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_prot;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_write;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_valid;
  wire       [127:0]  system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_payload_data;
  wire       [15:0]   system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_payload_strb;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_payload_last;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_b_ready;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_r_ready;
  wire                system_ddr_ddrLogic_arbiter_io_sharedInputs_0_arw_ready;
  wire                system_ddr_ddrLogic_arbiter_io_sharedInputs_0_w_ready;
  wire                system_ddr_ddrLogic_arbiter_io_sharedInputs_0_b_valid;
  wire       [6:0]    system_ddr_ddrLogic_arbiter_io_sharedInputs_0_b_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_arbiter_io_sharedInputs_0_b_payload_resp;
  wire                system_ddr_ddrLogic_arbiter_io_sharedInputs_0_r_valid;
  wire       [127:0]  system_ddr_ddrLogic_arbiter_io_sharedInputs_0_r_payload_data;
  wire       [6:0]    system_ddr_ddrLogic_arbiter_io_sharedInputs_0_r_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_arbiter_io_sharedInputs_0_r_payload_resp;
  wire                system_ddr_ddrLogic_arbiter_io_sharedInputs_0_r_payload_last;
  wire                system_ddr_ddrLogic_arbiter_io_sharedInputs_1_arw_ready;
  wire                system_ddr_ddrLogic_arbiter_io_sharedInputs_1_w_ready;
  wire                system_ddr_ddrLogic_arbiter_io_sharedInputs_1_b_valid;
  wire       [6:0]    system_ddr_ddrLogic_arbiter_io_sharedInputs_1_b_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_arbiter_io_sharedInputs_1_b_payload_resp;
  wire                system_ddr_ddrLogic_arbiter_io_sharedInputs_1_r_valid;
  wire       [127:0]  system_ddr_ddrLogic_arbiter_io_sharedInputs_1_r_payload_data;
  wire       [6:0]    system_ddr_ddrLogic_arbiter_io_sharedInputs_1_r_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_arbiter_io_sharedInputs_1_r_payload_resp;
  wire                system_ddr_ddrLogic_arbiter_io_sharedInputs_1_r_payload_last;
  wire                system_ddr_ddrLogic_arbiter_io_output_arw_valid;
  wire       [31:0]   system_ddr_ddrLogic_arbiter_io_output_arw_payload_addr;
  wire       [7:0]    system_ddr_ddrLogic_arbiter_io_output_arw_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_arbiter_io_output_arw_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_arbiter_io_output_arw_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_arbiter_io_output_arw_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_arbiter_io_output_arw_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_arbiter_io_output_arw_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_arbiter_io_output_arw_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_arbiter_io_output_arw_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_arbiter_io_output_arw_payload_prot;
  wire                system_ddr_ddrLogic_arbiter_io_output_arw_payload_write;
  wire                system_ddr_ddrLogic_arbiter_io_output_w_valid;
  wire       [127:0]  system_ddr_ddrLogic_arbiter_io_output_w_payload_data;
  wire       [15:0]   system_ddr_ddrLogic_arbiter_io_output_w_payload_strb;
  wire                system_ddr_ddrLogic_arbiter_io_output_w_payload_last;
  wire                system_ddr_ddrLogic_arbiter_io_output_b_ready;
  wire                system_ddr_ddrLogic_arbiter_io_output_r_ready;
  wire                ddrCd_logic_outputReset_buffercc_io_dataOut;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_input_ar_ready;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_input_aw_ready;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_input_w_ready;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_valid;
  wire       [31:0]   system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_payload_data;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_payload_resp;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_payload_last;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_valid;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_payload_resp;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_valid;
  wire       [31:0]   system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_addr;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_prot;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_valid;
  wire       [31:0]   system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_addr;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_prot;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_output_w_valid;
  wire       [31:0]   system_ddr_ddrLogic_userAdapters_0_bridge_io_output_w_payload_data;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_output_w_payload_strb;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_output_w_payload_last;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_output_r_ready;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_output_b_ready;
  wire                system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_ar_ready;
  wire                system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_aw_ready;
  wire                system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_w_ready;
  wire                system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_r_valid;
  wire       [31:0]   system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_r_payload_data;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_r_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_r_payload_resp;
  wire                system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_r_payload_last;
  wire                system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_b_valid;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_b_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_b_payload_resp;
  wire                system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_valid;
  wire       [31:0]   system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_addr;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_prot;
  wire                system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_valid;
  wire       [31:0]   system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_addr;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_prot;
  wire                system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_w_valid;
  wire       [127:0]  system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_w_payload_data;
  wire       [15:0]   system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_w_payload_strb;
  wire                system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_w_payload_last;
  wire                system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_r_ready;
  wire                system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_b_ready;
  wire                streamArbiter_3_io_inputs_0_ready;
  wire                streamArbiter_3_io_inputs_1_ready;
  wire                streamArbiter_3_io_output_valid;
  wire       [31:0]   streamArbiter_3_io_output_payload_addr;
  wire       [3:0]    streamArbiter_3_io_output_payload_id;
  wire       [3:0]    streamArbiter_3_io_output_payload_region;
  wire       [7:0]    streamArbiter_3_io_output_payload_len;
  wire       [2:0]    streamArbiter_3_io_output_payload_size;
  wire       [1:0]    streamArbiter_3_io_output_payload_burst;
  wire       [0:0]    streamArbiter_3_io_output_payload_lock;
  wire       [3:0]    streamArbiter_3_io_output_payload_cache;
  wire       [3:0]    streamArbiter_3_io_output_payload_qos;
  wire       [2:0]    streamArbiter_3_io_output_payload_prot;
  wire       [0:0]    streamArbiter_3_io_chosen;
  wire       [1:0]    streamArbiter_3_io_chosenOH;
  wire                system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_push_ready;
  wire                system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_valid;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_payload_id;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_occupancy;
  wire                system_ddr_bmb_arbiter_io_inputs_0_cmd_ready;
  wire                system_ddr_bmb_arbiter_io_inputs_0_rsp_valid;
  wire                system_ddr_bmb_arbiter_io_inputs_0_rsp_payload_last;
  wire       [0:0]    system_ddr_bmb_arbiter_io_inputs_0_rsp_payload_fragment_source;
  wire       [0:0]    system_ddr_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode;
  wire       [31:0]   system_ddr_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data;
  wire       [0:0]    system_ddr_bmb_arbiter_io_inputs_0_rsp_payload_fragment_context;
  wire                system_ddr_bmb_arbiter_io_output_cmd_valid;
  wire                system_ddr_bmb_arbiter_io_output_cmd_payload_last;
  wire       [0:0]    system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_source;
  wire       [0:0]    system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_opcode;
  wire       [31:0]   system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_address;
  wire       [4:0]    system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_length;
  wire       [31:0]   system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_data;
  wire       [3:0]    system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_mask;
  wire       [0:0]    system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_context;
  wire                system_ddr_bmb_arbiter_io_output_rsp_ready;
  wire                system_ddr_bmb_upSizer_io_input_cmd_ready;
  wire                system_ddr_bmb_upSizer_io_input_rsp_valid;
  wire                system_ddr_bmb_upSizer_io_input_rsp_payload_last;
  wire       [0:0]    system_ddr_bmb_upSizer_io_input_rsp_payload_fragment_source;
  wire       [0:0]    system_ddr_bmb_upSizer_io_input_rsp_payload_fragment_opcode;
  wire       [31:0]   system_ddr_bmb_upSizer_io_input_rsp_payload_fragment_data;
  wire       [0:0]    system_ddr_bmb_upSizer_io_input_rsp_payload_fragment_context;
  wire                system_ddr_bmb_upSizer_io_output_cmd_valid;
  wire                system_ddr_bmb_upSizer_io_output_cmd_payload_last;
  wire       [0:0]    system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_opcode;
  wire       [31:0]   system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_address;
  wire       [4:0]    system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_length;
  wire       [127:0]  system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_data;
  wire       [15:0]   system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_mask;
  wire       [5:0]    system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_context;
  wire                system_ddr_bmb_upSizer_io_output_rsp_ready;
  wire                system_spi_0_io_logic_io_apb_PREADY;
  wire       [31:0]   system_spi_0_io_logic_io_apb_PRDATA;
  wire       [0:0]    system_spi_0_io_logic_io_spi_sclk_write;
  wire       [0:0]    system_spi_0_io_logic_io_spi_ss;
  wire       [0:0]    system_spi_0_io_logic_io_spi_data_0_write;
  wire                system_spi_0_io_logic_io_spi_data_0_writeEnable;
  wire       [0:0]    system_spi_0_io_logic_io_spi_data_1_write;
  wire                system_spi_0_io_logic_io_spi_data_1_writeEnable;
  wire       [0:0]    system_spi_0_io_logic_io_spi_data_2_write;
  wire                system_spi_0_io_logic_io_spi_data_2_writeEnable;
  wire       [0:0]    system_spi_0_io_logic_io_spi_data_3_write;
  wire                system_spi_0_io_logic_io_spi_data_3_writeEnable;
  wire                system_spi_0_io_logic_io_interrupt;
  wire                logic_bmbToAxiBridge_io_input_cmd_ready;
  wire                logic_bmbToAxiBridge_io_input_rsp_valid;
  wire                logic_bmbToAxiBridge_io_input_rsp_payload_last;
  wire       [0:0]    logic_bmbToAxiBridge_io_input_rsp_payload_fragment_source;
  wire       [0:0]    logic_bmbToAxiBridge_io_input_rsp_payload_fragment_opcode;
  wire       [31:0]   logic_bmbToAxiBridge_io_input_rsp_payload_fragment_data;
  wire       [0:0]    logic_bmbToAxiBridge_io_input_rsp_payload_fragment_context;
  wire                logic_bmbToAxiBridge_io_output_arw_valid;
  wire       [31:0]   logic_bmbToAxiBridge_io_output_arw_payload_addr;
  wire       [7:0]    logic_bmbToAxiBridge_io_output_arw_payload_len;
  wire       [2:0]    logic_bmbToAxiBridge_io_output_arw_payload_size;
  wire       [3:0]    logic_bmbToAxiBridge_io_output_arw_payload_cache;
  wire       [2:0]    logic_bmbToAxiBridge_io_output_arw_payload_prot;
  wire                logic_bmbToAxiBridge_io_output_arw_payload_write;
  wire                logic_bmbToAxiBridge_io_output_w_valid;
  wire       [31:0]   logic_bmbToAxiBridge_io_output_w_payload_data;
  wire       [3:0]    logic_bmbToAxiBridge_io_output_w_payload_strb;
  wire                logic_bmbToAxiBridge_io_output_w_payload_last;
  wire                logic_bmbToAxiBridge_io_output_b_ready;
  wire                logic_bmbToAxiBridge_io_output_r_ready;
  wire                bmb_arbiter_io_inputs_0_cmd_ready;
  wire                bmb_arbiter_io_inputs_0_rsp_valid;
  wire                bmb_arbiter_io_inputs_0_rsp_payload_last;
  wire       [0:0]    bmb_arbiter_io_inputs_0_rsp_payload_fragment_source;
  wire       [0:0]    bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode;
  wire       [31:0]   bmb_arbiter_io_inputs_0_rsp_payload_fragment_data;
  wire       [0:0]    bmb_arbiter_io_inputs_0_rsp_payload_fragment_context;
  wire                bmb_arbiter_io_output_cmd_valid;
  wire                bmb_arbiter_io_output_cmd_payload_last;
  wire       [0:0]    bmb_arbiter_io_output_cmd_payload_fragment_source;
  wire       [0:0]    bmb_arbiter_io_output_cmd_payload_fragment_opcode;
  wire       [31:0]   bmb_arbiter_io_output_cmd_payload_fragment_address;
  wire       [4:0]    bmb_arbiter_io_output_cmd_payload_fragment_length;
  wire       [31:0]   bmb_arbiter_io_output_cmd_payload_fragment_data;
  wire       [3:0]    bmb_arbiter_io_output_cmd_payload_fragment_mask;
  wire       [0:0]    bmb_arbiter_io_output_cmd_payload_fragment_context;
  wire                bmb_arbiter_io_output_rsp_ready;
  wire                bufferCC_32_io_dataOut;
  wire                system_ramA_logic_io_bus_cmd_ready;
  wire                system_ramA_logic_io_bus_rsp_valid;
  wire                system_ramA_logic_io_bus_rsp_payload_last;
  wire       [0:0]    system_ramA_logic_io_bus_rsp_payload_fragment_source;
  wire       [0:0]    system_ramA_logic_io_bus_rsp_payload_fragment_opcode;
  wire       [31:0]   system_ramA_logic_io_bus_rsp_payload_fragment_data;
  wire       [2:0]    system_ramA_logic_io_bus_rsp_payload_fragment_context;
  wire                system_ramA_bmb_arbiter_io_inputs_0_cmd_ready;
  wire                system_ramA_bmb_arbiter_io_inputs_0_rsp_valid;
  wire                system_ramA_bmb_arbiter_io_inputs_0_rsp_payload_last;
  wire       [0:0]    system_ramA_bmb_arbiter_io_inputs_0_rsp_payload_fragment_source;
  wire       [0:0]    system_ramA_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode;
  wire       [31:0]   system_ramA_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data;
  wire       [0:0]    system_ramA_bmb_arbiter_io_inputs_0_rsp_payload_fragment_context;
  wire                system_ramA_bmb_arbiter_io_output_cmd_valid;
  wire                system_ramA_bmb_arbiter_io_output_cmd_payload_last;
  wire       [0:0]    system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_source;
  wire       [0:0]    system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_opcode;
  wire       [11:0]   system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_address;
  wire       [4:0]    system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_length;
  wire       [31:0]   system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_data;
  wire       [3:0]    system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_mask;
  wire       [0:0]    system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_context;
  wire                system_ramA_bmb_arbiter_io_output_rsp_ready;
  wire                system_ramA_bmb_burstUnburstifier_io_input_cmd_ready;
  wire                system_ramA_bmb_burstUnburstifier_io_input_rsp_valid;
  wire                system_ramA_bmb_burstUnburstifier_io_input_rsp_payload_last;
  wire       [0:0]    system_ramA_bmb_burstUnburstifier_io_input_rsp_payload_fragment_source;
  wire       [0:0]    system_ramA_bmb_burstUnburstifier_io_input_rsp_payload_fragment_opcode;
  wire       [31:0]   system_ramA_bmb_burstUnburstifier_io_input_rsp_payload_fragment_data;
  wire       [0:0]    system_ramA_bmb_burstUnburstifier_io_input_rsp_payload_fragment_context;
  wire                system_ramA_bmb_burstUnburstifier_io_output_cmd_valid;
  wire                system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_last;
  wire       [0:0]    system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_source;
  wire       [0:0]    system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_opcode;
  wire       [11:0]   system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_address;
  wire       [1:0]    system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_length;
  wire       [31:0]   system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_data;
  wire       [3:0]    system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_mask;
  wire       [2:0]    system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_context;
  wire                system_ramA_bmb_burstUnburstifier_io_output_rsp_ready;
  wire                system_bridge_bmb_decoder_io_input_cmd_ready;
  wire                system_bridge_bmb_decoder_io_input_rsp_valid;
  wire                system_bridge_bmb_decoder_io_input_rsp_payload_last;
  wire       [0:0]    system_bridge_bmb_decoder_io_input_rsp_payload_fragment_source;
  wire       [0:0]    system_bridge_bmb_decoder_io_input_rsp_payload_fragment_opcode;
  wire       [31:0]   system_bridge_bmb_decoder_io_input_rsp_payload_fragment_data;
  wire       [0:0]    system_bridge_bmb_decoder_io_input_rsp_payload_fragment_context;
  wire                system_bridge_bmb_decoder_io_outputs_0_cmd_valid;
  wire                system_bridge_bmb_decoder_io_outputs_0_cmd_payload_last;
  wire       [0:0]    system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_source;
  wire       [0:0]    system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_opcode;
  wire       [31:0]   system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_address;
  wire       [4:0]    system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_length;
  wire       [31:0]   system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_data;
  wire       [3:0]    system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_mask;
  wire       [0:0]    system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_context;
  wire                system_bridge_bmb_decoder_io_outputs_0_rsp_ready;
  wire                system_bridge_bmb_decoder_io_outputs_1_cmd_valid;
  wire                system_bridge_bmb_decoder_io_outputs_1_cmd_payload_last;
  wire       [0:0]    system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_source;
  wire       [0:0]    system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_opcode;
  wire       [31:0]   system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_address;
  wire       [4:0]    system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_length;
  wire       [31:0]   system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_data;
  wire       [3:0]    system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_mask;
  wire       [0:0]    system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_context;
  wire                system_bridge_bmb_decoder_io_outputs_1_rsp_ready;
  wire                system_bridge_bmb_decoder_io_outputs_2_cmd_valid;
  wire                system_bridge_bmb_decoder_io_outputs_2_cmd_payload_last;
  wire       [0:0]    system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_source;
  wire       [0:0]    system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_opcode;
  wire       [31:0]   system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_address;
  wire       [4:0]    system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_length;
  wire       [31:0]   system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_data;
  wire       [3:0]    system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_mask;
  wire       [0:0]    system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_context;
  wire                system_bridge_bmb_decoder_io_outputs_2_rsp_ready;
  wire                system_bridge_bmb_decoder_io_outputs_3_cmd_valid;
  wire                system_bridge_bmb_decoder_io_outputs_3_cmd_payload_last;
  wire       [0:0]    system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_source;
  wire       [0:0]    system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_opcode;
  wire       [31:0]   system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_address;
  wire       [4:0]    system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_length;
  wire       [31:0]   system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_data;
  wire       [3:0]    system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_mask;
  wire       [0:0]    system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_context;
  wire                system_bridge_bmb_decoder_io_outputs_3_rsp_ready;
  wire                system_apbDecoder_input_decoder_io_input_PREADY;
  wire       [31:0]   system_apbDecoder_input_decoder_io_input_PRDATA;
  wire                system_apbDecoder_input_decoder_io_input_PSLVERROR;
  wire       [23:0]   system_apbDecoder_input_decoder_io_output_PADDR;
  wire       [6:0]    system_apbDecoder_input_decoder_io_output_PSEL;
  wire                system_apbDecoder_input_decoder_io_output_PENABLE;
  wire                system_apbDecoder_input_decoder_io_output_PWRITE;
  wire       [31:0]   system_apbDecoder_input_decoder_io_output_PWDATA;
  wire                apb3Router_1_io_input_PREADY;
  wire       [31:0]   apb3Router_1_io_input_PRDATA;
  wire                apb3Router_1_io_input_PSLVERROR;
  wire       [23:0]   apb3Router_1_io_outputs_0_PADDR;
  wire       [0:0]    apb3Router_1_io_outputs_0_PSEL;
  wire                apb3Router_1_io_outputs_0_PENABLE;
  wire                apb3Router_1_io_outputs_0_PWRITE;
  wire       [31:0]   apb3Router_1_io_outputs_0_PWDATA;
  wire       [23:0]   apb3Router_1_io_outputs_1_PADDR;
  wire       [0:0]    apb3Router_1_io_outputs_1_PSEL;
  wire                apb3Router_1_io_outputs_1_PENABLE;
  wire                apb3Router_1_io_outputs_1_PWRITE;
  wire       [31:0]   apb3Router_1_io_outputs_1_PWDATA;
  wire       [23:0]   apb3Router_1_io_outputs_2_PADDR;
  wire       [0:0]    apb3Router_1_io_outputs_2_PSEL;
  wire                apb3Router_1_io_outputs_2_PENABLE;
  wire                apb3Router_1_io_outputs_2_PWRITE;
  wire       [31:0]   apb3Router_1_io_outputs_2_PWDATA;
  wire       [23:0]   apb3Router_1_io_outputs_3_PADDR;
  wire       [0:0]    apb3Router_1_io_outputs_3_PSEL;
  wire                apb3Router_1_io_outputs_3_PENABLE;
  wire                apb3Router_1_io_outputs_3_PWRITE;
  wire       [31:0]   apb3Router_1_io_outputs_3_PWDATA;
  wire       [23:0]   apb3Router_1_io_outputs_4_PADDR;
  wire       [0:0]    apb3Router_1_io_outputs_4_PSEL;
  wire                apb3Router_1_io_outputs_4_PENABLE;
  wire                apb3Router_1_io_outputs_4_PWRITE;
  wire       [31:0]   apb3Router_1_io_outputs_4_PWDATA;
  wire       [23:0]   apb3Router_1_io_outputs_5_PADDR;
  wire       [0:0]    apb3Router_1_io_outputs_5_PSEL;
  wire                apb3Router_1_io_outputs_5_PENABLE;
  wire                apb3Router_1_io_outputs_5_PWRITE;
  wire       [31:0]   apb3Router_1_io_outputs_5_PWDATA;
  wire       [23:0]   apb3Router_1_io_outputs_6_PADDR;
  wire       [0:0]    apb3Router_1_io_outputs_6_PSEL;
  wire                apb3Router_1_io_outputs_6_PENABLE;
  wire                apb3Router_1_io_outputs_6_PWRITE;
  wire       [31:0]   apb3Router_1_io_outputs_6_PWDATA;
  wire                system_peripheralBridge_logic_bridge_io_input_cmd_ready;
  wire                system_peripheralBridge_logic_bridge_io_input_rsp_valid;
  wire                system_peripheralBridge_logic_bridge_io_input_rsp_payload_last;
  wire       [0:0]    system_peripheralBridge_logic_bridge_io_input_rsp_payload_fragment_source;
  wire       [0:0]    system_peripheralBridge_logic_bridge_io_input_rsp_payload_fragment_opcode;
  wire       [31:0]   system_peripheralBridge_logic_bridge_io_input_rsp_payload_fragment_data;
  wire       [2:0]    system_peripheralBridge_logic_bridge_io_input_rsp_payload_fragment_context;
  wire       [23:0]   system_peripheralBridge_logic_bridge_io_output_PADDR;
  wire       [0:0]    system_peripheralBridge_logic_bridge_io_output_PSEL;
  wire                system_peripheralBridge_logic_bridge_io_output_PENABLE;
  wire                system_peripheralBridge_logic_bridge_io_output_PWRITE;
  wire       [31:0]   system_peripheralBridge_logic_bridge_io_output_PWDATA;
  wire                system_peripheralBridge_input_arbiter_io_inputs_0_cmd_ready;
  wire                system_peripheralBridge_input_arbiter_io_inputs_0_rsp_valid;
  wire                system_peripheralBridge_input_arbiter_io_inputs_0_rsp_payload_last;
  wire       [0:0]    system_peripheralBridge_input_arbiter_io_inputs_0_rsp_payload_fragment_source;
  wire       [0:0]    system_peripheralBridge_input_arbiter_io_inputs_0_rsp_payload_fragment_opcode;
  wire       [31:0]   system_peripheralBridge_input_arbiter_io_inputs_0_rsp_payload_fragment_data;
  wire       [0:0]    system_peripheralBridge_input_arbiter_io_inputs_0_rsp_payload_fragment_context;
  wire                system_peripheralBridge_input_arbiter_io_output_cmd_valid;
  wire                system_peripheralBridge_input_arbiter_io_output_cmd_payload_last;
  wire       [0:0]    system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_source;
  wire       [0:0]    system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_opcode;
  wire       [23:0]   system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_address;
  wire       [4:0]    system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_length;
  wire       [31:0]   system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_data;
  wire       [3:0]    system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_mask;
  wire       [0:0]    system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_context;
  wire                system_peripheralBridge_input_arbiter_io_output_rsp_ready;
  wire                system_peripheralBridge_input_burstUnburstifier_io_input_cmd_ready;
  wire                system_peripheralBridge_input_burstUnburstifier_io_input_rsp_valid;
  wire                system_peripheralBridge_input_burstUnburstifier_io_input_rsp_payload_last;
  wire       [0:0]    system_peripheralBridge_input_burstUnburstifier_io_input_rsp_payload_fragment_source;
  wire       [0:0]    system_peripheralBridge_input_burstUnburstifier_io_input_rsp_payload_fragment_opcode;
  wire       [31:0]   system_peripheralBridge_input_burstUnburstifier_io_input_rsp_payload_fragment_data;
  wire       [0:0]    system_peripheralBridge_input_burstUnburstifier_io_input_rsp_payload_fragment_context;
  wire                system_peripheralBridge_input_burstUnburstifier_io_output_cmd_valid;
  wire                system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_last;
  wire       [0:0]    system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_source;
  wire       [0:0]    system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_opcode;
  wire       [23:0]   system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_address;
  wire       [1:0]    system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_length;
  wire       [31:0]   system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_data;
  wire       [3:0]    system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_mask;
  wire       [2:0]    system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_context;
  wire                system_peripheralBridge_input_burstUnburstifier_io_output_rsp_ready;
  wire                _zz_110;
  wire                _zz_111;
  wire                _zz_112;
  wire                _zz_113;
  wire                _zz_114;
  wire                _zz_115;
  wire                _zz_116;
  wire                _zz_117;
  wire                _zz_118;
  wire                _zz_119;
  wire                _zz_120;
  wire                _zz_121;
  wire                _zz_122;
  wire                _zz_123;
  wire                _zz_124;
  wire                _zz_125;
  wire                _zz_126;
  wire                _zz_127;
  wire                _zz_128;
  wire                _zz_129;
  wire                _zz_130;
  wire                _zz_131;
  wire                _zz_132;
  wire                _zz_133;
  wire                _zz_134;
  wire                _zz_135;
  wire       [4:0]    _zz_136;
  wire       [0:0]    _zz_137;
  wire       [0:0]    _zz_138;
  wire       [0:0]    _zz_139;
  wire       [0:0]    _zz_140;
  wire       [0:0]    _zz_141;
  wire       [0:0]    _zz_142;
  wire       [0:0]    _zz_143;
  wire       [0:0]    _zz_144;
  reg                 debugCd_logic_inputResetTrigger;
  reg                 debugCd_logic_outputResetUnbuffered;
  reg        [11:0]   debugCd_logic_holdingLogic_resetCounter = 12'h0;
  reg                 debugCd_logic_outputReset = 1'b1;
  reg                 ddrCd_logic_inputResetTrigger;
  reg                 ddrCd_logic_outputResetUnbuffered;
  reg        [5:0]    ddrCd_logic_holdingLogic_resetCounter;
  reg                 ddrCd_logic_outputReset;
  reg                 systemCd_logic_inputResetTrigger;
  reg                 systemCd_logic_outputResetUnbuffered;
  reg        [5:0]    systemCd_logic_holdingLogic_resetCounter;
  reg                 systemCd_logic_outputReset;
  wire                system_cpu_jtagInstructionCtrl_tdi;
  wire                system_cpu_jtagInstructionCtrl_enable;
  wire                system_cpu_jtagInstructionCtrl_capture;
  wire                system_cpu_jtagInstructionCtrl_shift;
  wire                system_cpu_jtagInstructionCtrl_update;
  wire                system_cpu_jtagInstructionCtrl_reset;
  wire                system_cpu_jtagInstructionCtrl_tdo;
  wire       [1:0]    system_machineTimer_interrupt_plic_gateway_priority;
  reg                 system_machineTimer_interrupt_plic_gateway_ip;
  reg                 system_machineTimer_interrupt_plic_gateway_waitCompletion;
  wire       [1:0]    system_uart_0_io_interrupt_plic_gateway_priority;
  reg                 system_uart_0_io_interrupt_plic_gateway_ip;
  reg                 system_uart_0_io_interrupt_plic_gateway_waitCompletion;
  wire       [1:0]    system_i2c_0_io_interrupt_plic_gateway_priority;
  reg                 system_i2c_0_io_interrupt_plic_gateway_ip;
  reg                 system_i2c_0_io_interrupt_plic_gateway_waitCompletion;
  wire                userInterruptA_interrupt;
  wire       [1:0]    userInterruptA_interrupt_plic_gateway_priority;
  reg                 userInterruptA_interrupt_plic_gateway_ip;
  reg                 userInterruptA_interrupt_plic_gateway_waitCompletion;
  wire                debugCd_logic_inputResetAdapter_stuff_syncTrigger;
  wire                system_cpu_iBus_cmd_valid;
  wire                system_cpu_iBus_cmd_ready;
  wire                system_cpu_iBus_cmd_payload_last;
  wire       [0:0]    system_cpu_iBus_cmd_payload_fragment_opcode;
  wire       [31:0]   system_cpu_iBus_cmd_payload_fragment_address;
  wire       [4:0]    system_cpu_iBus_cmd_payload_fragment_length;
  wire                system_cpu_iBus_rsp_valid;
  wire                system_cpu_iBus_rsp_ready;
  wire                system_cpu_iBus_rsp_payload_last;
  wire       [0:0]    system_cpu_iBus_rsp_payload_fragment_opcode;
  wire       [31:0]   system_cpu_iBus_rsp_payload_fragment_data;
  wire                system_cpu_dBus_cmd_valid;
  wire                system_cpu_dBus_cmd_ready;
  wire                system_cpu_dBus_cmd_payload_last;
  wire       [0:0]    system_cpu_dBus_cmd_payload_fragment_opcode;
  wire       [31:0]   system_cpu_dBus_cmd_payload_fragment_address;
  wire       [4:0]    system_cpu_dBus_cmd_payload_fragment_length;
  wire       [31:0]   system_cpu_dBus_cmd_payload_fragment_data;
  wire       [3:0]    system_cpu_dBus_cmd_payload_fragment_mask;
  wire       [0:0]    system_cpu_dBus_cmd_payload_fragment_context;
  wire                system_cpu_dBus_rsp_valid;
  wire                system_cpu_dBus_rsp_ready;
  wire                system_cpu_dBus_rsp_payload_last;
  wire       [0:0]    system_cpu_dBus_rsp_payload_fragment_opcode;
  wire       [31:0]   system_cpu_dBus_rsp_payload_fragment_data;
  wire       [0:0]    system_cpu_dBus_rsp_payload_fragment_context;
  reg                 system_cpu_debugReset;
  reg                 _zz_1;
  wire                system_bridge_bmb_cmd_valid;
  wire                system_bridge_bmb_cmd_ready;
  wire                system_bridge_bmb_cmd_payload_last;
  wire       [0:0]    system_bridge_bmb_cmd_payload_fragment_source;
  wire       [0:0]    system_bridge_bmb_cmd_payload_fragment_opcode;
  wire       [31:0]   system_bridge_bmb_cmd_payload_fragment_address;
  wire       [4:0]    system_bridge_bmb_cmd_payload_fragment_length;
  wire       [31:0]   system_bridge_bmb_cmd_payload_fragment_data;
  wire       [3:0]    system_bridge_bmb_cmd_payload_fragment_mask;
  wire       [0:0]    system_bridge_bmb_cmd_payload_fragment_context;
  wire                system_bridge_bmb_rsp_valid;
  wire                system_bridge_bmb_rsp_ready;
  wire                system_bridge_bmb_rsp_payload_last;
  wire       [0:0]    system_bridge_bmb_rsp_payload_fragment_source;
  wire       [0:0]    system_bridge_bmb_rsp_payload_fragment_opcode;
  wire       [31:0]   system_bridge_bmb_rsp_payload_fragment_data;
  wire       [0:0]    system_bridge_bmb_rsp_payload_fragment_context;
  wire       [3:0]    _zz_2;
  wire                system_ddr_ddrLogic_cpuAccess_arw_valid;
  wire                system_ddr_ddrLogic_cpuAccess_arw_ready;
  wire       [31:0]   system_ddr_ddrLogic_cpuAccess_arw_payload_addr;
  wire       [1:0]    system_ddr_ddrLogic_cpuAccess_arw_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_cpuAccess_arw_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_cpuAccess_arw_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_cpuAccess_arw_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_cpuAccess_arw_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_cpuAccess_arw_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_cpuAccess_arw_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_cpuAccess_arw_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_cpuAccess_arw_payload_prot;
  wire                system_ddr_ddrLogic_cpuAccess_arw_payload_write;
  wire                system_ddr_ddrLogic_cpuAccess_w_valid;
  wire                system_ddr_ddrLogic_cpuAccess_w_ready;
  wire       [127:0]  system_ddr_ddrLogic_cpuAccess_w_payload_data;
  wire       [15:0]   system_ddr_ddrLogic_cpuAccess_w_payload_strb;
  wire                system_ddr_ddrLogic_cpuAccess_w_payload_last;
  wire                system_ddr_ddrLogic_cpuAccess_b_valid;
  wire                system_ddr_ddrLogic_cpuAccess_b_ready;
  wire       [1:0]    system_ddr_ddrLogic_cpuAccess_b_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_cpuAccess_b_payload_resp;
  wire                system_ddr_ddrLogic_cpuAccess_r_valid;
  wire                system_ddr_ddrLogic_cpuAccess_r_ready;
  wire       [127:0]  system_ddr_ddrLogic_cpuAccess_r_payload_data;
  wire       [1:0]    system_ddr_ddrLogic_cpuAccess_r_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_cpuAccess_r_payload_resp;
  wire                system_ddr_ddrLogic_cpuAccess_r_payload_last;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_valid;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_ready;
  wire       [31:0]   system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_addr;
  wire       [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_prot;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_write;
  reg                 system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rValid;
  reg        [31:0]   system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_addr;
  reg        [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_id;
  reg        [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_region;
  reg        [7:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_len;
  reg        [2:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_size;
  reg        [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_burst;
  reg        [0:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_lock;
  reg        [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_cache;
  reg        [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_qos;
  reg        [2:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_prot;
  reg                 system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_write;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_valid;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_ready;
  wire       [31:0]   system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_addr;
  wire       [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_prot;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_write;
  reg                 system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rValid;
  reg        [31:0]   system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_addr;
  reg        [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_id;
  reg        [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_region;
  reg        [7:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_len;
  reg        [2:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_size;
  reg        [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_burst;
  reg        [0:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_lock;
  reg        [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_cache;
  reg        [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_qos;
  reg        [2:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_prot;
  reg                 system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_write;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_valid;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_ready;
  wire       [31:0]   system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_addr;
  wire       [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_prot;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_write;
  reg                 system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rValid;
  reg        [31:0]   system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_addr;
  reg        [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_id;
  reg        [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_region;
  reg        [7:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_len;
  reg        [2:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_size;
  reg        [1:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_burst;
  reg        [0:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_lock;
  reg        [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_cache;
  reg        [3:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_qos;
  reg        [2:0]    system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_prot;
  reg                 system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_write;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_valid;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_ready;
  wire       [127:0]  system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_payload_data;
  wire       [15:0]   system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_payload_strb;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_payload_last;
  reg                 system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rValid;
  reg        [127:0]  system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rData_data;
  reg        [15:0]   system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rData_strb;
  reg                 system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rData_last;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_valid;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_ready;
  wire       [127:0]  system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_payload_data;
  wire       [15:0]   system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_payload_strb;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_payload_last;
  reg                 system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_rValid;
  reg        [127:0]  system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_rData_data;
  reg        [15:0]   system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_rData_strb;
  reg                 system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_rData_last;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_valid;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_ready;
  wire       [127:0]  system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_payload_data;
  wire       [15:0]   system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_payload_strb;
  wire                system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_payload_last;
  reg                 system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_rValid;
  reg        [127:0]  system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_rData_data;
  reg        [15:0]   system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_rData_strb;
  reg                 system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_rData_last;
  wire                system_ddr_ddrLogic_cpuAccess_b_s2mPipe_valid;
  wire                system_ddr_ddrLogic_cpuAccess_b_s2mPipe_ready;
  wire       [1:0]    system_ddr_ddrLogic_cpuAccess_b_s2mPipe_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_cpuAccess_b_s2mPipe_payload_resp;
  reg                 system_ddr_ddrLogic_cpuAccess_b_s2mPipe_rValid;
  reg        [1:0]    system_ddr_ddrLogic_cpuAccess_b_s2mPipe_rData_id;
  reg        [1:0]    system_ddr_ddrLogic_cpuAccess_b_s2mPipe_rData_resp;
  wire                system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_valid;
  wire                system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_ready;
  wire       [1:0]    system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_payload_resp;
  reg                 system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_rValid;
  reg        [1:0]    system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_rData_id;
  reg        [1:0]    system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_rData_resp;
  wire                system_ddr_ddrLogic_cpuAccess_r_s2mPipe_valid;
  wire                system_ddr_ddrLogic_cpuAccess_r_s2mPipe_ready;
  wire       [127:0]  system_ddr_ddrLogic_cpuAccess_r_s2mPipe_payload_data;
  wire       [1:0]    system_ddr_ddrLogic_cpuAccess_r_s2mPipe_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_cpuAccess_r_s2mPipe_payload_resp;
  wire                system_ddr_ddrLogic_cpuAccess_r_s2mPipe_payload_last;
  reg                 system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rValid;
  reg        [127:0]  system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rData_data;
  reg        [1:0]    system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rData_id;
  reg        [1:0]    system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rData_resp;
  reg                 system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rData_last;
  wire                system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_valid;
  wire                system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_ready;
  wire       [127:0]  system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_payload_data;
  wire       [1:0]    system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_payload_resp;
  wire                system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_payload_last;
  reg                 system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_rValid;
  reg        [127:0]  system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_rData_data;
  reg        [1:0]    system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_rData_id;
  reg        [1:0]    system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_rData_resp;
  reg                 system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_rData_last;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_arw_valid;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_arw_ready;
  wire       [31:0]   system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_addr;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_prot;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_write;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_w_valid;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_w_ready;
  wire       [127:0]  system_ddr_ddrLogic_userAdapters_0_userShared_w_payload_data;
  wire       [15:0]   system_ddr_ddrLogic_userAdapters_0_userShared_w_payload_strb;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_w_payload_last;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_b_valid;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_b_ready;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_userShared_b_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_userShared_b_payload_resp;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_r_valid;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_r_ready;
  wire       [127:0]  system_ddr_ddrLogic_userAdapters_0_userShared_r_payload_data;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_userShared_r_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_userShared_r_payload_resp;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_r_payload_last;
  wire                io_ddrMasters_0_aw_halfPipe_valid;
  wire                io_ddrMasters_0_aw_halfPipe_ready;
  wire       [31:0]   io_ddrMasters_0_aw_halfPipe_payload_addr;
  wire       [3:0]    io_ddrMasters_0_aw_halfPipe_payload_id;
  wire       [3:0]    io_ddrMasters_0_aw_halfPipe_payload_region;
  wire       [7:0]    io_ddrMasters_0_aw_halfPipe_payload_len;
  wire       [2:0]    io_ddrMasters_0_aw_halfPipe_payload_size;
  wire       [1:0]    io_ddrMasters_0_aw_halfPipe_payload_burst;
  wire       [0:0]    io_ddrMasters_0_aw_halfPipe_payload_lock;
  wire       [3:0]    io_ddrMasters_0_aw_halfPipe_payload_cache;
  wire       [3:0]    io_ddrMasters_0_aw_halfPipe_payload_qos;
  wire       [2:0]    io_ddrMasters_0_aw_halfPipe_payload_prot;
  reg                 io_ddrMasters_0_aw_halfPipe_regs_valid;
  reg                 io_ddrMasters_0_aw_halfPipe_regs_ready;
  reg        [31:0]   io_ddrMasters_0_aw_halfPipe_regs_payload_addr;
  reg        [3:0]    io_ddrMasters_0_aw_halfPipe_regs_payload_id;
  reg        [3:0]    io_ddrMasters_0_aw_halfPipe_regs_payload_region;
  reg        [7:0]    io_ddrMasters_0_aw_halfPipe_regs_payload_len;
  reg        [2:0]    io_ddrMasters_0_aw_halfPipe_regs_payload_size;
  reg        [1:0]    io_ddrMasters_0_aw_halfPipe_regs_payload_burst;
  reg        [0:0]    io_ddrMasters_0_aw_halfPipe_regs_payload_lock;
  reg        [3:0]    io_ddrMasters_0_aw_halfPipe_regs_payload_cache;
  reg        [3:0]    io_ddrMasters_0_aw_halfPipe_regs_payload_qos;
  reg        [2:0]    io_ddrMasters_0_aw_halfPipe_regs_payload_prot;
  wire                io_ddrMasters_0_ar_halfPipe_valid;
  wire                io_ddrMasters_0_ar_halfPipe_ready;
  wire       [31:0]   io_ddrMasters_0_ar_halfPipe_payload_addr;
  wire       [3:0]    io_ddrMasters_0_ar_halfPipe_payload_id;
  wire       [3:0]    io_ddrMasters_0_ar_halfPipe_payload_region;
  wire       [7:0]    io_ddrMasters_0_ar_halfPipe_payload_len;
  wire       [2:0]    io_ddrMasters_0_ar_halfPipe_payload_size;
  wire       [1:0]    io_ddrMasters_0_ar_halfPipe_payload_burst;
  wire       [0:0]    io_ddrMasters_0_ar_halfPipe_payload_lock;
  wire       [3:0]    io_ddrMasters_0_ar_halfPipe_payload_cache;
  wire       [3:0]    io_ddrMasters_0_ar_halfPipe_payload_qos;
  wire       [2:0]    io_ddrMasters_0_ar_halfPipe_payload_prot;
  reg                 io_ddrMasters_0_ar_halfPipe_regs_valid;
  reg                 io_ddrMasters_0_ar_halfPipe_regs_ready;
  reg        [31:0]   io_ddrMasters_0_ar_halfPipe_regs_payload_addr;
  reg        [3:0]    io_ddrMasters_0_ar_halfPipe_regs_payload_id;
  reg        [3:0]    io_ddrMasters_0_ar_halfPipe_regs_payload_region;
  reg        [7:0]    io_ddrMasters_0_ar_halfPipe_regs_payload_len;
  reg        [2:0]    io_ddrMasters_0_ar_halfPipe_regs_payload_size;
  reg        [1:0]    io_ddrMasters_0_ar_halfPipe_regs_payload_burst;
  reg        [0:0]    io_ddrMasters_0_ar_halfPipe_regs_payload_lock;
  reg        [3:0]    io_ddrMasters_0_ar_halfPipe_regs_payload_cache;
  reg        [3:0]    io_ddrMasters_0_ar_halfPipe_regs_payload_qos;
  reg        [2:0]    io_ddrMasters_0_ar_halfPipe_regs_payload_prot;
  wire                io_ddrMasters_0_w_s2mPipe_valid;
  wire                io_ddrMasters_0_w_s2mPipe_ready;
  wire       [31:0]   io_ddrMasters_0_w_s2mPipe_payload_data;
  wire       [3:0]    io_ddrMasters_0_w_s2mPipe_payload_strb;
  wire                io_ddrMasters_0_w_s2mPipe_payload_last;
  reg                 io_ddrMasters_0_w_s2mPipe_rValid;
  reg        [31:0]   io_ddrMasters_0_w_s2mPipe_rData_data;
  reg        [3:0]    io_ddrMasters_0_w_s2mPipe_rData_strb;
  reg                 io_ddrMasters_0_w_s2mPipe_rData_last;
  wire                io_ddrMasters_0_w_s2mPipe_m2sPipe_valid;
  wire                io_ddrMasters_0_w_s2mPipe_m2sPipe_ready;
  wire       [31:0]   io_ddrMasters_0_w_s2mPipe_m2sPipe_payload_data;
  wire       [3:0]    io_ddrMasters_0_w_s2mPipe_m2sPipe_payload_strb;
  wire                io_ddrMasters_0_w_s2mPipe_m2sPipe_payload_last;
  reg                 io_ddrMasters_0_w_s2mPipe_m2sPipe_rValid;
  reg        [31:0]   io_ddrMasters_0_w_s2mPipe_m2sPipe_rData_data;
  reg        [3:0]    io_ddrMasters_0_w_s2mPipe_m2sPipe_rData_strb;
  reg                 io_ddrMasters_0_w_s2mPipe_m2sPipe_rData_last;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_valid;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_ready;
  wire       [31:0]   system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_payload_data;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_payload_resp;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_payload_last;
  reg                 system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_rValid;
  reg        [31:0]   system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_rData_data;
  reg        [3:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_rData_id;
  reg        [1:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_rData_resp;
  reg                 system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_rData_last;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_valid;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_ready;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_payload_resp;
  reg                 system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_rValid;
  reg        [3:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_rData_id;
  reg        [1:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_rData_resp;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_valid;
  wire                system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_ready;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_payload_resp;
  reg                 system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_rValid;
  reg        [3:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_rData_id;
  reg        [1:0]    system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_rData_resp;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_arw_valid;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_arw_ready;
  wire       [31:0]   system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_addr;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_prot;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_write;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_w_valid;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_w_ready;
  wire       [127:0]  system_ddr_ddrLogic_userAdapters_0_pipeline_w_payload_data;
  wire       [15:0]   system_ddr_ddrLogic_userAdapters_0_pipeline_w_payload_strb;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_w_payload_last;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_b_valid;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_b_ready;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_b_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_b_payload_resp;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_r_valid;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_r_ready;
  wire       [127:0]  system_ddr_ddrLogic_userAdapters_0_pipeline_r_payload_data;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_r_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_r_payload_resp;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_r_payload_last;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_valid;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_ready;
  wire       [31:0]   system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_addr;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_prot;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_write;
  reg                 system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_valid;
  reg                 system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_ready;
  reg        [31:0]   system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_addr;
  reg        [3:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_id;
  reg        [3:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_region;
  reg        [7:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_len;
  reg        [2:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_size;
  reg        [1:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_burst;
  reg        [0:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_lock;
  reg        [3:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_cache;
  reg        [3:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_qos;
  reg        [2:0]    system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_prot;
  reg                 system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_write;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_valid;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_ready;
  wire       [127:0]  system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_payload_data;
  wire       [15:0]   system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_payload_strb;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_payload_last;
  reg                 system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rValid;
  reg        [127:0]  system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rData_data;
  reg        [15:0]   system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rData_strb;
  reg                 system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rData_last;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_valid;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_ready;
  wire       [127:0]  system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_payload_data;
  wire       [15:0]   system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_payload_strb;
  wire                system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_payload_last;
  reg                 system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_rValid;
  reg        [127:0]  system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_rData_data;
  reg        [15:0]   system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_rData_strb;
  reg                 system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_rData_last;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_valid;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_ready;
  wire       [127:0]  system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_payload_data;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_payload_resp;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_payload_last;
  reg                 system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rValid;
  reg        [127:0]  system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rData_data;
  reg        [3:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rData_id;
  reg        [1:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rData_resp;
  reg                 system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rData_last;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_valid;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_ready;
  wire       [127:0]  system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_payload_data;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_payload_resp;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_payload_last;
  reg                 system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_rValid;
  reg        [127:0]  system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_rData_data;
  reg        [3:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_rData_id;
  reg        [1:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_rData_resp;
  reg                 system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_rData_last;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_valid;
  wire                system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_ready;
  wire       [3:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_payload_resp;
  reg                 system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_regs_valid;
  reg                 system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_regs_ready;
  reg        [3:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_regs_payload_id;
  reg        [1:0]    system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_regs_payload_resp;
  wire                system_ddr_ddrLogic_ddrA_arw_valid;
  wire                system_ddr_ddrLogic_ddrA_arw_ready;
  wire       [31:0]   system_ddr_ddrLogic_ddrA_arw_payload_addr;
  wire       [7:0]    system_ddr_ddrLogic_ddrA_arw_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_ddrA_arw_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_ddrA_arw_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_ddrA_arw_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_ddrA_arw_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_ddrA_arw_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_ddrA_arw_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_ddrA_arw_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_ddrA_arw_payload_prot;
  wire                system_ddr_ddrLogic_ddrA_arw_payload_write;
  reg                 system_ddr_ddrLogic_ddrA_w_valid;
  wire                system_ddr_ddrLogic_ddrA_w_ready;
  wire       [127:0]  system_ddr_ddrLogic_ddrA_w_payload_data;
  wire       [15:0]   system_ddr_ddrLogic_ddrA_w_payload_strb;
  reg                 system_ddr_ddrLogic_ddrA_w_payload_last;
  wire                system_ddr_ddrLogic_ddrA_b_valid;
  wire                system_ddr_ddrLogic_ddrA_b_ready;
  wire       [7:0]    system_ddr_ddrLogic_ddrA_b_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_ddrA_b_payload_resp;
  wire                system_ddr_ddrLogic_ddrA_r_valid;
  wire                system_ddr_ddrLogic_ddrA_r_ready;
  wire       [127:0]  system_ddr_ddrLogic_ddrA_r_payload_data;
  wire       [7:0]    system_ddr_ddrLogic_ddrA_r_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_ddrA_r_payload_resp;
  wire                system_ddr_ddrLogic_ddrA_r_payload_last;
  wire                system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_valid;
  wire                system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_ready;
  wire       [31:0]   system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_addr;
  wire       [7:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_prot;
  wire                system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_write;
  reg                 system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_valid;
  reg                 system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_ready;
  reg        [31:0]   system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_addr;
  reg        [7:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_id;
  reg        [3:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_region;
  reg        [7:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_len;
  reg        [2:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_size;
  reg        [1:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_burst;
  reg        [0:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_lock;
  reg        [3:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_cache;
  reg        [3:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_qos;
  reg        [2:0]    system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_prot;
  reg                 system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_write;
  wire                system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_valid;
  wire                system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_ready;
  wire       [127:0]  system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_payload_data;
  wire       [15:0]   system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_payload_strb;
  wire                system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_payload_last;
  reg                 system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_rValid;
  reg        [127:0]  system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_rData_data;
  reg        [15:0]   system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_rData_strb;
  reg                 system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_rData_last;
  wire                system_ddr_ddrLogic_ddrA_b_halfPipe_valid;
  wire                system_ddr_ddrLogic_ddrA_b_halfPipe_ready;
  wire       [7:0]    system_ddr_ddrLogic_ddrA_b_halfPipe_payload_id;
  wire       [1:0]    system_ddr_ddrLogic_ddrA_b_halfPipe_payload_resp;
  reg                 system_ddr_ddrLogic_ddrA_b_halfPipe_regs_valid;
  reg                 system_ddr_ddrLogic_ddrA_b_halfPipe_regs_ready;
  reg        [7:0]    system_ddr_ddrLogic_ddrA_b_halfPipe_regs_payload_id;
  reg        [1:0]    system_ddr_ddrLogic_ddrA_b_halfPipe_regs_payload_resp;
  reg        [4:0]    system_ddr_ddrLogic_ddrAReset_counter = 5'h0;
  reg                 system_ddr_ddrLogic_ddrAReset_resetUnbuffered;
  wire       [4:0]    _zz_3;
  reg                 system_ddr_ddrLogic_ddrAReset_reset = 1'b1;
  wire                system_ddr_ddrLogic_ddrAToAxi3_ioArw_valid;
  wire                system_ddr_ddrLogic_ddrAToAxi3_ioArw_ready;
  wire       [31:0]   system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_addr;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_prot;
  wire                system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_write;
  wire                system_ddr_ddrLogic_ddrAToAxi3_patchArw_valid;
  wire                system_ddr_ddrLogic_ddrAToAxi3_patchArw_ready;
  wire       [31:0]   system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_addr;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_prot;
  wire                system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_write;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_a2wPayload_id;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_a2wPayload_len;
  wire                system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_valid;
  reg                 system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_ready;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_payload_id;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_payload_len;
  reg                 system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_valid;
  wire                system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_ready;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_payload_id;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_payload_len;
  wire                system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_valid;
  wire                system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_ready;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_payload_id;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_payload_len;
  reg                 system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_rValid;
  reg        [7:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_rData_id;
  reg        [7:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_rData_len;
  wire                system_ddr_ddrLogic_ddrAToAxi3_widStream_valid;
  wire                system_ddr_ddrLogic_ddrAToAxi3_widStream_ready;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_widStream_payload_id;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_widStream_payload_len;
  reg                 system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_m2sPipe_rValid;
  reg        [7:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_m2sPipe_rData_id;
  reg        [7:0]    system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_m2sPipe_rData_len;
  reg        [7:0]    system_ddr_ddrLogic_ddrAToAxi3_ddrA_wCounter;
  reg                 ddrCd_logic_outputReset_regNext;
  wire       [127:0]  system_ddr_ddrLogic_ddrAToAxi3_ddrA_wPayload_w_data;
  wire       [15:0]   system_ddr_ddrLogic_ddrAToAxi3_ddrA_wPayload_w_strb;
  wire                system_ddr_ddrLogic_ddrAToAxi3_ddrA_wPayload_w_last;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_ddrA_wPayload_id;
  wire                system_ddr_ddrLogic_ddrA_w_translated_valid;
  wire                system_ddr_ddrLogic_ddrA_w_translated_ready;
  wire       [127:0]  system_ddr_ddrLogic_ddrA_w_translated_payload_w_data;
  wire       [15:0]   system_ddr_ddrLogic_ddrA_w_translated_payload_w_strb;
  wire                system_ddr_ddrLogic_ddrA_w_translated_payload_w_last;
  wire       [7:0]    system_ddr_ddrLogic_ddrA_w_translated_payload_id;
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  wire                _zz_7;
  wire       [127:0]  _zz_8;
  wire       [15:0]   _zz_9;
  wire                _zz_10;
  wire       [7:0]    _zz_11;
  reg                 _zz_12;
  reg        [127:0]  _zz_13;
  reg        [15:0]   _zz_14;
  reg                 _zz_15;
  reg        [7:0]    _zz_16;
  wire                _zz_17;
  reg                 _zz_18;
  reg        [127:0]  _zz_19;
  reg        [15:0]   _zz_20;
  reg                 _zz_21;
  reg        [7:0]    _zz_22;
  wire                system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_valid;
  wire                system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_ready;
  wire       [127:0]  system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_payload_w_data;
  wire       [15:0]   system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_payload_w_strb;
  wire                system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_payload_w_last;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_payload_id;
  reg                 _zz_23;
  reg        [127:0]  _zz_24;
  reg        [15:0]   _zz_25;
  reg                 _zz_26;
  reg        [7:0]    _zz_27;
  wire                system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_valid;
  wire                system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_ready;
  wire       [31:0]   system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_addr;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_id;
  wire       [3:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_region;
  wire       [7:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_len;
  wire       [2:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_size;
  wire       [1:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_burst;
  wire       [0:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_lock;
  wire       [3:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_cache;
  wire       [3:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_qos;
  wire       [2:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_prot;
  wire                system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_write;
  (* keep , syn_keep *) reg                 system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_valid /* synthesis syn_keep = 1 */ ;
  reg                 system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_ready;
  (* keep , syn_keep *) reg        [31:0]   system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_addr /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [7:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_id /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [3:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_region /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [7:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_len /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [2:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_size /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [1:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_burst /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [0:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_lock /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [3:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_cache /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [3:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_qos /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [2:0]    system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_prot /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg                 system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_write /* synthesis syn_keep = 1 */ ;
  wire                system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_translated_valid;
  wire                system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_translated_ready;
  wire       [127:0]  system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_translated_payload_data;
  wire       [15:0]   system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_translated_payload_strb;
  wire                system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_translated_payload_last;
  wire                io_ddrA_r_m2sPipe_valid;
  wire                io_ddrA_r_m2sPipe_ready;
  wire       [127:0]  io_ddrA_r_m2sPipe_payload_data;
  wire       [7:0]    io_ddrA_r_m2sPipe_payload_id;
  wire       [1:0]    io_ddrA_r_m2sPipe_payload_resp;
  wire                io_ddrA_r_m2sPipe_payload_last;
  (* keep , syn_keep *) reg                 io_ddrA_r_m2sPipe_rValid /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [127:0]  io_ddrA_r_m2sPipe_rData_data /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [7:0]    io_ddrA_r_m2sPipe_rData_id /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg        [1:0]    io_ddrA_r_m2sPipe_rData_resp /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) reg                 io_ddrA_r_m2sPipe_rData_last /* synthesis syn_keep = 1 */ ;
  wire                io_ddrA_b_halfPipe_valid;
  wire                io_ddrA_b_halfPipe_ready;
  wire       [7:0]    io_ddrA_b_halfPipe_payload_id;
  wire       [1:0]    io_ddrA_b_halfPipe_payload_resp;
  reg                 io_ddrA_b_halfPipe_regs_valid;
  reg                 io_ddrA_b_halfPipe_regs_ready;
  reg        [7:0]    io_ddrA_b_halfPipe_regs_payload_id;
  reg        [1:0]    io_ddrA_b_halfPipe_regs_payload_resp;
  wire       [1:0]    system_spi_0_io_interrupt_plic_gateway_priority;
  reg                 system_spi_0_io_interrupt_plic_gateway_ip;
  reg                 system_spi_0_io_interrupt_plic_gateway_waitCompletion;
  wire       [3:0]    _zz_28;
  wire       [3:0]    _zz_29;
  wire       [1:0]    interrupt_plic_gateway_priority;
  reg                 interrupt_plic_gateway_ip;
  reg                 interrupt_plic_gateway_waitCompletion;
  wire                resetGenerator_stuff_syncTrigger;
  wire                system_gpio_0_io_interrupts_0;
  wire                system_gpio_0_io_interrupts_1;
  wire                system_gpio_0_io_interrupts_2;
  wire                system_gpio_0_io_interrupts_3;
  wire                system_gpio_0_io_interrupts_4;
  wire                system_gpio_0_io_interrupts_5;
  wire                system_gpio_0_io_interrupts_6;
  wire                system_gpio_0_io_interrupts_7;
  wire       [1:0]    system_gpio_0_io_interrupts_0_plic_gateway_priority;
  reg                 system_gpio_0_io_interrupts_0_plic_gateway_ip;
  reg                 system_gpio_0_io_interrupts_0_plic_gateway_waitCompletion;
  wire       [1:0]    system_gpio_0_io_interrupts_1_plic_gateway_priority;
  reg                 system_gpio_0_io_interrupts_1_plic_gateway_ip;
  reg                 system_gpio_0_io_interrupts_1_plic_gateway_waitCompletion;
  wire       [23:0]   system_apbDecoder_input_PADDR;
  wire       [0:0]    system_apbDecoder_input_PSEL;
  wire                system_apbDecoder_input_PENABLE;
  wire                system_apbDecoder_input_PREADY;
  wire                system_apbDecoder_input_PWRITE;
  wire       [31:0]   system_apbDecoder_input_PWDATA;
  wire       [31:0]   system_apbDecoder_input_PRDATA;
  wire                system_apbDecoder_input_PSLVERROR;
  wire       [21:0]   system_plic_logic_apb_PADDR;
  wire       [0:0]    system_plic_logic_apb_PSEL;
  wire                system_plic_logic_apb_PENABLE;
  reg                 system_plic_logic_apb_PREADY;
  wire                system_plic_logic_apb_PWRITE;
  wire       [31:0]   system_plic_logic_apb_PWDATA;
  reg        [31:0]   system_plic_logic_apb_PRDATA;
  wire                system_plic_logic_apb_PSLVERROR;
  wire                system_plic_logic_bus_askWrite;
  wire                system_plic_logic_bus_askRead;
  wire                system_plic_logic_bus_doWrite;
  wire                system_plic_logic_bus_doRead;
  wire                system_cpu_externalInterrupt_plic_target_ie_0;
  wire                system_cpu_externalInterrupt_plic_target_ie_1;
  wire                system_cpu_externalInterrupt_plic_target_ie_2;
  wire                system_cpu_externalInterrupt_plic_target_ie_3;
  wire                system_cpu_externalInterrupt_plic_target_ie_4;
  wire                system_cpu_externalInterrupt_plic_target_ie_5;
  wire                system_cpu_externalInterrupt_plic_target_ie_6;
  wire                system_cpu_externalInterrupt_plic_target_ie_7;
  wire       [1:0]    system_cpu_externalInterrupt_plic_target_threshold;
  wire       [1:0]    system_cpu_externalInterrupt_plic_target_requests_0_priority;
  wire       [4:0]    system_cpu_externalInterrupt_plic_target_requests_0_id;
  wire                system_cpu_externalInterrupt_plic_target_requests_0_valid;
  wire       [1:0]    system_cpu_externalInterrupt_plic_target_requests_1_priority;
  wire       [4:0]    system_cpu_externalInterrupt_plic_target_requests_1_id;
  wire                system_cpu_externalInterrupt_plic_target_requests_1_valid;
  wire       [1:0]    system_cpu_externalInterrupt_plic_target_requests_2_priority;
  wire       [4:0]    system_cpu_externalInterrupt_plic_target_requests_2_id;
  wire                system_cpu_externalInterrupt_plic_target_requests_2_valid;
  wire       [1:0]    system_cpu_externalInterrupt_plic_target_requests_3_priority;
  wire       [4:0]    system_cpu_externalInterrupt_plic_target_requests_3_id;
  wire                system_cpu_externalInterrupt_plic_target_requests_3_valid;
  wire       [1:0]    system_cpu_externalInterrupt_plic_target_requests_4_priority;
  wire       [4:0]    system_cpu_externalInterrupt_plic_target_requests_4_id;
  wire                system_cpu_externalInterrupt_plic_target_requests_4_valid;
  wire       [1:0]    system_cpu_externalInterrupt_plic_target_requests_5_priority;
  wire       [4:0]    system_cpu_externalInterrupt_plic_target_requests_5_id;
  wire                system_cpu_externalInterrupt_plic_target_requests_5_valid;
  wire       [1:0]    system_cpu_externalInterrupt_plic_target_requests_6_priority;
  wire       [4:0]    system_cpu_externalInterrupt_plic_target_requests_6_id;
  wire                system_cpu_externalInterrupt_plic_target_requests_6_valid;
  wire       [1:0]    system_cpu_externalInterrupt_plic_target_requests_7_priority;
  wire       [4:0]    system_cpu_externalInterrupt_plic_target_requests_7_id;
  wire                system_cpu_externalInterrupt_plic_target_requests_7_valid;
  wire       [1:0]    system_cpu_externalInterrupt_plic_target_requests_8_priority;
  wire       [4:0]    system_cpu_externalInterrupt_plic_target_requests_8_id;
  wire                system_cpu_externalInterrupt_plic_target_requests_8_valid;
  wire                _zz_30;
  wire       [1:0]    _zz_31;
  wire                _zz_32;
  wire                _zz_33;
  wire       [1:0]    _zz_34;
  wire                _zz_35;
  wire                _zz_36;
  wire       [1:0]    _zz_37;
  wire                _zz_38;
  wire                _zz_39;
  wire       [1:0]    _zz_40;
  wire                _zz_41;
  wire                _zz_42;
  wire       [1:0]    _zz_43;
  wire                _zz_44;
  wire                _zz_45;
  wire       [1:0]    _zz_46;
  wire                _zz_47;
  wire                _zz_48;
  wire       [1:0]    _zz_49;
  wire                _zz_50;
  wire                _zz_51;
  reg        [1:0]    system_cpu_externalInterrupt_plic_target_bestRequest_priority;
  reg        [4:0]    system_cpu_externalInterrupt_plic_target_bestRequest_id;
  reg                 system_cpu_externalInterrupt_plic_target_bestRequest_valid;
  wire                system_cpu_externalInterrupt_plic_target_iep;
  wire       [4:0]    system_cpu_externalInterrupt_plic_target_claim;
  reg        [1:0]    _zz_52;
  reg        [1:0]    _zz_53;
  reg        [1:0]    _zz_54;
  reg        [1:0]    _zz_55;
  reg        [1:0]    _zz_56;
  reg        [1:0]    _zz_57;
  reg        [1:0]    _zz_58;
  reg        [1:0]    _zz_59;
  reg                 system_plic_logic_bridge_claim_valid;
  reg        [4:0]    system_plic_logic_bridge_claim_payload;
  reg                 system_plic_logic_bridge_completion_valid;
  reg        [4:0]    system_plic_logic_bridge_completion_payload;
  reg                 system_plic_logic_bridge_coherencyStall_willIncrement;
  wire                system_plic_logic_bridge_coherencyStall_willClear;
  reg        [0:0]    system_plic_logic_bridge_coherencyStall_valueNext;
  reg        [0:0]    system_plic_logic_bridge_coherencyStall_value;
  wire                system_plic_logic_bridge_coherencyStall_willOverflowIfInc;
  wire                system_plic_logic_bridge_coherencyStall_willOverflow;
  reg        [1:0]    _zz_60;
  reg                 system_plic_logic_bridge_targetMapping_0_targetCompletion_valid;
  wire       [4:0]    system_plic_logic_bridge_targetMapping_0_targetCompletion_payload;
  reg                 _zz_61;
  reg                 _zz_62;
  reg                 _zz_63;
  reg                 _zz_64;
  reg                 _zz_65;
  reg                 _zz_66;
  reg                 _zz_67;
  reg                 _zz_68;
  wire                system_bridge_bmb_cmd_m2sPipe_valid;
  wire                system_bridge_bmb_cmd_m2sPipe_ready;
  wire                system_bridge_bmb_cmd_m2sPipe_payload_last;
  wire       [0:0]    system_bridge_bmb_cmd_m2sPipe_payload_fragment_source;
  wire       [0:0]    system_bridge_bmb_cmd_m2sPipe_payload_fragment_opcode;
  wire       [31:0]   system_bridge_bmb_cmd_m2sPipe_payload_fragment_address;
  wire       [4:0]    system_bridge_bmb_cmd_m2sPipe_payload_fragment_length;
  wire       [31:0]   system_bridge_bmb_cmd_m2sPipe_payload_fragment_data;
  wire       [3:0]    system_bridge_bmb_cmd_m2sPipe_payload_fragment_mask;
  wire       [0:0]    system_bridge_bmb_cmd_m2sPipe_payload_fragment_context;
  reg                 system_bridge_bmb_cmd_m2sPipe_rValid;
  reg                 system_bridge_bmb_cmd_m2sPipe_rData_last;
  reg        [0:0]    system_bridge_bmb_cmd_m2sPipe_rData_fragment_source;
  reg        [0:0]    system_bridge_bmb_cmd_m2sPipe_rData_fragment_opcode;
  reg        [31:0]   system_bridge_bmb_cmd_m2sPipe_rData_fragment_address;
  reg        [4:0]    system_bridge_bmb_cmd_m2sPipe_rData_fragment_length;
  reg        [31:0]   system_bridge_bmb_cmd_m2sPipe_rData_fragment_data;
  reg        [3:0]    system_bridge_bmb_cmd_m2sPipe_rData_fragment_mask;
  reg        [0:0]    system_bridge_bmb_cmd_m2sPipe_rData_fragment_context;
  wire                system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_valid;
  wire                system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_ready;
  wire                system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_last;
  wire       [0:0]    system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_source;
  wire       [0:0]    system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_opcode;
  wire       [23:0]   system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_address;
  wire       [1:0]    system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_length;
  wire       [31:0]   system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_data;
  wire       [3:0]    system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_mask;
  wire       [2:0]    system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_context;
  reg                 system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_valid;
  reg                 system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_ready;
  reg                 system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_last;
  reg        [0:0]    system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_source;
  reg        [0:0]    system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_opcode;
  reg        [23:0]   system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_address;
  reg        [1:0]    system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_length;
  reg        [31:0]   system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_data;
  reg        [3:0]    system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_mask;
  reg        [2:0]    system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_context;

  assign io_ddrMasters_0_reset = _zz_109;
  assign _zz_110 = (debugCd_logic_holdingLogic_resetCounter != 12'hfff);
  assign _zz_111 = (ddrCd_logic_holdingLogic_resetCounter != 6'h3f);
  assign _zz_112 = (systemCd_logic_holdingLogic_resetCounter != 6'h3f);
  assign _zz_113 = (ddrCd_logic_outputReset_regNext && system_ddr_ddrLogic_ddrAToAxi3_widStream_valid);
  assign _zz_114 = (system_ddr_ddrLogic_ddrAReset_counter != _zz_3);
  assign _zz_115 = (! system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_write);
  assign _zz_116 = (system_plic_logic_bridge_coherencyStall_value != (1'b0));
  assign _zz_117 = (! system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_valid);
  assign _zz_118 = (_zz_91 && (! system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_ready));
  assign _zz_119 = (_zz_92 && (! system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_ready));
  assign _zz_120 = (system_ddr_ddrLogic_cpuAccess_b_ready && (! system_ddr_ddrLogic_cpuAccess_b_s2mPipe_ready));
  assign _zz_121 = (system_ddr_ddrLogic_cpuAccess_r_ready && (! system_ddr_ddrLogic_cpuAccess_r_s2mPipe_ready));
  assign _zz_122 = (! system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_valid);
  assign _zz_123 = (system_ddr_ddrLogic_userAdapters_0_userShared_w_ready && (! system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_ready));
  assign _zz_124 = (system_ddr_ddrLogic_userAdapters_0_pipeline_r_ready && (! system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_ready));
  assign _zz_125 = (! system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_regs_valid);
  assign _zz_126 = (! system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_valid);
  assign _zz_127 = (! system_ddr_ddrLogic_ddrA_b_halfPipe_regs_valid);
  assign _zz_128 = (! io_ddrMasters_0_aw_halfPipe_regs_valid);
  assign _zz_129 = (! io_ddrMasters_0_ar_halfPipe_regs_valid);
  assign _zz_130 = (io_ddrMasters_0_w_ready && (! io_ddrMasters_0_w_s2mPipe_ready));
  assign _zz_131 = (_zz_96 && (! system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_ready));
  assign _zz_132 = (_zz_98 && (! system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_ready));
  assign _zz_133 = (_zz_7 && (! _zz_17));
  assign _zz_134 = (! system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_valid);
  assign _zz_135 = (! io_ddrA_b_halfPipe_regs_valid);
  assign _zz_136 = ({2'd0,system_cpu_logic_cpu_dBus_cmd_payload_length} <<< 2);
  assign _zz_137 = system_plic_logic_apb_PWDATA[31 : 31];
  assign _zz_138 = system_plic_logic_apb_PWDATA[1 : 1];
  assign _zz_139 = system_plic_logic_apb_PWDATA[8 : 8];
  assign _zz_140 = system_plic_logic_apb_PWDATA[16 : 16];
  assign _zz_141 = system_plic_logic_apb_PWDATA[4 : 4];
  assign _zz_142 = system_plic_logic_apb_PWDATA[30 : 30];
  assign _zz_143 = system_plic_logic_apb_PWDATA[12 : 12];
  assign _zz_144 = system_plic_logic_apb_PWDATA[13 : 13];
  MachineTimer_e12a9decc0704226832aec4017b36e8d system_machineTimer_logic (
    .io_bus_PADDR                  (_zz_69[3:0]                                    ), //i
    .io_bus_PSEL                   (apb3Router_1_io_outputs_1_PSEL                 ), //i
    .io_bus_PENABLE                (apb3Router_1_io_outputs_1_PENABLE              ), //i
    .io_bus_PREADY                 (system_machineTimer_logic_io_bus_PREADY        ), //o
    .io_bus_PWRITE                 (apb3Router_1_io_outputs_1_PWRITE               ), //i
    .io_bus_PWDATA                 (apb3Router_1_io_outputs_1_PWDATA[31:0]         ), //i
    .io_bus_PRDATA                 (system_machineTimer_logic_io_bus_PRDATA[31:0]  ), //o
    .io_bus_PSLVERROR              (system_machineTimer_logic_io_bus_PSLVERROR     ), //o
    .io_mTimeInterrupt             (system_machineTimer_logic_io_mTimeInterrupt    ), //o
    .io_systemClk                  (io_systemClk                                   ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                     )  //i
  );
  Apb3UartCtrl_e12a9decc0704226832aec4017b36e8d system_uart_0_io_logic (
    .io_apb_PADDR                  (_zz_70[4:0]                                 ), //i
    .io_apb_PSEL                   (apb3Router_1_io_outputs_2_PSEL              ), //i
    .io_apb_PENABLE                (apb3Router_1_io_outputs_2_PENABLE           ), //i
    .io_apb_PREADY                 (system_uart_0_io_logic_io_apb_PREADY        ), //o
    .io_apb_PWRITE                 (apb3Router_1_io_outputs_2_PWRITE            ), //i
    .io_apb_PWDATA                 (apb3Router_1_io_outputs_2_PWDATA[31:0]      ), //i
    .io_apb_PRDATA                 (system_uart_0_io_logic_io_apb_PRDATA[31:0]  ), //o
    .io_uart_txd                   (system_uart_0_io_logic_io_uart_txd          ), //o
    .io_uart_rxd                   (system_uart_0_io_rxd                        ), //i
    .io_interrupt                  (system_uart_0_io_logic_io_interrupt         ), //o
    .io_systemClk                  (io_systemClk                                ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                  )  //i
  );
  Apb3I2cCtrl_e12a9decc0704226832aec4017b36e8d system_i2c_0_io_logic (
    .io_apb_PADDR                  (_zz_71[7:0]                                ), //i
    .io_apb_PSEL                   (apb3Router_1_io_outputs_4_PSEL             ), //i
    .io_apb_PENABLE                (apb3Router_1_io_outputs_4_PENABLE          ), //i
    .io_apb_PREADY                 (system_i2c_0_io_logic_io_apb_PREADY        ), //o
    .io_apb_PWRITE                 (apb3Router_1_io_outputs_4_PWRITE           ), //i
    .io_apb_PWDATA                 (apb3Router_1_io_outputs_4_PWDATA[31:0]     ), //i
    .io_apb_PRDATA                 (system_i2c_0_io_logic_io_apb_PRDATA[31:0]  ), //o
    .io_i2c_sda_write              (system_i2c_0_io_logic_io_i2c_sda_write     ), //o
    .io_i2c_sda_read               (system_i2c_0_io_sda_read                   ), //i
    .io_i2c_scl_write              (system_i2c_0_io_logic_io_i2c_scl_write     ), //o
    .io_i2c_scl_read               (system_i2c_0_io_scl_read                   ), //i
    .io_interrupt                  (system_i2c_0_io_logic_io_interrupt         ), //o
    .io_systemClk                  (io_systemClk                               ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                 )  //i
  );
  Apb3Gpio2_e12a9decc0704226832aec4017b36e8d system_gpio_0_io_logic (
    .io_gpio_read                  (system_gpio_0_io_read[7:0]                       ), //i
    .io_gpio_write                 (system_gpio_0_io_logic_io_gpio_write[7:0]        ), //o
    .io_gpio_writeEnable           (system_gpio_0_io_logic_io_gpio_writeEnable[7:0]  ), //o
    .io_bus_PADDR                  (_zz_72[11:0]                                     ), //i
    .io_bus_PSEL                   (apb3Router_1_io_outputs_5_PSEL                   ), //i
    .io_bus_PENABLE                (apb3Router_1_io_outputs_5_PENABLE                ), //i
    .io_bus_PREADY                 (system_gpio_0_io_logic_io_bus_PREADY             ), //o
    .io_bus_PWRITE                 (apb3Router_1_io_outputs_5_PWRITE                 ), //i
    .io_bus_PWDATA                 (apb3Router_1_io_outputs_5_PWDATA[31:0]           ), //i
    .io_bus_PRDATA                 (system_gpio_0_io_logic_io_bus_PRDATA[31:0]       ), //o
    .io_bus_PSLVERROR              (system_gpio_0_io_logic_io_bus_PSLVERROR          ), //o
    .io_interrupt                  (system_gpio_0_io_logic_io_interrupt[7:0]         ), //o
    .io_systemClk                  (io_systemClk                                     ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                       )  //i
  );
  BufferCC_23_e12a9decc0704226832aec4017b36e8d userInterruptA_buffercc (
    .io_dataIn                     (userInterruptA                      ), //i
    .io_dataOut                    (userInterruptA_buffercc_io_dataOut  ), //o
    .io_systemClk                  (io_systemClk                        ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset          )  //i
  );
  BufferCC_24_e12a9decc0704226832aec4017b36e8d bufferCC_29 (
    .io_initial       (_zz_73                  ), //i
    .io_dataIn        (_zz_74                  ), //i
    .io_dataOut       (bufferCC_29_io_dataOut  ), //o
    .io_systemClk     (io_systemClk            ), //i
    .io_asyncReset    (io_asyncReset           )  //i
  );
  BufferCC_25_e12a9decc0704226832aec4017b36e8d bufferCC_30 (
    .io_initial                   (_zz_75                     ), //i
    .io_dataIn                    (_zz_76                     ), //i
    .io_dataOut                   (bufferCC_30_io_dataOut     ), //o
    .io_memoryClk                 (io_memoryClk               ), //i
    .debugCd_logic_outputReset    (debugCd_logic_outputReset  )  //i
  );
  BufferCC_26_e12a9decc0704226832aec4017b36e8d bufferCC_31 (
    .io_initial                 (_zz_77                   ), //i
    .io_dataIn                  (_zz_78                   ), //i
    .io_dataOut                 (bufferCC_31_io_dataOut   ), //o
    .io_systemClk               (io_systemClk             ), //i
    .ddrCd_logic_outputReset    (ddrCd_logic_outputReset  )  //i
  );
  VexRiscv_e12a9decc0704226832aec4017b36e8d system_cpu_logic_cpu (
    .timerInterrupt                   (system_machineTimer_logic_io_mTimeInterrupt          ), //i
    .externalInterrupt                (system_cpu_externalInterrupt_plic_target_iep         ), //i
    .softwareInterrupt                (_zz_79                                               ), //i
    .debug_bus_cmd_valid              (systemDebugger_1_io_mem_cmd_valid                    ), //i
    .debug_bus_cmd_ready              (system_cpu_logic_cpu_debug_bus_cmd_ready             ), //o
    .debug_bus_cmd_payload_wr         (systemDebugger_1_io_mem_cmd_payload_wr               ), //i
    .debug_bus_cmd_payload_address    (_zz_80[7:0]                                          ), //i
    .debug_bus_cmd_payload_data       (systemDebugger_1_io_mem_cmd_payload_data[31:0]       ), //i
    .debug_bus_rsp_data               (system_cpu_logic_cpu_debug_bus_rsp_data[31:0]        ), //o
    .debug_resetOut                   (system_cpu_logic_cpu_debug_resetOut                  ), //o
    .iBus_cmd_valid                   (system_cpu_logic_cpu_iBus_cmd_valid                  ), //o
    .iBus_cmd_ready                   (system_cpu_iBus_cmd_ready                            ), //i
    .iBus_cmd_payload_address         (system_cpu_logic_cpu_iBus_cmd_payload_address[31:0]  ), //o
    .iBus_cmd_payload_size            (system_cpu_logic_cpu_iBus_cmd_payload_size[2:0]      ), //o
    .iBus_rsp_valid                   (system_cpu_iBus_rsp_valid                            ), //i
    .iBus_rsp_payload_data            (system_cpu_iBus_rsp_payload_fragment_data[31:0]      ), //i
    .iBus_rsp_payload_error           (_zz_81                                               ), //i
    .dBus_cmd_valid                   (system_cpu_logic_cpu_dBus_cmd_valid                  ), //o
    .dBus_cmd_ready                   (system_cpu_dBus_cmd_ready                            ), //i
    .dBus_cmd_payload_wr              (system_cpu_logic_cpu_dBus_cmd_payload_wr             ), //o
    .dBus_cmd_payload_address         (system_cpu_logic_cpu_dBus_cmd_payload_address[31:0]  ), //o
    .dBus_cmd_payload_data            (system_cpu_logic_cpu_dBus_cmd_payload_data[31:0]     ), //o
    .dBus_cmd_payload_mask            (system_cpu_logic_cpu_dBus_cmd_payload_mask[3:0]      ), //o
    .dBus_cmd_payload_length          (system_cpu_logic_cpu_dBus_cmd_payload_length[2:0]    ), //o
    .dBus_cmd_payload_last            (system_cpu_logic_cpu_dBus_cmd_payload_last           ), //o
    .dBus_rsp_valid                   (_zz_82                                               ), //i
    .dBus_rsp_payload_data            (system_cpu_dBus_rsp_payload_fragment_data[31:0]      ), //i
    .dBus_rsp_payload_error           (_zz_83                                               ), //i
    .io_systemClk                     (io_systemClk                                         ), //i
    .systemCd_logic_outputReset       (systemCd_logic_outputReset                           ), //i
    .debugCd_logic_outputReset        (debugCd_logic_outputReset                            )  //i
  );
  JtagBridgeNoTap_e12a9decc0704226832aec4017b36e8d jtagBridgeNoTap_1 (
    .io_ctrl_tdi                       (system_cpu_jtagInstructionCtrl_tdi                 ), //i
    .io_ctrl_enable                    (system_cpu_jtagInstructionCtrl_enable              ), //i
    .io_ctrl_capture                   (system_cpu_jtagInstructionCtrl_capture             ), //i
    .io_ctrl_shift                     (system_cpu_jtagInstructionCtrl_shift               ), //i
    .io_ctrl_update                    (system_cpu_jtagInstructionCtrl_update              ), //i
    .io_ctrl_reset                     (system_cpu_jtagInstructionCtrl_reset               ), //i
    .io_ctrl_tdo                       (jtagBridgeNoTap_1_io_ctrl_tdo                      ), //o
    .io_remote_cmd_valid               (jtagBridgeNoTap_1_io_remote_cmd_valid              ), //o
    .io_remote_cmd_ready               (systemDebugger_1_io_remote_cmd_ready               ), //i
    .io_remote_cmd_payload_last        (jtagBridgeNoTap_1_io_remote_cmd_payload_last       ), //o
    .io_remote_cmd_payload_fragment    (jtagBridgeNoTap_1_io_remote_cmd_payload_fragment   ), //o
    .io_remote_rsp_valid               (systemDebugger_1_io_remote_rsp_valid               ), //i
    .io_remote_rsp_ready               (jtagBridgeNoTap_1_io_remote_rsp_ready              ), //o
    .io_remote_rsp_payload_error       (systemDebugger_1_io_remote_rsp_payload_error       ), //i
    .io_remote_rsp_payload_data        (systemDebugger_1_io_remote_rsp_payload_data[31:0]  ), //i
    .io_systemClk                      (io_systemClk                                       ), //i
    .debugCd_logic_outputReset         (debugCd_logic_outputReset                          ), //i
    .jtagCtrl_tck                      (jtagCtrl_tck                                       )  //i
  );
  SystemDebugger_e12a9decc0704226832aec4017b36e8d systemDebugger_1 (
    .io_remote_cmd_valid               (jtagBridgeNoTap_1_io_remote_cmd_valid              ), //i
    .io_remote_cmd_ready               (systemDebugger_1_io_remote_cmd_ready               ), //o
    .io_remote_cmd_payload_last        (jtagBridgeNoTap_1_io_remote_cmd_payload_last       ), //i
    .io_remote_cmd_payload_fragment    (jtagBridgeNoTap_1_io_remote_cmd_payload_fragment   ), //i
    .io_remote_rsp_valid               (systemDebugger_1_io_remote_rsp_valid               ), //o
    .io_remote_rsp_ready               (jtagBridgeNoTap_1_io_remote_rsp_ready              ), //i
    .io_remote_rsp_payload_error       (systemDebugger_1_io_remote_rsp_payload_error       ), //o
    .io_remote_rsp_payload_data        (systemDebugger_1_io_remote_rsp_payload_data[31:0]  ), //o
    .io_mem_cmd_valid                  (systemDebugger_1_io_mem_cmd_valid                  ), //o
    .io_mem_cmd_ready                  (system_cpu_logic_cpu_debug_bus_cmd_ready           ), //i
    .io_mem_cmd_payload_address        (systemDebugger_1_io_mem_cmd_payload_address[31:0]  ), //o
    .io_mem_cmd_payload_data           (systemDebugger_1_io_mem_cmd_payload_data[31:0]     ), //o
    .io_mem_cmd_payload_wr             (systemDebugger_1_io_mem_cmd_payload_wr             ), //o
    .io_mem_cmd_payload_size           (systemDebugger_1_io_mem_cmd_payload_size[1:0]      ), //o
    .io_mem_rsp_valid                  (_zz_1                                              ), //i
    .io_mem_rsp_payload                (system_cpu_logic_cpu_debug_bus_rsp_data[31:0]      ), //i
    .io_systemClk                      (io_systemClk                                       ), //i
    .debugCd_logic_outputReset         (debugCd_logic_outputReset                          )  //i
  );
  BmbDecoder_e12a9decc0704226832aec4017b36e8d system_cpu_iBus_decoder (
    .io_input_cmd_valid                           (system_cpu_iBus_cmd_valid                                                ), //i
    .io_input_cmd_ready                           (system_cpu_iBus_decoder_io_input_cmd_ready                               ), //o
    .io_input_cmd_payload_last                    (system_cpu_iBus_cmd_payload_last                                         ), //i
    .io_input_cmd_payload_fragment_opcode         (system_cpu_iBus_cmd_payload_fragment_opcode                              ), //i
    .io_input_cmd_payload_fragment_address        (system_cpu_iBus_cmd_payload_fragment_address[31:0]                       ), //i
    .io_input_cmd_payload_fragment_length         (system_cpu_iBus_cmd_payload_fragment_length[4:0]                         ), //i
    .io_input_rsp_valid                           (system_cpu_iBus_decoder_io_input_rsp_valid                               ), //o
    .io_input_rsp_ready                           (system_cpu_iBus_rsp_ready                                                ), //i
    .io_input_rsp_payload_last                    (system_cpu_iBus_decoder_io_input_rsp_payload_last                        ), //o
    .io_input_rsp_payload_fragment_opcode         (system_cpu_iBus_decoder_io_input_rsp_payload_fragment_opcode             ), //o
    .io_input_rsp_payload_fragment_data           (system_cpu_iBus_decoder_io_input_rsp_payload_fragment_data[31:0]         ), //o
    .io_outputs_0_cmd_valid                       (system_cpu_iBus_decoder_io_outputs_0_cmd_valid                           ), //o
    .io_outputs_0_cmd_ready                       (system_bridge_bmb_arbiter_io_inputs_1_cmd_ready                          ), //i
    .io_outputs_0_cmd_payload_last                (system_cpu_iBus_decoder_io_outputs_0_cmd_payload_last                    ), //o
    .io_outputs_0_cmd_payload_fragment_opcode     (system_cpu_iBus_decoder_io_outputs_0_cmd_payload_fragment_opcode         ), //o
    .io_outputs_0_cmd_payload_fragment_address    (system_cpu_iBus_decoder_io_outputs_0_cmd_payload_fragment_address[31:0]  ), //o
    .io_outputs_0_cmd_payload_fragment_length     (system_cpu_iBus_decoder_io_outputs_0_cmd_payload_fragment_length[4:0]    ), //o
    .io_outputs_0_rsp_valid                       (system_bridge_bmb_arbiter_io_inputs_1_rsp_valid                          ), //i
    .io_outputs_0_rsp_ready                       (system_cpu_iBus_decoder_io_outputs_0_rsp_ready                           ), //o
    .io_outputs_0_rsp_payload_last                (system_bridge_bmb_arbiter_io_inputs_1_rsp_payload_last                   ), //i
    .io_outputs_0_rsp_payload_fragment_opcode     (system_bridge_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode        ), //i
    .io_outputs_0_rsp_payload_fragment_data       (system_bridge_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data[31:0]    )  //i
  );
  BmbDecoder_1_e12a9decc0704226832aec4017b36e8d system_cpu_dBus_decoder (
    .io_input_cmd_valid                           (system_cpu_dBus_cmd_valid                                                ), //i
    .io_input_cmd_ready                           (system_cpu_dBus_decoder_io_input_cmd_ready                               ), //o
    .io_input_cmd_payload_last                    (system_cpu_dBus_cmd_payload_last                                         ), //i
    .io_input_cmd_payload_fragment_opcode         (system_cpu_dBus_cmd_payload_fragment_opcode                              ), //i
    .io_input_cmd_payload_fragment_address        (system_cpu_dBus_cmd_payload_fragment_address[31:0]                       ), //i
    .io_input_cmd_payload_fragment_length         (system_cpu_dBus_cmd_payload_fragment_length[4:0]                         ), //i
    .io_input_cmd_payload_fragment_data           (system_cpu_dBus_cmd_payload_fragment_data[31:0]                          ), //i
    .io_input_cmd_payload_fragment_mask           (system_cpu_dBus_cmd_payload_fragment_mask[3:0]                           ), //i
    .io_input_cmd_payload_fragment_context        (system_cpu_dBus_cmd_payload_fragment_context                             ), //i
    .io_input_rsp_valid                           (system_cpu_dBus_decoder_io_input_rsp_valid                               ), //o
    .io_input_rsp_ready                           (system_cpu_dBus_rsp_ready                                                ), //i
    .io_input_rsp_payload_last                    (system_cpu_dBus_decoder_io_input_rsp_payload_last                        ), //o
    .io_input_rsp_payload_fragment_opcode         (system_cpu_dBus_decoder_io_input_rsp_payload_fragment_opcode             ), //o
    .io_input_rsp_payload_fragment_data           (system_cpu_dBus_decoder_io_input_rsp_payload_fragment_data[31:0]         ), //o
    .io_input_rsp_payload_fragment_context        (system_cpu_dBus_decoder_io_input_rsp_payload_fragment_context            ), //o
    .io_outputs_0_cmd_valid                       (system_cpu_dBus_decoder_io_outputs_0_cmd_valid                           ), //o
    .io_outputs_0_cmd_ready                       (system_bridge_bmb_arbiter_io_inputs_0_cmd_ready                          ), //i
    .io_outputs_0_cmd_payload_last                (system_cpu_dBus_decoder_io_outputs_0_cmd_payload_last                    ), //o
    .io_outputs_0_cmd_payload_fragment_opcode     (system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_opcode         ), //o
    .io_outputs_0_cmd_payload_fragment_address    (system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_address[31:0]  ), //o
    .io_outputs_0_cmd_payload_fragment_length     (system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_length[4:0]    ), //o
    .io_outputs_0_cmd_payload_fragment_data       (system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_data[31:0]     ), //o
    .io_outputs_0_cmd_payload_fragment_mask       (system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_mask[3:0]      ), //o
    .io_outputs_0_cmd_payload_fragment_context    (system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_context        ), //o
    .io_outputs_0_rsp_valid                       (system_bridge_bmb_arbiter_io_inputs_0_rsp_valid                          ), //i
    .io_outputs_0_rsp_ready                       (system_cpu_dBus_decoder_io_outputs_0_rsp_ready                           ), //o
    .io_outputs_0_rsp_payload_last                (system_bridge_bmb_arbiter_io_inputs_0_rsp_payload_last                   ), //i
    .io_outputs_0_rsp_payload_fragment_opcode     (system_bridge_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode        ), //i
    .io_outputs_0_rsp_payload_fragment_data       (system_bridge_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data[31:0]    ), //i
    .io_outputs_0_rsp_payload_fragment_context    (system_bridge_bmb_arbiter_io_inputs_0_rsp_payload_fragment_context       )  //i
  );
  BmbArbiter_e12a9decc0704226832aec4017b36e8d system_bridge_bmb_arbiter (
    .io_inputs_0_cmd_valid                       (system_cpu_dBus_decoder_io_outputs_0_cmd_valid                           ), //i
    .io_inputs_0_cmd_ready                       (system_bridge_bmb_arbiter_io_inputs_0_cmd_ready                          ), //o
    .io_inputs_0_cmd_payload_last                (system_cpu_dBus_decoder_io_outputs_0_cmd_payload_last                    ), //i
    .io_inputs_0_cmd_payload_fragment_opcode     (system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_opcode         ), //i
    .io_inputs_0_cmd_payload_fragment_address    (system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_address[31:0]  ), //i
    .io_inputs_0_cmd_payload_fragment_length     (system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_length[4:0]    ), //i
    .io_inputs_0_cmd_payload_fragment_data       (system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_data[31:0]     ), //i
    .io_inputs_0_cmd_payload_fragment_mask       (system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_mask[3:0]      ), //i
    .io_inputs_0_cmd_payload_fragment_context    (system_cpu_dBus_decoder_io_outputs_0_cmd_payload_fragment_context        ), //i
    .io_inputs_0_rsp_valid                       (system_bridge_bmb_arbiter_io_inputs_0_rsp_valid                          ), //o
    .io_inputs_0_rsp_ready                       (system_cpu_dBus_decoder_io_outputs_0_rsp_ready                           ), //i
    .io_inputs_0_rsp_payload_last                (system_bridge_bmb_arbiter_io_inputs_0_rsp_payload_last                   ), //o
    .io_inputs_0_rsp_payload_fragment_opcode     (system_bridge_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode        ), //o
    .io_inputs_0_rsp_payload_fragment_data       (system_bridge_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data[31:0]    ), //o
    .io_inputs_0_rsp_payload_fragment_context    (system_bridge_bmb_arbiter_io_inputs_0_rsp_payload_fragment_context       ), //o
    .io_inputs_1_cmd_valid                       (system_cpu_iBus_decoder_io_outputs_0_cmd_valid                           ), //i
    .io_inputs_1_cmd_ready                       (system_bridge_bmb_arbiter_io_inputs_1_cmd_ready                          ), //o
    .io_inputs_1_cmd_payload_last                (system_cpu_iBus_decoder_io_outputs_0_cmd_payload_last                    ), //i
    .io_inputs_1_cmd_payload_fragment_opcode     (system_cpu_iBus_decoder_io_outputs_0_cmd_payload_fragment_opcode         ), //i
    .io_inputs_1_cmd_payload_fragment_address    (system_cpu_iBus_decoder_io_outputs_0_cmd_payload_fragment_address[31:0]  ), //i
    .io_inputs_1_cmd_payload_fragment_length     (system_cpu_iBus_decoder_io_outputs_0_cmd_payload_fragment_length[4:0]    ), //i
    .io_inputs_1_cmd_payload_fragment_data       (_zz_84[31:0]                                                             ), //i
    .io_inputs_1_cmd_payload_fragment_mask       (_zz_85[3:0]                                                              ), //i
    .io_inputs_1_cmd_payload_fragment_context    (_zz_86                                                                   ), //i
    .io_inputs_1_rsp_valid                       (system_bridge_bmb_arbiter_io_inputs_1_rsp_valid                          ), //o
    .io_inputs_1_rsp_ready                       (system_cpu_iBus_decoder_io_outputs_0_rsp_ready                           ), //i
    .io_inputs_1_rsp_payload_last                (system_bridge_bmb_arbiter_io_inputs_1_rsp_payload_last                   ), //o
    .io_inputs_1_rsp_payload_fragment_opcode     (system_bridge_bmb_arbiter_io_inputs_1_rsp_payload_fragment_opcode        ), //o
    .io_inputs_1_rsp_payload_fragment_data       (system_bridge_bmb_arbiter_io_inputs_1_rsp_payload_fragment_data[31:0]    ), //o
    .io_inputs_1_rsp_payload_fragment_context    (system_bridge_bmb_arbiter_io_inputs_1_rsp_payload_fragment_context       ), //o
    .io_output_cmd_valid                         (system_bridge_bmb_arbiter_io_output_cmd_valid                            ), //o
    .io_output_cmd_ready                         (system_bridge_bmb_cmd_ready                                              ), //i
    .io_output_cmd_payload_last                  (system_bridge_bmb_arbiter_io_output_cmd_payload_last                     ), //o
    .io_output_cmd_payload_fragment_source       (system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_source          ), //o
    .io_output_cmd_payload_fragment_opcode       (system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_opcode          ), //o
    .io_output_cmd_payload_fragment_address      (system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_address[31:0]   ), //o
    .io_output_cmd_payload_fragment_length       (system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_length[4:0]     ), //o
    .io_output_cmd_payload_fragment_data         (system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_data[31:0]      ), //o
    .io_output_cmd_payload_fragment_mask         (system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_mask[3:0]       ), //o
    .io_output_cmd_payload_fragment_context      (system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_context         ), //o
    .io_output_rsp_valid                         (system_bridge_bmb_rsp_valid                                              ), //i
    .io_output_rsp_ready                         (system_bridge_bmb_arbiter_io_output_rsp_ready                            ), //o
    .io_output_rsp_payload_last                  (system_bridge_bmb_rsp_payload_last                                       ), //i
    .io_output_rsp_payload_fragment_source       (system_bridge_bmb_rsp_payload_fragment_source                            ), //i
    .io_output_rsp_payload_fragment_opcode       (system_bridge_bmb_rsp_payload_fragment_opcode                            ), //i
    .io_output_rsp_payload_fragment_data         (system_bridge_bmb_rsp_payload_fragment_data[31:0]                        ), //i
    .io_output_rsp_payload_fragment_context      (system_bridge_bmb_rsp_payload_fragment_context                           ), //i
    .io_systemClk                                (io_systemClk                                                             ), //i
    .systemCd_logic_outputReset                  (systemCd_logic_outputReset                                               )  //i
  );
  BmbToAxi4SharedBridge_e12a9decc0704226832aec4017b36e8d system_ddr_systemLogic_bmbToAxiBridge (
    .io_input_cmd_valid                       (system_ddr_bmb_upSizer_io_output_cmd_valid                                        ), //i
    .io_input_cmd_ready                       (system_ddr_systemLogic_bmbToAxiBridge_io_input_cmd_ready                          ), //o
    .io_input_cmd_payload_last                (system_ddr_bmb_upSizer_io_output_cmd_payload_last                                 ), //i
    .io_input_cmd_payload_fragment_opcode     (system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_opcode                      ), //i
    .io_input_cmd_payload_fragment_address    (system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_address[31:0]               ), //i
    .io_input_cmd_payload_fragment_length     (system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_length[4:0]                 ), //i
    .io_input_cmd_payload_fragment_data       (system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_data[127:0]                 ), //i
    .io_input_cmd_payload_fragment_mask       (system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_mask[15:0]                  ), //i
    .io_input_cmd_payload_fragment_context    (system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_context[5:0]                ), //i
    .io_input_rsp_valid                       (system_ddr_systemLogic_bmbToAxiBridge_io_input_rsp_valid                          ), //o
    .io_input_rsp_ready                       (system_ddr_bmb_upSizer_io_output_rsp_ready                                        ), //i
    .io_input_rsp_payload_last                (system_ddr_systemLogic_bmbToAxiBridge_io_input_rsp_payload_last                   ), //o
    .io_input_rsp_payload_fragment_opcode     (system_ddr_systemLogic_bmbToAxiBridge_io_input_rsp_payload_fragment_opcode        ), //o
    .io_input_rsp_payload_fragment_data       (system_ddr_systemLogic_bmbToAxiBridge_io_input_rsp_payload_fragment_data[127:0]   ), //o
    .io_input_rsp_payload_fragment_context    (system_ddr_systemLogic_bmbToAxiBridge_io_input_rsp_payload_fragment_context[5:0]  ), //o
    .io_output_arw_valid                      (system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_valid                         ), //o
    .io_output_arw_ready                      (system_ddr_ddrLogic_systemToMemoryBridge_io_input_arw_ready                       ), //i
    .io_output_arw_payload_addr               (system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_addr[31:0]            ), //o
    .io_output_arw_payload_len                (system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_len[7:0]              ), //o
    .io_output_arw_payload_size               (system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_size[2:0]             ), //o
    .io_output_arw_payload_cache              (system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_cache[3:0]            ), //o
    .io_output_arw_payload_prot               (system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_prot[2:0]             ), //o
    .io_output_arw_payload_write              (system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_write                 ), //o
    .io_output_w_valid                        (system_ddr_systemLogic_bmbToAxiBridge_io_output_w_valid                           ), //o
    .io_output_w_ready                        (system_ddr_ddrLogic_systemToMemoryBridge_io_input_w_ready                         ), //i
    .io_output_w_payload_data                 (system_ddr_systemLogic_bmbToAxiBridge_io_output_w_payload_data[127:0]             ), //o
    .io_output_w_payload_strb                 (system_ddr_systemLogic_bmbToAxiBridge_io_output_w_payload_strb[15:0]              ), //o
    .io_output_w_payload_last                 (system_ddr_systemLogic_bmbToAxiBridge_io_output_w_payload_last                    ), //o
    .io_output_b_valid                        (system_ddr_ddrLogic_systemToMemoryBridge_io_input_b_valid                         ), //i
    .io_output_b_ready                        (system_ddr_systemLogic_bmbToAxiBridge_io_output_b_ready                           ), //o
    .io_output_b_payload_resp                 (system_ddr_ddrLogic_systemToMemoryBridge_io_input_b_payload_resp[1:0]             ), //i
    .io_output_r_valid                        (system_ddr_ddrLogic_systemToMemoryBridge_io_input_r_valid                         ), //i
    .io_output_r_ready                        (system_ddr_systemLogic_bmbToAxiBridge_io_output_r_ready                           ), //o
    .io_output_r_payload_data                 (system_ddr_ddrLogic_systemToMemoryBridge_io_input_r_payload_data[127:0]           ), //i
    .io_output_r_payload_resp                 (system_ddr_ddrLogic_systemToMemoryBridge_io_input_r_payload_resp[1:0]             ), //i
    .io_output_r_payload_last                 (system_ddr_ddrLogic_systemToMemoryBridge_io_input_r_payload_last                  ), //i
    .io_systemClk                             (io_systemClk                                                                      ), //i
    .systemCd_logic_outputReset               (systemCd_logic_outputReset                                                        )  //i
  );
  Axi4SharedCC_e12a9decc0704226832aec4017b36e8d system_ddr_ddrLogic_systemToMemoryBridge (
    .io_input_arw_valid              (system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_valid                   ), //i
    .io_input_arw_ready              (system_ddr_ddrLogic_systemToMemoryBridge_io_input_arw_ready                 ), //o
    .io_input_arw_payload_addr       (system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_addr[31:0]      ), //i
    .io_input_arw_payload_id         (_zz_87[1:0]                                                                 ), //i
    .io_input_arw_payload_region     (_zz_2[3:0]                                                                  ), //i
    .io_input_arw_payload_len        (system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_len[7:0]        ), //i
    .io_input_arw_payload_size       (system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_size[2:0]       ), //i
    .io_input_arw_payload_burst      (_zz_88[1:0]                                                                 ), //i
    .io_input_arw_payload_lock       (_zz_89                                                                      ), //i
    .io_input_arw_payload_cache      (system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_cache[3:0]      ), //i
    .io_input_arw_payload_qos        (_zz_90[3:0]                                                                 ), //i
    .io_input_arw_payload_prot       (system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_prot[2:0]       ), //i
    .io_input_arw_payload_write      (system_ddr_systemLogic_bmbToAxiBridge_io_output_arw_payload_write           ), //i
    .io_input_w_valid                (system_ddr_systemLogic_bmbToAxiBridge_io_output_w_valid                     ), //i
    .io_input_w_ready                (system_ddr_ddrLogic_systemToMemoryBridge_io_input_w_ready                   ), //o
    .io_input_w_payload_data         (system_ddr_systemLogic_bmbToAxiBridge_io_output_w_payload_data[127:0]       ), //i
    .io_input_w_payload_strb         (system_ddr_systemLogic_bmbToAxiBridge_io_output_w_payload_strb[15:0]        ), //i
    .io_input_w_payload_last         (system_ddr_systemLogic_bmbToAxiBridge_io_output_w_payload_last              ), //i
    .io_input_b_valid                (system_ddr_ddrLogic_systemToMemoryBridge_io_input_b_valid                   ), //o
    .io_input_b_ready                (system_ddr_systemLogic_bmbToAxiBridge_io_output_b_ready                     ), //i
    .io_input_b_payload_id           (system_ddr_ddrLogic_systemToMemoryBridge_io_input_b_payload_id[1:0]         ), //o
    .io_input_b_payload_resp         (system_ddr_ddrLogic_systemToMemoryBridge_io_input_b_payload_resp[1:0]       ), //o
    .io_input_r_valid                (system_ddr_ddrLogic_systemToMemoryBridge_io_input_r_valid                   ), //o
    .io_input_r_ready                (system_ddr_systemLogic_bmbToAxiBridge_io_output_r_ready                     ), //i
    .io_input_r_payload_data         (system_ddr_ddrLogic_systemToMemoryBridge_io_input_r_payload_data[127:0]     ), //o
    .io_input_r_payload_id           (system_ddr_ddrLogic_systemToMemoryBridge_io_input_r_payload_id[1:0]         ), //o
    .io_input_r_payload_resp         (system_ddr_ddrLogic_systemToMemoryBridge_io_input_r_payload_resp[1:0]       ), //o
    .io_input_r_payload_last         (system_ddr_ddrLogic_systemToMemoryBridge_io_input_r_payload_last            ), //o
    .io_output_arw_valid             (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_valid                ), //o
    .io_output_arw_ready             (_zz_91                                                                      ), //i
    .io_output_arw_payload_addr      (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_addr[31:0]   ), //o
    .io_output_arw_payload_id        (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_id[1:0]      ), //o
    .io_output_arw_payload_region    (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_region[3:0]  ), //o
    .io_output_arw_payload_len       (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_len[7:0]     ), //o
    .io_output_arw_payload_size      (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_size[2:0]    ), //o
    .io_output_arw_payload_burst     (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_burst[1:0]   ), //o
    .io_output_arw_payload_lock      (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_lock         ), //o
    .io_output_arw_payload_cache     (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_cache[3:0]   ), //o
    .io_output_arw_payload_qos       (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_qos[3:0]     ), //o
    .io_output_arw_payload_prot      (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_prot[2:0]    ), //o
    .io_output_arw_payload_write     (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_write        ), //o
    .io_output_w_valid               (system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_valid                  ), //o
    .io_output_w_ready               (_zz_92                                                                      ), //i
    .io_output_w_payload_data        (system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_payload_data[127:0]    ), //o
    .io_output_w_payload_strb        (system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_payload_strb[15:0]     ), //o
    .io_output_w_payload_last        (system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_payload_last           ), //o
    .io_output_b_valid               (system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_valid                       ), //i
    .io_output_b_ready               (system_ddr_ddrLogic_systemToMemoryBridge_io_output_b_ready                  ), //o
    .io_output_b_payload_id          (system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_payload_id[1:0]             ), //i
    .io_output_b_payload_resp        (system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_payload_resp[1:0]           ), //i
    .io_output_r_valid               (system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_valid                       ), //i
    .io_output_r_ready               (system_ddr_ddrLogic_systemToMemoryBridge_io_output_r_ready                  ), //o
    .io_output_r_payload_data        (system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_payload_data[127:0]         ), //i
    .io_output_r_payload_id          (system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_payload_id[1:0]             ), //i
    .io_output_r_payload_resp        (system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_payload_resp[1:0]           ), //i
    .io_output_r_payload_last        (system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_payload_last                ), //i
    .io_systemClk                    (io_systemClk                                                                ), //i
    .systemCd_logic_outputReset      (systemCd_logic_outputReset                                                  ), //i
    .io_memoryClk                    (io_memoryClk                                                                ), //i
    .ddrCd_logic_outputReset         (ddrCd_logic_outputReset                                                     )  //i
  );
  Axi4SharedArbiter_e12a9decc0704226832aec4017b36e8d system_ddr_ddrLogic_arbiter (
    .io_sharedInputs_0_arw_valid             (system_ddr_ddrLogic_cpuAccess_arw_valid                              ), //i
    .io_sharedInputs_0_arw_ready             (system_ddr_ddrLogic_arbiter_io_sharedInputs_0_arw_ready              ), //o
    .io_sharedInputs_0_arw_payload_addr      (system_ddr_ddrLogic_cpuAccess_arw_payload_addr[31:0]                 ), //i
    .io_sharedInputs_0_arw_payload_id        (_zz_93[6:0]                                                          ), //i
    .io_sharedInputs_0_arw_payload_region    (system_ddr_ddrLogic_cpuAccess_arw_payload_region[3:0]                ), //i
    .io_sharedInputs_0_arw_payload_len       (system_ddr_ddrLogic_cpuAccess_arw_payload_len[7:0]                   ), //i
    .io_sharedInputs_0_arw_payload_size      (system_ddr_ddrLogic_cpuAccess_arw_payload_size[2:0]                  ), //i
    .io_sharedInputs_0_arw_payload_burst     (system_ddr_ddrLogic_cpuAccess_arw_payload_burst[1:0]                 ), //i
    .io_sharedInputs_0_arw_payload_lock      (system_ddr_ddrLogic_cpuAccess_arw_payload_lock                       ), //i
    .io_sharedInputs_0_arw_payload_cache     (system_ddr_ddrLogic_cpuAccess_arw_payload_cache[3:0]                 ), //i
    .io_sharedInputs_0_arw_payload_qos       (system_ddr_ddrLogic_cpuAccess_arw_payload_qos[3:0]                   ), //i
    .io_sharedInputs_0_arw_payload_prot      (system_ddr_ddrLogic_cpuAccess_arw_payload_prot[2:0]                  ), //i
    .io_sharedInputs_0_arw_payload_write     (system_ddr_ddrLogic_cpuAccess_arw_payload_write                      ), //i
    .io_sharedInputs_0_w_valid               (system_ddr_ddrLogic_cpuAccess_w_valid                                ), //i
    .io_sharedInputs_0_w_ready               (system_ddr_ddrLogic_arbiter_io_sharedInputs_0_w_ready                ), //o
    .io_sharedInputs_0_w_payload_data        (system_ddr_ddrLogic_cpuAccess_w_payload_data[127:0]                  ), //i
    .io_sharedInputs_0_w_payload_strb        (system_ddr_ddrLogic_cpuAccess_w_payload_strb[15:0]                   ), //i
    .io_sharedInputs_0_w_payload_last        (system_ddr_ddrLogic_cpuAccess_w_payload_last                         ), //i
    .io_sharedInputs_0_b_valid               (system_ddr_ddrLogic_arbiter_io_sharedInputs_0_b_valid                ), //o
    .io_sharedInputs_0_b_ready               (system_ddr_ddrLogic_cpuAccess_b_ready                                ), //i
    .io_sharedInputs_0_b_payload_id          (system_ddr_ddrLogic_arbiter_io_sharedInputs_0_b_payload_id[6:0]      ), //o
    .io_sharedInputs_0_b_payload_resp        (system_ddr_ddrLogic_arbiter_io_sharedInputs_0_b_payload_resp[1:0]    ), //o
    .io_sharedInputs_0_r_valid               (system_ddr_ddrLogic_arbiter_io_sharedInputs_0_r_valid                ), //o
    .io_sharedInputs_0_r_ready               (system_ddr_ddrLogic_cpuAccess_r_ready                                ), //i
    .io_sharedInputs_0_r_payload_data        (system_ddr_ddrLogic_arbiter_io_sharedInputs_0_r_payload_data[127:0]  ), //o
    .io_sharedInputs_0_r_payload_id          (system_ddr_ddrLogic_arbiter_io_sharedInputs_0_r_payload_id[6:0]      ), //o
    .io_sharedInputs_0_r_payload_resp        (system_ddr_ddrLogic_arbiter_io_sharedInputs_0_r_payload_resp[1:0]    ), //o
    .io_sharedInputs_0_r_payload_last        (system_ddr_ddrLogic_arbiter_io_sharedInputs_0_r_payload_last         ), //o
    .io_sharedInputs_1_arw_valid             (system_ddr_ddrLogic_userAdapters_0_pipeline_arw_valid                ), //i
    .io_sharedInputs_1_arw_ready             (system_ddr_ddrLogic_arbiter_io_sharedInputs_1_arw_ready              ), //o
    .io_sharedInputs_1_arw_payload_addr      (system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_addr[31:0]   ), //i
    .io_sharedInputs_1_arw_payload_id        (_zz_94[6:0]                                                          ), //i
    .io_sharedInputs_1_arw_payload_region    (system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_region[3:0]  ), //i
    .io_sharedInputs_1_arw_payload_len       (system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_len[7:0]     ), //i
    .io_sharedInputs_1_arw_payload_size      (system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_size[2:0]    ), //i
    .io_sharedInputs_1_arw_payload_burst     (system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_burst[1:0]   ), //i
    .io_sharedInputs_1_arw_payload_lock      (system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_lock         ), //i
    .io_sharedInputs_1_arw_payload_cache     (system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_cache[3:0]   ), //i
    .io_sharedInputs_1_arw_payload_qos       (system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_qos[3:0]     ), //i
    .io_sharedInputs_1_arw_payload_prot      (system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_prot[2:0]    ), //i
    .io_sharedInputs_1_arw_payload_write     (system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_write        ), //i
    .io_sharedInputs_1_w_valid               (system_ddr_ddrLogic_userAdapters_0_pipeline_w_valid                  ), //i
    .io_sharedInputs_1_w_ready               (system_ddr_ddrLogic_arbiter_io_sharedInputs_1_w_ready                ), //o
    .io_sharedInputs_1_w_payload_data        (system_ddr_ddrLogic_userAdapters_0_pipeline_w_payload_data[127:0]    ), //i
    .io_sharedInputs_1_w_payload_strb        (system_ddr_ddrLogic_userAdapters_0_pipeline_w_payload_strb[15:0]     ), //i
    .io_sharedInputs_1_w_payload_last        (system_ddr_ddrLogic_userAdapters_0_pipeline_w_payload_last           ), //i
    .io_sharedInputs_1_b_valid               (system_ddr_ddrLogic_arbiter_io_sharedInputs_1_b_valid                ), //o
    .io_sharedInputs_1_b_ready               (system_ddr_ddrLogic_userAdapters_0_pipeline_b_ready                  ), //i
    .io_sharedInputs_1_b_payload_id          (system_ddr_ddrLogic_arbiter_io_sharedInputs_1_b_payload_id[6:0]      ), //o
    .io_sharedInputs_1_b_payload_resp        (system_ddr_ddrLogic_arbiter_io_sharedInputs_1_b_payload_resp[1:0]    ), //o
    .io_sharedInputs_1_r_valid               (system_ddr_ddrLogic_arbiter_io_sharedInputs_1_r_valid                ), //o
    .io_sharedInputs_1_r_ready               (system_ddr_ddrLogic_userAdapters_0_pipeline_r_ready                  ), //i
    .io_sharedInputs_1_r_payload_data        (system_ddr_ddrLogic_arbiter_io_sharedInputs_1_r_payload_data[127:0]  ), //o
    .io_sharedInputs_1_r_payload_id          (system_ddr_ddrLogic_arbiter_io_sharedInputs_1_r_payload_id[6:0]      ), //o
    .io_sharedInputs_1_r_payload_resp        (system_ddr_ddrLogic_arbiter_io_sharedInputs_1_r_payload_resp[1:0]    ), //o
    .io_sharedInputs_1_r_payload_last        (system_ddr_ddrLogic_arbiter_io_sharedInputs_1_r_payload_last         ), //o
    .io_output_arw_valid                     (system_ddr_ddrLogic_arbiter_io_output_arw_valid                      ), //o
    .io_output_arw_ready                     (system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_ready        ), //i
    .io_output_arw_payload_addr              (system_ddr_ddrLogic_arbiter_io_output_arw_payload_addr[31:0]         ), //o
    .io_output_arw_payload_id                (system_ddr_ddrLogic_arbiter_io_output_arw_payload_id[7:0]            ), //o
    .io_output_arw_payload_region            (system_ddr_ddrLogic_arbiter_io_output_arw_payload_region[3:0]        ), //o
    .io_output_arw_payload_len               (system_ddr_ddrLogic_arbiter_io_output_arw_payload_len[7:0]           ), //o
    .io_output_arw_payload_size              (system_ddr_ddrLogic_arbiter_io_output_arw_payload_size[2:0]          ), //o
    .io_output_arw_payload_burst             (system_ddr_ddrLogic_arbiter_io_output_arw_payload_burst[1:0]         ), //o
    .io_output_arw_payload_lock              (system_ddr_ddrLogic_arbiter_io_output_arw_payload_lock               ), //o
    .io_output_arw_payload_cache             (system_ddr_ddrLogic_arbiter_io_output_arw_payload_cache[3:0]         ), //o
    .io_output_arw_payload_qos               (system_ddr_ddrLogic_arbiter_io_output_arw_payload_qos[3:0]           ), //o
    .io_output_arw_payload_prot              (system_ddr_ddrLogic_arbiter_io_output_arw_payload_prot[2:0]          ), //o
    .io_output_arw_payload_write             (system_ddr_ddrLogic_arbiter_io_output_arw_payload_write              ), //o
    .io_output_w_valid                       (system_ddr_ddrLogic_arbiter_io_output_w_valid                        ), //o
    .io_output_w_ready                       (_zz_95                                                               ), //i
    .io_output_w_payload_data                (system_ddr_ddrLogic_arbiter_io_output_w_payload_data[127:0]          ), //o
    .io_output_w_payload_strb                (system_ddr_ddrLogic_arbiter_io_output_w_payload_strb[15:0]           ), //o
    .io_output_w_payload_last                (system_ddr_ddrLogic_arbiter_io_output_w_payload_last                 ), //o
    .io_output_b_valid                       (system_ddr_ddrLogic_ddrA_b_halfPipe_valid                            ), //i
    .io_output_b_ready                       (system_ddr_ddrLogic_arbiter_io_output_b_ready                        ), //o
    .io_output_b_payload_id                  (system_ddr_ddrLogic_ddrA_b_halfPipe_payload_id[7:0]                  ), //i
    .io_output_b_payload_resp                (system_ddr_ddrLogic_ddrA_b_halfPipe_payload_resp[1:0]                ), //i
    .io_output_r_valid                       (system_ddr_ddrLogic_ddrA_r_valid                                     ), //i
    .io_output_r_ready                       (system_ddr_ddrLogic_arbiter_io_output_r_ready                        ), //o
    .io_output_r_payload_data                (system_ddr_ddrLogic_ddrA_r_payload_data[127:0]                       ), //i
    .io_output_r_payload_id                  (system_ddr_ddrLogic_ddrA_r_payload_id[7:0]                           ), //i
    .io_output_r_payload_resp                (system_ddr_ddrLogic_ddrA_r_payload_resp[1:0]                         ), //i
    .io_output_r_payload_last                (system_ddr_ddrLogic_ddrA_r_payload_last                              ), //i
    .io_memoryClk                            (io_memoryClk                                                         ), //i
    .ddrCd_logic_outputReset                 (ddrCd_logic_outputReset                                              )  //i
  );
  BufferCC_27_e12a9decc0704226832aec4017b36e8d ddrCd_logic_outputReset_buffercc (
    .io_dataIn                (ddrCd_logic_outputReset                      ), //i
    .io_dataOut               (ddrCd_logic_outputReset_buffercc_io_dataOut  ), //o
    .io_ddrMasters_0_clk      (io_ddrMasters_0_clk                          ), //i
    .io_ddrMasters_0_reset    (_zz_109                                      )  //i
  );
  Axi4CC_e12a9decc0704226832aec4017b36e8d system_ddr_ddrLogic_userAdapters_0_bridge (
    .io_input_aw_valid              (io_ddrMasters_0_aw_halfPipe_valid                                               ), //i
    .io_input_aw_ready              (system_ddr_ddrLogic_userAdapters_0_bridge_io_input_aw_ready                     ), //o
    .io_input_aw_payload_addr       (io_ddrMasters_0_aw_halfPipe_payload_addr[31:0]                                  ), //i
    .io_input_aw_payload_id         (io_ddrMasters_0_aw_halfPipe_payload_id[3:0]                                     ), //i
    .io_input_aw_payload_region     (io_ddrMasters_0_aw_halfPipe_payload_region[3:0]                                 ), //i
    .io_input_aw_payload_len        (io_ddrMasters_0_aw_halfPipe_payload_len[7:0]                                    ), //i
    .io_input_aw_payload_size       (io_ddrMasters_0_aw_halfPipe_payload_size[2:0]                                   ), //i
    .io_input_aw_payload_burst      (io_ddrMasters_0_aw_halfPipe_payload_burst[1:0]                                  ), //i
    .io_input_aw_payload_lock       (io_ddrMasters_0_aw_halfPipe_payload_lock                                        ), //i
    .io_input_aw_payload_cache      (io_ddrMasters_0_aw_halfPipe_payload_cache[3:0]                                  ), //i
    .io_input_aw_payload_qos        (io_ddrMasters_0_aw_halfPipe_payload_qos[3:0]                                    ), //i
    .io_input_aw_payload_prot       (io_ddrMasters_0_aw_halfPipe_payload_prot[2:0]                                   ), //i
    .io_input_w_valid               (io_ddrMasters_0_w_s2mPipe_m2sPipe_valid                                         ), //i
    .io_input_w_ready               (system_ddr_ddrLogic_userAdapters_0_bridge_io_input_w_ready                      ), //o
    .io_input_w_payload_data        (io_ddrMasters_0_w_s2mPipe_m2sPipe_payload_data[31:0]                            ), //i
    .io_input_w_payload_strb        (io_ddrMasters_0_w_s2mPipe_m2sPipe_payload_strb[3:0]                             ), //i
    .io_input_w_payload_last        (io_ddrMasters_0_w_s2mPipe_m2sPipe_payload_last                                  ), //i
    .io_input_b_valid               (system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_valid                      ), //o
    .io_input_b_ready               (_zz_96                                                                          ), //i
    .io_input_b_payload_id          (system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_payload_id[3:0]            ), //o
    .io_input_b_payload_resp        (system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_payload_resp[1:0]          ), //o
    .io_input_ar_valid              (io_ddrMasters_0_ar_halfPipe_valid                                               ), //i
    .io_input_ar_ready              (system_ddr_ddrLogic_userAdapters_0_bridge_io_input_ar_ready                     ), //o
    .io_input_ar_payload_addr       (io_ddrMasters_0_ar_halfPipe_payload_addr[31:0]                                  ), //i
    .io_input_ar_payload_id         (io_ddrMasters_0_ar_halfPipe_payload_id[3:0]                                     ), //i
    .io_input_ar_payload_region     (io_ddrMasters_0_ar_halfPipe_payload_region[3:0]                                 ), //i
    .io_input_ar_payload_len        (io_ddrMasters_0_ar_halfPipe_payload_len[7:0]                                    ), //i
    .io_input_ar_payload_size       (io_ddrMasters_0_ar_halfPipe_payload_size[2:0]                                   ), //i
    .io_input_ar_payload_burst      (io_ddrMasters_0_ar_halfPipe_payload_burst[1:0]                                  ), //i
    .io_input_ar_payload_lock       (io_ddrMasters_0_ar_halfPipe_payload_lock                                        ), //i
    .io_input_ar_payload_cache      (io_ddrMasters_0_ar_halfPipe_payload_cache[3:0]                                  ), //i
    .io_input_ar_payload_qos        (io_ddrMasters_0_ar_halfPipe_payload_qos[3:0]                                    ), //i
    .io_input_ar_payload_prot       (io_ddrMasters_0_ar_halfPipe_payload_prot[2:0]                                   ), //i
    .io_input_r_valid               (system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_valid                      ), //o
    .io_input_r_ready               (_zz_97                                                                          ), //i
    .io_input_r_payload_data        (system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_payload_data[31:0]         ), //o
    .io_input_r_payload_id          (system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_payload_id[3:0]            ), //o
    .io_input_r_payload_resp        (system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_payload_resp[1:0]          ), //o
    .io_input_r_payload_last        (system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_payload_last               ), //o
    .io_output_aw_valid             (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_valid                    ), //o
    .io_output_aw_ready             (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_aw_ready              ), //i
    .io_output_aw_payload_addr      (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_addr[31:0]       ), //o
    .io_output_aw_payload_id        (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_id[3:0]          ), //o
    .io_output_aw_payload_region    (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_region[3:0]      ), //o
    .io_output_aw_payload_len       (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_len[7:0]         ), //o
    .io_output_aw_payload_size      (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_size[2:0]        ), //o
    .io_output_aw_payload_burst     (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_burst[1:0]       ), //o
    .io_output_aw_payload_lock      (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_lock             ), //o
    .io_output_aw_payload_cache     (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_cache[3:0]       ), //o
    .io_output_aw_payload_qos       (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_qos[3:0]         ), //o
    .io_output_aw_payload_prot      (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_prot[2:0]        ), //o
    .io_output_w_valid              (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_w_valid                     ), //o
    .io_output_w_ready              (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_w_ready               ), //i
    .io_output_w_payload_data       (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_w_payload_data[31:0]        ), //o
    .io_output_w_payload_strb       (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_w_payload_strb[3:0]         ), //o
    .io_output_w_payload_last       (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_w_payload_last              ), //o
    .io_output_b_valid              (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_b_valid               ), //i
    .io_output_b_ready              (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_b_ready                     ), //o
    .io_output_b_payload_id         (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_b_payload_id[3:0]     ), //i
    .io_output_b_payload_resp       (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_b_payload_resp[1:0]   ), //i
    .io_output_ar_valid             (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_valid                    ), //o
    .io_output_ar_ready             (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_ar_ready              ), //i
    .io_output_ar_payload_addr      (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_addr[31:0]       ), //o
    .io_output_ar_payload_id        (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_id[3:0]          ), //o
    .io_output_ar_payload_region    (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_region[3:0]      ), //o
    .io_output_ar_payload_len       (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_len[7:0]         ), //o
    .io_output_ar_payload_size      (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_size[2:0]        ), //o
    .io_output_ar_payload_burst     (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_burst[1:0]       ), //o
    .io_output_ar_payload_lock      (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_lock             ), //o
    .io_output_ar_payload_cache     (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_cache[3:0]       ), //o
    .io_output_ar_payload_qos       (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_qos[3:0]         ), //o
    .io_output_ar_payload_prot      (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_prot[2:0]        ), //o
    .io_output_r_valid              (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_r_valid               ), //i
    .io_output_r_ready              (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_r_ready                     ), //o
    .io_output_r_payload_data       (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_r_payload_data[31:0]  ), //i
    .io_output_r_payload_id         (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_r_payload_id[3:0]     ), //i
    .io_output_r_payload_resp       (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_r_payload_resp[1:0]   ), //i
    .io_output_r_payload_last       (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_r_payload_last        ), //i
    .io_ddrMasters_0_clk            (io_ddrMasters_0_clk                                                             ), //i
    .io_ddrMasters_0_reset          (_zz_109                                                                         ), //i
    .io_memoryClk                   (io_memoryClk                                                                    ), //i
    .ddrCd_logic_outputReset        (ddrCd_logic_outputReset                                                         )  //i
  );
  Axi4Upsizer_e12a9decc0704226832aec4017b36e8d system_ddr_ddrLogic_userAdapters_0_upsizer_logic (
    .io_input_aw_valid              (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_valid                       ), //i
    .io_input_aw_ready              (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_aw_ready                 ), //o
    .io_input_aw_payload_addr       (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_addr[31:0]          ), //i
    .io_input_aw_payload_id         (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_id[3:0]             ), //i
    .io_input_aw_payload_region     (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_region[3:0]         ), //i
    .io_input_aw_payload_len        (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_len[7:0]            ), //i
    .io_input_aw_payload_size       (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_size[2:0]           ), //i
    .io_input_aw_payload_burst      (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_burst[1:0]          ), //i
    .io_input_aw_payload_lock       (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_lock                ), //i
    .io_input_aw_payload_cache      (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_cache[3:0]          ), //i
    .io_input_aw_payload_qos        (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_qos[3:0]            ), //i
    .io_input_aw_payload_prot       (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_aw_payload_prot[2:0]           ), //i
    .io_input_w_valid               (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_w_valid                        ), //i
    .io_input_w_ready               (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_w_ready                  ), //o
    .io_input_w_payload_data        (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_w_payload_data[31:0]           ), //i
    .io_input_w_payload_strb        (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_w_payload_strb[3:0]            ), //i
    .io_input_w_payload_last        (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_w_payload_last                 ), //i
    .io_input_b_valid               (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_b_valid                  ), //o
    .io_input_b_ready               (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_b_ready                        ), //i
    .io_input_b_payload_id          (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_b_payload_id[3:0]        ), //o
    .io_input_b_payload_resp        (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_b_payload_resp[1:0]      ), //o
    .io_input_ar_valid              (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_valid                       ), //i
    .io_input_ar_ready              (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_ar_ready                 ), //o
    .io_input_ar_payload_addr       (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_addr[31:0]          ), //i
    .io_input_ar_payload_id         (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_id[3:0]             ), //i
    .io_input_ar_payload_region     (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_region[3:0]         ), //i
    .io_input_ar_payload_len        (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_len[7:0]            ), //i
    .io_input_ar_payload_size       (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_size[2:0]           ), //i
    .io_input_ar_payload_burst      (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_burst[1:0]          ), //i
    .io_input_ar_payload_lock       (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_lock                ), //i
    .io_input_ar_payload_cache      (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_cache[3:0]          ), //i
    .io_input_ar_payload_qos        (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_qos[3:0]            ), //i
    .io_input_ar_payload_prot       (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_ar_payload_prot[2:0]           ), //i
    .io_input_r_valid               (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_r_valid                  ), //o
    .io_input_r_ready               (system_ddr_ddrLogic_userAdapters_0_bridge_io_output_r_ready                        ), //i
    .io_input_r_payload_data        (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_r_payload_data[31:0]     ), //o
    .io_input_r_payload_id          (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_r_payload_id[3:0]        ), //o
    .io_input_r_payload_resp        (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_r_payload_resp[1:0]      ), //o
    .io_input_r_payload_last        (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_input_r_payload_last           ), //o
    .io_output_aw_valid             (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_valid                ), //o
    .io_output_aw_ready             (streamArbiter_3_io_inputs_1_ready                                                  ), //i
    .io_output_aw_payload_addr      (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_addr[31:0]   ), //o
    .io_output_aw_payload_id        (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_id[3:0]      ), //o
    .io_output_aw_payload_region    (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_region[3:0]  ), //o
    .io_output_aw_payload_len       (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_len[7:0]     ), //o
    .io_output_aw_payload_size      (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_size[2:0]    ), //o
    .io_output_aw_payload_burst     (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_burst[1:0]   ), //o
    .io_output_aw_payload_lock      (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_lock         ), //o
    .io_output_aw_payload_cache     (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_cache[3:0]   ), //o
    .io_output_aw_payload_qos       (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_qos[3:0]     ), //o
    .io_output_aw_payload_prot      (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_prot[2:0]    ), //o
    .io_output_w_valid              (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_w_valid                 ), //o
    .io_output_w_ready              (system_ddr_ddrLogic_userAdapters_0_userShared_w_ready                              ), //i
    .io_output_w_payload_data       (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_w_payload_data[127:0]   ), //o
    .io_output_w_payload_strb       (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_w_payload_strb[15:0]    ), //o
    .io_output_w_payload_last       (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_w_payload_last          ), //o
    .io_output_b_valid              (system_ddr_ddrLogic_userAdapters_0_userShared_b_valid                              ), //i
    .io_output_b_ready              (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_b_ready                 ), //o
    .io_output_b_payload_id         (system_ddr_ddrLogic_userAdapters_0_userShared_b_payload_id[3:0]                    ), //i
    .io_output_b_payload_resp       (system_ddr_ddrLogic_userAdapters_0_userShared_b_payload_resp[1:0]                  ), //i
    .io_output_ar_valid             (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_valid                ), //o
    .io_output_ar_ready             (streamArbiter_3_io_inputs_0_ready                                                  ), //i
    .io_output_ar_payload_addr      (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_addr[31:0]   ), //o
    .io_output_ar_payload_id        (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_id[3:0]      ), //o
    .io_output_ar_payload_region    (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_region[3:0]  ), //o
    .io_output_ar_payload_len       (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_len[7:0]     ), //o
    .io_output_ar_payload_size      (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_size[2:0]    ), //o
    .io_output_ar_payload_burst     (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_burst[1:0]   ), //o
    .io_output_ar_payload_lock      (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_lock         ), //o
    .io_output_ar_payload_cache     (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_cache[3:0]   ), //o
    .io_output_ar_payload_qos       (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_qos[3:0]     ), //o
    .io_output_ar_payload_prot      (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_prot[2:0]    ), //o
    .io_output_r_valid              (system_ddr_ddrLogic_userAdapters_0_userShared_r_valid                              ), //i
    .io_output_r_ready              (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_r_ready                 ), //o
    .io_output_r_payload_data       (system_ddr_ddrLogic_userAdapters_0_userShared_r_payload_data[127:0]                ), //i
    .io_output_r_payload_id         (system_ddr_ddrLogic_userAdapters_0_userShared_r_payload_id[3:0]                    ), //i
    .io_output_r_payload_resp       (system_ddr_ddrLogic_userAdapters_0_userShared_r_payload_resp[1:0]                  ), //i
    .io_output_r_payload_last       (system_ddr_ddrLogic_userAdapters_0_userShared_r_payload_last                       ), //i
    .io_memoryClk                   (io_memoryClk                                                                       ), //i
    .ddrCd_logic_outputReset        (ddrCd_logic_outputReset                                                            )  //i
  );
  StreamArbiter_2_e12a9decc0704226832aec4017b36e8d streamArbiter_3 (
    .io_inputs_0_valid             (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_valid                ), //i
    .io_inputs_0_ready             (streamArbiter_3_io_inputs_0_ready                                                  ), //o
    .io_inputs_0_payload_addr      (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_addr[31:0]   ), //i
    .io_inputs_0_payload_id        (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_id[3:0]      ), //i
    .io_inputs_0_payload_region    (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_region[3:0]  ), //i
    .io_inputs_0_payload_len       (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_len[7:0]     ), //i
    .io_inputs_0_payload_size      (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_size[2:0]    ), //i
    .io_inputs_0_payload_burst     (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_burst[1:0]   ), //i
    .io_inputs_0_payload_lock      (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_lock         ), //i
    .io_inputs_0_payload_cache     (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_cache[3:0]   ), //i
    .io_inputs_0_payload_qos       (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_qos[3:0]     ), //i
    .io_inputs_0_payload_prot      (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_ar_payload_prot[2:0]    ), //i
    .io_inputs_1_valid             (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_valid                ), //i
    .io_inputs_1_ready             (streamArbiter_3_io_inputs_1_ready                                                  ), //o
    .io_inputs_1_payload_addr      (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_addr[31:0]   ), //i
    .io_inputs_1_payload_id        (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_id[3:0]      ), //i
    .io_inputs_1_payload_region    (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_region[3:0]  ), //i
    .io_inputs_1_payload_len       (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_len[7:0]     ), //i
    .io_inputs_1_payload_size      (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_size[2:0]    ), //i
    .io_inputs_1_payload_burst     (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_burst[1:0]   ), //i
    .io_inputs_1_payload_lock      (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_lock         ), //i
    .io_inputs_1_payload_cache     (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_cache[3:0]   ), //i
    .io_inputs_1_payload_qos       (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_qos[3:0]     ), //i
    .io_inputs_1_payload_prot      (system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_aw_payload_prot[2:0]    ), //i
    .io_output_valid               (streamArbiter_3_io_output_valid                                                    ), //o
    .io_output_ready               (system_ddr_ddrLogic_userAdapters_0_userShared_arw_ready                            ), //i
    .io_output_payload_addr        (streamArbiter_3_io_output_payload_addr[31:0]                                       ), //o
    .io_output_payload_id          (streamArbiter_3_io_output_payload_id[3:0]                                          ), //o
    .io_output_payload_region      (streamArbiter_3_io_output_payload_region[3:0]                                      ), //o
    .io_output_payload_len         (streamArbiter_3_io_output_payload_len[7:0]                                         ), //o
    .io_output_payload_size        (streamArbiter_3_io_output_payload_size[2:0]                                        ), //o
    .io_output_payload_burst       (streamArbiter_3_io_output_payload_burst[1:0]                                       ), //o
    .io_output_payload_lock        (streamArbiter_3_io_output_payload_lock                                             ), //o
    .io_output_payload_cache       (streamArbiter_3_io_output_payload_cache[3:0]                                       ), //o
    .io_output_payload_qos         (streamArbiter_3_io_output_payload_qos[3:0]                                         ), //o
    .io_output_payload_prot        (streamArbiter_3_io_output_payload_prot[2:0]                                        ), //o
    .io_chosen                     (streamArbiter_3_io_chosen                                                          ), //o
    .io_chosenOH                   (streamArbiter_3_io_chosenOH[1:0]                                                   ), //o
    .io_memoryClk                  (io_memoryClk                                                                       ), //i
    .ddrCd_logic_outputReset       (ddrCd_logic_outputReset                                                            )  //i
  );
  StreamFifoLowLatency_1_e12a9decc0704226832aec4017b36e8d system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo (
    .io_push_valid                          (system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_valid                         ), //i
    .io_push_ready                          (system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_push_ready            ), //o
    .io_push_payload_id                     (system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_payload_id[7:0]               ), //i
    .io_push_payload_len                    (system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_payload_len[7:0]              ), //i
    .io_pop_valid                           (system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_valid             ), //o
    .io_pop_ready                           (_zz_98                                                                                  ), //i
    .io_pop_payload_id                      (system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_payload_id[7:0]   ), //o
    .io_pop_payload_len                     (system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_payload_len[7:0]  ), //o
    .io_flush                               (_zz_99                                                                                  ), //i
    .io_occupancy                           (system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_occupancy[2:0]        ), //o
    .io_memoryClk                           (io_memoryClk                                                                            ), //i
    .system_ddr_ddrLogic_ddrAReset_reset    (system_ddr_ddrLogic_ddrAReset_reset                                                     )  //i
  );
  BmbArbiter_1_e12a9decc0704226832aec4017b36e8d system_ddr_bmb_arbiter (
    .io_inputs_0_cmd_valid                       (system_bridge_bmb_decoder_io_outputs_2_cmd_valid                           ), //i
    .io_inputs_0_cmd_ready                       (system_ddr_bmb_arbiter_io_inputs_0_cmd_ready                               ), //o
    .io_inputs_0_cmd_payload_last                (system_bridge_bmb_decoder_io_outputs_2_cmd_payload_last                    ), //i
    .io_inputs_0_cmd_payload_fragment_source     (system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_source         ), //i
    .io_inputs_0_cmd_payload_fragment_opcode     (system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_opcode         ), //i
    .io_inputs_0_cmd_payload_fragment_address    (system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_address[31:0]  ), //i
    .io_inputs_0_cmd_payload_fragment_length     (system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_length[4:0]    ), //i
    .io_inputs_0_cmd_payload_fragment_data       (system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_data[31:0]     ), //i
    .io_inputs_0_cmd_payload_fragment_mask       (system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_mask[3:0]      ), //i
    .io_inputs_0_cmd_payload_fragment_context    (system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_context        ), //i
    .io_inputs_0_rsp_valid                       (system_ddr_bmb_arbiter_io_inputs_0_rsp_valid                               ), //o
    .io_inputs_0_rsp_ready                       (system_bridge_bmb_decoder_io_outputs_2_rsp_ready                           ), //i
    .io_inputs_0_rsp_payload_last                (system_ddr_bmb_arbiter_io_inputs_0_rsp_payload_last                        ), //o
    .io_inputs_0_rsp_payload_fragment_source     (system_ddr_bmb_arbiter_io_inputs_0_rsp_payload_fragment_source             ), //o
    .io_inputs_0_rsp_payload_fragment_opcode     (system_ddr_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode             ), //o
    .io_inputs_0_rsp_payload_fragment_data       (system_ddr_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data[31:0]         ), //o
    .io_inputs_0_rsp_payload_fragment_context    (system_ddr_bmb_arbiter_io_inputs_0_rsp_payload_fragment_context            ), //o
    .io_output_cmd_valid                         (system_ddr_bmb_arbiter_io_output_cmd_valid                                 ), //o
    .io_output_cmd_ready                         (system_ddr_bmb_upSizer_io_input_cmd_ready                                  ), //i
    .io_output_cmd_payload_last                  (system_ddr_bmb_arbiter_io_output_cmd_payload_last                          ), //o
    .io_output_cmd_payload_fragment_source       (system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_source               ), //o
    .io_output_cmd_payload_fragment_opcode       (system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_opcode               ), //o
    .io_output_cmd_payload_fragment_address      (system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_address[31:0]        ), //o
    .io_output_cmd_payload_fragment_length       (system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_length[4:0]          ), //o
    .io_output_cmd_payload_fragment_data         (system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_data[31:0]           ), //o
    .io_output_cmd_payload_fragment_mask         (system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_mask[3:0]            ), //o
    .io_output_cmd_payload_fragment_context      (system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_context              ), //o
    .io_output_rsp_valid                         (system_ddr_bmb_upSizer_io_input_rsp_valid                                  ), //i
    .io_output_rsp_ready                         (system_ddr_bmb_arbiter_io_output_rsp_ready                                 ), //o
    .io_output_rsp_payload_last                  (system_ddr_bmb_upSizer_io_input_rsp_payload_last                           ), //i
    .io_output_rsp_payload_fragment_source       (system_ddr_bmb_upSizer_io_input_rsp_payload_fragment_source                ), //i
    .io_output_rsp_payload_fragment_opcode       (system_ddr_bmb_upSizer_io_input_rsp_payload_fragment_opcode                ), //i
    .io_output_rsp_payload_fragment_data         (system_ddr_bmb_upSizer_io_input_rsp_payload_fragment_data[31:0]            ), //i
    .io_output_rsp_payload_fragment_context      (system_ddr_bmb_upSizer_io_input_rsp_payload_fragment_context               )  //i
  );
  BmbUpSizerBridge_e12a9decc0704226832aec4017b36e8d system_ddr_bmb_upSizer (
    .io_input_cmd_valid                        (system_ddr_bmb_arbiter_io_output_cmd_valid                                        ), //i
    .io_input_cmd_ready                        (system_ddr_bmb_upSizer_io_input_cmd_ready                                         ), //o
    .io_input_cmd_payload_last                 (system_ddr_bmb_arbiter_io_output_cmd_payload_last                                 ), //i
    .io_input_cmd_payload_fragment_source      (system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_source                      ), //i
    .io_input_cmd_payload_fragment_opcode      (system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_opcode                      ), //i
    .io_input_cmd_payload_fragment_address     (system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_address[31:0]               ), //i
    .io_input_cmd_payload_fragment_length      (system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_length[4:0]                 ), //i
    .io_input_cmd_payload_fragment_data        (system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_data[31:0]                  ), //i
    .io_input_cmd_payload_fragment_mask        (system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_mask[3:0]                   ), //i
    .io_input_cmd_payload_fragment_context     (system_ddr_bmb_arbiter_io_output_cmd_payload_fragment_context                     ), //i
    .io_input_rsp_valid                        (system_ddr_bmb_upSizer_io_input_rsp_valid                                         ), //o
    .io_input_rsp_ready                        (system_ddr_bmb_arbiter_io_output_rsp_ready                                        ), //i
    .io_input_rsp_payload_last                 (system_ddr_bmb_upSizer_io_input_rsp_payload_last                                  ), //o
    .io_input_rsp_payload_fragment_source      (system_ddr_bmb_upSizer_io_input_rsp_payload_fragment_source                       ), //o
    .io_input_rsp_payload_fragment_opcode      (system_ddr_bmb_upSizer_io_input_rsp_payload_fragment_opcode                       ), //o
    .io_input_rsp_payload_fragment_data        (system_ddr_bmb_upSizer_io_input_rsp_payload_fragment_data[31:0]                   ), //o
    .io_input_rsp_payload_fragment_context     (system_ddr_bmb_upSizer_io_input_rsp_payload_fragment_context                      ), //o
    .io_output_cmd_valid                       (system_ddr_bmb_upSizer_io_output_cmd_valid                                        ), //o
    .io_output_cmd_ready                       (system_ddr_systemLogic_bmbToAxiBridge_io_input_cmd_ready                          ), //i
    .io_output_cmd_payload_last                (system_ddr_bmb_upSizer_io_output_cmd_payload_last                                 ), //o
    .io_output_cmd_payload_fragment_opcode     (system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_opcode                      ), //o
    .io_output_cmd_payload_fragment_address    (system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_address[31:0]               ), //o
    .io_output_cmd_payload_fragment_length     (system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_length[4:0]                 ), //o
    .io_output_cmd_payload_fragment_data       (system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_data[127:0]                 ), //o
    .io_output_cmd_payload_fragment_mask       (system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_mask[15:0]                  ), //o
    .io_output_cmd_payload_fragment_context    (system_ddr_bmb_upSizer_io_output_cmd_payload_fragment_context[5:0]                ), //o
    .io_output_rsp_valid                       (system_ddr_systemLogic_bmbToAxiBridge_io_input_rsp_valid                          ), //i
    .io_output_rsp_ready                       (system_ddr_bmb_upSizer_io_output_rsp_ready                                        ), //o
    .io_output_rsp_payload_last                (system_ddr_systemLogic_bmbToAxiBridge_io_input_rsp_payload_last                   ), //i
    .io_output_rsp_payload_fragment_opcode     (system_ddr_systemLogic_bmbToAxiBridge_io_input_rsp_payload_fragment_opcode        ), //i
    .io_output_rsp_payload_fragment_data       (system_ddr_systemLogic_bmbToAxiBridge_io_input_rsp_payload_fragment_data[127:0]   ), //i
    .io_output_rsp_payload_fragment_context    (system_ddr_systemLogic_bmbToAxiBridge_io_input_rsp_payload_fragment_context[5:0]  ), //i
    .io_systemClk                              (io_systemClk                                                                      ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                                                        )  //i
  );
  Apb3SpiXdrMasterCtrl_e12a9decc0704226832aec4017b36e8d system_spi_0_io_logic (
    .io_apb_PADDR                  (_zz_100[7:0]                                     ), //i
    .io_apb_PSEL                   (apb3Router_1_io_outputs_3_PSEL                   ), //i
    .io_apb_PENABLE                (apb3Router_1_io_outputs_3_PENABLE                ), //i
    .io_apb_PREADY                 (system_spi_0_io_logic_io_apb_PREADY              ), //o
    .io_apb_PWRITE                 (apb3Router_1_io_outputs_3_PWRITE                 ), //i
    .io_apb_PWDATA                 (apb3Router_1_io_outputs_3_PWDATA[31:0]           ), //i
    .io_apb_PRDATA                 (system_spi_0_io_logic_io_apb_PRDATA[31:0]        ), //o
    .io_spi_sclk_write             (system_spi_0_io_logic_io_spi_sclk_write          ), //o
    .io_spi_data_0_writeEnable     (system_spi_0_io_logic_io_spi_data_0_writeEnable  ), //o
    .io_spi_data_0_read            (system_spi_0_io_data_0_read                      ), //i
    .io_spi_data_0_write           (system_spi_0_io_logic_io_spi_data_0_write        ), //o
    .io_spi_data_1_writeEnable     (system_spi_0_io_logic_io_spi_data_1_writeEnable  ), //o
    .io_spi_data_1_read            (system_spi_0_io_data_1_read                      ), //i
    .io_spi_data_1_write           (system_spi_0_io_logic_io_spi_data_1_write        ), //o
    .io_spi_data_2_writeEnable     (system_spi_0_io_logic_io_spi_data_2_writeEnable  ), //o
    .io_spi_data_2_read            (system_spi_0_io_data_2_read                      ), //i
    .io_spi_data_2_write           (system_spi_0_io_logic_io_spi_data_2_write        ), //o
    .io_spi_data_3_writeEnable     (system_spi_0_io_logic_io_spi_data_3_writeEnable  ), //o
    .io_spi_data_3_read            (system_spi_0_io_data_3_read                      ), //i
    .io_spi_data_3_write           (system_spi_0_io_logic_io_spi_data_3_write        ), //o
    .io_spi_ss                     (system_spi_0_io_logic_io_spi_ss                  ), //o
    .io_interrupt                  (system_spi_0_io_logic_io_interrupt               ), //o
    .io_systemClk                  (io_systemClk                                     ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                       )  //i
  );
  BmbToAxi4SharedBridge_1_e12a9decc0704226832aec4017b36e8d logic_bmbToAxiBridge (
    .io_input_cmd_valid                       (bmb_arbiter_io_output_cmd_valid                                ), //i
    .io_input_cmd_ready                       (logic_bmbToAxiBridge_io_input_cmd_ready                        ), //o
    .io_input_cmd_payload_last                (bmb_arbiter_io_output_cmd_payload_last                         ), //i
    .io_input_cmd_payload_fragment_source     (bmb_arbiter_io_output_cmd_payload_fragment_source              ), //i
    .io_input_cmd_payload_fragment_opcode     (bmb_arbiter_io_output_cmd_payload_fragment_opcode              ), //i
    .io_input_cmd_payload_fragment_address    (bmb_arbiter_io_output_cmd_payload_fragment_address[31:0]       ), //i
    .io_input_cmd_payload_fragment_length     (bmb_arbiter_io_output_cmd_payload_fragment_length[4:0]         ), //i
    .io_input_cmd_payload_fragment_data       (bmb_arbiter_io_output_cmd_payload_fragment_data[31:0]          ), //i
    .io_input_cmd_payload_fragment_mask       (bmb_arbiter_io_output_cmd_payload_fragment_mask[3:0]           ), //i
    .io_input_cmd_payload_fragment_context    (bmb_arbiter_io_output_cmd_payload_fragment_context             ), //i
    .io_input_rsp_valid                       (logic_bmbToAxiBridge_io_input_rsp_valid                        ), //o
    .io_input_rsp_ready                       (bmb_arbiter_io_output_rsp_ready                                ), //i
    .io_input_rsp_payload_last                (logic_bmbToAxiBridge_io_input_rsp_payload_last                 ), //o
    .io_input_rsp_payload_fragment_source     (logic_bmbToAxiBridge_io_input_rsp_payload_fragment_source      ), //o
    .io_input_rsp_payload_fragment_opcode     (logic_bmbToAxiBridge_io_input_rsp_payload_fragment_opcode      ), //o
    .io_input_rsp_payload_fragment_data       (logic_bmbToAxiBridge_io_input_rsp_payload_fragment_data[31:0]  ), //o
    .io_input_rsp_payload_fragment_context    (logic_bmbToAxiBridge_io_input_rsp_payload_fragment_context     ), //o
    .io_output_arw_valid                      (logic_bmbToAxiBridge_io_output_arw_valid                       ), //o
    .io_output_arw_ready                      (_zz_101                                                        ), //i
    .io_output_arw_payload_addr               (logic_bmbToAxiBridge_io_output_arw_payload_addr[31:0]          ), //o
    .io_output_arw_payload_len                (logic_bmbToAxiBridge_io_output_arw_payload_len[7:0]            ), //o
    .io_output_arw_payload_size               (logic_bmbToAxiBridge_io_output_arw_payload_size[2:0]           ), //o
    .io_output_arw_payload_cache              (logic_bmbToAxiBridge_io_output_arw_payload_cache[3:0]          ), //o
    .io_output_arw_payload_prot               (logic_bmbToAxiBridge_io_output_arw_payload_prot[2:0]           ), //o
    .io_output_arw_payload_write              (logic_bmbToAxiBridge_io_output_arw_payload_write               ), //o
    .io_output_w_valid                        (logic_bmbToAxiBridge_io_output_w_valid                         ), //o
    .io_output_w_ready                        (axiA_wready                                                    ), //i
    .io_output_w_payload_data                 (logic_bmbToAxiBridge_io_output_w_payload_data[31:0]            ), //o
    .io_output_w_payload_strb                 (logic_bmbToAxiBridge_io_output_w_payload_strb[3:0]             ), //o
    .io_output_w_payload_last                 (logic_bmbToAxiBridge_io_output_w_payload_last                  ), //o
    .io_output_b_valid                        (axiA_bvalid                                                    ), //i
    .io_output_b_ready                        (logic_bmbToAxiBridge_io_output_b_ready                         ), //o
    .io_output_b_payload_resp                 (axiA_bresp[1:0]                                                ), //i
    .io_output_r_valid                        (axiA_rvalid                                                    ), //i
    .io_output_r_ready                        (logic_bmbToAxiBridge_io_output_r_ready                         ), //o
    .io_output_r_payload_data                 (axiA_rdata[31:0]                                               ), //i
    .io_output_r_payload_resp                 (axiA_rresp[1:0]                                                ), //i
    .io_output_r_payload_last                 (axiA_rlast                                                     ), //i
    .io_systemClk                             (io_systemClk                                                   ), //i
    .systemCd_logic_outputReset               (systemCd_logic_outputReset                                     )  //i
  );
  BmbArbiter_1_e12a9decc0704226832aec4017b36e8d bmb_arbiter (
    .io_inputs_0_cmd_valid                       (system_bridge_bmb_decoder_io_outputs_3_cmd_valid                           ), //i
    .io_inputs_0_cmd_ready                       (bmb_arbiter_io_inputs_0_cmd_ready                                          ), //o
    .io_inputs_0_cmd_payload_last                (system_bridge_bmb_decoder_io_outputs_3_cmd_payload_last                    ), //i
    .io_inputs_0_cmd_payload_fragment_source     (system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_source         ), //i
    .io_inputs_0_cmd_payload_fragment_opcode     (system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_opcode         ), //i
    .io_inputs_0_cmd_payload_fragment_address    (system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_address[31:0]  ), //i
    .io_inputs_0_cmd_payload_fragment_length     (system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_length[4:0]    ), //i
    .io_inputs_0_cmd_payload_fragment_data       (system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_data[31:0]     ), //i
    .io_inputs_0_cmd_payload_fragment_mask       (system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_mask[3:0]      ), //i
    .io_inputs_0_cmd_payload_fragment_context    (system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_context        ), //i
    .io_inputs_0_rsp_valid                       (bmb_arbiter_io_inputs_0_rsp_valid                                          ), //o
    .io_inputs_0_rsp_ready                       (system_bridge_bmb_decoder_io_outputs_3_rsp_ready                           ), //i
    .io_inputs_0_rsp_payload_last                (bmb_arbiter_io_inputs_0_rsp_payload_last                                   ), //o
    .io_inputs_0_rsp_payload_fragment_source     (bmb_arbiter_io_inputs_0_rsp_payload_fragment_source                        ), //o
    .io_inputs_0_rsp_payload_fragment_opcode     (bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode                        ), //o
    .io_inputs_0_rsp_payload_fragment_data       (bmb_arbiter_io_inputs_0_rsp_payload_fragment_data[31:0]                    ), //o
    .io_inputs_0_rsp_payload_fragment_context    (bmb_arbiter_io_inputs_0_rsp_payload_fragment_context                       ), //o
    .io_output_cmd_valid                         (bmb_arbiter_io_output_cmd_valid                                            ), //o
    .io_output_cmd_ready                         (logic_bmbToAxiBridge_io_input_cmd_ready                                    ), //i
    .io_output_cmd_payload_last                  (bmb_arbiter_io_output_cmd_payload_last                                     ), //o
    .io_output_cmd_payload_fragment_source       (bmb_arbiter_io_output_cmd_payload_fragment_source                          ), //o
    .io_output_cmd_payload_fragment_opcode       (bmb_arbiter_io_output_cmd_payload_fragment_opcode                          ), //o
    .io_output_cmd_payload_fragment_address      (bmb_arbiter_io_output_cmd_payload_fragment_address[31:0]                   ), //o
    .io_output_cmd_payload_fragment_length       (bmb_arbiter_io_output_cmd_payload_fragment_length[4:0]                     ), //o
    .io_output_cmd_payload_fragment_data         (bmb_arbiter_io_output_cmd_payload_fragment_data[31:0]                      ), //o
    .io_output_cmd_payload_fragment_mask         (bmb_arbiter_io_output_cmd_payload_fragment_mask[3:0]                       ), //o
    .io_output_cmd_payload_fragment_context      (bmb_arbiter_io_output_cmd_payload_fragment_context                         ), //o
    .io_output_rsp_valid                         (logic_bmbToAxiBridge_io_input_rsp_valid                                    ), //i
    .io_output_rsp_ready                         (bmb_arbiter_io_output_rsp_ready                                            ), //o
    .io_output_rsp_payload_last                  (logic_bmbToAxiBridge_io_input_rsp_payload_last                             ), //i
    .io_output_rsp_payload_fragment_source       (logic_bmbToAxiBridge_io_input_rsp_payload_fragment_source                  ), //i
    .io_output_rsp_payload_fragment_opcode       (logic_bmbToAxiBridge_io_input_rsp_payload_fragment_opcode                  ), //i
    .io_output_rsp_payload_fragment_data         (logic_bmbToAxiBridge_io_input_rsp_payload_fragment_data[31:0]              ), //i
    .io_output_rsp_payload_fragment_context      (logic_bmbToAxiBridge_io_input_rsp_payload_fragment_context                 )  //i
  );
  BufferCC_28_e12a9decc0704226832aec4017b36e8d bufferCC_32 (
    .io_initial               (_zz_102                 ), //i
    .io_dataIn                (_zz_103                 ), //i
    .io_dataOut               (bufferCC_32_io_dataOut  ), //o
    .io_memoryClk             (io_memoryClk            ), //i
    .system_cpu_debugReset    (system_cpu_debugReset   )  //i
  );
  BmbOnChipRam_e12a9decc0704226832aec4017b36e8d system_ramA_logic (
    .io_bus_cmd_valid                       (system_ramA_bmb_burstUnburstifier_io_output_cmd_valid                           ), //i
    .io_bus_cmd_ready                       (system_ramA_logic_io_bus_cmd_ready                                              ), //o
    .io_bus_cmd_payload_last                (system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_last                    ), //i
    .io_bus_cmd_payload_fragment_source     (system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_source         ), //i
    .io_bus_cmd_payload_fragment_opcode     (system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_opcode         ), //i
    .io_bus_cmd_payload_fragment_address    (system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_address[11:0]  ), //i
    .io_bus_cmd_payload_fragment_length     (system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_length[1:0]    ), //i
    .io_bus_cmd_payload_fragment_data       (system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_data[31:0]     ), //i
    .io_bus_cmd_payload_fragment_mask       (system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_mask[3:0]      ), //i
    .io_bus_cmd_payload_fragment_context    (system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_context[2:0]   ), //i
    .io_bus_rsp_valid                       (system_ramA_logic_io_bus_rsp_valid                                              ), //o
    .io_bus_rsp_ready                       (system_ramA_bmb_burstUnburstifier_io_output_rsp_ready                           ), //i
    .io_bus_rsp_payload_last                (system_ramA_logic_io_bus_rsp_payload_last                                       ), //o
    .io_bus_rsp_payload_fragment_source     (system_ramA_logic_io_bus_rsp_payload_fragment_source                            ), //o
    .io_bus_rsp_payload_fragment_opcode     (system_ramA_logic_io_bus_rsp_payload_fragment_opcode                            ), //o
    .io_bus_rsp_payload_fragment_data       (system_ramA_logic_io_bus_rsp_payload_fragment_data[31:0]                        ), //o
    .io_bus_rsp_payload_fragment_context    (system_ramA_logic_io_bus_rsp_payload_fragment_context[2:0]                      ), //o
    .io_systemClk                           (io_systemClk                                                                    ), //i
    .systemCd_logic_outputReset             (systemCd_logic_outputReset                                                      )  //i
  );
  BmbArbiter_3_e12a9decc0704226832aec4017b36e8d system_ramA_bmb_arbiter (
    .io_inputs_0_cmd_valid                       (system_bridge_bmb_decoder_io_outputs_0_cmd_valid                            ), //i
    .io_inputs_0_cmd_ready                       (system_ramA_bmb_arbiter_io_inputs_0_cmd_ready                               ), //o
    .io_inputs_0_cmd_payload_last                (system_bridge_bmb_decoder_io_outputs_0_cmd_payload_last                     ), //i
    .io_inputs_0_cmd_payload_fragment_source     (system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_source          ), //i
    .io_inputs_0_cmd_payload_fragment_opcode     (system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_opcode          ), //i
    .io_inputs_0_cmd_payload_fragment_address    (_zz_104[11:0]                                                               ), //i
    .io_inputs_0_cmd_payload_fragment_length     (system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_length[4:0]     ), //i
    .io_inputs_0_cmd_payload_fragment_data       (system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_data[31:0]      ), //i
    .io_inputs_0_cmd_payload_fragment_mask       (system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_mask[3:0]       ), //i
    .io_inputs_0_cmd_payload_fragment_context    (system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_context         ), //i
    .io_inputs_0_rsp_valid                       (system_ramA_bmb_arbiter_io_inputs_0_rsp_valid                               ), //o
    .io_inputs_0_rsp_ready                       (system_bridge_bmb_decoder_io_outputs_0_rsp_ready                            ), //i
    .io_inputs_0_rsp_payload_last                (system_ramA_bmb_arbiter_io_inputs_0_rsp_payload_last                        ), //o
    .io_inputs_0_rsp_payload_fragment_source     (system_ramA_bmb_arbiter_io_inputs_0_rsp_payload_fragment_source             ), //o
    .io_inputs_0_rsp_payload_fragment_opcode     (system_ramA_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode             ), //o
    .io_inputs_0_rsp_payload_fragment_data       (system_ramA_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data[31:0]         ), //o
    .io_inputs_0_rsp_payload_fragment_context    (system_ramA_bmb_arbiter_io_inputs_0_rsp_payload_fragment_context            ), //o
    .io_output_cmd_valid                         (system_ramA_bmb_arbiter_io_output_cmd_valid                                 ), //o
    .io_output_cmd_ready                         (system_ramA_bmb_burstUnburstifier_io_input_cmd_ready                        ), //i
    .io_output_cmd_payload_last                  (system_ramA_bmb_arbiter_io_output_cmd_payload_last                          ), //o
    .io_output_cmd_payload_fragment_source       (system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_source               ), //o
    .io_output_cmd_payload_fragment_opcode       (system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_opcode               ), //o
    .io_output_cmd_payload_fragment_address      (system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_address[11:0]        ), //o
    .io_output_cmd_payload_fragment_length       (system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_length[4:0]          ), //o
    .io_output_cmd_payload_fragment_data         (system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_data[31:0]           ), //o
    .io_output_cmd_payload_fragment_mask         (system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_mask[3:0]            ), //o
    .io_output_cmd_payload_fragment_context      (system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_context              ), //o
    .io_output_rsp_valid                         (system_ramA_bmb_burstUnburstifier_io_input_rsp_valid                        ), //i
    .io_output_rsp_ready                         (system_ramA_bmb_arbiter_io_output_rsp_ready                                 ), //o
    .io_output_rsp_payload_last                  (system_ramA_bmb_burstUnburstifier_io_input_rsp_payload_last                 ), //i
    .io_output_rsp_payload_fragment_source       (system_ramA_bmb_burstUnburstifier_io_input_rsp_payload_fragment_source      ), //i
    .io_output_rsp_payload_fragment_opcode       (system_ramA_bmb_burstUnburstifier_io_input_rsp_payload_fragment_opcode      ), //i
    .io_output_rsp_payload_fragment_data         (system_ramA_bmb_burstUnburstifier_io_input_rsp_payload_fragment_data[31:0]  ), //i
    .io_output_rsp_payload_fragment_context      (system_ramA_bmb_burstUnburstifier_io_input_rsp_payload_fragment_context     )  //i
  );
  BmbUnburstify_e12a9decc0704226832aec4017b36e8d system_ramA_bmb_burstUnburstifier (
    .io_input_cmd_valid                        (system_ramA_bmb_arbiter_io_output_cmd_valid                                     ), //i
    .io_input_cmd_ready                        (system_ramA_bmb_burstUnburstifier_io_input_cmd_ready                            ), //o
    .io_input_cmd_payload_last                 (system_ramA_bmb_arbiter_io_output_cmd_payload_last                              ), //i
    .io_input_cmd_payload_fragment_source      (system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_source                   ), //i
    .io_input_cmd_payload_fragment_opcode      (system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_opcode                   ), //i
    .io_input_cmd_payload_fragment_address     (system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_address[11:0]            ), //i
    .io_input_cmd_payload_fragment_length      (system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_length[4:0]              ), //i
    .io_input_cmd_payload_fragment_data        (system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_data[31:0]               ), //i
    .io_input_cmd_payload_fragment_mask        (system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_mask[3:0]                ), //i
    .io_input_cmd_payload_fragment_context     (system_ramA_bmb_arbiter_io_output_cmd_payload_fragment_context                  ), //i
    .io_input_rsp_valid                        (system_ramA_bmb_burstUnburstifier_io_input_rsp_valid                            ), //o
    .io_input_rsp_ready                        (system_ramA_bmb_arbiter_io_output_rsp_ready                                     ), //i
    .io_input_rsp_payload_last                 (system_ramA_bmb_burstUnburstifier_io_input_rsp_payload_last                     ), //o
    .io_input_rsp_payload_fragment_source      (system_ramA_bmb_burstUnburstifier_io_input_rsp_payload_fragment_source          ), //o
    .io_input_rsp_payload_fragment_opcode      (system_ramA_bmb_burstUnburstifier_io_input_rsp_payload_fragment_opcode          ), //o
    .io_input_rsp_payload_fragment_data        (system_ramA_bmb_burstUnburstifier_io_input_rsp_payload_fragment_data[31:0]      ), //o
    .io_input_rsp_payload_fragment_context     (system_ramA_bmb_burstUnburstifier_io_input_rsp_payload_fragment_context         ), //o
    .io_output_cmd_valid                       (system_ramA_bmb_burstUnburstifier_io_output_cmd_valid                           ), //o
    .io_output_cmd_ready                       (system_ramA_logic_io_bus_cmd_ready                                              ), //i
    .io_output_cmd_payload_last                (system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_last                    ), //o
    .io_output_cmd_payload_fragment_source     (system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_source         ), //o
    .io_output_cmd_payload_fragment_opcode     (system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_opcode         ), //o
    .io_output_cmd_payload_fragment_address    (system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_address[11:0]  ), //o
    .io_output_cmd_payload_fragment_length     (system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_length[1:0]    ), //o
    .io_output_cmd_payload_fragment_data       (system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_data[31:0]     ), //o
    .io_output_cmd_payload_fragment_mask       (system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_mask[3:0]      ), //o
    .io_output_cmd_payload_fragment_context    (system_ramA_bmb_burstUnburstifier_io_output_cmd_payload_fragment_context[2:0]   ), //o
    .io_output_rsp_valid                       (system_ramA_logic_io_bus_rsp_valid                                              ), //i
    .io_output_rsp_ready                       (system_ramA_bmb_burstUnburstifier_io_output_rsp_ready                           ), //o
    .io_output_rsp_payload_last                (system_ramA_logic_io_bus_rsp_payload_last                                       ), //i
    .io_output_rsp_payload_fragment_source     (system_ramA_logic_io_bus_rsp_payload_fragment_source                            ), //i
    .io_output_rsp_payload_fragment_opcode     (system_ramA_logic_io_bus_rsp_payload_fragment_opcode                            ), //i
    .io_output_rsp_payload_fragment_data       (system_ramA_logic_io_bus_rsp_payload_fragment_data[31:0]                        ), //i
    .io_output_rsp_payload_fragment_context    (system_ramA_logic_io_bus_rsp_payload_fragment_context[2:0]                      ), //i
    .io_systemClk                              (io_systemClk                                                                    ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                                                      )  //i
  );
  BmbDecoder_2_e12a9decc0704226832aec4017b36e8d system_bridge_bmb_decoder (
    .io_input_cmd_valid                           (system_bridge_bmb_cmd_m2sPipe_valid                                                ), //i
    .io_input_cmd_ready                           (system_bridge_bmb_decoder_io_input_cmd_ready                                       ), //o
    .io_input_cmd_payload_last                    (system_bridge_bmb_cmd_m2sPipe_payload_last                                         ), //i
    .io_input_cmd_payload_fragment_source         (system_bridge_bmb_cmd_m2sPipe_payload_fragment_source                              ), //i
    .io_input_cmd_payload_fragment_opcode         (system_bridge_bmb_cmd_m2sPipe_payload_fragment_opcode                              ), //i
    .io_input_cmd_payload_fragment_address        (system_bridge_bmb_cmd_m2sPipe_payload_fragment_address[31:0]                       ), //i
    .io_input_cmd_payload_fragment_length         (system_bridge_bmb_cmd_m2sPipe_payload_fragment_length[4:0]                         ), //i
    .io_input_cmd_payload_fragment_data           (system_bridge_bmb_cmd_m2sPipe_payload_fragment_data[31:0]                          ), //i
    .io_input_cmd_payload_fragment_mask           (system_bridge_bmb_cmd_m2sPipe_payload_fragment_mask[3:0]                           ), //i
    .io_input_cmd_payload_fragment_context        (system_bridge_bmb_cmd_m2sPipe_payload_fragment_context                             ), //i
    .io_input_rsp_valid                           (system_bridge_bmb_decoder_io_input_rsp_valid                                       ), //o
    .io_input_rsp_ready                           (system_bridge_bmb_rsp_ready                                                        ), //i
    .io_input_rsp_payload_last                    (system_bridge_bmb_decoder_io_input_rsp_payload_last                                ), //o
    .io_input_rsp_payload_fragment_source         (system_bridge_bmb_decoder_io_input_rsp_payload_fragment_source                     ), //o
    .io_input_rsp_payload_fragment_opcode         (system_bridge_bmb_decoder_io_input_rsp_payload_fragment_opcode                     ), //o
    .io_input_rsp_payload_fragment_data           (system_bridge_bmb_decoder_io_input_rsp_payload_fragment_data[31:0]                 ), //o
    .io_input_rsp_payload_fragment_context        (system_bridge_bmb_decoder_io_input_rsp_payload_fragment_context                    ), //o
    .io_outputs_0_cmd_valid                       (system_bridge_bmb_decoder_io_outputs_0_cmd_valid                                   ), //o
    .io_outputs_0_cmd_ready                       (system_ramA_bmb_arbiter_io_inputs_0_cmd_ready                                      ), //i
    .io_outputs_0_cmd_payload_last                (system_bridge_bmb_decoder_io_outputs_0_cmd_payload_last                            ), //o
    .io_outputs_0_cmd_payload_fragment_source     (system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_source                 ), //o
    .io_outputs_0_cmd_payload_fragment_opcode     (system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_opcode                 ), //o
    .io_outputs_0_cmd_payload_fragment_address    (system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_address[31:0]          ), //o
    .io_outputs_0_cmd_payload_fragment_length     (system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_length[4:0]            ), //o
    .io_outputs_0_cmd_payload_fragment_data       (system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_data[31:0]             ), //o
    .io_outputs_0_cmd_payload_fragment_mask       (system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_mask[3:0]              ), //o
    .io_outputs_0_cmd_payload_fragment_context    (system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_context                ), //o
    .io_outputs_0_rsp_valid                       (system_ramA_bmb_arbiter_io_inputs_0_rsp_valid                                      ), //i
    .io_outputs_0_rsp_ready                       (system_bridge_bmb_decoder_io_outputs_0_rsp_ready                                   ), //o
    .io_outputs_0_rsp_payload_last                (system_ramA_bmb_arbiter_io_inputs_0_rsp_payload_last                               ), //i
    .io_outputs_0_rsp_payload_fragment_source     (system_ramA_bmb_arbiter_io_inputs_0_rsp_payload_fragment_source                    ), //i
    .io_outputs_0_rsp_payload_fragment_opcode     (system_ramA_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode                    ), //i
    .io_outputs_0_rsp_payload_fragment_data       (system_ramA_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data[31:0]                ), //i
    .io_outputs_0_rsp_payload_fragment_context    (system_ramA_bmb_arbiter_io_inputs_0_rsp_payload_fragment_context                   ), //i
    .io_outputs_1_cmd_valid                       (system_bridge_bmb_decoder_io_outputs_1_cmd_valid                                   ), //o
    .io_outputs_1_cmd_ready                       (system_peripheralBridge_input_arbiter_io_inputs_0_cmd_ready                        ), //i
    .io_outputs_1_cmd_payload_last                (system_bridge_bmb_decoder_io_outputs_1_cmd_payload_last                            ), //o
    .io_outputs_1_cmd_payload_fragment_source     (system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_source                 ), //o
    .io_outputs_1_cmd_payload_fragment_opcode     (system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_opcode                 ), //o
    .io_outputs_1_cmd_payload_fragment_address    (system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_address[31:0]          ), //o
    .io_outputs_1_cmd_payload_fragment_length     (system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_length[4:0]            ), //o
    .io_outputs_1_cmd_payload_fragment_data       (system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_data[31:0]             ), //o
    .io_outputs_1_cmd_payload_fragment_mask       (system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_mask[3:0]              ), //o
    .io_outputs_1_cmd_payload_fragment_context    (system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_context                ), //o
    .io_outputs_1_rsp_valid                       (system_peripheralBridge_input_arbiter_io_inputs_0_rsp_valid                        ), //i
    .io_outputs_1_rsp_ready                       (system_bridge_bmb_decoder_io_outputs_1_rsp_ready                                   ), //o
    .io_outputs_1_rsp_payload_last                (system_peripheralBridge_input_arbiter_io_inputs_0_rsp_payload_last                 ), //i
    .io_outputs_1_rsp_payload_fragment_source     (system_peripheralBridge_input_arbiter_io_inputs_0_rsp_payload_fragment_source      ), //i
    .io_outputs_1_rsp_payload_fragment_opcode     (system_peripheralBridge_input_arbiter_io_inputs_0_rsp_payload_fragment_opcode      ), //i
    .io_outputs_1_rsp_payload_fragment_data       (system_peripheralBridge_input_arbiter_io_inputs_0_rsp_payload_fragment_data[31:0]  ), //i
    .io_outputs_1_rsp_payload_fragment_context    (system_peripheralBridge_input_arbiter_io_inputs_0_rsp_payload_fragment_context     ), //i
    .io_outputs_2_cmd_valid                       (system_bridge_bmb_decoder_io_outputs_2_cmd_valid                                   ), //o
    .io_outputs_2_cmd_ready                       (system_ddr_bmb_arbiter_io_inputs_0_cmd_ready                                       ), //i
    .io_outputs_2_cmd_payload_last                (system_bridge_bmb_decoder_io_outputs_2_cmd_payload_last                            ), //o
    .io_outputs_2_cmd_payload_fragment_source     (system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_source                 ), //o
    .io_outputs_2_cmd_payload_fragment_opcode     (system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_opcode                 ), //o
    .io_outputs_2_cmd_payload_fragment_address    (system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_address[31:0]          ), //o
    .io_outputs_2_cmd_payload_fragment_length     (system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_length[4:0]            ), //o
    .io_outputs_2_cmd_payload_fragment_data       (system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_data[31:0]             ), //o
    .io_outputs_2_cmd_payload_fragment_mask       (system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_mask[3:0]              ), //o
    .io_outputs_2_cmd_payload_fragment_context    (system_bridge_bmb_decoder_io_outputs_2_cmd_payload_fragment_context                ), //o
    .io_outputs_2_rsp_valid                       (system_ddr_bmb_arbiter_io_inputs_0_rsp_valid                                       ), //i
    .io_outputs_2_rsp_ready                       (system_bridge_bmb_decoder_io_outputs_2_rsp_ready                                   ), //o
    .io_outputs_2_rsp_payload_last                (system_ddr_bmb_arbiter_io_inputs_0_rsp_payload_last                                ), //i
    .io_outputs_2_rsp_payload_fragment_source     (system_ddr_bmb_arbiter_io_inputs_0_rsp_payload_fragment_source                     ), //i
    .io_outputs_2_rsp_payload_fragment_opcode     (system_ddr_bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode                     ), //i
    .io_outputs_2_rsp_payload_fragment_data       (system_ddr_bmb_arbiter_io_inputs_0_rsp_payload_fragment_data[31:0]                 ), //i
    .io_outputs_2_rsp_payload_fragment_context    (system_ddr_bmb_arbiter_io_inputs_0_rsp_payload_fragment_context                    ), //i
    .io_outputs_3_cmd_valid                       (system_bridge_bmb_decoder_io_outputs_3_cmd_valid                                   ), //o
    .io_outputs_3_cmd_ready                       (bmb_arbiter_io_inputs_0_cmd_ready                                                  ), //i
    .io_outputs_3_cmd_payload_last                (system_bridge_bmb_decoder_io_outputs_3_cmd_payload_last                            ), //o
    .io_outputs_3_cmd_payload_fragment_source     (system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_source                 ), //o
    .io_outputs_3_cmd_payload_fragment_opcode     (system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_opcode                 ), //o
    .io_outputs_3_cmd_payload_fragment_address    (system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_address[31:0]          ), //o
    .io_outputs_3_cmd_payload_fragment_length     (system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_length[4:0]            ), //o
    .io_outputs_3_cmd_payload_fragment_data       (system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_data[31:0]             ), //o
    .io_outputs_3_cmd_payload_fragment_mask       (system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_mask[3:0]              ), //o
    .io_outputs_3_cmd_payload_fragment_context    (system_bridge_bmb_decoder_io_outputs_3_cmd_payload_fragment_context                ), //o
    .io_outputs_3_rsp_valid                       (bmb_arbiter_io_inputs_0_rsp_valid                                                  ), //i
    .io_outputs_3_rsp_ready                       (system_bridge_bmb_decoder_io_outputs_3_rsp_ready                                   ), //o
    .io_outputs_3_rsp_payload_last                (bmb_arbiter_io_inputs_0_rsp_payload_last                                           ), //i
    .io_outputs_3_rsp_payload_fragment_source     (bmb_arbiter_io_inputs_0_rsp_payload_fragment_source                                ), //i
    .io_outputs_3_rsp_payload_fragment_opcode     (bmb_arbiter_io_inputs_0_rsp_payload_fragment_opcode                                ), //i
    .io_outputs_3_rsp_payload_fragment_data       (bmb_arbiter_io_inputs_0_rsp_payload_fragment_data[31:0]                            ), //i
    .io_outputs_3_rsp_payload_fragment_context    (bmb_arbiter_io_inputs_0_rsp_payload_fragment_context                               ), //i
    .io_systemClk                                 (io_systemClk                                                                       ), //i
    .systemCd_logic_outputReset                   (systemCd_logic_outputReset                                                         )  //i
  );
  Apb3Decoder_e12a9decc0704226832aec4017b36e8d system_apbDecoder_input_decoder (
    .io_input_PADDR         (system_apbDecoder_input_PADDR[23:0]                     ), //i
    .io_input_PSEL          (system_apbDecoder_input_PSEL                            ), //i
    .io_input_PENABLE       (system_apbDecoder_input_PENABLE                         ), //i
    .io_input_PREADY        (system_apbDecoder_input_decoder_io_input_PREADY         ), //o
    .io_input_PWRITE        (system_apbDecoder_input_PWRITE                          ), //i
    .io_input_PWDATA        (system_apbDecoder_input_PWDATA[31:0]                    ), //i
    .io_input_PRDATA        (system_apbDecoder_input_decoder_io_input_PRDATA[31:0]   ), //o
    .io_input_PSLVERROR     (system_apbDecoder_input_decoder_io_input_PSLVERROR      ), //o
    .io_output_PADDR        (system_apbDecoder_input_decoder_io_output_PADDR[23:0]   ), //o
    .io_output_PSEL         (system_apbDecoder_input_decoder_io_output_PSEL[6:0]     ), //o
    .io_output_PENABLE      (system_apbDecoder_input_decoder_io_output_PENABLE       ), //o
    .io_output_PREADY       (apb3Router_1_io_input_PREADY                            ), //i
    .io_output_PWRITE       (system_apbDecoder_input_decoder_io_output_PWRITE        ), //o
    .io_output_PWDATA       (system_apbDecoder_input_decoder_io_output_PWDATA[31:0]  ), //o
    .io_output_PRDATA       (apb3Router_1_io_input_PRDATA[31:0]                      ), //i
    .io_output_PSLVERROR    (apb3Router_1_io_input_PSLVERROR                         )  //i
  );
  Apb3Router_e12a9decc0704226832aec4017b36e8d apb3Router_1 (
    .io_input_PADDR                (system_apbDecoder_input_decoder_io_output_PADDR[23:0]   ), //i
    .io_input_PSEL                 (system_apbDecoder_input_decoder_io_output_PSEL[6:0]     ), //i
    .io_input_PENABLE              (system_apbDecoder_input_decoder_io_output_PENABLE       ), //i
    .io_input_PREADY               (apb3Router_1_io_input_PREADY                            ), //o
    .io_input_PWRITE               (system_apbDecoder_input_decoder_io_output_PWRITE        ), //i
    .io_input_PWDATA               (system_apbDecoder_input_decoder_io_output_PWDATA[31:0]  ), //i
    .io_input_PRDATA               (apb3Router_1_io_input_PRDATA[31:0]                      ), //o
    .io_input_PSLVERROR            (apb3Router_1_io_input_PSLVERROR                         ), //o
    .io_outputs_0_PADDR            (apb3Router_1_io_outputs_0_PADDR[23:0]                   ), //o
    .io_outputs_0_PSEL             (apb3Router_1_io_outputs_0_PSEL                          ), //o
    .io_outputs_0_PENABLE          (apb3Router_1_io_outputs_0_PENABLE                       ), //o
    .io_outputs_0_PREADY           (system_plic_logic_apb_PREADY                            ), //i
    .io_outputs_0_PWRITE           (apb3Router_1_io_outputs_0_PWRITE                        ), //o
    .io_outputs_0_PWDATA           (apb3Router_1_io_outputs_0_PWDATA[31:0]                  ), //o
    .io_outputs_0_PRDATA           (system_plic_logic_apb_PRDATA[31:0]                      ), //i
    .io_outputs_0_PSLVERROR        (system_plic_logic_apb_PSLVERROR                         ), //i
    .io_outputs_1_PADDR            (apb3Router_1_io_outputs_1_PADDR[23:0]                   ), //o
    .io_outputs_1_PSEL             (apb3Router_1_io_outputs_1_PSEL                          ), //o
    .io_outputs_1_PENABLE          (apb3Router_1_io_outputs_1_PENABLE                       ), //o
    .io_outputs_1_PREADY           (system_machineTimer_logic_io_bus_PREADY                 ), //i
    .io_outputs_1_PWRITE           (apb3Router_1_io_outputs_1_PWRITE                        ), //o
    .io_outputs_1_PWDATA           (apb3Router_1_io_outputs_1_PWDATA[31:0]                  ), //o
    .io_outputs_1_PRDATA           (system_machineTimer_logic_io_bus_PRDATA[31:0]           ), //i
    .io_outputs_1_PSLVERROR        (system_machineTimer_logic_io_bus_PSLVERROR              ), //i
    .io_outputs_2_PADDR            (apb3Router_1_io_outputs_2_PADDR[23:0]                   ), //o
    .io_outputs_2_PSEL             (apb3Router_1_io_outputs_2_PSEL                          ), //o
    .io_outputs_2_PENABLE          (apb3Router_1_io_outputs_2_PENABLE                       ), //o
    .io_outputs_2_PREADY           (system_uart_0_io_logic_io_apb_PREADY                    ), //i
    .io_outputs_2_PWRITE           (apb3Router_1_io_outputs_2_PWRITE                        ), //o
    .io_outputs_2_PWDATA           (apb3Router_1_io_outputs_2_PWDATA[31:0]                  ), //o
    .io_outputs_2_PRDATA           (system_uart_0_io_logic_io_apb_PRDATA[31:0]              ), //i
    .io_outputs_2_PSLVERROR        (_zz_105                                                 ), //i
    .io_outputs_3_PADDR            (apb3Router_1_io_outputs_3_PADDR[23:0]                   ), //o
    .io_outputs_3_PSEL             (apb3Router_1_io_outputs_3_PSEL                          ), //o
    .io_outputs_3_PENABLE          (apb3Router_1_io_outputs_3_PENABLE                       ), //o
    .io_outputs_3_PREADY           (system_spi_0_io_logic_io_apb_PREADY                     ), //i
    .io_outputs_3_PWRITE           (apb3Router_1_io_outputs_3_PWRITE                        ), //o
    .io_outputs_3_PWDATA           (apb3Router_1_io_outputs_3_PWDATA[31:0]                  ), //o
    .io_outputs_3_PRDATA           (system_spi_0_io_logic_io_apb_PRDATA[31:0]               ), //i
    .io_outputs_3_PSLVERROR        (_zz_106                                                 ), //i
    .io_outputs_4_PADDR            (apb3Router_1_io_outputs_4_PADDR[23:0]                   ), //o
    .io_outputs_4_PSEL             (apb3Router_1_io_outputs_4_PSEL                          ), //o
    .io_outputs_4_PENABLE          (apb3Router_1_io_outputs_4_PENABLE                       ), //o
    .io_outputs_4_PREADY           (system_i2c_0_io_logic_io_apb_PREADY                     ), //i
    .io_outputs_4_PWRITE           (apb3Router_1_io_outputs_4_PWRITE                        ), //o
    .io_outputs_4_PWDATA           (apb3Router_1_io_outputs_4_PWDATA[31:0]                  ), //o
    .io_outputs_4_PRDATA           (system_i2c_0_io_logic_io_apb_PRDATA[31:0]               ), //i
    .io_outputs_4_PSLVERROR        (_zz_107                                                 ), //i
    .io_outputs_5_PADDR            (apb3Router_1_io_outputs_5_PADDR[23:0]                   ), //o
    .io_outputs_5_PSEL             (apb3Router_1_io_outputs_5_PSEL                          ), //o
    .io_outputs_5_PENABLE          (apb3Router_1_io_outputs_5_PENABLE                       ), //o
    .io_outputs_5_PREADY           (system_gpio_0_io_logic_io_bus_PREADY                    ), //i
    .io_outputs_5_PWRITE           (apb3Router_1_io_outputs_5_PWRITE                        ), //o
    .io_outputs_5_PWDATA           (apb3Router_1_io_outputs_5_PWDATA[31:0]                  ), //o
    .io_outputs_5_PRDATA           (system_gpio_0_io_logic_io_bus_PRDATA[31:0]              ), //i
    .io_outputs_5_PSLVERROR        (system_gpio_0_io_logic_io_bus_PSLVERROR                 ), //i
    .io_outputs_6_PADDR            (apb3Router_1_io_outputs_6_PADDR[23:0]                   ), //o
    .io_outputs_6_PSEL             (apb3Router_1_io_outputs_6_PSEL                          ), //o
    .io_outputs_6_PENABLE          (apb3Router_1_io_outputs_6_PENABLE                       ), //o
    .io_outputs_6_PREADY           (io_apbSlave_0_PREADY                                    ), //i
    .io_outputs_6_PWRITE           (apb3Router_1_io_outputs_6_PWRITE                        ), //o
    .io_outputs_6_PWDATA           (apb3Router_1_io_outputs_6_PWDATA[31:0]                  ), //o
    .io_outputs_6_PRDATA           (io_apbSlave_0_PRDATA[31:0]                              ), //i
    .io_outputs_6_PSLVERROR        (io_apbSlave_0_PSLVERROR                                 ), //i
    .io_systemClk                  (io_systemClk                                            ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                              )  //i
  );
  BmbToApb3Bridge_e12a9decc0704226832aec4017b36e8d system_peripheralBridge_logic_bridge (
    .io_input_cmd_valid                       (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_valid                           ), //i
    .io_input_cmd_ready                       (system_peripheralBridge_logic_bridge_io_input_cmd_ready                                                ), //o
    .io_input_cmd_payload_last                (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_last                    ), //i
    .io_input_cmd_payload_fragment_source     (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_source         ), //i
    .io_input_cmd_payload_fragment_opcode     (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_opcode         ), //i
    .io_input_cmd_payload_fragment_address    (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_address[23:0]  ), //i
    .io_input_cmd_payload_fragment_length     (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_length[1:0]    ), //i
    .io_input_cmd_payload_fragment_data       (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_data[31:0]     ), //i
    .io_input_cmd_payload_fragment_mask       (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_mask[3:0]      ), //i
    .io_input_cmd_payload_fragment_context    (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_context[2:0]   ), //i
    .io_input_rsp_valid                       (system_peripheralBridge_logic_bridge_io_input_rsp_valid                                                ), //o
    .io_input_rsp_ready                       (system_peripheralBridge_input_burstUnburstifier_io_output_rsp_ready                                    ), //i
    .io_input_rsp_payload_last                (system_peripheralBridge_logic_bridge_io_input_rsp_payload_last                                         ), //o
    .io_input_rsp_payload_fragment_source     (system_peripheralBridge_logic_bridge_io_input_rsp_payload_fragment_source                              ), //o
    .io_input_rsp_payload_fragment_opcode     (system_peripheralBridge_logic_bridge_io_input_rsp_payload_fragment_opcode                              ), //o
    .io_input_rsp_payload_fragment_data       (system_peripheralBridge_logic_bridge_io_input_rsp_payload_fragment_data[31:0]                          ), //o
    .io_input_rsp_payload_fragment_context    (system_peripheralBridge_logic_bridge_io_input_rsp_payload_fragment_context[2:0]                        ), //o
    .io_output_PADDR                          (system_peripheralBridge_logic_bridge_io_output_PADDR[23:0]                                             ), //o
    .io_output_PSEL                           (system_peripheralBridge_logic_bridge_io_output_PSEL                                                    ), //o
    .io_output_PENABLE                        (system_peripheralBridge_logic_bridge_io_output_PENABLE                                                 ), //o
    .io_output_PREADY                         (system_apbDecoder_input_PREADY                                                                         ), //i
    .io_output_PWRITE                         (system_peripheralBridge_logic_bridge_io_output_PWRITE                                                  ), //o
    .io_output_PWDATA                         (system_peripheralBridge_logic_bridge_io_output_PWDATA[31:0]                                            ), //o
    .io_output_PRDATA                         (system_apbDecoder_input_PRDATA[31:0]                                                                   ), //i
    .io_output_PSLVERROR                      (system_apbDecoder_input_PSLVERROR                                                                      ), //i
    .io_systemClk                             (io_systemClk                                                                                           ), //i
    .systemCd_logic_outputReset               (systemCd_logic_outputReset                                                                             )  //i
  );
  BmbArbiter_4_e12a9decc0704226832aec4017b36e8d system_peripheralBridge_input_arbiter (
    .io_inputs_0_cmd_valid                       (system_bridge_bmb_decoder_io_outputs_1_cmd_valid                                          ), //i
    .io_inputs_0_cmd_ready                       (system_peripheralBridge_input_arbiter_io_inputs_0_cmd_ready                               ), //o
    .io_inputs_0_cmd_payload_last                (system_bridge_bmb_decoder_io_outputs_1_cmd_payload_last                                   ), //i
    .io_inputs_0_cmd_payload_fragment_source     (system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_source                        ), //i
    .io_inputs_0_cmd_payload_fragment_opcode     (system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_opcode                        ), //i
    .io_inputs_0_cmd_payload_fragment_address    (_zz_108[23:0]                                                                             ), //i
    .io_inputs_0_cmd_payload_fragment_length     (system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_length[4:0]                   ), //i
    .io_inputs_0_cmd_payload_fragment_data       (system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_data[31:0]                    ), //i
    .io_inputs_0_cmd_payload_fragment_mask       (system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_mask[3:0]                     ), //i
    .io_inputs_0_cmd_payload_fragment_context    (system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_context                       ), //i
    .io_inputs_0_rsp_valid                       (system_peripheralBridge_input_arbiter_io_inputs_0_rsp_valid                               ), //o
    .io_inputs_0_rsp_ready                       (system_bridge_bmb_decoder_io_outputs_1_rsp_ready                                          ), //i
    .io_inputs_0_rsp_payload_last                (system_peripheralBridge_input_arbiter_io_inputs_0_rsp_payload_last                        ), //o
    .io_inputs_0_rsp_payload_fragment_source     (system_peripheralBridge_input_arbiter_io_inputs_0_rsp_payload_fragment_source             ), //o
    .io_inputs_0_rsp_payload_fragment_opcode     (system_peripheralBridge_input_arbiter_io_inputs_0_rsp_payload_fragment_opcode             ), //o
    .io_inputs_0_rsp_payload_fragment_data       (system_peripheralBridge_input_arbiter_io_inputs_0_rsp_payload_fragment_data[31:0]         ), //o
    .io_inputs_0_rsp_payload_fragment_context    (system_peripheralBridge_input_arbiter_io_inputs_0_rsp_payload_fragment_context            ), //o
    .io_output_cmd_valid                         (system_peripheralBridge_input_arbiter_io_output_cmd_valid                                 ), //o
    .io_output_cmd_ready                         (system_peripheralBridge_input_burstUnburstifier_io_input_cmd_ready                        ), //i
    .io_output_cmd_payload_last                  (system_peripheralBridge_input_arbiter_io_output_cmd_payload_last                          ), //o
    .io_output_cmd_payload_fragment_source       (system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_source               ), //o
    .io_output_cmd_payload_fragment_opcode       (system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_opcode               ), //o
    .io_output_cmd_payload_fragment_address      (system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_address[23:0]        ), //o
    .io_output_cmd_payload_fragment_length       (system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_length[4:0]          ), //o
    .io_output_cmd_payload_fragment_data         (system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_data[31:0]           ), //o
    .io_output_cmd_payload_fragment_mask         (system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_mask[3:0]            ), //o
    .io_output_cmd_payload_fragment_context      (system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_context              ), //o
    .io_output_rsp_valid                         (system_peripheralBridge_input_burstUnburstifier_io_input_rsp_valid                        ), //i
    .io_output_rsp_ready                         (system_peripheralBridge_input_arbiter_io_output_rsp_ready                                 ), //o
    .io_output_rsp_payload_last                  (system_peripheralBridge_input_burstUnburstifier_io_input_rsp_payload_last                 ), //i
    .io_output_rsp_payload_fragment_source       (system_peripheralBridge_input_burstUnburstifier_io_input_rsp_payload_fragment_source      ), //i
    .io_output_rsp_payload_fragment_opcode       (system_peripheralBridge_input_burstUnburstifier_io_input_rsp_payload_fragment_opcode      ), //i
    .io_output_rsp_payload_fragment_data         (system_peripheralBridge_input_burstUnburstifier_io_input_rsp_payload_fragment_data[31:0]  ), //i
    .io_output_rsp_payload_fragment_context      (system_peripheralBridge_input_burstUnburstifier_io_input_rsp_payload_fragment_context     )  //i
  );
  BmbUnburstify_1_e12a9decc0704226832aec4017b36e8d system_peripheralBridge_input_burstUnburstifier (
    .io_input_cmd_valid                        (system_peripheralBridge_input_arbiter_io_output_cmd_valid                                     ), //i
    .io_input_cmd_ready                        (system_peripheralBridge_input_burstUnburstifier_io_input_cmd_ready                            ), //o
    .io_input_cmd_payload_last                 (system_peripheralBridge_input_arbiter_io_output_cmd_payload_last                              ), //i
    .io_input_cmd_payload_fragment_source      (system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_source                   ), //i
    .io_input_cmd_payload_fragment_opcode      (system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_opcode                   ), //i
    .io_input_cmd_payload_fragment_address     (system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_address[23:0]            ), //i
    .io_input_cmd_payload_fragment_length      (system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_length[4:0]              ), //i
    .io_input_cmd_payload_fragment_data        (system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_data[31:0]               ), //i
    .io_input_cmd_payload_fragment_mask        (system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_mask[3:0]                ), //i
    .io_input_cmd_payload_fragment_context     (system_peripheralBridge_input_arbiter_io_output_cmd_payload_fragment_context                  ), //i
    .io_input_rsp_valid                        (system_peripheralBridge_input_burstUnburstifier_io_input_rsp_valid                            ), //o
    .io_input_rsp_ready                        (system_peripheralBridge_input_arbiter_io_output_rsp_ready                                     ), //i
    .io_input_rsp_payload_last                 (system_peripheralBridge_input_burstUnburstifier_io_input_rsp_payload_last                     ), //o
    .io_input_rsp_payload_fragment_source      (system_peripheralBridge_input_burstUnburstifier_io_input_rsp_payload_fragment_source          ), //o
    .io_input_rsp_payload_fragment_opcode      (system_peripheralBridge_input_burstUnburstifier_io_input_rsp_payload_fragment_opcode          ), //o
    .io_input_rsp_payload_fragment_data        (system_peripheralBridge_input_burstUnburstifier_io_input_rsp_payload_fragment_data[31:0]      ), //o
    .io_input_rsp_payload_fragment_context     (system_peripheralBridge_input_burstUnburstifier_io_input_rsp_payload_fragment_context         ), //o
    .io_output_cmd_valid                       (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_valid                           ), //o
    .io_output_cmd_ready                       (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_ready             ), //i
    .io_output_cmd_payload_last                (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_last                    ), //o
    .io_output_cmd_payload_fragment_source     (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_source         ), //o
    .io_output_cmd_payload_fragment_opcode     (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_opcode         ), //o
    .io_output_cmd_payload_fragment_address    (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_address[23:0]  ), //o
    .io_output_cmd_payload_fragment_length     (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_length[1:0]    ), //o
    .io_output_cmd_payload_fragment_data       (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_data[31:0]     ), //o
    .io_output_cmd_payload_fragment_mask       (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_mask[3:0]      ), //o
    .io_output_cmd_payload_fragment_context    (system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_context[2:0]   ), //o
    .io_output_rsp_valid                       (system_peripheralBridge_logic_bridge_io_input_rsp_valid                                       ), //i
    .io_output_rsp_ready                       (system_peripheralBridge_input_burstUnburstifier_io_output_rsp_ready                           ), //o
    .io_output_rsp_payload_last                (system_peripheralBridge_logic_bridge_io_input_rsp_payload_last                                ), //i
    .io_output_rsp_payload_fragment_source     (system_peripheralBridge_logic_bridge_io_input_rsp_payload_fragment_source                     ), //i
    .io_output_rsp_payload_fragment_opcode     (system_peripheralBridge_logic_bridge_io_input_rsp_payload_fragment_opcode                     ), //i
    .io_output_rsp_payload_fragment_data       (system_peripheralBridge_logic_bridge_io_input_rsp_payload_fragment_data[31:0]                 ), //i
    .io_output_rsp_payload_fragment_context    (system_peripheralBridge_logic_bridge_io_input_rsp_payload_fragment_context[2:0]               ), //i
    .io_systemClk                              (io_systemClk                                                                                  ), //i
    .systemCd_logic_outputReset                (systemCd_logic_outputReset                                                                    )  //i
  );
  always @ (*) begin
    debugCd_logic_inputResetTrigger = 1'b0;
    if(debugCd_logic_inputResetAdapter_stuff_syncTrigger)begin
      debugCd_logic_inputResetTrigger = 1'b1;
    end
  end

  always @ (*) begin
    debugCd_logic_outputResetUnbuffered = 1'b0;
    if(_zz_110)begin
      debugCd_logic_outputResetUnbuffered = 1'b1;
    end
  end

  always @ (*) begin
    ddrCd_logic_inputResetTrigger = 1'b0;
    if(bufferCC_30_io_dataOut)begin
      ddrCd_logic_inputResetTrigger = 1'b1;
    end
    if(resetGenerator_stuff_syncTrigger)begin
      ddrCd_logic_inputResetTrigger = 1'b1;
    end
  end

  always @ (*) begin
    ddrCd_logic_outputResetUnbuffered = 1'b0;
    if(_zz_111)begin
      ddrCd_logic_outputResetUnbuffered = 1'b1;
    end
  end

  always @ (*) begin
    systemCd_logic_inputResetTrigger = 1'b0;
    if(bufferCC_31_io_dataOut)begin
      systemCd_logic_inputResetTrigger = 1'b1;
    end
  end

  always @ (*) begin
    systemCd_logic_outputResetUnbuffered = 1'b0;
    if(_zz_112)begin
      systemCd_logic_outputResetUnbuffered = 1'b1;
    end
  end

  assign system_uart_0_io_txd = system_uart_0_io_logic_io_uart_txd;
  assign system_i2c_0_io_sda_write = system_i2c_0_io_logic_io_i2c_sda_write;
  assign system_i2c_0_io_scl_write = system_i2c_0_io_logic_io_i2c_scl_write;
  assign system_gpio_0_io_write = system_gpio_0_io_logic_io_gpio_write;
  assign system_gpio_0_io_writeEnable = system_gpio_0_io_logic_io_gpio_writeEnable;
  assign userInterruptA_interrupt = userInterruptA_buffercc_io_dataOut;
  assign io_systemReset = systemCd_logic_outputReset;
  assign system_cpu_jtagInstructionCtrl_tdi = jtagCtrl_tdi;
  assign system_cpu_jtagInstructionCtrl_enable = jtagCtrl_enable;
  assign system_cpu_jtagInstructionCtrl_capture = jtagCtrl_capture;
  assign system_cpu_jtagInstructionCtrl_shift = jtagCtrl_shift;
  assign system_cpu_jtagInstructionCtrl_update = jtagCtrl_update;
  assign system_cpu_jtagInstructionCtrl_reset = jtagCtrl_reset;
  assign jtagCtrl_tdo = system_cpu_jtagInstructionCtrl_tdo;
  assign _zz_74 = 1'b0;
  assign _zz_73 = 1'b1;
  assign debugCd_logic_inputResetAdapter_stuff_syncTrigger = bufferCC_29_io_dataOut;
  assign _zz_76 = 1'b0;
  assign _zz_75 = 1'b1;
  assign _zz_78 = 1'b0;
  assign _zz_77 = 1'b1;
  assign system_cpu_iBus_cmd_valid = system_cpu_logic_cpu_iBus_cmd_valid;
  assign system_cpu_iBus_cmd_payload_fragment_opcode = (1'b0);
  assign system_cpu_iBus_cmd_payload_fragment_address = system_cpu_logic_cpu_iBus_cmd_payload_address;
  assign system_cpu_iBus_cmd_payload_fragment_length = 5'h1f;
  assign system_cpu_iBus_cmd_payload_last = 1'b1;
  assign _zz_81 = (system_cpu_iBus_rsp_payload_fragment_opcode == (1'b1));
  assign system_cpu_iBus_rsp_ready = 1'b1;
  assign system_cpu_dBus_cmd_valid = system_cpu_logic_cpu_dBus_cmd_valid;
  assign system_cpu_dBus_cmd_payload_last = system_cpu_logic_cpu_dBus_cmd_payload_last;
  assign system_cpu_dBus_cmd_payload_fragment_context[0] = system_cpu_logic_cpu_dBus_cmd_payload_wr;
  assign system_cpu_dBus_cmd_payload_fragment_opcode = (system_cpu_logic_cpu_dBus_cmd_payload_wr ? (1'b1) : (1'b0));
  assign system_cpu_dBus_cmd_payload_fragment_address = system_cpu_logic_cpu_dBus_cmd_payload_address;
  assign system_cpu_dBus_cmd_payload_fragment_data = system_cpu_logic_cpu_dBus_cmd_payload_data;
  assign system_cpu_dBus_cmd_payload_fragment_length = (_zz_136 | 5'h03);
  assign system_cpu_dBus_cmd_payload_fragment_mask = system_cpu_logic_cpu_dBus_cmd_payload_mask;
  assign _zz_82 = (system_cpu_dBus_rsp_valid && (! system_cpu_dBus_rsp_payload_fragment_context[0]));
  assign _zz_83 = (system_cpu_dBus_rsp_payload_fragment_opcode == (1'b1));
  assign system_cpu_dBus_rsp_ready = 1'b1;
  assign _zz_80 = systemDebugger_1_io_mem_cmd_payload_address[7:0];
  assign system_cpu_jtagInstructionCtrl_tdo = jtagBridgeNoTap_1_io_ctrl_tdo;
  assign system_cpu_iBus_cmd_ready = system_cpu_iBus_decoder_io_input_cmd_ready;
  assign system_cpu_iBus_rsp_valid = system_cpu_iBus_decoder_io_input_rsp_valid;
  assign system_cpu_iBus_rsp_payload_last = system_cpu_iBus_decoder_io_input_rsp_payload_last;
  assign system_cpu_iBus_rsp_payload_fragment_opcode = system_cpu_iBus_decoder_io_input_rsp_payload_fragment_opcode;
  assign system_cpu_iBus_rsp_payload_fragment_data = system_cpu_iBus_decoder_io_input_rsp_payload_fragment_data;
  assign system_cpu_dBus_cmd_ready = system_cpu_dBus_decoder_io_input_cmd_ready;
  assign system_cpu_dBus_rsp_valid = system_cpu_dBus_decoder_io_input_rsp_valid;
  assign system_cpu_dBus_rsp_payload_last = system_cpu_dBus_decoder_io_input_rsp_payload_last;
  assign system_cpu_dBus_rsp_payload_fragment_opcode = system_cpu_dBus_decoder_io_input_rsp_payload_fragment_opcode;
  assign system_cpu_dBus_rsp_payload_fragment_data = system_cpu_dBus_decoder_io_input_rsp_payload_fragment_data;
  assign system_cpu_dBus_rsp_payload_fragment_context = system_cpu_dBus_decoder_io_input_rsp_payload_fragment_context;
  assign system_bridge_bmb_cmd_valid = system_bridge_bmb_arbiter_io_output_cmd_valid;
  assign system_bridge_bmb_rsp_ready = system_bridge_bmb_arbiter_io_output_rsp_ready;
  assign system_bridge_bmb_cmd_payload_last = system_bridge_bmb_arbiter_io_output_cmd_payload_last;
  assign system_bridge_bmb_cmd_payload_fragment_source = system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_source;
  assign system_bridge_bmb_cmd_payload_fragment_opcode = system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_opcode;
  assign system_bridge_bmb_cmd_payload_fragment_address = system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_address;
  assign system_bridge_bmb_cmd_payload_fragment_length = system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_length;
  assign system_bridge_bmb_cmd_payload_fragment_data = system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_data;
  assign system_bridge_bmb_cmd_payload_fragment_mask = system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_mask;
  assign system_bridge_bmb_cmd_payload_fragment_context = system_bridge_bmb_arbiter_io_output_cmd_payload_fragment_context;
  assign _zz_84 = 32'h0;
  assign _zz_85 = (4'bxxxx);
  assign _zz_86 = (1'b0);
  assign _zz_87 = (2'b00);
  assign _zz_2[3 : 0] = (4'b0000);
  assign _zz_88 = (2'b01);
  assign _zz_89 = (1'b0);
  assign _zz_90 = (4'b0000);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_valid = (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_valid || system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rValid);
  assign _zz_91 = (! system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rValid);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_addr = (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rValid ? system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_addr : system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_addr);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_id = (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rValid ? system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_id : system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_id);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_region = (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rValid ? system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_region : system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_region);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_len = (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rValid ? system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_len : system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_len);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_size = (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rValid ? system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_size : system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_size);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_burst = (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rValid ? system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_burst : system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_burst);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_lock = (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rValid ? system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_lock : system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_lock);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_cache = (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rValid ? system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_cache : system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_cache);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_qos = (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rValid ? system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_qos : system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_qos);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_prot = (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rValid ? system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_prot : system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_prot);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_write = (system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rValid ? system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_write : system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_write);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_ready = ((1'b1 && (! system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_valid)) || system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_ready);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_valid = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rValid;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_addr = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_addr;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_id = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_id;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_region = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_region;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_len = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_len;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_size = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_size;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_burst = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_burst;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_lock = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_lock;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_cache = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_cache;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_qos = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_qos;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_prot = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_prot;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_write = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_write;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_ready = ((1'b1 && (! system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_valid)) || system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_ready);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_valid = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rValid;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_addr = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_addr;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_id = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_id;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_region = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_region;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_len = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_len;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_size = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_size;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_burst = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_burst;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_lock = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_lock;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_cache = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_cache;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_qos = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_qos;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_prot = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_prot;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_write = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_write;
  assign system_ddr_ddrLogic_cpuAccess_arw_valid = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_valid;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_ready = system_ddr_ddrLogic_cpuAccess_arw_ready;
  assign system_ddr_ddrLogic_cpuAccess_arw_payload_addr = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_addr;
  assign system_ddr_ddrLogic_cpuAccess_arw_payload_id = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_id;
  assign system_ddr_ddrLogic_cpuAccess_arw_payload_region = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_region;
  assign system_ddr_ddrLogic_cpuAccess_arw_payload_len = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_len;
  assign system_ddr_ddrLogic_cpuAccess_arw_payload_size = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_size;
  assign system_ddr_ddrLogic_cpuAccess_arw_payload_burst = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_burst;
  assign system_ddr_ddrLogic_cpuAccess_arw_payload_lock = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_lock;
  assign system_ddr_ddrLogic_cpuAccess_arw_payload_cache = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_cache;
  assign system_ddr_ddrLogic_cpuAccess_arw_payload_qos = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_qos;
  assign system_ddr_ddrLogic_cpuAccess_arw_payload_prot = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_prot;
  assign system_ddr_ddrLogic_cpuAccess_arw_payload_write = system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_payload_write;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_valid = (system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_valid || system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rValid);
  assign _zz_92 = (! system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rValid);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_payload_data = (system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rValid ? system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rData_data : system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_payload_data);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_payload_strb = (system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rValid ? system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rData_strb : system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_payload_strb);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_payload_last = (system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rValid ? system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rData_last : system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_payload_last);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_ready = ((1'b1 && (! system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_valid)) || system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_ready);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_valid = system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_rValid;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_payload_data = system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_rData_data;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_payload_strb = system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_rData_strb;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_payload_last = system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_rData_last;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_ready = ((1'b1 && (! system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_valid)) || system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_ready);
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_valid = system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_rValid;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_payload_data = system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_rData_data;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_payload_strb = system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_rData_strb;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_payload_last = system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_rData_last;
  assign system_ddr_ddrLogic_cpuAccess_w_valid = system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_valid;
  assign system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_ready = system_ddr_ddrLogic_cpuAccess_w_ready;
  assign system_ddr_ddrLogic_cpuAccess_w_payload_data = system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_payload_data;
  assign system_ddr_ddrLogic_cpuAccess_w_payload_strb = system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_payload_strb;
  assign system_ddr_ddrLogic_cpuAccess_w_payload_last = system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_payload_last;
  assign system_ddr_ddrLogic_cpuAccess_b_s2mPipe_valid = (system_ddr_ddrLogic_cpuAccess_b_valid || system_ddr_ddrLogic_cpuAccess_b_s2mPipe_rValid);
  assign system_ddr_ddrLogic_cpuAccess_b_ready = (! system_ddr_ddrLogic_cpuAccess_b_s2mPipe_rValid);
  assign system_ddr_ddrLogic_cpuAccess_b_s2mPipe_payload_id = (system_ddr_ddrLogic_cpuAccess_b_s2mPipe_rValid ? system_ddr_ddrLogic_cpuAccess_b_s2mPipe_rData_id : system_ddr_ddrLogic_cpuAccess_b_payload_id);
  assign system_ddr_ddrLogic_cpuAccess_b_s2mPipe_payload_resp = (system_ddr_ddrLogic_cpuAccess_b_s2mPipe_rValid ? system_ddr_ddrLogic_cpuAccess_b_s2mPipe_rData_resp : system_ddr_ddrLogic_cpuAccess_b_payload_resp);
  assign system_ddr_ddrLogic_cpuAccess_b_s2mPipe_ready = ((1'b1 && (! system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_valid)) || system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_ready);
  assign system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_valid = system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_rValid;
  assign system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_payload_id = system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_rData_id;
  assign system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_payload_resp = system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_rData_resp;
  assign system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_ready = system_ddr_ddrLogic_systemToMemoryBridge_io_output_b_ready;
  assign system_ddr_ddrLogic_cpuAccess_r_s2mPipe_valid = (system_ddr_ddrLogic_cpuAccess_r_valid || system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rValid);
  assign system_ddr_ddrLogic_cpuAccess_r_ready = (! system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rValid);
  assign system_ddr_ddrLogic_cpuAccess_r_s2mPipe_payload_data = (system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rValid ? system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rData_data : system_ddr_ddrLogic_cpuAccess_r_payload_data);
  assign system_ddr_ddrLogic_cpuAccess_r_s2mPipe_payload_id = (system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rValid ? system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rData_id : system_ddr_ddrLogic_cpuAccess_r_payload_id);
  assign system_ddr_ddrLogic_cpuAccess_r_s2mPipe_payload_resp = (system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rValid ? system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rData_resp : system_ddr_ddrLogic_cpuAccess_r_payload_resp);
  assign system_ddr_ddrLogic_cpuAccess_r_s2mPipe_payload_last = (system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rValid ? system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rData_last : system_ddr_ddrLogic_cpuAccess_r_payload_last);
  assign system_ddr_ddrLogic_cpuAccess_r_s2mPipe_ready = ((1'b1 && (! system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_valid)) || system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_ready);
  assign system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_valid = system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_rValid;
  assign system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_payload_data = system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_rData_data;
  assign system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_payload_id = system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_rData_id;
  assign system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_payload_resp = system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_rData_resp;
  assign system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_payload_last = system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_rData_last;
  assign system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_ready = system_ddr_ddrLogic_systemToMemoryBridge_io_output_r_ready;
  assign system_ddr_ddrLogic_cpuAccess_arw_ready = system_ddr_ddrLogic_arbiter_io_sharedInputs_0_arw_ready;
  assign _zz_93 = {5'd0, system_ddr_ddrLogic_cpuAccess_arw_payload_id};
  assign system_ddr_ddrLogic_cpuAccess_w_ready = system_ddr_ddrLogic_arbiter_io_sharedInputs_0_w_ready;
  assign system_ddr_ddrLogic_cpuAccess_b_valid = system_ddr_ddrLogic_arbiter_io_sharedInputs_0_b_valid;
  assign system_ddr_ddrLogic_cpuAccess_b_payload_id = system_ddr_ddrLogic_arbiter_io_sharedInputs_0_b_payload_id[1:0];
  assign system_ddr_ddrLogic_cpuAccess_b_payload_resp = system_ddr_ddrLogic_arbiter_io_sharedInputs_0_b_payload_resp;
  assign system_ddr_ddrLogic_cpuAccess_r_valid = system_ddr_ddrLogic_arbiter_io_sharedInputs_0_r_valid;
  assign system_ddr_ddrLogic_cpuAccess_r_payload_data = system_ddr_ddrLogic_arbiter_io_sharedInputs_0_r_payload_data;
  assign system_ddr_ddrLogic_cpuAccess_r_payload_last = system_ddr_ddrLogic_arbiter_io_sharedInputs_0_r_payload_last;
  assign system_ddr_ddrLogic_cpuAccess_r_payload_id = system_ddr_ddrLogic_arbiter_io_sharedInputs_0_r_payload_id[1:0];
  assign system_ddr_ddrLogic_cpuAccess_r_payload_resp = system_ddr_ddrLogic_arbiter_io_sharedInputs_0_r_payload_resp;
  assign _zz_109 = ddrCd_logic_outputReset_buffercc_io_dataOut;
  assign io_ddrMasters_0_aw_halfPipe_valid = io_ddrMasters_0_aw_halfPipe_regs_valid;
  assign io_ddrMasters_0_aw_halfPipe_payload_addr = io_ddrMasters_0_aw_halfPipe_regs_payload_addr;
  assign io_ddrMasters_0_aw_halfPipe_payload_id = io_ddrMasters_0_aw_halfPipe_regs_payload_id;
  assign io_ddrMasters_0_aw_halfPipe_payload_region = io_ddrMasters_0_aw_halfPipe_regs_payload_region;
  assign io_ddrMasters_0_aw_halfPipe_payload_len = io_ddrMasters_0_aw_halfPipe_regs_payload_len;
  assign io_ddrMasters_0_aw_halfPipe_payload_size = io_ddrMasters_0_aw_halfPipe_regs_payload_size;
  assign io_ddrMasters_0_aw_halfPipe_payload_burst = io_ddrMasters_0_aw_halfPipe_regs_payload_burst;
  assign io_ddrMasters_0_aw_halfPipe_payload_lock = io_ddrMasters_0_aw_halfPipe_regs_payload_lock;
  assign io_ddrMasters_0_aw_halfPipe_payload_cache = io_ddrMasters_0_aw_halfPipe_regs_payload_cache;
  assign io_ddrMasters_0_aw_halfPipe_payload_qos = io_ddrMasters_0_aw_halfPipe_regs_payload_qos;
  assign io_ddrMasters_0_aw_halfPipe_payload_prot = io_ddrMasters_0_aw_halfPipe_regs_payload_prot;
  assign io_ddrMasters_0_aw_ready = io_ddrMasters_0_aw_halfPipe_regs_ready;
  assign io_ddrMasters_0_aw_halfPipe_ready = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_aw_ready;
  assign io_ddrMasters_0_ar_halfPipe_valid = io_ddrMasters_0_ar_halfPipe_regs_valid;
  assign io_ddrMasters_0_ar_halfPipe_payload_addr = io_ddrMasters_0_ar_halfPipe_regs_payload_addr;
  assign io_ddrMasters_0_ar_halfPipe_payload_id = io_ddrMasters_0_ar_halfPipe_regs_payload_id;
  assign io_ddrMasters_0_ar_halfPipe_payload_region = io_ddrMasters_0_ar_halfPipe_regs_payload_region;
  assign io_ddrMasters_0_ar_halfPipe_payload_len = io_ddrMasters_0_ar_halfPipe_regs_payload_len;
  assign io_ddrMasters_0_ar_halfPipe_payload_size = io_ddrMasters_0_ar_halfPipe_regs_payload_size;
  assign io_ddrMasters_0_ar_halfPipe_payload_burst = io_ddrMasters_0_ar_halfPipe_regs_payload_burst;
  assign io_ddrMasters_0_ar_halfPipe_payload_lock = io_ddrMasters_0_ar_halfPipe_regs_payload_lock;
  assign io_ddrMasters_0_ar_halfPipe_payload_cache = io_ddrMasters_0_ar_halfPipe_regs_payload_cache;
  assign io_ddrMasters_0_ar_halfPipe_payload_qos = io_ddrMasters_0_ar_halfPipe_regs_payload_qos;
  assign io_ddrMasters_0_ar_halfPipe_payload_prot = io_ddrMasters_0_ar_halfPipe_regs_payload_prot;
  assign io_ddrMasters_0_ar_ready = io_ddrMasters_0_ar_halfPipe_regs_ready;
  assign io_ddrMasters_0_ar_halfPipe_ready = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_ar_ready;
  assign io_ddrMasters_0_w_s2mPipe_valid = (io_ddrMasters_0_w_valid || io_ddrMasters_0_w_s2mPipe_rValid);
  assign io_ddrMasters_0_w_ready = (! io_ddrMasters_0_w_s2mPipe_rValid);
  assign io_ddrMasters_0_w_s2mPipe_payload_data = (io_ddrMasters_0_w_s2mPipe_rValid ? io_ddrMasters_0_w_s2mPipe_rData_data : io_ddrMasters_0_w_payload_data);
  assign io_ddrMasters_0_w_s2mPipe_payload_strb = (io_ddrMasters_0_w_s2mPipe_rValid ? io_ddrMasters_0_w_s2mPipe_rData_strb : io_ddrMasters_0_w_payload_strb);
  assign io_ddrMasters_0_w_s2mPipe_payload_last = (io_ddrMasters_0_w_s2mPipe_rValid ? io_ddrMasters_0_w_s2mPipe_rData_last : io_ddrMasters_0_w_payload_last);
  assign io_ddrMasters_0_w_s2mPipe_ready = ((1'b1 && (! io_ddrMasters_0_w_s2mPipe_m2sPipe_valid)) || io_ddrMasters_0_w_s2mPipe_m2sPipe_ready);
  assign io_ddrMasters_0_w_s2mPipe_m2sPipe_valid = io_ddrMasters_0_w_s2mPipe_m2sPipe_rValid;
  assign io_ddrMasters_0_w_s2mPipe_m2sPipe_payload_data = io_ddrMasters_0_w_s2mPipe_m2sPipe_rData_data;
  assign io_ddrMasters_0_w_s2mPipe_m2sPipe_payload_strb = io_ddrMasters_0_w_s2mPipe_m2sPipe_rData_strb;
  assign io_ddrMasters_0_w_s2mPipe_m2sPipe_payload_last = io_ddrMasters_0_w_s2mPipe_m2sPipe_rData_last;
  assign io_ddrMasters_0_w_s2mPipe_m2sPipe_ready = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_w_ready;
  assign _zz_97 = ((1'b1 && (! system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_valid)) || system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_ready);
  assign system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_valid = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_rValid;
  assign system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_payload_data = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_rData_data;
  assign system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_payload_id = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_rData_id;
  assign system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_payload_resp = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_rData_resp;
  assign system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_payload_last = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_rData_last;
  assign io_ddrMasters_0_r_valid = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_valid;
  assign system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_ready = io_ddrMasters_0_r_ready;
  assign io_ddrMasters_0_r_payload_data = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_payload_data;
  assign io_ddrMasters_0_r_payload_id = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_payload_id;
  assign io_ddrMasters_0_r_payload_resp = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_payload_resp;
  assign io_ddrMasters_0_r_payload_last = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_payload_last;
  assign system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_valid = (system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_valid || system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_rValid);
  assign _zz_96 = (! system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_rValid);
  assign system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_payload_id = (system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_rValid ? system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_rData_id : system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_payload_id);
  assign system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_payload_resp = (system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_rValid ? system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_rData_resp : system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_payload_resp);
  assign system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_ready = ((1'b1 && (! system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_valid)) || system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_ready);
  assign system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_valid = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_rValid;
  assign system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_payload_id = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_rData_id;
  assign system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_payload_resp = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_rData_resp;
  assign io_ddrMasters_0_b_valid = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_valid;
  assign system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_ready = io_ddrMasters_0_b_ready;
  assign io_ddrMasters_0_b_payload_id = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_payload_id;
  assign io_ddrMasters_0_b_payload_resp = system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_payload_resp;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_valid = streamArbiter_3_io_output_valid;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_addr = streamArbiter_3_io_output_payload_addr;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_id = streamArbiter_3_io_output_payload_id;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_region = streamArbiter_3_io_output_payload_region;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_len = streamArbiter_3_io_output_payload_len;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_size = streamArbiter_3_io_output_payload_size;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_burst = streamArbiter_3_io_output_payload_burst;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_lock = streamArbiter_3_io_output_payload_lock;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_cache = streamArbiter_3_io_output_payload_cache;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_qos = streamArbiter_3_io_output_payload_qos;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_prot = streamArbiter_3_io_output_payload_prot;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_write = streamArbiter_3_io_chosenOH[1];
  assign system_ddr_ddrLogic_userAdapters_0_userShared_w_valid = system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_w_valid;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_w_payload_data = system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_w_payload_data;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_w_payload_strb = system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_w_payload_strb;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_w_payload_last = system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_w_payload_last;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_b_ready = system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_b_ready;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_r_ready = system_ddr_ddrLogic_userAdapters_0_upsizer_logic_io_output_r_ready;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_valid = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_valid;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_addr = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_addr;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_id = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_id;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_region = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_region;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_len = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_len;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_size = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_size;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_burst = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_burst;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_lock = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_lock;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_cache = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_cache;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_qos = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_qos;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_prot = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_prot;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_write = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_write;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_ready = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_ready;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_arw_valid = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_valid;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_ready = system_ddr_ddrLogic_userAdapters_0_pipeline_arw_ready;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_addr = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_addr;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_id = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_id;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_region = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_region;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_len = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_len;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_size = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_size;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_burst = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_burst;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_lock = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_lock;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_cache = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_cache;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_qos = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_qos;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_prot = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_prot;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_write = system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_payload_write;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_valid = (system_ddr_ddrLogic_userAdapters_0_userShared_w_valid || system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rValid);
  assign system_ddr_ddrLogic_userAdapters_0_userShared_w_ready = (! system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rValid);
  assign system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_payload_data = (system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rValid ? system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rData_data : system_ddr_ddrLogic_userAdapters_0_userShared_w_payload_data);
  assign system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_payload_strb = (system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rValid ? system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rData_strb : system_ddr_ddrLogic_userAdapters_0_userShared_w_payload_strb);
  assign system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_payload_last = (system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rValid ? system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rData_last : system_ddr_ddrLogic_userAdapters_0_userShared_w_payload_last);
  assign system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_ready = ((1'b1 && (! system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_valid)) || system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_ready);
  assign system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_valid = system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_rValid;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_payload_data = system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_rData_data;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_payload_strb = system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_rData_strb;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_payload_last = system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_rData_last;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_w_valid = system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_valid;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_ready = system_ddr_ddrLogic_userAdapters_0_pipeline_w_ready;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_w_payload_data = system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_payload_data;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_w_payload_strb = system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_payload_strb;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_w_payload_last = system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_payload_last;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_valid = (system_ddr_ddrLogic_userAdapters_0_pipeline_r_valid || system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rValid);
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_ready = (! system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rValid);
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_payload_data = (system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rValid ? system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rData_data : system_ddr_ddrLogic_userAdapters_0_pipeline_r_payload_data);
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_payload_id = (system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rValid ? system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rData_id : system_ddr_ddrLogic_userAdapters_0_pipeline_r_payload_id);
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_payload_resp = (system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rValid ? system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rData_resp : system_ddr_ddrLogic_userAdapters_0_pipeline_r_payload_resp);
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_payload_last = (system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rValid ? system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rData_last : system_ddr_ddrLogic_userAdapters_0_pipeline_r_payload_last);
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_ready = ((1'b1 && (! system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_valid)) || system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_ready);
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_valid = system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_rValid;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_payload_data = system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_rData_data;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_payload_id = system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_rData_id;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_payload_resp = system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_rData_resp;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_payload_last = system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_rData_last;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_r_valid = system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_valid;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_ready = system_ddr_ddrLogic_userAdapters_0_userShared_r_ready;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_r_payload_data = system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_payload_data;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_r_payload_id = system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_payload_id;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_r_payload_resp = system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_payload_resp;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_r_payload_last = system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_payload_last;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_valid = system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_regs_valid;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_payload_id = system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_regs_payload_id;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_payload_resp = system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_regs_payload_resp;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_b_ready = system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_regs_ready;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_b_valid = system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_valid;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_ready = system_ddr_ddrLogic_userAdapters_0_userShared_b_ready;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_b_payload_id = system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_payload_id;
  assign system_ddr_ddrLogic_userAdapters_0_userShared_b_payload_resp = system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_payload_resp;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_arw_ready = system_ddr_ddrLogic_arbiter_io_sharedInputs_1_arw_ready;
  assign _zz_94 = {3'd0, system_ddr_ddrLogic_userAdapters_0_pipeline_arw_payload_id};
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_w_ready = system_ddr_ddrLogic_arbiter_io_sharedInputs_1_w_ready;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_b_valid = system_ddr_ddrLogic_arbiter_io_sharedInputs_1_b_valid;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_b_payload_id = system_ddr_ddrLogic_arbiter_io_sharedInputs_1_b_payload_id[3:0];
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_b_payload_resp = system_ddr_ddrLogic_arbiter_io_sharedInputs_1_b_payload_resp;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_valid = system_ddr_ddrLogic_arbiter_io_sharedInputs_1_r_valid;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_payload_data = system_ddr_ddrLogic_arbiter_io_sharedInputs_1_r_payload_data;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_payload_last = system_ddr_ddrLogic_arbiter_io_sharedInputs_1_r_payload_last;
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_payload_id = system_ddr_ddrLogic_arbiter_io_sharedInputs_1_r_payload_id[3:0];
  assign system_ddr_ddrLogic_userAdapters_0_pipeline_r_payload_resp = system_ddr_ddrLogic_arbiter_io_sharedInputs_1_r_payload_resp;
  assign system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_valid = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_valid;
  assign system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_addr = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_addr;
  assign system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_id = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_id;
  assign system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_region = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_region;
  assign system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_len = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_len;
  assign system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_size = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_size;
  assign system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_burst = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_burst;
  assign system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_lock = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_lock;
  assign system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_cache = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_cache;
  assign system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_qos = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_qos;
  assign system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_prot = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_prot;
  assign system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_write = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_write;
  assign system_ddr_ddrLogic_ddrA_arw_valid = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_valid;
  assign system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_ready = system_ddr_ddrLogic_ddrA_arw_ready;
  assign system_ddr_ddrLogic_ddrA_arw_payload_addr = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_addr;
  assign system_ddr_ddrLogic_ddrA_arw_payload_id = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_id;
  assign system_ddr_ddrLogic_ddrA_arw_payload_region = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_region;
  assign system_ddr_ddrLogic_ddrA_arw_payload_len = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_len;
  assign system_ddr_ddrLogic_ddrA_arw_payload_size = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_size;
  assign system_ddr_ddrLogic_ddrA_arw_payload_burst = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_burst;
  assign system_ddr_ddrLogic_ddrA_arw_payload_lock = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_lock;
  assign system_ddr_ddrLogic_ddrA_arw_payload_cache = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_cache;
  assign system_ddr_ddrLogic_ddrA_arw_payload_qos = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_qos;
  assign system_ddr_ddrLogic_ddrA_arw_payload_prot = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_prot;
  assign system_ddr_ddrLogic_ddrA_arw_payload_write = system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_payload_write;
  assign _zz_95 = ((1'b1 && (! system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_valid)) || system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_ready);
  assign system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_valid = system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_rValid;
  assign system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_payload_data = system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_rData_data;
  assign system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_payload_strb = system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_rData_strb;
  assign system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_payload_last = system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_rData_last;
  always @ (*) begin
    system_ddr_ddrLogic_ddrA_w_valid = system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_valid;
    if(_zz_113)begin
      system_ddr_ddrLogic_ddrA_w_valid = 1'b1;
    end
  end

  assign system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_ready = system_ddr_ddrLogic_ddrA_w_ready;
  assign system_ddr_ddrLogic_ddrA_w_payload_data = system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_payload_data;
  assign system_ddr_ddrLogic_ddrA_w_payload_strb = system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_payload_strb;
  always @ (*) begin
    system_ddr_ddrLogic_ddrA_w_payload_last = system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_payload_last;
    if(_zz_113)begin
      system_ddr_ddrLogic_ddrA_w_payload_last = (system_ddr_ddrLogic_ddrAToAxi3_widStream_payload_len == system_ddr_ddrLogic_ddrAToAxi3_ddrA_wCounter);
    end
  end

  assign system_ddr_ddrLogic_ddrA_r_ready = system_ddr_ddrLogic_arbiter_io_output_r_ready;
  assign system_ddr_ddrLogic_ddrA_b_halfPipe_valid = system_ddr_ddrLogic_ddrA_b_halfPipe_regs_valid;
  assign system_ddr_ddrLogic_ddrA_b_halfPipe_payload_id = system_ddr_ddrLogic_ddrA_b_halfPipe_regs_payload_id;
  assign system_ddr_ddrLogic_ddrA_b_halfPipe_payload_resp = system_ddr_ddrLogic_ddrA_b_halfPipe_regs_payload_resp;
  assign system_ddr_ddrLogic_ddrA_b_ready = system_ddr_ddrLogic_ddrA_b_halfPipe_regs_ready;
  assign system_ddr_ddrLogic_ddrA_b_halfPipe_ready = system_ddr_ddrLogic_arbiter_io_output_b_ready;
  always @ (*) begin
    system_ddr_ddrLogic_ddrAReset_resetUnbuffered = 1'b0;
    if(_zz_114)begin
      system_ddr_ddrLogic_ddrAReset_resetUnbuffered = 1'b1;
    end
  end

  assign _zz_3[4 : 0] = 5'h1f;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_addr = system_ddr_ddrLogic_ddrA_arw_payload_addr;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_id = system_ddr_ddrLogic_ddrA_arw_payload_id;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_region = system_ddr_ddrLogic_ddrA_arw_payload_region;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_len = system_ddr_ddrLogic_ddrA_arw_payload_len;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_size = system_ddr_ddrLogic_ddrA_arw_payload_size;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_burst = system_ddr_ddrLogic_ddrA_arw_payload_burst;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_lock = system_ddr_ddrLogic_ddrA_arw_payload_lock;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_cache = system_ddr_ddrLogic_ddrA_arw_payload_cache;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_qos = system_ddr_ddrLogic_ddrA_arw_payload_qos;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_prot = system_ddr_ddrLogic_ddrA_arw_payload_prot;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_write = system_ddr_ddrLogic_ddrA_arw_payload_write;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_addr = system_ddr_ddrLogic_ddrA_arw_payload_addr;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_id = system_ddr_ddrLogic_ddrA_arw_payload_id;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_region = system_ddr_ddrLogic_ddrA_arw_payload_region;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_len = system_ddr_ddrLogic_ddrA_arw_payload_len;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_size = system_ddr_ddrLogic_ddrA_arw_payload_size;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_burst = system_ddr_ddrLogic_ddrA_arw_payload_burst;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_lock = system_ddr_ddrLogic_ddrA_arw_payload_lock;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_cache = system_ddr_ddrLogic_ddrA_arw_payload_cache;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_qos = system_ddr_ddrLogic_ddrA_arw_payload_qos;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_prot = system_ddr_ddrLogic_ddrA_arw_payload_prot;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_write = system_ddr_ddrLogic_ddrA_arw_payload_write;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_valid = (system_ddr_ddrLogic_ddrA_arw_valid && system_ddr_ddrLogic_ddrA_arw_ready);
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_valid = (system_ddr_ddrLogic_ddrA_arw_valid && system_ddr_ddrLogic_ddrA_arw_ready);
  assign system_ddr_ddrLogic_ddrA_arw_ready = (system_ddr_ddrLogic_ddrAToAxi3_ioArw_ready && system_ddr_ddrLogic_ddrAToAxi3_patchArw_ready);
  assign system_ddr_ddrLogic_ddrAToAxi3_a2wPayload_id = system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_id;
  assign system_ddr_ddrLogic_ddrAToAxi3_a2wPayload_len = system_ddr_ddrLogic_ddrAToAxi3_patchArw_payload_len;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_valid = system_ddr_ddrLogic_ddrAToAxi3_patchArw_valid;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_ready = system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_ready;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_payload_id = system_ddr_ddrLogic_ddrAToAxi3_a2wPayload_id;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_payload_len = system_ddr_ddrLogic_ddrAToAxi3_a2wPayload_len;
  always @ (*) begin
    system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_valid = system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_valid;
    if(_zz_115)begin
      system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_valid = 1'b0;
    end
  end

  always @ (*) begin
    system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_ready = system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_ready;
    if(_zz_115)begin
      system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_ready = 1'b1;
    end
  end

  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_payload_id = system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_payload_id;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_payload_len = system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_payload_len;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_ready = system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_push_ready;
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_valid = (system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_valid || system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_rValid);
  assign _zz_98 = (! system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_rValid);
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_payload_id = (system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_rValid ? system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_rData_id : system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_payload_id);
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_payload_len = (system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_rValid ? system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_rData_len : system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_payload_len);
  assign system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_ready = ((1'b1 && (! system_ddr_ddrLogic_ddrAToAxi3_widStream_valid)) || system_ddr_ddrLogic_ddrAToAxi3_widStream_ready);
  assign system_ddr_ddrLogic_ddrAToAxi3_widStream_valid = system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_m2sPipe_rValid;
  assign system_ddr_ddrLogic_ddrAToAxi3_widStream_payload_id = system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_m2sPipe_rData_id;
  assign system_ddr_ddrLogic_ddrAToAxi3_widStream_payload_len = system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_m2sPipe_rData_len;
  assign system_ddr_ddrLogic_ddrAToAxi3_widStream_ready = ((system_ddr_ddrLogic_ddrA_w_valid && system_ddr_ddrLogic_ddrA_w_ready) && system_ddr_ddrLogic_ddrA_w_payload_last);
  assign system_ddr_ddrLogic_ddrAToAxi3_ddrA_wPayload_w_data = system_ddr_ddrLogic_ddrA_w_payload_data;
  assign system_ddr_ddrLogic_ddrAToAxi3_ddrA_wPayload_w_strb = system_ddr_ddrLogic_ddrA_w_payload_strb;
  assign system_ddr_ddrLogic_ddrAToAxi3_ddrA_wPayload_w_last = system_ddr_ddrLogic_ddrA_w_payload_last;
  assign system_ddr_ddrLogic_ddrAToAxi3_ddrA_wPayload_id = system_ddr_ddrLogic_ddrAToAxi3_widStream_payload_id;
  assign system_ddr_ddrLogic_ddrA_w_translated_valid = system_ddr_ddrLogic_ddrA_w_valid;
  assign system_ddr_ddrLogic_ddrA_w_ready = system_ddr_ddrLogic_ddrA_w_translated_ready;
  assign system_ddr_ddrLogic_ddrA_w_translated_payload_w_data = system_ddr_ddrLogic_ddrAToAxi3_ddrA_wPayload_w_data;
  assign system_ddr_ddrLogic_ddrA_w_translated_payload_w_strb = system_ddr_ddrLogic_ddrAToAxi3_ddrA_wPayload_w_strb;
  assign system_ddr_ddrLogic_ddrA_w_translated_payload_w_last = system_ddr_ddrLogic_ddrAToAxi3_ddrA_wPayload_w_last;
  assign system_ddr_ddrLogic_ddrA_w_translated_payload_id = system_ddr_ddrLogic_ddrAToAxi3_ddrA_wPayload_id;
  assign _zz_4 = (! (! system_ddr_ddrLogic_ddrAToAxi3_widStream_valid));
  assign system_ddr_ddrLogic_ddrA_w_translated_ready = (_zz_5 && _zz_4);
  assign _zz_5 = ((1'b1 && (! _zz_6)) || _zz_7);
  assign _zz_6 = _zz_12;
  assign _zz_8 = _zz_13;
  assign _zz_9 = _zz_14;
  assign _zz_10 = _zz_15;
  assign _zz_11 = _zz_16;
  assign _zz_7 = (! _zz_18);
  assign _zz_17 = ((1'b1 && (! system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_valid)) || system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_ready);
  assign system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_valid = _zz_23;
  assign system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_payload_w_data = _zz_24;
  assign system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_payload_w_strb = _zz_25;
  assign system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_payload_w_last = _zz_26;
  assign system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_payload_id = _zz_27;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_valid = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_valid;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_addr = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_addr;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_id = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_id;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_region = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_region;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_len = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_len;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_size = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_size;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_burst = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_burst;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_lock = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_lock;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_cache = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_cache;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_qos = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_qos;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_prot = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_prot;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_write = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_write;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_ready = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_ready;
  assign io_ddrA_arw_valid = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_valid;
  assign system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_ready = io_ddrA_arw_ready;
  assign io_ddrA_arw_payload_addr = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_addr;
  assign io_ddrA_arw_payload_id = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_id;
  assign io_ddrA_arw_payload_region = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_region;
  assign io_ddrA_arw_payload_len = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_len;
  assign io_ddrA_arw_payload_size = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_size;
  assign io_ddrA_arw_payload_burst = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_burst;
  assign io_ddrA_arw_payload_lock = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_lock;
  assign io_ddrA_arw_payload_cache = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_cache;
  assign io_ddrA_arw_payload_qos = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_qos;
  assign io_ddrA_arw_payload_prot = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_prot;
  assign io_ddrA_arw_payload_write = system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_payload_write;
  assign system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_translated_valid = system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_valid;
  assign system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_ready = system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_translated_ready;
  assign system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_translated_payload_data = system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_payload_w_data;
  assign system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_translated_payload_strb = system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_payload_w_strb;
  assign system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_translated_payload_last = system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_payload_w_last;
  assign io_ddrA_w_valid = system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_translated_valid;
  assign system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_translated_ready = io_ddrA_w_ready;
  assign io_ddrA_w_payload_data = system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_translated_payload_data;
  assign io_ddrA_w_payload_strb = system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_translated_payload_strb;
  assign io_ddrA_w_payload_last = system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_translated_payload_last;
  assign io_ddrA_w_payload_id = system_ddr_ddrLogic_ddrAToAxi3_ddrA_wStreamPipelied_payload_id;
  assign io_ddrA_r_ready = ((1'b1 && (! io_ddrA_r_m2sPipe_valid)) || io_ddrA_r_m2sPipe_ready);
  assign io_ddrA_r_m2sPipe_valid = io_ddrA_r_m2sPipe_rValid;
  assign io_ddrA_r_m2sPipe_payload_data = io_ddrA_r_m2sPipe_rData_data;
  assign io_ddrA_r_m2sPipe_payload_id = io_ddrA_r_m2sPipe_rData_id;
  assign io_ddrA_r_m2sPipe_payload_resp = io_ddrA_r_m2sPipe_rData_resp;
  assign io_ddrA_r_m2sPipe_payload_last = io_ddrA_r_m2sPipe_rData_last;
  assign system_ddr_ddrLogic_ddrA_r_valid = io_ddrA_r_m2sPipe_valid;
  assign io_ddrA_r_m2sPipe_ready = system_ddr_ddrLogic_ddrA_r_ready;
  assign system_ddr_ddrLogic_ddrA_r_payload_data = io_ddrA_r_m2sPipe_payload_data;
  assign system_ddr_ddrLogic_ddrA_r_payload_id = io_ddrA_r_m2sPipe_payload_id;
  assign system_ddr_ddrLogic_ddrA_r_payload_resp = io_ddrA_r_m2sPipe_payload_resp;
  assign system_ddr_ddrLogic_ddrA_r_payload_last = io_ddrA_r_m2sPipe_payload_last;
  assign io_ddrA_b_halfPipe_valid = io_ddrA_b_halfPipe_regs_valid;
  assign io_ddrA_b_halfPipe_payload_id = io_ddrA_b_halfPipe_regs_payload_id;
  assign io_ddrA_b_halfPipe_payload_resp = io_ddrA_b_halfPipe_regs_payload_resp;
  assign io_ddrA_b_ready = io_ddrA_b_halfPipe_regs_ready;
  assign system_ddr_ddrLogic_ddrA_b_valid = io_ddrA_b_halfPipe_valid;
  assign io_ddrA_b_halfPipe_ready = system_ddr_ddrLogic_ddrA_b_ready;
  assign system_ddr_ddrLogic_ddrA_b_payload_id = io_ddrA_b_halfPipe_payload_id;
  assign system_ddr_ddrLogic_ddrA_b_payload_resp = io_ddrA_b_halfPipe_payload_resp;
  assign system_spi_0_io_sclk_write = system_spi_0_io_logic_io_spi_sclk_write;
  assign system_spi_0_io_data_0_writeEnable = system_spi_0_io_logic_io_spi_data_0_writeEnable;
  assign system_spi_0_io_data_0_write = system_spi_0_io_logic_io_spi_data_0_write;
  assign system_spi_0_io_data_1_writeEnable = system_spi_0_io_logic_io_spi_data_1_writeEnable;
  assign system_spi_0_io_data_1_write = system_spi_0_io_logic_io_spi_data_1_write;
  assign system_spi_0_io_data_2_writeEnable = system_spi_0_io_logic_io_spi_data_2_writeEnable;
  assign system_spi_0_io_data_2_write = system_spi_0_io_logic_io_spi_data_2_write;
  assign system_spi_0_io_data_3_writeEnable = system_spi_0_io_logic_io_spi_data_3_writeEnable;
  assign system_spi_0_io_data_3_write = system_spi_0_io_logic_io_spi_data_3_write;
  assign system_spi_0_io_ss = system_spi_0_io_logic_io_spi_ss;
  assign _zz_101 = (logic_bmbToAxiBridge_io_output_arw_payload_write ? axiA_awready : axiA_arready);
  assign axiA_arvalid = (logic_bmbToAxiBridge_io_output_arw_valid && (! logic_bmbToAxiBridge_io_output_arw_payload_write));
  assign axiA_araddr = logic_bmbToAxiBridge_io_output_arw_payload_addr;
  assign axiA_arid = 8'h0;
  assign _zz_28[3 : 0] = (4'b0000);
  assign axiA_arregion = _zz_28;
  assign axiA_arlen = logic_bmbToAxiBridge_io_output_arw_payload_len;
  assign axiA_arsize = logic_bmbToAxiBridge_io_output_arw_payload_size;
  assign axiA_arburst = (2'b01);
  assign axiA_arlock = (1'b0);
  assign axiA_arcache = logic_bmbToAxiBridge_io_output_arw_payload_cache;
  assign axiA_arqos = (4'b0000);
  assign axiA_arprot = logic_bmbToAxiBridge_io_output_arw_payload_prot;
  assign axiA_awvalid = (logic_bmbToAxiBridge_io_output_arw_valid && logic_bmbToAxiBridge_io_output_arw_payload_write);
  assign axiA_awaddr = logic_bmbToAxiBridge_io_output_arw_payload_addr;
  assign axiA_awid = 8'h0;
  assign _zz_29[3 : 0] = (4'b0000);
  assign axiA_awregion = _zz_29;
  assign axiA_awlen = logic_bmbToAxiBridge_io_output_arw_payload_len;
  assign axiA_awsize = logic_bmbToAxiBridge_io_output_arw_payload_size;
  assign axiA_awburst = (2'b01);
  assign axiA_awlock = (1'b0);
  assign axiA_awcache = logic_bmbToAxiBridge_io_output_arw_payload_cache;
  assign axiA_awqos = (4'b0000);
  assign axiA_awprot = logic_bmbToAxiBridge_io_output_arw_payload_prot;
  assign axiA_wvalid = logic_bmbToAxiBridge_io_output_w_valid;
  assign axiA_wdata = logic_bmbToAxiBridge_io_output_w_payload_data;
  assign axiA_wstrb = logic_bmbToAxiBridge_io_output_w_payload_strb;
  assign axiA_wlast = logic_bmbToAxiBridge_io_output_w_payload_last;
  assign axiA_rready = logic_bmbToAxiBridge_io_output_r_ready;
  assign axiA_bready = logic_bmbToAxiBridge_io_output_b_ready;
  assign _zz_103 = 1'b0;
  assign _zz_102 = 1'b1;
  assign resetGenerator_stuff_syncTrigger = bufferCC_32_io_dataOut;
  assign system_gpio_0_io_interrupts_0 = system_gpio_0_io_logic_io_interrupt[0];
  assign system_gpio_0_io_interrupts_1 = system_gpio_0_io_logic_io_interrupt[1];
  assign system_gpio_0_io_interrupts_2 = system_gpio_0_io_logic_io_interrupt[2];
  assign system_gpio_0_io_interrupts_3 = system_gpio_0_io_logic_io_interrupt[3];
  assign system_gpio_0_io_interrupts_4 = system_gpio_0_io_logic_io_interrupt[4];
  assign system_gpio_0_io_interrupts_5 = system_gpio_0_io_logic_io_interrupt[5];
  assign system_gpio_0_io_interrupts_6 = system_gpio_0_io_logic_io_interrupt[6];
  assign system_gpio_0_io_interrupts_7 = system_gpio_0_io_logic_io_interrupt[7];
  always @ (*) begin
    system_plic_logic_apb_PREADY = 1'b1;
    if(_zz_116)begin
      system_plic_logic_apb_PREADY = 1'b0;
    end
  end

  always @ (*) begin
    system_plic_logic_apb_PRDATA = 32'h0;
    case(system_plic_logic_apb_PADDR)
      22'b0000000000000001111100 : begin
        system_plic_logic_apb_PRDATA[1 : 0] = system_machineTimer_interrupt_plic_gateway_priority;
      end
      22'b0000000001000001111100 : begin
        system_plic_logic_apb_PRDATA[0 : 0] = system_machineTimer_interrupt_plic_gateway_ip;
      end
      22'b0000000000000000000100 : begin
        system_plic_logic_apb_PRDATA[1 : 0] = system_uart_0_io_interrupt_plic_gateway_priority;
      end
      22'b0000000001000000000100 : begin
        system_plic_logic_apb_PRDATA[0 : 0] = system_uart_0_io_interrupt_plic_gateway_ip;
      end
      22'b0000000000000000100000 : begin
        system_plic_logic_apb_PRDATA[1 : 0] = system_i2c_0_io_interrupt_plic_gateway_priority;
      end
      22'b0000000001000000100000 : begin
        system_plic_logic_apb_PRDATA[0 : 0] = system_i2c_0_io_interrupt_plic_gateway_ip;
      end
      22'b0000000000000001000000 : begin
        system_plic_logic_apb_PRDATA[1 : 0] = userInterruptA_interrupt_plic_gateway_priority;
      end
      22'b0000000001000001000000 : begin
        system_plic_logic_apb_PRDATA[0 : 0] = userInterruptA_interrupt_plic_gateway_ip;
      end
      22'b0000000000000000010000 : begin
        system_plic_logic_apb_PRDATA[1 : 0] = system_spi_0_io_interrupt_plic_gateway_priority;
      end
      22'b0000000001000000010000 : begin
        system_plic_logic_apb_PRDATA[0 : 0] = system_spi_0_io_interrupt_plic_gateway_ip;
      end
      22'b0000000000000001111000 : begin
        system_plic_logic_apb_PRDATA[1 : 0] = interrupt_plic_gateway_priority;
      end
      22'b0000000001000001111000 : begin
        system_plic_logic_apb_PRDATA[0 : 0] = interrupt_plic_gateway_ip;
      end
      22'b0000000000000000110000 : begin
        system_plic_logic_apb_PRDATA[1 : 0] = system_gpio_0_io_interrupts_0_plic_gateway_priority;
      end
      22'b0000000001000000110000 : begin
        system_plic_logic_apb_PRDATA[0 : 0] = system_gpio_0_io_interrupts_0_plic_gateway_ip;
      end
      22'b0000000000000000110100 : begin
        system_plic_logic_apb_PRDATA[1 : 0] = system_gpio_0_io_interrupts_1_plic_gateway_priority;
      end
      22'b0000000001000000110100 : begin
        system_plic_logic_apb_PRDATA[0 : 0] = system_gpio_0_io_interrupts_1_plic_gateway_ip;
      end
      22'b1000000000000000000000 : begin
        system_plic_logic_apb_PRDATA[1 : 0] = system_cpu_externalInterrupt_plic_target_threshold;
      end
      22'b1000000000000000000100 : begin
        system_plic_logic_apb_PRDATA[4 : 0] = system_cpu_externalInterrupt_plic_target_claim;
      end
      22'b0000000010000000000000 : begin
        system_plic_logic_apb_PRDATA[31 : 31] = system_cpu_externalInterrupt_plic_target_ie_0;
        system_plic_logic_apb_PRDATA[1 : 1] = system_cpu_externalInterrupt_plic_target_ie_1;
        system_plic_logic_apb_PRDATA[8 : 8] = system_cpu_externalInterrupt_plic_target_ie_2;
        system_plic_logic_apb_PRDATA[16 : 16] = system_cpu_externalInterrupt_plic_target_ie_3;
        system_plic_logic_apb_PRDATA[4 : 4] = system_cpu_externalInterrupt_plic_target_ie_4;
        system_plic_logic_apb_PRDATA[30 : 30] = system_cpu_externalInterrupt_plic_target_ie_5;
        system_plic_logic_apb_PRDATA[12 : 12] = system_cpu_externalInterrupt_plic_target_ie_6;
        system_plic_logic_apb_PRDATA[13 : 13] = system_cpu_externalInterrupt_plic_target_ie_7;
      end
      default : begin
      end
    endcase
  end

  assign system_plic_logic_apb_PSLVERROR = 1'b0;
  assign system_plic_logic_bus_askWrite = ((system_plic_logic_apb_PSEL[0] && system_plic_logic_apb_PENABLE) && system_plic_logic_apb_PWRITE);
  assign system_plic_logic_bus_askRead = ((system_plic_logic_apb_PSEL[0] && system_plic_logic_apb_PENABLE) && (! system_plic_logic_apb_PWRITE));
  assign system_plic_logic_bus_doWrite = (((system_plic_logic_apb_PSEL[0] && system_plic_logic_apb_PENABLE) && system_plic_logic_apb_PREADY) && system_plic_logic_apb_PWRITE);
  assign system_plic_logic_bus_doRead = (((system_plic_logic_apb_PSEL[0] && system_plic_logic_apb_PENABLE) && system_plic_logic_apb_PREADY) && (! system_plic_logic_apb_PWRITE));
  assign system_cpu_externalInterrupt_plic_target_requests_0_priority = (2'b00);
  assign system_cpu_externalInterrupt_plic_target_requests_0_id = 5'h0;
  assign system_cpu_externalInterrupt_plic_target_requests_0_valid = 1'b1;
  assign system_cpu_externalInterrupt_plic_target_requests_1_priority = system_uart_0_io_interrupt_plic_gateway_priority;
  assign system_cpu_externalInterrupt_plic_target_requests_1_id = 5'h01;
  assign system_cpu_externalInterrupt_plic_target_requests_1_valid = (system_uart_0_io_interrupt_plic_gateway_ip && system_cpu_externalInterrupt_plic_target_ie_1);
  assign system_cpu_externalInterrupt_plic_target_requests_2_priority = system_spi_0_io_interrupt_plic_gateway_priority;
  assign system_cpu_externalInterrupt_plic_target_requests_2_id = 5'h04;
  assign system_cpu_externalInterrupt_plic_target_requests_2_valid = (system_spi_0_io_interrupt_plic_gateway_ip && system_cpu_externalInterrupt_plic_target_ie_4);
  assign system_cpu_externalInterrupt_plic_target_requests_3_priority = system_i2c_0_io_interrupt_plic_gateway_priority;
  assign system_cpu_externalInterrupt_plic_target_requests_3_id = 5'h08;
  assign system_cpu_externalInterrupt_plic_target_requests_3_valid = (system_i2c_0_io_interrupt_plic_gateway_ip && system_cpu_externalInterrupt_plic_target_ie_2);
  assign system_cpu_externalInterrupt_plic_target_requests_4_priority = system_gpio_0_io_interrupts_0_plic_gateway_priority;
  assign system_cpu_externalInterrupt_plic_target_requests_4_id = 5'h0c;
  assign system_cpu_externalInterrupt_plic_target_requests_4_valid = (system_gpio_0_io_interrupts_0_plic_gateway_ip && system_cpu_externalInterrupt_plic_target_ie_6);
  assign system_cpu_externalInterrupt_plic_target_requests_5_priority = system_gpio_0_io_interrupts_1_plic_gateway_priority;
  assign system_cpu_externalInterrupt_plic_target_requests_5_id = 5'h0d;
  assign system_cpu_externalInterrupt_plic_target_requests_5_valid = (system_gpio_0_io_interrupts_1_plic_gateway_ip && system_cpu_externalInterrupt_plic_target_ie_7);
  assign system_cpu_externalInterrupt_plic_target_requests_6_priority = userInterruptA_interrupt_plic_gateway_priority;
  assign system_cpu_externalInterrupt_plic_target_requests_6_id = 5'h10;
  assign system_cpu_externalInterrupt_plic_target_requests_6_valid = (userInterruptA_interrupt_plic_gateway_ip && system_cpu_externalInterrupt_plic_target_ie_3);
  assign system_cpu_externalInterrupt_plic_target_requests_7_priority = interrupt_plic_gateway_priority;
  assign system_cpu_externalInterrupt_plic_target_requests_7_id = 5'h1e;
  assign system_cpu_externalInterrupt_plic_target_requests_7_valid = (interrupt_plic_gateway_ip && system_cpu_externalInterrupt_plic_target_ie_5);
  assign system_cpu_externalInterrupt_plic_target_requests_8_priority = system_machineTimer_interrupt_plic_gateway_priority;
  assign system_cpu_externalInterrupt_plic_target_requests_8_id = 5'h1f;
  assign system_cpu_externalInterrupt_plic_target_requests_8_valid = (system_machineTimer_interrupt_plic_gateway_ip && system_cpu_externalInterrupt_plic_target_ie_0);
  assign _zz_30 = ((! system_cpu_externalInterrupt_plic_target_requests_1_valid) || (system_cpu_externalInterrupt_plic_target_requests_0_valid && (system_cpu_externalInterrupt_plic_target_requests_1_priority <= system_cpu_externalInterrupt_plic_target_requests_0_priority)));
  assign _zz_31 = (_zz_30 ? system_cpu_externalInterrupt_plic_target_requests_0_priority : system_cpu_externalInterrupt_plic_target_requests_1_priority);
  assign _zz_32 = (_zz_30 ? system_cpu_externalInterrupt_plic_target_requests_0_valid : system_cpu_externalInterrupt_plic_target_requests_1_valid);
  assign _zz_33 = ((! system_cpu_externalInterrupt_plic_target_requests_3_valid) || (system_cpu_externalInterrupt_plic_target_requests_2_valid && (system_cpu_externalInterrupt_plic_target_requests_3_priority <= system_cpu_externalInterrupt_plic_target_requests_2_priority)));
  assign _zz_34 = (_zz_33 ? system_cpu_externalInterrupt_plic_target_requests_2_priority : system_cpu_externalInterrupt_plic_target_requests_3_priority);
  assign _zz_35 = (_zz_33 ? system_cpu_externalInterrupt_plic_target_requests_2_valid : system_cpu_externalInterrupt_plic_target_requests_3_valid);
  assign _zz_36 = ((! system_cpu_externalInterrupt_plic_target_requests_5_valid) || (system_cpu_externalInterrupt_plic_target_requests_4_valid && (system_cpu_externalInterrupt_plic_target_requests_5_priority <= system_cpu_externalInterrupt_plic_target_requests_4_priority)));
  assign _zz_37 = (_zz_36 ? system_cpu_externalInterrupt_plic_target_requests_4_priority : system_cpu_externalInterrupt_plic_target_requests_5_priority);
  assign _zz_38 = (_zz_36 ? system_cpu_externalInterrupt_plic_target_requests_4_valid : system_cpu_externalInterrupt_plic_target_requests_5_valid);
  assign _zz_39 = ((! system_cpu_externalInterrupt_plic_target_requests_7_valid) || (system_cpu_externalInterrupt_plic_target_requests_6_valid && (system_cpu_externalInterrupt_plic_target_requests_7_priority <= system_cpu_externalInterrupt_plic_target_requests_6_priority)));
  assign _zz_40 = (_zz_39 ? system_cpu_externalInterrupt_plic_target_requests_6_priority : system_cpu_externalInterrupt_plic_target_requests_7_priority);
  assign _zz_41 = (_zz_39 ? system_cpu_externalInterrupt_plic_target_requests_6_valid : system_cpu_externalInterrupt_plic_target_requests_7_valid);
  assign _zz_42 = ((! _zz_35) || (_zz_32 && (_zz_34 <= _zz_31)));
  assign _zz_43 = (_zz_42 ? _zz_31 : _zz_34);
  assign _zz_44 = (_zz_42 ? _zz_32 : _zz_35);
  assign _zz_45 = ((! _zz_41) || (_zz_38 && (_zz_40 <= _zz_37)));
  assign _zz_46 = (_zz_45 ? _zz_37 : _zz_40);
  assign _zz_47 = (_zz_45 ? _zz_38 : _zz_41);
  assign _zz_48 = ((! _zz_47) || (_zz_44 && (_zz_46 <= _zz_43)));
  assign _zz_49 = (_zz_48 ? _zz_43 : _zz_46);
  assign _zz_50 = (_zz_48 ? _zz_44 : _zz_47);
  assign _zz_51 = ((! system_cpu_externalInterrupt_plic_target_requests_8_valid) || (_zz_50 && (system_cpu_externalInterrupt_plic_target_requests_8_priority <= _zz_49)));
  assign system_cpu_externalInterrupt_plic_target_iep = (system_cpu_externalInterrupt_plic_target_threshold < system_cpu_externalInterrupt_plic_target_bestRequest_priority);
  assign system_cpu_externalInterrupt_plic_target_claim = (system_cpu_externalInterrupt_plic_target_iep ? system_cpu_externalInterrupt_plic_target_bestRequest_id : 5'h0);
  assign system_machineTimer_interrupt_plic_gateway_priority = _zz_52;
  assign system_uart_0_io_interrupt_plic_gateway_priority = _zz_53;
  assign system_i2c_0_io_interrupt_plic_gateway_priority = _zz_54;
  assign userInterruptA_interrupt_plic_gateway_priority = _zz_55;
  assign system_spi_0_io_interrupt_plic_gateway_priority = _zz_56;
  assign interrupt_plic_gateway_priority = _zz_57;
  assign system_gpio_0_io_interrupts_0_plic_gateway_priority = _zz_58;
  assign system_gpio_0_io_interrupts_1_plic_gateway_priority = _zz_59;
  always @ (*) begin
    system_plic_logic_bridge_claim_valid = 1'b0;
    case(system_plic_logic_apb_PADDR)
      22'b0000000000000001111100 : begin
      end
      22'b0000000001000001111100 : begin
      end
      22'b0000000000000000000100 : begin
      end
      22'b0000000001000000000100 : begin
      end
      22'b0000000000000000100000 : begin
      end
      22'b0000000001000000100000 : begin
      end
      22'b0000000000000001000000 : begin
      end
      22'b0000000001000001000000 : begin
      end
      22'b0000000000000000010000 : begin
      end
      22'b0000000001000000010000 : begin
      end
      22'b0000000000000001111000 : begin
      end
      22'b0000000001000001111000 : begin
      end
      22'b0000000000000000110000 : begin
      end
      22'b0000000001000000110000 : begin
      end
      22'b0000000000000000110100 : begin
      end
      22'b0000000001000000110100 : begin
      end
      22'b1000000000000000000000 : begin
      end
      22'b1000000000000000000100 : begin
        if(system_plic_logic_bus_doRead)begin
          system_plic_logic_bridge_claim_valid = 1'b1;
        end
      end
      22'b0000000010000000000000 : begin
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    system_plic_logic_bridge_claim_payload = 5'h0;
    case(system_plic_logic_apb_PADDR)
      22'b0000000000000001111100 : begin
      end
      22'b0000000001000001111100 : begin
      end
      22'b0000000000000000000100 : begin
      end
      22'b0000000001000000000100 : begin
      end
      22'b0000000000000000100000 : begin
      end
      22'b0000000001000000100000 : begin
      end
      22'b0000000000000001000000 : begin
      end
      22'b0000000001000001000000 : begin
      end
      22'b0000000000000000010000 : begin
      end
      22'b0000000001000000010000 : begin
      end
      22'b0000000000000001111000 : begin
      end
      22'b0000000001000001111000 : begin
      end
      22'b0000000000000000110000 : begin
      end
      22'b0000000001000000110000 : begin
      end
      22'b0000000000000000110100 : begin
      end
      22'b0000000001000000110100 : begin
      end
      22'b1000000000000000000000 : begin
      end
      22'b1000000000000000000100 : begin
        if(system_plic_logic_bus_doRead)begin
          system_plic_logic_bridge_claim_payload = system_cpu_externalInterrupt_plic_target_claim;
        end
      end
      22'b0000000010000000000000 : begin
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    system_plic_logic_bridge_completion_valid = 1'b0;
    if(system_plic_logic_bridge_targetMapping_0_targetCompletion_valid)begin
      system_plic_logic_bridge_completion_valid = 1'b1;
    end
  end

  always @ (*) begin
    system_plic_logic_bridge_completion_payload = 5'h0;
    if(system_plic_logic_bridge_targetMapping_0_targetCompletion_valid)begin
      system_plic_logic_bridge_completion_payload = system_plic_logic_bridge_targetMapping_0_targetCompletion_payload;
    end
  end

  always @ (*) begin
    system_plic_logic_bridge_coherencyStall_willIncrement = 1'b0;
    if(_zz_116)begin
      system_plic_logic_bridge_coherencyStall_willIncrement = 1'b1;
    end
    if(1'b1)begin
      if(system_plic_logic_bus_askWrite)begin
        system_plic_logic_bridge_coherencyStall_willIncrement = 1'b1;
      end
      if(system_plic_logic_bus_askRead)begin
        system_plic_logic_bridge_coherencyStall_willIncrement = 1'b1;
      end
    end
  end

  assign system_plic_logic_bridge_coherencyStall_willClear = 1'b0;
  assign system_plic_logic_bridge_coherencyStall_willOverflowIfInc = (system_plic_logic_bridge_coherencyStall_value == (1'b1));
  assign system_plic_logic_bridge_coherencyStall_willOverflow = (system_plic_logic_bridge_coherencyStall_willOverflowIfInc && system_plic_logic_bridge_coherencyStall_willIncrement);
  always @ (*) begin
    system_plic_logic_bridge_coherencyStall_valueNext = (system_plic_logic_bridge_coherencyStall_value + system_plic_logic_bridge_coherencyStall_willIncrement);
    if(system_plic_logic_bridge_coherencyStall_willClear)begin
      system_plic_logic_bridge_coherencyStall_valueNext = (1'b0);
    end
  end

  assign system_cpu_externalInterrupt_plic_target_threshold = _zz_60;
  always @ (*) begin
    system_plic_logic_bridge_targetMapping_0_targetCompletion_valid = 1'b0;
    case(system_plic_logic_apb_PADDR)
      22'b0000000000000001111100 : begin
      end
      22'b0000000001000001111100 : begin
      end
      22'b0000000000000000000100 : begin
      end
      22'b0000000001000000000100 : begin
      end
      22'b0000000000000000100000 : begin
      end
      22'b0000000001000000100000 : begin
      end
      22'b0000000000000001000000 : begin
      end
      22'b0000000001000001000000 : begin
      end
      22'b0000000000000000010000 : begin
      end
      22'b0000000001000000010000 : begin
      end
      22'b0000000000000001111000 : begin
      end
      22'b0000000001000001111000 : begin
      end
      22'b0000000000000000110000 : begin
      end
      22'b0000000001000000110000 : begin
      end
      22'b0000000000000000110100 : begin
      end
      22'b0000000001000000110100 : begin
      end
      22'b1000000000000000000000 : begin
      end
      22'b1000000000000000000100 : begin
        if(system_plic_logic_bus_doWrite)begin
          system_plic_logic_bridge_targetMapping_0_targetCompletion_valid = 1'b1;
        end
      end
      22'b0000000010000000000000 : begin
      end
      default : begin
      end
    endcase
  end

  assign system_cpu_externalInterrupt_plic_target_ie_0 = _zz_61;
  assign system_cpu_externalInterrupt_plic_target_ie_1 = _zz_62;
  assign system_cpu_externalInterrupt_plic_target_ie_2 = _zz_63;
  assign system_cpu_externalInterrupt_plic_target_ie_3 = _zz_64;
  assign system_cpu_externalInterrupt_plic_target_ie_4 = _zz_65;
  assign system_cpu_externalInterrupt_plic_target_ie_5 = _zz_66;
  assign system_cpu_externalInterrupt_plic_target_ie_6 = _zz_67;
  assign system_cpu_externalInterrupt_plic_target_ie_7 = _zz_68;
  assign system_bridge_bmb_cmd_ready = ((1'b1 && (! system_bridge_bmb_cmd_m2sPipe_valid)) || system_bridge_bmb_cmd_m2sPipe_ready);
  assign system_bridge_bmb_cmd_m2sPipe_valid = system_bridge_bmb_cmd_m2sPipe_rValid;
  assign system_bridge_bmb_cmd_m2sPipe_payload_last = system_bridge_bmb_cmd_m2sPipe_rData_last;
  assign system_bridge_bmb_cmd_m2sPipe_payload_fragment_source = system_bridge_bmb_cmd_m2sPipe_rData_fragment_source;
  assign system_bridge_bmb_cmd_m2sPipe_payload_fragment_opcode = system_bridge_bmb_cmd_m2sPipe_rData_fragment_opcode;
  assign system_bridge_bmb_cmd_m2sPipe_payload_fragment_address = system_bridge_bmb_cmd_m2sPipe_rData_fragment_address;
  assign system_bridge_bmb_cmd_m2sPipe_payload_fragment_length = system_bridge_bmb_cmd_m2sPipe_rData_fragment_length;
  assign system_bridge_bmb_cmd_m2sPipe_payload_fragment_data = system_bridge_bmb_cmd_m2sPipe_rData_fragment_data;
  assign system_bridge_bmb_cmd_m2sPipe_payload_fragment_mask = system_bridge_bmb_cmd_m2sPipe_rData_fragment_mask;
  assign system_bridge_bmb_cmd_m2sPipe_payload_fragment_context = system_bridge_bmb_cmd_m2sPipe_rData_fragment_context;
  assign system_bridge_bmb_cmd_m2sPipe_ready = system_bridge_bmb_decoder_io_input_cmd_ready;
  assign system_bridge_bmb_rsp_valid = system_bridge_bmb_decoder_io_input_rsp_valid;
  assign system_bridge_bmb_rsp_payload_last = system_bridge_bmb_decoder_io_input_rsp_payload_last;
  assign system_bridge_bmb_rsp_payload_fragment_source = system_bridge_bmb_decoder_io_input_rsp_payload_fragment_source;
  assign system_bridge_bmb_rsp_payload_fragment_opcode = system_bridge_bmb_decoder_io_input_rsp_payload_fragment_opcode;
  assign system_bridge_bmb_rsp_payload_fragment_data = system_bridge_bmb_decoder_io_input_rsp_payload_fragment_data;
  assign system_bridge_bmb_rsp_payload_fragment_context = system_bridge_bmb_decoder_io_input_rsp_payload_fragment_context;
  assign _zz_104 = system_bridge_bmb_decoder_io_outputs_0_cmd_payload_fragment_address[11:0];
  assign system_apbDecoder_input_PREADY = system_apbDecoder_input_decoder_io_input_PREADY;
  assign system_apbDecoder_input_PRDATA = system_apbDecoder_input_decoder_io_input_PRDATA;
  assign system_apbDecoder_input_PSLVERROR = system_apbDecoder_input_decoder_io_input_PSLVERROR;
  assign system_plic_logic_apb_PADDR = apb3Router_1_io_outputs_0_PADDR[21:0];
  assign system_plic_logic_apb_PSEL = apb3Router_1_io_outputs_0_PSEL;
  assign system_plic_logic_apb_PENABLE = apb3Router_1_io_outputs_0_PENABLE;
  assign system_plic_logic_apb_PWRITE = apb3Router_1_io_outputs_0_PWRITE;
  assign system_plic_logic_apb_PWDATA = apb3Router_1_io_outputs_0_PWDATA;
  assign _zz_69 = apb3Router_1_io_outputs_1_PADDR[3:0];
  assign _zz_70 = apb3Router_1_io_outputs_2_PADDR[4:0];
  assign _zz_105 = 1'b0;
  assign _zz_100 = apb3Router_1_io_outputs_3_PADDR[7:0];
  assign _zz_106 = 1'b0;
  assign _zz_71 = apb3Router_1_io_outputs_4_PADDR[7:0];
  assign _zz_107 = 1'b0;
  assign _zz_72 = apb3Router_1_io_outputs_5_PADDR[11:0];
  assign io_apbSlave_0_PADDR = apb3Router_1_io_outputs_6_PADDR[15:0];
  assign io_apbSlave_0_PSEL = apb3Router_1_io_outputs_6_PSEL;
  assign io_apbSlave_0_PENABLE = apb3Router_1_io_outputs_6_PENABLE;
  assign io_apbSlave_0_PWRITE = apb3Router_1_io_outputs_6_PWRITE;
  assign io_apbSlave_0_PWDATA = apb3Router_1_io_outputs_6_PWDATA;
  assign system_apbDecoder_input_PADDR = system_peripheralBridge_logic_bridge_io_output_PADDR;
  assign system_apbDecoder_input_PSEL = system_peripheralBridge_logic_bridge_io_output_PSEL;
  assign system_apbDecoder_input_PENABLE = system_peripheralBridge_logic_bridge_io_output_PENABLE;
  assign system_apbDecoder_input_PWRITE = system_peripheralBridge_logic_bridge_io_output_PWRITE;
  assign system_apbDecoder_input_PWDATA = system_peripheralBridge_logic_bridge_io_output_PWDATA;
  assign system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_valid = system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_valid;
  assign system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_last = system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_last;
  assign system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_source = system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_source;
  assign system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_opcode = system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_opcode;
  assign system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_address = system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_address;
  assign system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_length = system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_length;
  assign system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_data = system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_data;
  assign system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_mask = system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_mask;
  assign system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_payload_fragment_context = system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_context;
  assign system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_ready = system_peripheralBridge_logic_bridge_io_input_cmd_ready;
  assign _zz_108 = system_bridge_bmb_decoder_io_outputs_1_cmd_payload_fragment_address[23:0];
  assign system_plic_logic_bridge_targetMapping_0_targetCompletion_payload = system_plic_logic_apb_PWDATA[4 : 0];
  assign _zz_79 = 1'b0;
  assign _zz_99 = 1'b0;
  always @ (posedge io_systemClk) begin
    if(_zz_110)begin
      debugCd_logic_holdingLogic_resetCounter <= (debugCd_logic_holdingLogic_resetCounter + 12'h001);
    end
    if(debugCd_logic_inputResetTrigger)begin
      debugCd_logic_holdingLogic_resetCounter <= 12'h0;
    end
    debugCd_logic_outputReset <= debugCd_logic_outputResetUnbuffered;
  end

  always @ (posedge io_memoryClk) begin
    if(_zz_111)begin
      ddrCd_logic_holdingLogic_resetCounter <= (ddrCd_logic_holdingLogic_resetCounter + 6'h01);
    end
    if(ddrCd_logic_inputResetTrigger)begin
      ddrCd_logic_holdingLogic_resetCounter <= 6'h0;
    end
    ddrCd_logic_outputReset <= ddrCd_logic_outputResetUnbuffered;
  end

  always @ (posedge io_memoryClk or posedge ddrCd_logic_outputReset) begin
    if (ddrCd_logic_outputReset) begin
      io_memoryReset <= 1'b1;
    end else begin
      io_memoryReset <= ddrCd_logic_outputReset;
    end
  end

  always @ (posedge io_systemClk) begin
    if(_zz_112)begin
      systemCd_logic_holdingLogic_resetCounter <= (systemCd_logic_holdingLogic_resetCounter + 6'h01);
    end
    if(systemCd_logic_inputResetTrigger)begin
      systemCd_logic_holdingLogic_resetCounter <= 6'h0;
    end
    systemCd_logic_outputReset <= systemCd_logic_outputResetUnbuffered;
  end

  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      system_machineTimer_interrupt_plic_gateway_ip <= 1'b0;
      system_machineTimer_interrupt_plic_gateway_waitCompletion <= 1'b0;
      system_uart_0_io_interrupt_plic_gateway_ip <= 1'b0;
      system_uart_0_io_interrupt_plic_gateway_waitCompletion <= 1'b0;
      system_i2c_0_io_interrupt_plic_gateway_ip <= 1'b0;
      system_i2c_0_io_interrupt_plic_gateway_waitCompletion <= 1'b0;
      userInterruptA_interrupt_plic_gateway_ip <= 1'b0;
      userInterruptA_interrupt_plic_gateway_waitCompletion <= 1'b0;
      system_spi_0_io_interrupt_plic_gateway_ip <= 1'b0;
      system_spi_0_io_interrupt_plic_gateway_waitCompletion <= 1'b0;
      interrupt_plic_gateway_ip <= 1'b0;
      interrupt_plic_gateway_waitCompletion <= 1'b0;
      system_gpio_0_io_interrupts_0_plic_gateway_ip <= 1'b0;
      system_gpio_0_io_interrupts_0_plic_gateway_waitCompletion <= 1'b0;
      system_gpio_0_io_interrupts_1_plic_gateway_ip <= 1'b0;
      system_gpio_0_io_interrupts_1_plic_gateway_waitCompletion <= 1'b0;
      _zz_52 <= (2'b00);
      _zz_53 <= (2'b00);
      _zz_54 <= (2'b00);
      _zz_55 <= (2'b00);
      _zz_56 <= (2'b00);
      _zz_57 <= (2'b00);
      _zz_58 <= (2'b00);
      _zz_59 <= (2'b00);
      system_plic_logic_bridge_coherencyStall_value <= (1'b0);
      _zz_60 <= (2'b00);
      _zz_61 <= 1'b0;
      _zz_62 <= 1'b0;
      _zz_63 <= 1'b0;
      _zz_64 <= 1'b0;
      _zz_65 <= 1'b0;
      _zz_66 <= 1'b0;
      _zz_67 <= 1'b0;
      _zz_68 <= 1'b0;
      system_bridge_bmb_cmd_m2sPipe_rValid <= 1'b0;
      system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_valid <= 1'b0;
      system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_ready <= 1'b1;
    end else begin
      if((! system_machineTimer_interrupt_plic_gateway_waitCompletion))begin
        system_machineTimer_interrupt_plic_gateway_ip <= system_machineTimer_logic_io_mTimeInterrupt;
        system_machineTimer_interrupt_plic_gateway_waitCompletion <= system_machineTimer_logic_io_mTimeInterrupt;
      end
      if((! system_uart_0_io_interrupt_plic_gateway_waitCompletion))begin
        system_uart_0_io_interrupt_plic_gateway_ip <= system_uart_0_io_logic_io_interrupt;
        system_uart_0_io_interrupt_plic_gateway_waitCompletion <= system_uart_0_io_logic_io_interrupt;
      end
      if((! system_i2c_0_io_interrupt_plic_gateway_waitCompletion))begin
        system_i2c_0_io_interrupt_plic_gateway_ip <= system_i2c_0_io_logic_io_interrupt;
        system_i2c_0_io_interrupt_plic_gateway_waitCompletion <= system_i2c_0_io_logic_io_interrupt;
      end
      if((! userInterruptA_interrupt_plic_gateway_waitCompletion))begin
        userInterruptA_interrupt_plic_gateway_ip <= userInterruptA_interrupt;
        userInterruptA_interrupt_plic_gateway_waitCompletion <= userInterruptA_interrupt;
      end
      if((! system_spi_0_io_interrupt_plic_gateway_waitCompletion))begin
        system_spi_0_io_interrupt_plic_gateway_ip <= system_spi_0_io_logic_io_interrupt;
        system_spi_0_io_interrupt_plic_gateway_waitCompletion <= system_spi_0_io_logic_io_interrupt;
      end
      if((! interrupt_plic_gateway_waitCompletion))begin
        interrupt_plic_gateway_ip <= axiAInterrupt;
        interrupt_plic_gateway_waitCompletion <= axiAInterrupt;
      end
      if((! system_gpio_0_io_interrupts_0_plic_gateway_waitCompletion))begin
        system_gpio_0_io_interrupts_0_plic_gateway_ip <= system_gpio_0_io_interrupts_0;
        system_gpio_0_io_interrupts_0_plic_gateway_waitCompletion <= system_gpio_0_io_interrupts_0;
      end
      if((! system_gpio_0_io_interrupts_1_plic_gateway_waitCompletion))begin
        system_gpio_0_io_interrupts_1_plic_gateway_ip <= system_gpio_0_io_interrupts_1;
        system_gpio_0_io_interrupts_1_plic_gateway_waitCompletion <= system_gpio_0_io_interrupts_1;
      end
      if(system_plic_logic_bridge_claim_valid)begin
        case(system_plic_logic_bridge_claim_payload)
          5'b11111 : begin
            system_machineTimer_interrupt_plic_gateway_ip <= 1'b0;
          end
          5'b00001 : begin
            system_uart_0_io_interrupt_plic_gateway_ip <= 1'b0;
          end
          5'b01000 : begin
            system_i2c_0_io_interrupt_plic_gateway_ip <= 1'b0;
          end
          5'b10000 : begin
            userInterruptA_interrupt_plic_gateway_ip <= 1'b0;
          end
          5'b00100 : begin
            system_spi_0_io_interrupt_plic_gateway_ip <= 1'b0;
          end
          5'b11110 : begin
            interrupt_plic_gateway_ip <= 1'b0;
          end
          5'b01100 : begin
            system_gpio_0_io_interrupts_0_plic_gateway_ip <= 1'b0;
          end
          5'b01101 : begin
            system_gpio_0_io_interrupts_1_plic_gateway_ip <= 1'b0;
          end
          default : begin
          end
        endcase
      end
      if(system_plic_logic_bridge_completion_valid)begin
        case(system_plic_logic_bridge_completion_payload)
          5'b11111 : begin
            system_machineTimer_interrupt_plic_gateway_waitCompletion <= 1'b0;
          end
          5'b00001 : begin
            system_uart_0_io_interrupt_plic_gateway_waitCompletion <= 1'b0;
          end
          5'b01000 : begin
            system_i2c_0_io_interrupt_plic_gateway_waitCompletion <= 1'b0;
          end
          5'b10000 : begin
            userInterruptA_interrupt_plic_gateway_waitCompletion <= 1'b0;
          end
          5'b00100 : begin
            system_spi_0_io_interrupt_plic_gateway_waitCompletion <= 1'b0;
          end
          5'b11110 : begin
            interrupt_plic_gateway_waitCompletion <= 1'b0;
          end
          5'b01100 : begin
            system_gpio_0_io_interrupts_0_plic_gateway_waitCompletion <= 1'b0;
          end
          5'b01101 : begin
            system_gpio_0_io_interrupts_1_plic_gateway_waitCompletion <= 1'b0;
          end
          default : begin
          end
        endcase
      end
      system_plic_logic_bridge_coherencyStall_value <= system_plic_logic_bridge_coherencyStall_valueNext;
      if(system_bridge_bmb_cmd_ready)begin
        system_bridge_bmb_cmd_m2sPipe_rValid <= system_bridge_bmb_cmd_valid;
      end
      if(_zz_117)begin
        system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_valid <= system_peripheralBridge_input_burstUnburstifier_io_output_cmd_valid;
        system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_ready <= (! system_peripheralBridge_input_burstUnburstifier_io_output_cmd_valid);
      end else begin
        system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_valid <= (! system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_ready);
        system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_ready <= system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_ready;
      end
      case(system_plic_logic_apb_PADDR)
        22'b0000000000000001111100 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_52 <= system_plic_logic_apb_PWDATA[1 : 0];
          end
        end
        22'b0000000001000001111100 : begin
        end
        22'b0000000000000000000100 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_53 <= system_plic_logic_apb_PWDATA[1 : 0];
          end
        end
        22'b0000000001000000000100 : begin
        end
        22'b0000000000000000100000 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_54 <= system_plic_logic_apb_PWDATA[1 : 0];
          end
        end
        22'b0000000001000000100000 : begin
        end
        22'b0000000000000001000000 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_55 <= system_plic_logic_apb_PWDATA[1 : 0];
          end
        end
        22'b0000000001000001000000 : begin
        end
        22'b0000000000000000010000 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_56 <= system_plic_logic_apb_PWDATA[1 : 0];
          end
        end
        22'b0000000001000000010000 : begin
        end
        22'b0000000000000001111000 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_57 <= system_plic_logic_apb_PWDATA[1 : 0];
          end
        end
        22'b0000000001000001111000 : begin
        end
        22'b0000000000000000110000 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_58 <= system_plic_logic_apb_PWDATA[1 : 0];
          end
        end
        22'b0000000001000000110000 : begin
        end
        22'b0000000000000000110100 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_59 <= system_plic_logic_apb_PWDATA[1 : 0];
          end
        end
        22'b0000000001000000110100 : begin
        end
        22'b1000000000000000000000 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_60 <= system_plic_logic_apb_PWDATA[1 : 0];
          end
        end
        22'b1000000000000000000100 : begin
        end
        22'b0000000010000000000000 : begin
          if(system_plic_logic_bus_doWrite)begin
            _zz_61 <= _zz_137[0];
            _zz_62 <= _zz_138[0];
            _zz_63 <= _zz_139[0];
            _zz_64 <= _zz_140[0];
            _zz_65 <= _zz_141[0];
            _zz_66 <= _zz_142[0];
            _zz_67 <= _zz_143[0];
            _zz_68 <= _zz_144[0];
          end
        end
        default : begin
        end
      endcase
    end
  end

  always @ (posedge io_systemClk) begin
    system_cpu_debugReset <= system_cpu_logic_cpu_debug_resetOut;
  end

  always @ (posedge io_systemClk) begin
    if(debugCd_logic_outputReset) begin
      _zz_1 <= 1'b0;
    end else begin
      _zz_1 <= (systemDebugger_1_io_mem_cmd_valid && system_cpu_logic_cpu_debug_bus_cmd_ready);
    end
  end

  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_cpuAccess_b_s2mPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_valid <= 1'b0;
      system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_ready <= 1'b1;
      system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_regs_valid <= 1'b0;
      system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_regs_ready <= 1'b1;
      system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_valid <= 1'b0;
      system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_ready <= 1'b1;
      system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_ddrA_b_halfPipe_regs_valid <= 1'b0;
      system_ddr_ddrLogic_ddrA_b_halfPipe_regs_ready <= 1'b1;
    end else begin
      if(system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_ready)begin
        system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_118)begin
        system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rValid <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_valid;
      end
      if(system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_ready)begin
        system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rValid <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_valid;
      end
      if(system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_ready)begin
        system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rValid <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_valid;
      end
      if(system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_ready)begin
        system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_119)begin
        system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rValid <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_valid;
      end
      if(system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_ready)begin
        system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_rValid <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_valid;
      end
      if(system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_ready)begin
        system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_rValid <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_valid;
      end
      if(system_ddr_ddrLogic_cpuAccess_b_s2mPipe_ready)begin
        system_ddr_ddrLogic_cpuAccess_b_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_120)begin
        system_ddr_ddrLogic_cpuAccess_b_s2mPipe_rValid <= system_ddr_ddrLogic_cpuAccess_b_valid;
      end
      if(system_ddr_ddrLogic_cpuAccess_b_s2mPipe_ready)begin
        system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_rValid <= system_ddr_ddrLogic_cpuAccess_b_s2mPipe_valid;
      end
      if(system_ddr_ddrLogic_cpuAccess_r_s2mPipe_ready)begin
        system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_121)begin
        system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rValid <= system_ddr_ddrLogic_cpuAccess_r_valid;
      end
      if(system_ddr_ddrLogic_cpuAccess_r_s2mPipe_ready)begin
        system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_rValid <= system_ddr_ddrLogic_cpuAccess_r_s2mPipe_valid;
      end
      if(_zz_122)begin
        system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_valid <= system_ddr_ddrLogic_userAdapters_0_userShared_arw_valid;
        system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_ready <= (! system_ddr_ddrLogic_userAdapters_0_userShared_arw_valid);
      end else begin
        system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_valid <= (! system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_ready);
        system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_ready <= system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_ready;
      end
      if(system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_ready)begin
        system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_123)begin
        system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rValid <= system_ddr_ddrLogic_userAdapters_0_userShared_w_valid;
      end
      if(system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_ready)begin
        system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_rValid <= system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_valid;
      end
      if(system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_ready)begin
        system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_124)begin
        system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rValid <= system_ddr_ddrLogic_userAdapters_0_pipeline_r_valid;
      end
      if(system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_ready)begin
        system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_rValid <= system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_valid;
      end
      if(_zz_125)begin
        system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_regs_valid <= system_ddr_ddrLogic_userAdapters_0_pipeline_b_valid;
        system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_regs_ready <= (! system_ddr_ddrLogic_userAdapters_0_pipeline_b_valid);
      end else begin
        system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_regs_valid <= (! system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_ready);
        system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_regs_ready <= system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_ready;
      end
      if(_zz_126)begin
        system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_valid <= system_ddr_ddrLogic_arbiter_io_output_arw_valid;
        system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_ready <= (! system_ddr_ddrLogic_arbiter_io_output_arw_valid);
      end else begin
        system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_valid <= (! system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_ready);
        system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_ready <= system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_ready;
      end
      if(_zz_95)begin
        system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_rValid <= system_ddr_ddrLogic_arbiter_io_output_w_valid;
      end
      if(_zz_127)begin
        system_ddr_ddrLogic_ddrA_b_halfPipe_regs_valid <= system_ddr_ddrLogic_ddrA_b_valid;
        system_ddr_ddrLogic_ddrA_b_halfPipe_regs_ready <= (! system_ddr_ddrLogic_ddrA_b_valid);
      end else begin
        system_ddr_ddrLogic_ddrA_b_halfPipe_regs_valid <= (! system_ddr_ddrLogic_ddrA_b_halfPipe_ready);
        system_ddr_ddrLogic_ddrA_b_halfPipe_regs_ready <= system_ddr_ddrLogic_ddrA_b_halfPipe_ready;
      end
    end
  end

  always @ (posedge io_memoryClk) begin
    if(_zz_118)begin
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_addr <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_addr;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_id <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_id;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_region <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_region;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_len <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_len;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_size <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_size;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_burst <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_burst;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_lock <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_lock;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_cache <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_cache;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_qos <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_qos;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_prot <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_prot;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_rData_write <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_payload_write;
    end
    if(system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_ready)begin
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_addr <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_addr;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_id <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_id;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_region <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_region;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_len <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_len;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_size <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_size;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_burst <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_burst;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_lock <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_lock;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_cache <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_cache;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_qos <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_qos;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_prot <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_prot;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_rData_write <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_payload_write;
    end
    if(system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_ready)begin
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_addr <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_addr;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_id <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_id;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_region <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_region;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_len <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_len;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_size <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_size;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_burst <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_burst;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_lock <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_lock;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_cache <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_cache;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_qos <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_qos;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_prot <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_prot;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_m2sPipe_rData_write <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_arw_s2mPipe_m2sPipe_payload_write;
    end
    if(_zz_119)begin
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rData_data <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_payload_data;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rData_strb <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_payload_strb;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_rData_last <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_payload_last;
    end
    if(system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_ready)begin
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_rData_data <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_payload_data;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_rData_strb <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_payload_strb;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_rData_last <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_payload_last;
    end
    if(system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_ready)begin
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_rData_data <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_payload_data;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_rData_strb <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_payload_strb;
      system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_m2sPipe_rData_last <= system_ddr_ddrLogic_systemToMemoryBridge_io_output_w_s2mPipe_m2sPipe_payload_last;
    end
    if(_zz_120)begin
      system_ddr_ddrLogic_cpuAccess_b_s2mPipe_rData_id <= system_ddr_ddrLogic_cpuAccess_b_payload_id;
      system_ddr_ddrLogic_cpuAccess_b_s2mPipe_rData_resp <= system_ddr_ddrLogic_cpuAccess_b_payload_resp;
    end
    if(system_ddr_ddrLogic_cpuAccess_b_s2mPipe_ready)begin
      system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_rData_id <= system_ddr_ddrLogic_cpuAccess_b_s2mPipe_payload_id;
      system_ddr_ddrLogic_cpuAccess_b_s2mPipe_m2sPipe_rData_resp <= system_ddr_ddrLogic_cpuAccess_b_s2mPipe_payload_resp;
    end
    if(_zz_121)begin
      system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rData_data <= system_ddr_ddrLogic_cpuAccess_r_payload_data;
      system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rData_id <= system_ddr_ddrLogic_cpuAccess_r_payload_id;
      system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rData_resp <= system_ddr_ddrLogic_cpuAccess_r_payload_resp;
      system_ddr_ddrLogic_cpuAccess_r_s2mPipe_rData_last <= system_ddr_ddrLogic_cpuAccess_r_payload_last;
    end
    if(system_ddr_ddrLogic_cpuAccess_r_s2mPipe_ready)begin
      system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_rData_data <= system_ddr_ddrLogic_cpuAccess_r_s2mPipe_payload_data;
      system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_rData_id <= system_ddr_ddrLogic_cpuAccess_r_s2mPipe_payload_id;
      system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_rData_resp <= system_ddr_ddrLogic_cpuAccess_r_s2mPipe_payload_resp;
      system_ddr_ddrLogic_cpuAccess_r_s2mPipe_m2sPipe_rData_last <= system_ddr_ddrLogic_cpuAccess_r_s2mPipe_payload_last;
    end
    if(_zz_122)begin
      system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_addr <= system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_addr;
      system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_id <= system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_id;
      system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_region <= system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_region;
      system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_len <= system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_len;
      system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_size <= system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_size;
      system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_burst <= system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_burst;
      system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_lock <= system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_lock;
      system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_cache <= system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_cache;
      system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_qos <= system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_qos;
      system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_prot <= system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_prot;
      system_ddr_ddrLogic_userAdapters_0_userShared_arw_halfPipe_regs_payload_write <= system_ddr_ddrLogic_userAdapters_0_userShared_arw_payload_write;
    end
    if(_zz_123)begin
      system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rData_data <= system_ddr_ddrLogic_userAdapters_0_userShared_w_payload_data;
      system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rData_strb <= system_ddr_ddrLogic_userAdapters_0_userShared_w_payload_strb;
      system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_rData_last <= system_ddr_ddrLogic_userAdapters_0_userShared_w_payload_last;
    end
    if(system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_ready)begin
      system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_rData_data <= system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_payload_data;
      system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_rData_strb <= system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_payload_strb;
      system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_m2sPipe_rData_last <= system_ddr_ddrLogic_userAdapters_0_userShared_w_s2mPipe_payload_last;
    end
    if(_zz_124)begin
      system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rData_data <= system_ddr_ddrLogic_userAdapters_0_pipeline_r_payload_data;
      system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rData_id <= system_ddr_ddrLogic_userAdapters_0_pipeline_r_payload_id;
      system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rData_resp <= system_ddr_ddrLogic_userAdapters_0_pipeline_r_payload_resp;
      system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_rData_last <= system_ddr_ddrLogic_userAdapters_0_pipeline_r_payload_last;
    end
    if(system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_ready)begin
      system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_rData_data <= system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_payload_data;
      system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_rData_id <= system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_payload_id;
      system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_rData_resp <= system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_payload_resp;
      system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_m2sPipe_rData_last <= system_ddr_ddrLogic_userAdapters_0_pipeline_r_s2mPipe_payload_last;
    end
    if(_zz_125)begin
      system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_regs_payload_id <= system_ddr_ddrLogic_userAdapters_0_pipeline_b_payload_id;
      system_ddr_ddrLogic_userAdapters_0_pipeline_b_halfPipe_regs_payload_resp <= system_ddr_ddrLogic_userAdapters_0_pipeline_b_payload_resp;
    end
    if(_zz_126)begin
      system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_addr <= system_ddr_ddrLogic_arbiter_io_output_arw_payload_addr;
      system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_id <= system_ddr_ddrLogic_arbiter_io_output_arw_payload_id;
      system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_region <= system_ddr_ddrLogic_arbiter_io_output_arw_payload_region;
      system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_len <= system_ddr_ddrLogic_arbiter_io_output_arw_payload_len;
      system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_size <= system_ddr_ddrLogic_arbiter_io_output_arw_payload_size;
      system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_burst <= system_ddr_ddrLogic_arbiter_io_output_arw_payload_burst;
      system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_lock <= system_ddr_ddrLogic_arbiter_io_output_arw_payload_lock;
      system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_cache <= system_ddr_ddrLogic_arbiter_io_output_arw_payload_cache;
      system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_qos <= system_ddr_ddrLogic_arbiter_io_output_arw_payload_qos;
      system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_prot <= system_ddr_ddrLogic_arbiter_io_output_arw_payload_prot;
      system_ddr_ddrLogic_arbiter_io_output_arw_halfPipe_regs_payload_write <= system_ddr_ddrLogic_arbiter_io_output_arw_payload_write;
    end
    if(_zz_95)begin
      system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_rData_data <= system_ddr_ddrLogic_arbiter_io_output_w_payload_data;
      system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_rData_strb <= system_ddr_ddrLogic_arbiter_io_output_w_payload_strb;
      system_ddr_ddrLogic_arbiter_io_output_w_m2sPipe_rData_last <= system_ddr_ddrLogic_arbiter_io_output_w_payload_last;
    end
    if(_zz_127)begin
      system_ddr_ddrLogic_ddrA_b_halfPipe_regs_payload_id <= system_ddr_ddrLogic_ddrA_b_payload_id;
      system_ddr_ddrLogic_ddrA_b_halfPipe_regs_payload_resp <= system_ddr_ddrLogic_ddrA_b_payload_resp;
    end
  end

  always @ (posedge io_ddrMasters_0_clk) begin
    if(_zz_109) begin
      io_ddrMasters_0_aw_halfPipe_regs_valid <= 1'b0;
      io_ddrMasters_0_aw_halfPipe_regs_ready <= 1'b1;
      io_ddrMasters_0_ar_halfPipe_regs_valid <= 1'b0;
      io_ddrMasters_0_ar_halfPipe_regs_ready <= 1'b1;
      io_ddrMasters_0_w_s2mPipe_rValid <= 1'b0;
      io_ddrMasters_0_w_s2mPipe_m2sPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_rValid <= 1'b0;
    end else begin
      if(_zz_128)begin
        io_ddrMasters_0_aw_halfPipe_regs_valid <= io_ddrMasters_0_aw_valid;
        io_ddrMasters_0_aw_halfPipe_regs_ready <= (! io_ddrMasters_0_aw_valid);
      end else begin
        io_ddrMasters_0_aw_halfPipe_regs_valid <= (! io_ddrMasters_0_aw_halfPipe_ready);
        io_ddrMasters_0_aw_halfPipe_regs_ready <= io_ddrMasters_0_aw_halfPipe_ready;
      end
      if(_zz_129)begin
        io_ddrMasters_0_ar_halfPipe_regs_valid <= io_ddrMasters_0_ar_valid;
        io_ddrMasters_0_ar_halfPipe_regs_ready <= (! io_ddrMasters_0_ar_valid);
      end else begin
        io_ddrMasters_0_ar_halfPipe_regs_valid <= (! io_ddrMasters_0_ar_halfPipe_ready);
        io_ddrMasters_0_ar_halfPipe_regs_ready <= io_ddrMasters_0_ar_halfPipe_ready;
      end
      if(io_ddrMasters_0_w_s2mPipe_ready)begin
        io_ddrMasters_0_w_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_130)begin
        io_ddrMasters_0_w_s2mPipe_rValid <= io_ddrMasters_0_w_valid;
      end
      if(io_ddrMasters_0_w_s2mPipe_ready)begin
        io_ddrMasters_0_w_s2mPipe_m2sPipe_rValid <= io_ddrMasters_0_w_s2mPipe_valid;
      end
      if(_zz_97)begin
        system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_rValid <= system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_valid;
      end
      if(system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_ready)begin
        system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_131)begin
        system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_rValid <= system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_valid;
      end
      if(system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_ready)begin
        system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_rValid <= system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_valid;
      end
    end
  end

  always @ (posedge io_ddrMasters_0_clk) begin
    if(_zz_128)begin
      io_ddrMasters_0_aw_halfPipe_regs_payload_addr <= io_ddrMasters_0_aw_payload_addr;
      io_ddrMasters_0_aw_halfPipe_regs_payload_id <= io_ddrMasters_0_aw_payload_id;
      io_ddrMasters_0_aw_halfPipe_regs_payload_region <= io_ddrMasters_0_aw_payload_region;
      io_ddrMasters_0_aw_halfPipe_regs_payload_len <= io_ddrMasters_0_aw_payload_len;
      io_ddrMasters_0_aw_halfPipe_regs_payload_size <= io_ddrMasters_0_aw_payload_size;
      io_ddrMasters_0_aw_halfPipe_regs_payload_burst <= io_ddrMasters_0_aw_payload_burst;
      io_ddrMasters_0_aw_halfPipe_regs_payload_lock <= io_ddrMasters_0_aw_payload_lock;
      io_ddrMasters_0_aw_halfPipe_regs_payload_cache <= io_ddrMasters_0_aw_payload_cache;
      io_ddrMasters_0_aw_halfPipe_regs_payload_qos <= io_ddrMasters_0_aw_payload_qos;
      io_ddrMasters_0_aw_halfPipe_regs_payload_prot <= io_ddrMasters_0_aw_payload_prot;
    end
    if(_zz_129)begin
      io_ddrMasters_0_ar_halfPipe_regs_payload_addr <= io_ddrMasters_0_ar_payload_addr;
      io_ddrMasters_0_ar_halfPipe_regs_payload_id <= io_ddrMasters_0_ar_payload_id;
      io_ddrMasters_0_ar_halfPipe_regs_payload_region <= io_ddrMasters_0_ar_payload_region;
      io_ddrMasters_0_ar_halfPipe_regs_payload_len <= io_ddrMasters_0_ar_payload_len;
      io_ddrMasters_0_ar_halfPipe_regs_payload_size <= io_ddrMasters_0_ar_payload_size;
      io_ddrMasters_0_ar_halfPipe_regs_payload_burst <= io_ddrMasters_0_ar_payload_burst;
      io_ddrMasters_0_ar_halfPipe_regs_payload_lock <= io_ddrMasters_0_ar_payload_lock;
      io_ddrMasters_0_ar_halfPipe_regs_payload_cache <= io_ddrMasters_0_ar_payload_cache;
      io_ddrMasters_0_ar_halfPipe_regs_payload_qos <= io_ddrMasters_0_ar_payload_qos;
      io_ddrMasters_0_ar_halfPipe_regs_payload_prot <= io_ddrMasters_0_ar_payload_prot;
    end
    if(_zz_130)begin
      io_ddrMasters_0_w_s2mPipe_rData_data <= io_ddrMasters_0_w_payload_data;
      io_ddrMasters_0_w_s2mPipe_rData_strb <= io_ddrMasters_0_w_payload_strb;
      io_ddrMasters_0_w_s2mPipe_rData_last <= io_ddrMasters_0_w_payload_last;
    end
    if(io_ddrMasters_0_w_s2mPipe_ready)begin
      io_ddrMasters_0_w_s2mPipe_m2sPipe_rData_data <= io_ddrMasters_0_w_s2mPipe_payload_data;
      io_ddrMasters_0_w_s2mPipe_m2sPipe_rData_strb <= io_ddrMasters_0_w_s2mPipe_payload_strb;
      io_ddrMasters_0_w_s2mPipe_m2sPipe_rData_last <= io_ddrMasters_0_w_s2mPipe_payload_last;
    end
    if(_zz_97)begin
      system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_rData_data <= system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_payload_data;
      system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_rData_id <= system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_payload_id;
      system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_rData_resp <= system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_payload_resp;
      system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_m2sPipe_rData_last <= system_ddr_ddrLogic_userAdapters_0_bridge_io_input_r_payload_last;
    end
    if(_zz_131)begin
      system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_rData_id <= system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_payload_id;
      system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_rData_resp <= system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_payload_resp;
    end
    if(system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_ready)begin
      system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_rData_id <= system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_payload_id;
      system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_m2sPipe_rData_resp <= system_ddr_ddrLogic_userAdapters_0_bridge_io_input_b_s2mPipe_payload_resp;
    end
  end

  always @ (posedge io_memoryClk) begin
    if(_zz_114)begin
      system_ddr_ddrLogic_ddrAReset_counter <= (system_ddr_ddrLogic_ddrAReset_counter + 5'h01);
    end
    system_ddr_ddrLogic_ddrAReset_reset <= system_ddr_ddrLogic_ddrAReset_resetUnbuffered;
  end

  always @ (posedge io_memoryClk or posedge system_ddr_ddrLogic_ddrAReset_reset) begin
    if (system_ddr_ddrLogic_ddrAReset_reset) begin
      system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_m2sPipe_rValid <= 1'b0;
      system_ddr_ddrLogic_ddrAToAxi3_ddrA_wCounter <= 8'h0;
      ddrCd_logic_outputReset_regNext <= 1'b0;
      _zz_12 <= 1'b0;
      _zz_18 <= 1'b0;
      _zz_23 <= 1'b0;
      system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_valid <= 1'b0;
      system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_ready <= 1'b1;
      io_ddrA_r_m2sPipe_rValid <= 1'b0;
      io_ddrA_b_halfPipe_regs_valid <= 1'b0;
      io_ddrA_b_halfPipe_regs_ready <= 1'b1;
    end else begin
      if(system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_ready)begin
        system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_132)begin
        system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_rValid <= system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_valid;
      end
      if(system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_ready)begin
        system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_m2sPipe_rValid <= system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_valid;
      end
      if((system_ddr_ddrLogic_ddrA_w_valid && system_ddr_ddrLogic_ddrA_w_ready))begin
        system_ddr_ddrLogic_ddrAToAxi3_ddrA_wCounter <= (system_ddr_ddrLogic_ddrAToAxi3_ddrA_wCounter + 8'h01);
        if(system_ddr_ddrLogic_ddrA_w_payload_last)begin
          system_ddr_ddrLogic_ddrAToAxi3_ddrA_wCounter <= 8'h0;
        end
      end
      ddrCd_logic_outputReset_regNext <= ddrCd_logic_outputReset;
      if(_zz_5)begin
        _zz_12 <= (system_ddr_ddrLogic_ddrA_w_translated_valid && _zz_4);
      end
      if(_zz_17)begin
        _zz_18 <= 1'b0;
      end
      if(_zz_133)begin
        _zz_18 <= _zz_6;
      end
      if(_zz_17)begin
        _zz_23 <= (_zz_6 || _zz_18);
      end
      if(_zz_134)begin
        system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_valid <= system_ddr_ddrLogic_ddrAToAxi3_ioArw_valid;
        system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_ready <= (! system_ddr_ddrLogic_ddrAToAxi3_ioArw_valid);
      end else begin
        system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_valid <= (! system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_ready);
        system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_ready <= system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_ready;
      end
      if(io_ddrA_r_ready)begin
        io_ddrA_r_m2sPipe_rValid <= io_ddrA_r_valid;
      end
      if(_zz_135)begin
        io_ddrA_b_halfPipe_regs_valid <= io_ddrA_b_valid;
        io_ddrA_b_halfPipe_regs_ready <= (! io_ddrA_b_valid);
      end else begin
        io_ddrA_b_halfPipe_regs_valid <= (! io_ddrA_b_halfPipe_ready);
        io_ddrA_b_halfPipe_regs_ready <= io_ddrA_b_halfPipe_ready;
      end
    end
  end

  always @ (posedge io_memoryClk) begin
    if(_zz_132)begin
      system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_rData_id <= system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_payload_id;
      system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_rData_len <= system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_payload_len;
    end
    if(system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_ready)begin
      system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_m2sPipe_rData_id <= system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_payload_id;
      system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_m2sPipe_rData_len <= system_ddr_ddrLogic_ddrAToAxi3_patchArw_translated_thrown_fifo_io_pop_s2mPipe_payload_len;
    end
    if(_zz_5)begin
      _zz_13 <= system_ddr_ddrLogic_ddrA_w_translated_payload_w_data;
      _zz_14 <= system_ddr_ddrLogic_ddrA_w_translated_payload_w_strb;
      _zz_15 <= system_ddr_ddrLogic_ddrA_w_translated_payload_w_last;
      _zz_16 <= system_ddr_ddrLogic_ddrA_w_translated_payload_id;
    end
    if(_zz_133)begin
      _zz_19 <= _zz_8;
      _zz_20 <= _zz_9;
      _zz_21 <= _zz_10;
      _zz_22 <= _zz_11;
    end
    if(_zz_17)begin
      _zz_24 <= (_zz_18 ? _zz_19 : _zz_8);
      _zz_25 <= (_zz_18 ? _zz_20 : _zz_9);
      _zz_26 <= (_zz_18 ? _zz_21 : _zz_10);
      _zz_27 <= (_zz_18 ? _zz_22 : _zz_11);
    end
    if(_zz_134)begin
      system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_addr <= system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_addr;
      system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_id <= system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_id;
      system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_region <= system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_region;
      system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_len <= system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_len;
      system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_size <= system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_size;
      system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_burst <= system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_burst;
      system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_lock <= system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_lock;
      system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_cache <= system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_cache;
      system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_qos <= system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_qos;
      system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_prot <= system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_prot;
      system_ddr_ddrLogic_ddrAToAxi3_ioArw_halfPipe_regs_payload_write <= system_ddr_ddrLogic_ddrAToAxi3_ioArw_payload_write;
    end
    if(io_ddrA_r_ready)begin
      io_ddrA_r_m2sPipe_rData_data <= io_ddrA_r_payload_data;
      io_ddrA_r_m2sPipe_rData_id <= io_ddrA_r_payload_id;
      io_ddrA_r_m2sPipe_rData_resp <= io_ddrA_r_payload_resp;
      io_ddrA_r_m2sPipe_rData_last <= io_ddrA_r_payload_last;
    end
    if(_zz_135)begin
      io_ddrA_b_halfPipe_regs_payload_id <= io_ddrA_b_payload_id;
      io_ddrA_b_halfPipe_regs_payload_resp <= io_ddrA_b_payload_resp;
    end
  end

  always @ (posedge io_systemClk) begin
    system_cpu_externalInterrupt_plic_target_bestRequest_priority <= (_zz_51 ? _zz_49 : system_cpu_externalInterrupt_plic_target_requests_8_priority);
    system_cpu_externalInterrupt_plic_target_bestRequest_id <= (_zz_51 ? (_zz_48 ? (_zz_42 ? (_zz_30 ? system_cpu_externalInterrupt_plic_target_requests_0_id : system_cpu_externalInterrupt_plic_target_requests_1_id) : (_zz_33 ? system_cpu_externalInterrupt_plic_target_requests_2_id : system_cpu_externalInterrupt_plic_target_requests_3_id)) : (_zz_45 ? (_zz_36 ? system_cpu_externalInterrupt_plic_target_requests_4_id : system_cpu_externalInterrupt_plic_target_requests_5_id) : (_zz_39 ? system_cpu_externalInterrupt_plic_target_requests_6_id : system_cpu_externalInterrupt_plic_target_requests_7_id))) : system_cpu_externalInterrupt_plic_target_requests_8_id);
    system_cpu_externalInterrupt_plic_target_bestRequest_valid <= (_zz_51 ? _zz_50 : system_cpu_externalInterrupt_plic_target_requests_8_valid);
    if(system_bridge_bmb_cmd_ready)begin
      system_bridge_bmb_cmd_m2sPipe_rData_last <= system_bridge_bmb_cmd_payload_last;
      system_bridge_bmb_cmd_m2sPipe_rData_fragment_source <= system_bridge_bmb_cmd_payload_fragment_source;
      system_bridge_bmb_cmd_m2sPipe_rData_fragment_opcode <= system_bridge_bmb_cmd_payload_fragment_opcode;
      system_bridge_bmb_cmd_m2sPipe_rData_fragment_address <= system_bridge_bmb_cmd_payload_fragment_address;
      system_bridge_bmb_cmd_m2sPipe_rData_fragment_length <= system_bridge_bmb_cmd_payload_fragment_length;
      system_bridge_bmb_cmd_m2sPipe_rData_fragment_data <= system_bridge_bmb_cmd_payload_fragment_data;
      system_bridge_bmb_cmd_m2sPipe_rData_fragment_mask <= system_bridge_bmb_cmd_payload_fragment_mask;
      system_bridge_bmb_cmd_m2sPipe_rData_fragment_context <= system_bridge_bmb_cmd_payload_fragment_context;
    end
    if(_zz_117)begin
      system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_last <= system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_last;
      system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_source <= system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_source;
      system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_opcode <= system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_opcode;
      system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_address <= system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_address;
      system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_length <= system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_length;
      system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_data <= system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_data;
      system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_mask <= system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_mask;
      system_peripheralBridge_input_burstUnburstifier_io_output_cmd_halfPipe_regs_payload_fragment_context <= system_peripheralBridge_input_burstUnburstifier_io_output_cmd_payload_fragment_context;
    end
  end


endmodule

module BmbUnburstify_1_e12a9decc0704226832aec4017b36e8d (
  input               io_input_cmd_valid,
  output reg          io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [23:0]   io_input_cmd_payload_fragment_address,
  input      [4:0]    io_input_cmd_payload_fragment_length,
  input      [31:0]   io_input_cmd_payload_fragment_data,
  input      [3:0]    io_input_cmd_payload_fragment_mask,
  input      [0:0]    io_input_cmd_payload_fragment_context,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [0:0]    io_input_rsp_payload_fragment_source,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [31:0]   io_input_rsp_payload_fragment_data,
  output     [0:0]    io_input_rsp_payload_fragment_context,
  output reg          io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output reg [0:0]    io_output_cmd_payload_fragment_source,
  output reg [0:0]    io_output_cmd_payload_fragment_opcode,
  output reg [23:0]   io_output_cmd_payload_fragment_address,
  output reg [1:0]    io_output_cmd_payload_fragment_length,
  output     [31:0]   io_output_cmd_payload_fragment_data,
  output     [3:0]    io_output_cmd_payload_fragment_mask,
  output reg [2:0]    io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [0:0]    io_output_rsp_payload_fragment_source,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [31:0]   io_output_rsp_payload_fragment_data,
  input      [2:0]    io_output_rsp_payload_fragment_context,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  wire                _zz_1;
  wire       [11:0]   _zz_2;
  wire       [11:0]   _zz_3;
  wire       [11:0]   _zz_4;
  wire                doResult;
  reg                 buffer_valid;
  reg        [0:0]    buffer_opcode;
  reg        [0:0]    buffer_source;
  reg        [23:0]   buffer_address;
  reg        [0:0]    buffer_context;
  reg        [2:0]    buffer_beat;
  wire                buffer_last;
  wire       [23:0]   buffer_addressIncr;
  wire                buffer_isWrite;
  wire       [2:0]    cmdTransferBeatCount;
  wire                requireBuffer;

  assign _zz_1 = (io_output_cmd_valid && io_output_cmd_ready);
  assign _zz_2 = (_zz_4 + 12'h004);
  assign _zz_3 = buffer_address[11 : 0];
  assign _zz_4 = _zz_3;
  assign buffer_last = (buffer_beat == (3'b001));
  assign buffer_addressIncr = {buffer_address[23 : 12],(_zz_2 & (~ 12'h003))};
  assign buffer_isWrite = (buffer_opcode == (1'b1));
  assign cmdTransferBeatCount = io_input_cmd_payload_fragment_length[4 : 2];
  assign requireBuffer = (cmdTransferBeatCount != (3'b000));
  assign io_output_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_output_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_output_cmd_payload_last = 1'b1;
  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_source = buffer_source;
    end else begin
      io_output_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_address = buffer_addressIncr;
    end else begin
      io_output_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
      if(requireBuffer)begin
        io_output_cmd_payload_fragment_address[1 : 0] = (2'b00);
      end
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_opcode = buffer_opcode;
    end else begin
      io_output_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_length = (2'b11);
    end else begin
      if(requireBuffer)begin
        io_output_cmd_payload_fragment_length = (2'b11);
      end else begin
        io_output_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length[1:0];
      end
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_context[0 : 0] = buffer_context;
    end else begin
      io_output_cmd_payload_fragment_context[0 : 0] = io_input_cmd_payload_fragment_context;
    end
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_context[2] = buffer_last;
      io_output_cmd_payload_fragment_context[1] = buffer_isWrite;
    end else begin
      io_output_cmd_payload_fragment_context[1] = (io_input_cmd_payload_fragment_opcode == (1'b1));
      io_output_cmd_payload_fragment_context[2] = (! requireBuffer);
    end
  end

  always @ (*) begin
    io_input_cmd_ready = 1'b0;
    if(buffer_valid)begin
      io_input_cmd_ready = (buffer_isWrite && io_output_cmd_ready);
    end else begin
      io_input_cmd_ready = io_output_cmd_ready;
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_valid = (! (buffer_isWrite && (! io_input_cmd_valid)));
    end else begin
      io_output_cmd_valid = io_input_cmd_valid;
    end
  end

  assign io_input_rsp_valid = (io_output_rsp_valid && (io_output_rsp_payload_fragment_context[2] || (! io_output_rsp_payload_fragment_context[1])));
  assign io_input_rsp_payload_last = io_output_rsp_payload_fragment_context[2];
  assign io_input_rsp_payload_fragment_source = io_output_rsp_payload_fragment_source;
  assign io_input_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_input_rsp_payload_fragment_context = io_output_rsp_payload_fragment_context[0:0];
  assign io_output_rsp_ready = io_input_rsp_ready;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      buffer_valid <= 1'b0;
    end else begin
      if(_zz_1)begin
        if(buffer_last)begin
          buffer_valid <= 1'b0;
        end
      end
      if(! buffer_valid) begin
        buffer_valid <= (requireBuffer && (io_output_cmd_valid && io_output_cmd_ready));
      end
    end
  end

  always @ (posedge io_systemClk) begin
    if(_zz_1)begin
      buffer_beat <= (buffer_beat - (3'b001));
      buffer_address[11 : 0] <= buffer_addressIncr[11 : 0];
    end
    if(! buffer_valid) begin
      buffer_opcode <= io_input_cmd_payload_fragment_opcode;
      buffer_source <= io_input_cmd_payload_fragment_source;
      buffer_address <= io_input_cmd_payload_fragment_address;
      buffer_context <= io_input_cmd_payload_fragment_context;
      buffer_beat <= cmdTransferBeatCount;
    end
  end


endmodule

module BmbArbiter_4_e12a9decc0704226832aec4017b36e8d (
  input               io_inputs_0_cmd_valid,
  output              io_inputs_0_cmd_ready,
  input               io_inputs_0_cmd_payload_last,
  input      [0:0]    io_inputs_0_cmd_payload_fragment_source,
  input      [0:0]    io_inputs_0_cmd_payload_fragment_opcode,
  input      [23:0]   io_inputs_0_cmd_payload_fragment_address,
  input      [4:0]    io_inputs_0_cmd_payload_fragment_length,
  input      [31:0]   io_inputs_0_cmd_payload_fragment_data,
  input      [3:0]    io_inputs_0_cmd_payload_fragment_mask,
  input      [0:0]    io_inputs_0_cmd_payload_fragment_context,
  output              io_inputs_0_rsp_valid,
  input               io_inputs_0_rsp_ready,
  output              io_inputs_0_rsp_payload_last,
  output     [0:0]    io_inputs_0_rsp_payload_fragment_source,
  output     [0:0]    io_inputs_0_rsp_payload_fragment_opcode,
  output     [31:0]   io_inputs_0_rsp_payload_fragment_data,
  output     [0:0]    io_inputs_0_rsp_payload_fragment_context,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output     [0:0]    io_output_cmd_payload_fragment_source,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output     [23:0]   io_output_cmd_payload_fragment_address,
  output     [4:0]    io_output_cmd_payload_fragment_length,
  output     [31:0]   io_output_cmd_payload_fragment_data,
  output     [3:0]    io_output_cmd_payload_fragment_mask,
  output     [0:0]    io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [0:0]    io_output_rsp_payload_fragment_source,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [31:0]   io_output_rsp_payload_fragment_data,
  input      [0:0]    io_output_rsp_payload_fragment_context
);

  assign io_output_cmd_valid = io_inputs_0_cmd_valid;
  assign io_inputs_0_cmd_ready = io_output_cmd_ready;
  assign io_inputs_0_rsp_valid = io_output_rsp_valid;
  assign io_output_rsp_ready = io_inputs_0_rsp_ready;
  assign io_output_cmd_payload_last = io_inputs_0_cmd_payload_last;
  assign io_inputs_0_rsp_payload_last = io_output_rsp_payload_last;
  assign io_output_cmd_payload_fragment_source = io_inputs_0_cmd_payload_fragment_source;
  assign io_output_cmd_payload_fragment_opcode = io_inputs_0_cmd_payload_fragment_opcode;
  assign io_output_cmd_payload_fragment_address = io_inputs_0_cmd_payload_fragment_address;
  assign io_output_cmd_payload_fragment_length = io_inputs_0_cmd_payload_fragment_length;
  assign io_output_cmd_payload_fragment_data = io_inputs_0_cmd_payload_fragment_data;
  assign io_output_cmd_payload_fragment_mask = io_inputs_0_cmd_payload_fragment_mask;
  assign io_output_cmd_payload_fragment_context = io_inputs_0_cmd_payload_fragment_context;
  assign io_inputs_0_rsp_payload_fragment_source = io_output_rsp_payload_fragment_source;
  assign io_inputs_0_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_inputs_0_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_inputs_0_rsp_payload_fragment_context = io_output_rsp_payload_fragment_context;

endmodule

module BmbToApb3Bridge_e12a9decc0704226832aec4017b36e8d (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [23:0]   io_input_cmd_payload_fragment_address,
  input      [1:0]    io_input_cmd_payload_fragment_length,
  input      [31:0]   io_input_cmd_payload_fragment_data,
  input      [3:0]    io_input_cmd_payload_fragment_mask,
  input      [2:0]    io_input_cmd_payload_fragment_context,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [0:0]    io_input_rsp_payload_fragment_source,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [31:0]   io_input_rsp_payload_fragment_data,
  output     [2:0]    io_input_rsp_payload_fragment_context,
  output     [23:0]   io_output_PADDR,
  output     [0:0]    io_output_PSEL,
  output              io_output_PENABLE,
  input               io_output_PREADY,
  output              io_output_PWRITE,
  output     [31:0]   io_output_PWDATA,
  input      [31:0]   io_output_PRDATA,
  input               io_output_PSLVERROR,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  wire                _zz_2;
  wire                bmbBuffer_cmd_valid;
  reg                 bmbBuffer_cmd_ready;
  wire                bmbBuffer_cmd_payload_last;
  wire       [0:0]    bmbBuffer_cmd_payload_fragment_source;
  wire       [0:0]    bmbBuffer_cmd_payload_fragment_opcode;
  wire       [23:0]   bmbBuffer_cmd_payload_fragment_address;
  wire       [1:0]    bmbBuffer_cmd_payload_fragment_length;
  wire       [31:0]   bmbBuffer_cmd_payload_fragment_data;
  wire       [3:0]    bmbBuffer_cmd_payload_fragment_mask;
  wire       [2:0]    bmbBuffer_cmd_payload_fragment_context;
  reg                 bmbBuffer_rsp_valid;
  wire                bmbBuffer_rsp_ready;
  wire                bmbBuffer_rsp_payload_last;
  wire       [0:0]    bmbBuffer_rsp_payload_fragment_source;
  reg        [0:0]    bmbBuffer_rsp_payload_fragment_opcode;
  wire       [31:0]   bmbBuffer_rsp_payload_fragment_data;
  wire       [2:0]    bmbBuffer_rsp_payload_fragment_context;
  wire                _zz_1;
  wire                bmbBuffer_rsp_m2sPipe_valid;
  wire                bmbBuffer_rsp_m2sPipe_ready;
  wire                bmbBuffer_rsp_m2sPipe_payload_last;
  wire       [0:0]    bmbBuffer_rsp_m2sPipe_payload_fragment_source;
  wire       [0:0]    bmbBuffer_rsp_m2sPipe_payload_fragment_opcode;
  wire       [31:0]   bmbBuffer_rsp_m2sPipe_payload_fragment_data;
  wire       [2:0]    bmbBuffer_rsp_m2sPipe_payload_fragment_context;
  reg                 bmbBuffer_rsp_m2sPipe_rValid;
  reg                 bmbBuffer_rsp_m2sPipe_rData_last;
  reg        [0:0]    bmbBuffer_rsp_m2sPipe_rData_fragment_source;
  reg        [0:0]    bmbBuffer_rsp_m2sPipe_rData_fragment_opcode;
  reg        [31:0]   bmbBuffer_rsp_m2sPipe_rData_fragment_data;
  reg        [2:0]    bmbBuffer_rsp_m2sPipe_rData_fragment_context;
  reg                 state;

  assign _zz_2 = (! state);
  assign _zz_1 = (! (io_input_rsp_valid && (! io_input_rsp_ready)));
  assign io_input_cmd_ready = (bmbBuffer_cmd_ready && _zz_1);
  assign bmbBuffer_cmd_valid = (io_input_cmd_valid && _zz_1);
  assign bmbBuffer_cmd_payload_last = io_input_cmd_payload_last;
  assign bmbBuffer_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign bmbBuffer_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign bmbBuffer_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign bmbBuffer_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign bmbBuffer_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign bmbBuffer_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign bmbBuffer_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign bmbBuffer_rsp_ready = ((1'b1 && (! bmbBuffer_rsp_m2sPipe_valid)) || bmbBuffer_rsp_m2sPipe_ready);
  assign bmbBuffer_rsp_m2sPipe_valid = bmbBuffer_rsp_m2sPipe_rValid;
  assign bmbBuffer_rsp_m2sPipe_payload_last = bmbBuffer_rsp_m2sPipe_rData_last;
  assign bmbBuffer_rsp_m2sPipe_payload_fragment_source = bmbBuffer_rsp_m2sPipe_rData_fragment_source;
  assign bmbBuffer_rsp_m2sPipe_payload_fragment_opcode = bmbBuffer_rsp_m2sPipe_rData_fragment_opcode;
  assign bmbBuffer_rsp_m2sPipe_payload_fragment_data = bmbBuffer_rsp_m2sPipe_rData_fragment_data;
  assign bmbBuffer_rsp_m2sPipe_payload_fragment_context = bmbBuffer_rsp_m2sPipe_rData_fragment_context;
  assign io_input_rsp_valid = bmbBuffer_rsp_m2sPipe_valid;
  assign bmbBuffer_rsp_m2sPipe_ready = io_input_rsp_ready;
  assign io_input_rsp_payload_last = bmbBuffer_rsp_m2sPipe_payload_last;
  assign io_input_rsp_payload_fragment_source = bmbBuffer_rsp_m2sPipe_payload_fragment_source;
  assign io_input_rsp_payload_fragment_opcode = bmbBuffer_rsp_m2sPipe_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_data = bmbBuffer_rsp_m2sPipe_payload_fragment_data;
  assign io_input_rsp_payload_fragment_context = bmbBuffer_rsp_m2sPipe_payload_fragment_context;
  always @ (*) begin
    bmbBuffer_cmd_ready = 1'b0;
    if(! _zz_2) begin
      if(io_output_PREADY)begin
        bmbBuffer_cmd_ready = 1'b1;
      end
    end
  end

  assign io_output_PSEL[0] = bmbBuffer_cmd_valid;
  assign io_output_PENABLE = state;
  assign io_output_PWRITE = (bmbBuffer_cmd_payload_fragment_opcode == (1'b1));
  assign io_output_PADDR = bmbBuffer_cmd_payload_fragment_address;
  assign io_output_PWDATA = bmbBuffer_cmd_payload_fragment_data;
  always @ (*) begin
    bmbBuffer_rsp_valid = 1'b0;
    if(! _zz_2) begin
      if(io_output_PREADY)begin
        bmbBuffer_rsp_valid = 1'b1;
      end
    end
  end

  assign bmbBuffer_rsp_payload_fragment_data = io_output_PRDATA;
  assign bmbBuffer_rsp_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign bmbBuffer_rsp_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign bmbBuffer_rsp_payload_last = 1'b1;
  always @ (*) begin
    bmbBuffer_rsp_payload_fragment_opcode = (1'b0);
    if(io_output_PSLVERROR)begin
      bmbBuffer_rsp_payload_fragment_opcode = (1'b1);
    end
  end

  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      bmbBuffer_rsp_m2sPipe_rValid <= 1'b0;
      state <= 1'b0;
    end else begin
      if(bmbBuffer_rsp_ready)begin
        bmbBuffer_rsp_m2sPipe_rValid <= bmbBuffer_rsp_valid;
      end
      if(_zz_2)begin
        state <= bmbBuffer_cmd_valid;
      end else begin
        if(io_output_PREADY)begin
          state <= 1'b0;
        end
      end
    end
  end

  always @ (posedge io_systemClk) begin
    if(bmbBuffer_rsp_ready)begin
      bmbBuffer_rsp_m2sPipe_rData_last <= bmbBuffer_rsp_payload_last;
      bmbBuffer_rsp_m2sPipe_rData_fragment_source <= bmbBuffer_rsp_payload_fragment_source;
      bmbBuffer_rsp_m2sPipe_rData_fragment_opcode <= bmbBuffer_rsp_payload_fragment_opcode;
      bmbBuffer_rsp_m2sPipe_rData_fragment_data <= bmbBuffer_rsp_payload_fragment_data;
      bmbBuffer_rsp_m2sPipe_rData_fragment_context <= bmbBuffer_rsp_payload_fragment_context;
    end
  end


endmodule

module Apb3Router_e12a9decc0704226832aec4017b36e8d (
  input      [23:0]   io_input_PADDR,
  input      [6:0]    io_input_PSEL,
  input               io_input_PENABLE,
  output              io_input_PREADY,
  input               io_input_PWRITE,
  input      [31:0]   io_input_PWDATA,
  output     [31:0]   io_input_PRDATA,
  output              io_input_PSLVERROR,
  output     [23:0]   io_outputs_0_PADDR,
  output     [0:0]    io_outputs_0_PSEL,
  output              io_outputs_0_PENABLE,
  input               io_outputs_0_PREADY,
  output              io_outputs_0_PWRITE,
  output     [31:0]   io_outputs_0_PWDATA,
  input      [31:0]   io_outputs_0_PRDATA,
  input               io_outputs_0_PSLVERROR,
  output     [23:0]   io_outputs_1_PADDR,
  output     [0:0]    io_outputs_1_PSEL,
  output              io_outputs_1_PENABLE,
  input               io_outputs_1_PREADY,
  output              io_outputs_1_PWRITE,
  output     [31:0]   io_outputs_1_PWDATA,
  input      [31:0]   io_outputs_1_PRDATA,
  input               io_outputs_1_PSLVERROR,
  output     [23:0]   io_outputs_2_PADDR,
  output     [0:0]    io_outputs_2_PSEL,
  output              io_outputs_2_PENABLE,
  input               io_outputs_2_PREADY,
  output              io_outputs_2_PWRITE,
  output     [31:0]   io_outputs_2_PWDATA,
  input      [31:0]   io_outputs_2_PRDATA,
  input               io_outputs_2_PSLVERROR,
  output     [23:0]   io_outputs_3_PADDR,
  output     [0:0]    io_outputs_3_PSEL,
  output              io_outputs_3_PENABLE,
  input               io_outputs_3_PREADY,
  output              io_outputs_3_PWRITE,
  output     [31:0]   io_outputs_3_PWDATA,
  input      [31:0]   io_outputs_3_PRDATA,
  input               io_outputs_3_PSLVERROR,
  output     [23:0]   io_outputs_4_PADDR,
  output     [0:0]    io_outputs_4_PSEL,
  output              io_outputs_4_PENABLE,
  input               io_outputs_4_PREADY,
  output              io_outputs_4_PWRITE,
  output     [31:0]   io_outputs_4_PWDATA,
  input      [31:0]   io_outputs_4_PRDATA,
  input               io_outputs_4_PSLVERROR,
  output     [23:0]   io_outputs_5_PADDR,
  output     [0:0]    io_outputs_5_PSEL,
  output              io_outputs_5_PENABLE,
  input               io_outputs_5_PREADY,
  output              io_outputs_5_PWRITE,
  output     [31:0]   io_outputs_5_PWDATA,
  input      [31:0]   io_outputs_5_PRDATA,
  input               io_outputs_5_PSLVERROR,
  output     [23:0]   io_outputs_6_PADDR,
  output     [0:0]    io_outputs_6_PSEL,
  output              io_outputs_6_PENABLE,
  input               io_outputs_6_PREADY,
  output              io_outputs_6_PWRITE,
  output     [31:0]   io_outputs_6_PWDATA,
  input      [31:0]   io_outputs_6_PRDATA,
  input               io_outputs_6_PSLVERROR,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg                 _zz_7;
  reg        [31:0]   _zz_8;
  reg                 _zz_9;
  wire                _zz_1;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  reg        [2:0]    selIndex;

  always @(*) begin
    case(selIndex)
      3'b000 : begin
        _zz_7 = io_outputs_0_PREADY;
        _zz_8 = io_outputs_0_PRDATA;
        _zz_9 = io_outputs_0_PSLVERROR;
      end
      3'b001 : begin
        _zz_7 = io_outputs_1_PREADY;
        _zz_8 = io_outputs_1_PRDATA;
        _zz_9 = io_outputs_1_PSLVERROR;
      end
      3'b010 : begin
        _zz_7 = io_outputs_2_PREADY;
        _zz_8 = io_outputs_2_PRDATA;
        _zz_9 = io_outputs_2_PSLVERROR;
      end
      3'b011 : begin
        _zz_7 = io_outputs_3_PREADY;
        _zz_8 = io_outputs_3_PRDATA;
        _zz_9 = io_outputs_3_PSLVERROR;
      end
      3'b100 : begin
        _zz_7 = io_outputs_4_PREADY;
        _zz_8 = io_outputs_4_PRDATA;
        _zz_9 = io_outputs_4_PSLVERROR;
      end
      3'b101 : begin
        _zz_7 = io_outputs_5_PREADY;
        _zz_8 = io_outputs_5_PRDATA;
        _zz_9 = io_outputs_5_PSLVERROR;
      end
      default : begin
        _zz_7 = io_outputs_6_PREADY;
        _zz_8 = io_outputs_6_PRDATA;
        _zz_9 = io_outputs_6_PSLVERROR;
      end
    endcase
  end

  assign io_outputs_0_PADDR = io_input_PADDR;
  assign io_outputs_0_PENABLE = io_input_PENABLE;
  assign io_outputs_0_PSEL[0] = io_input_PSEL[0];
  assign io_outputs_0_PWRITE = io_input_PWRITE;
  assign io_outputs_0_PWDATA = io_input_PWDATA;
  assign io_outputs_1_PADDR = io_input_PADDR;
  assign io_outputs_1_PENABLE = io_input_PENABLE;
  assign io_outputs_1_PSEL[0] = io_input_PSEL[1];
  assign io_outputs_1_PWRITE = io_input_PWRITE;
  assign io_outputs_1_PWDATA = io_input_PWDATA;
  assign io_outputs_2_PADDR = io_input_PADDR;
  assign io_outputs_2_PENABLE = io_input_PENABLE;
  assign io_outputs_2_PSEL[0] = io_input_PSEL[2];
  assign io_outputs_2_PWRITE = io_input_PWRITE;
  assign io_outputs_2_PWDATA = io_input_PWDATA;
  assign io_outputs_3_PADDR = io_input_PADDR;
  assign io_outputs_3_PENABLE = io_input_PENABLE;
  assign io_outputs_3_PSEL[0] = io_input_PSEL[3];
  assign io_outputs_3_PWRITE = io_input_PWRITE;
  assign io_outputs_3_PWDATA = io_input_PWDATA;
  assign io_outputs_4_PADDR = io_input_PADDR;
  assign io_outputs_4_PENABLE = io_input_PENABLE;
  assign io_outputs_4_PSEL[0] = io_input_PSEL[4];
  assign io_outputs_4_PWRITE = io_input_PWRITE;
  assign io_outputs_4_PWDATA = io_input_PWDATA;
  assign io_outputs_5_PADDR = io_input_PADDR;
  assign io_outputs_5_PENABLE = io_input_PENABLE;
  assign io_outputs_5_PSEL[0] = io_input_PSEL[5];
  assign io_outputs_5_PWRITE = io_input_PWRITE;
  assign io_outputs_5_PWDATA = io_input_PWDATA;
  assign io_outputs_6_PADDR = io_input_PADDR;
  assign io_outputs_6_PENABLE = io_input_PENABLE;
  assign io_outputs_6_PSEL[0] = io_input_PSEL[6];
  assign io_outputs_6_PWRITE = io_input_PWRITE;
  assign io_outputs_6_PWDATA = io_input_PWDATA;
  assign _zz_1 = io_input_PSEL[3];
  assign _zz_2 = io_input_PSEL[5];
  assign _zz_3 = io_input_PSEL[6];
  assign _zz_4 = ((io_input_PSEL[1] || _zz_1) || _zz_2);
  assign _zz_5 = ((io_input_PSEL[2] || _zz_1) || _zz_3);
  assign _zz_6 = ((io_input_PSEL[4] || _zz_2) || _zz_3);
  assign io_input_PREADY = _zz_7;
  assign io_input_PRDATA = _zz_8;
  assign io_input_PSLVERROR = _zz_9;
  always @ (posedge io_systemClk) begin
    selIndex <= {_zz_6,{_zz_5,_zz_4}};
  end


endmodule

module Apb3Decoder_e12a9decc0704226832aec4017b36e8d (
  input      [23:0]   io_input_PADDR,
  input      [0:0]    io_input_PSEL,
  input               io_input_PENABLE,
  output reg          io_input_PREADY,
  input               io_input_PWRITE,
  input      [31:0]   io_input_PWDATA,
  output     [31:0]   io_input_PRDATA,
  output reg          io_input_PSLVERROR,
  output     [23:0]   io_output_PADDR,
  output reg [6:0]    io_output_PSEL,
  output              io_output_PENABLE,
  input               io_output_PREADY,
  output              io_output_PWRITE,
  output     [31:0]   io_output_PWDATA,
  input      [31:0]   io_output_PRDATA,
  input               io_output_PSLVERROR
);
  wire                _zz_1;

  assign _zz_1 = (io_input_PSEL[0] && (io_output_PSEL == 7'h0));
  assign io_output_PADDR = io_input_PADDR;
  assign io_output_PENABLE = io_input_PENABLE;
  assign io_output_PWRITE = io_input_PWRITE;
  assign io_output_PWDATA = io_input_PWDATA;
  always @ (*) begin
    io_output_PSEL[0] = (((io_input_PADDR & (~ 24'h3fffff)) == 24'hc00000) && io_input_PSEL[0]);
    io_output_PSEL[1] = (((io_input_PADDR & (~ 24'h00000f)) == 24'h008000) && io_input_PSEL[0]);
    io_output_PSEL[2] = (((io_input_PADDR & (~ 24'h00001f)) == 24'h010000) && io_input_PSEL[0]);
    io_output_PSEL[3] = (((io_input_PADDR & (~ 24'h0000ff)) == 24'h014000) && io_input_PSEL[0]);
    io_output_PSEL[4] = (((io_input_PADDR & (~ 24'h0000ff)) == 24'h016000) && io_input_PSEL[0]);
    io_output_PSEL[5] = (((io_input_PADDR & (~ 24'h000fff)) == 24'h0) && io_input_PSEL[0]);
    io_output_PSEL[6] = (((io_input_PADDR & (~ 24'h00ffff)) == 24'h800000) && io_input_PSEL[0]);
  end

  always @ (*) begin
    io_input_PREADY = io_output_PREADY;
    if(_zz_1)begin
      io_input_PREADY = 1'b1;
    end
  end

  assign io_input_PRDATA = io_output_PRDATA;
  always @ (*) begin
    io_input_PSLVERROR = io_output_PSLVERROR;
    if(_zz_1)begin
      io_input_PSLVERROR = 1'b1;
    end
  end


endmodule

module BmbDecoder_2_e12a9decc0704226832aec4017b36e8d (
  input               io_input_cmd_valid,
  output reg          io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [4:0]    io_input_cmd_payload_fragment_length,
  input      [31:0]   io_input_cmd_payload_fragment_data,
  input      [3:0]    io_input_cmd_payload_fragment_mask,
  input      [0:0]    io_input_cmd_payload_fragment_context,
  output reg          io_input_rsp_valid,
  input               io_input_rsp_ready,
  output reg          io_input_rsp_payload_last,
  output reg [0:0]    io_input_rsp_payload_fragment_source,
  output reg [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [31:0]   io_input_rsp_payload_fragment_data,
  output reg [0:0]    io_input_rsp_payload_fragment_context,
  output reg          io_outputs_0_cmd_valid,
  input               io_outputs_0_cmd_ready,
  output              io_outputs_0_cmd_payload_last,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_opcode,
  output     [31:0]   io_outputs_0_cmd_payload_fragment_address,
  output     [4:0]    io_outputs_0_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_0_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_0_cmd_payload_fragment_mask,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_context,
  input               io_outputs_0_rsp_valid,
  output              io_outputs_0_rsp_ready,
  input               io_outputs_0_rsp_payload_last,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_0_rsp_payload_fragment_data,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_context,
  output reg          io_outputs_1_cmd_valid,
  input               io_outputs_1_cmd_ready,
  output              io_outputs_1_cmd_payload_last,
  output     [0:0]    io_outputs_1_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_1_cmd_payload_fragment_opcode,
  output     [31:0]   io_outputs_1_cmd_payload_fragment_address,
  output     [4:0]    io_outputs_1_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_1_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_1_cmd_payload_fragment_mask,
  output     [0:0]    io_outputs_1_cmd_payload_fragment_context,
  input               io_outputs_1_rsp_valid,
  output              io_outputs_1_rsp_ready,
  input               io_outputs_1_rsp_payload_last,
  input      [0:0]    io_outputs_1_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_1_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_1_rsp_payload_fragment_data,
  input      [0:0]    io_outputs_1_rsp_payload_fragment_context,
  output reg          io_outputs_2_cmd_valid,
  input               io_outputs_2_cmd_ready,
  output              io_outputs_2_cmd_payload_last,
  output     [0:0]    io_outputs_2_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_2_cmd_payload_fragment_opcode,
  output     [31:0]   io_outputs_2_cmd_payload_fragment_address,
  output     [4:0]    io_outputs_2_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_2_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_2_cmd_payload_fragment_mask,
  output     [0:0]    io_outputs_2_cmd_payload_fragment_context,
  input               io_outputs_2_rsp_valid,
  output              io_outputs_2_rsp_ready,
  input               io_outputs_2_rsp_payload_last,
  input      [0:0]    io_outputs_2_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_2_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_2_rsp_payload_fragment_data,
  input      [0:0]    io_outputs_2_rsp_payload_fragment_context,
  output reg          io_outputs_3_cmd_valid,
  input               io_outputs_3_cmd_ready,
  output              io_outputs_3_cmd_payload_last,
  output     [0:0]    io_outputs_3_cmd_payload_fragment_source,
  output     [0:0]    io_outputs_3_cmd_payload_fragment_opcode,
  output     [31:0]   io_outputs_3_cmd_payload_fragment_address,
  output     [4:0]    io_outputs_3_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_3_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_3_cmd_payload_fragment_mask,
  output     [0:0]    io_outputs_3_cmd_payload_fragment_context,
  input               io_outputs_3_rsp_valid,
  output              io_outputs_3_rsp_ready,
  input               io_outputs_3_rsp_payload_last,
  input      [0:0]    io_outputs_3_rsp_payload_fragment_source,
  input      [0:0]    io_outputs_3_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_3_rsp_payload_fragment_data,
  input      [0:0]    io_outputs_3_rsp_payload_fragment_context,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg                 _zz_8;
  reg        [0:0]    _zz_9;
  reg        [0:0]    _zz_10;
  reg        [31:0]   _zz_11;
  reg        [0:0]    _zz_12;
  wire       [3:0]    _zz_13;
  wire       [0:0]    _zz_14;
  wire       [3:0]    _zz_15;
  wire       [0:0]    _zz_16;
  wire       [3:0]    _zz_17;
  wire                logic_hits_0;
  wire                logic_hits_1;
  wire                logic_hits_2;
  wire                logic_hits_3;
  wire                _zz_1;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                logic_noHit;
  reg        [3:0]    logic_rspPendingCounter;
  wire                logic_cmdWait;
  reg                 logic_rspHits_0;
  reg                 logic_rspHits_1;
  reg                 logic_rspHits_2;
  reg                 logic_rspHits_3;
  wire                logic_rspPending;
  wire                logic_rspNoHitValid;
  reg                 logic_rspNoHit_doIt;
  reg                 logic_rspNoHit_singleBeatRsp;
  reg        [0:0]    logic_rspNoHit_source;
  reg        [0:0]    logic_rspNoHit_context;
  reg        [2:0]    logic_rspNoHit_counter;
  wire                _zz_5;
  wire                _zz_6;
  wire       [1:0]    _zz_7;

  assign _zz_13 = (logic_rspPendingCounter + _zz_15);
  assign _zz_14 = ((io_input_cmd_valid && io_input_cmd_ready) && io_input_cmd_payload_last);
  assign _zz_15 = {3'd0, _zz_14};
  assign _zz_16 = ((io_input_rsp_valid && io_input_rsp_ready) && io_input_rsp_payload_last);
  assign _zz_17 = {3'd0, _zz_16};
  always @(*) begin
    case(_zz_7)
      2'b00 : begin
        _zz_8 = io_outputs_0_rsp_payload_last;
        _zz_9 = io_outputs_0_rsp_payload_fragment_source;
        _zz_10 = io_outputs_0_rsp_payload_fragment_opcode;
        _zz_11 = io_outputs_0_rsp_payload_fragment_data;
        _zz_12 = io_outputs_0_rsp_payload_fragment_context;
      end
      2'b01 : begin
        _zz_8 = io_outputs_1_rsp_payload_last;
        _zz_9 = io_outputs_1_rsp_payload_fragment_source;
        _zz_10 = io_outputs_1_rsp_payload_fragment_opcode;
        _zz_11 = io_outputs_1_rsp_payload_fragment_data;
        _zz_12 = io_outputs_1_rsp_payload_fragment_context;
      end
      2'b10 : begin
        _zz_8 = io_outputs_2_rsp_payload_last;
        _zz_9 = io_outputs_2_rsp_payload_fragment_source;
        _zz_10 = io_outputs_2_rsp_payload_fragment_opcode;
        _zz_11 = io_outputs_2_rsp_payload_fragment_data;
        _zz_12 = io_outputs_2_rsp_payload_fragment_context;
      end
      default : begin
        _zz_8 = io_outputs_3_rsp_payload_last;
        _zz_9 = io_outputs_3_rsp_payload_fragment_source;
        _zz_10 = io_outputs_3_rsp_payload_fragment_opcode;
        _zz_11 = io_outputs_3_rsp_payload_fragment_data;
        _zz_12 = io_outputs_3_rsp_payload_fragment_context;
      end
    endcase
  end

  assign logic_hits_0 = ((io_input_cmd_payload_fragment_address & (~ 32'h00000fff)) == 32'hf9000000);
  always @ (*) begin
    io_outputs_0_cmd_valid = (io_input_cmd_valid && logic_hits_0);
    if(logic_cmdWait)begin
      io_outputs_0_cmd_valid = 1'b0;
    end
  end

  assign _zz_1 = io_input_cmd_payload_last;
  assign io_outputs_0_cmd_payload_last = _zz_1;
  assign io_outputs_0_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_0_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_0_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_0_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_0_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_0_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_0_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign logic_hits_1 = ((io_input_cmd_payload_fragment_address & (~ 32'h00ffffff)) == 32'hf8000000);
  always @ (*) begin
    io_outputs_1_cmd_valid = (io_input_cmd_valid && logic_hits_1);
    if(logic_cmdWait)begin
      io_outputs_1_cmd_valid = 1'b0;
    end
  end

  assign _zz_2 = io_input_cmd_payload_last;
  assign io_outputs_1_cmd_payload_last = _zz_2;
  assign io_outputs_1_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_1_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_1_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_1_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_1_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_1_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_1_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign logic_hits_2 = ((32'h00001000 <= io_input_cmd_payload_fragment_address) && (io_input_cmd_payload_fragment_address < 32'he0001000));
  always @ (*) begin
    io_outputs_2_cmd_valid = (io_input_cmd_valid && logic_hits_2);
    if(logic_cmdWait)begin
      io_outputs_2_cmd_valid = 1'b0;
    end
  end

  assign _zz_3 = io_input_cmd_payload_last;
  assign io_outputs_2_cmd_payload_last = _zz_3;
  assign io_outputs_2_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_2_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_2_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_2_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_2_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_2_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_2_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign logic_hits_3 = ((io_input_cmd_payload_fragment_address & (~ 32'h00ffffff)) == 32'hfa000000);
  always @ (*) begin
    io_outputs_3_cmd_valid = (io_input_cmd_valid && logic_hits_3);
    if(logic_cmdWait)begin
      io_outputs_3_cmd_valid = 1'b0;
    end
  end

  assign _zz_4 = io_input_cmd_payload_last;
  assign io_outputs_3_cmd_payload_last = _zz_4;
  assign io_outputs_3_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
  assign io_outputs_3_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_3_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_3_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_3_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_3_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_3_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign logic_noHit = (! ({logic_hits_3,{logic_hits_2,{logic_hits_1,logic_hits_0}}} != (4'b0000)));
  always @ (*) begin
    io_input_cmd_ready = (({(logic_hits_3 && io_outputs_3_cmd_ready),{(logic_hits_2 && io_outputs_2_cmd_ready),{(logic_hits_1 && io_outputs_1_cmd_ready),(logic_hits_0 && io_outputs_0_cmd_ready)}}} != (4'b0000)) || logic_noHit);
    if(logic_cmdWait)begin
      io_input_cmd_ready = 1'b0;
    end
  end

  assign logic_rspPending = (logic_rspPendingCounter != (4'b0000));
  assign logic_rspNoHitValid = (! ({logic_rspHits_3,{logic_rspHits_2,{logic_rspHits_1,logic_rspHits_0}}} != (4'b0000)));
  always @ (*) begin
    io_input_rsp_valid = (({io_outputs_3_rsp_valid,{io_outputs_2_rsp_valid,{io_outputs_1_rsp_valid,io_outputs_0_rsp_valid}}} != (4'b0000)) || (logic_rspPending && logic_rspNoHitValid));
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_valid = 1'b1;
    end
  end

  assign _zz_5 = (logic_rspHits_1 || logic_rspHits_3);
  assign _zz_6 = (logic_rspHits_2 || logic_rspHits_3);
  assign _zz_7 = {_zz_6,_zz_5};
  always @ (*) begin
    io_input_rsp_payload_last = _zz_8;
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_payload_last = 1'b0;
      if((logic_rspNoHit_counter == (3'b000)))begin
        io_input_rsp_payload_last = 1'b1;
      end
      if(logic_rspNoHit_singleBeatRsp)begin
        io_input_rsp_payload_last = 1'b1;
      end
    end
  end

  always @ (*) begin
    io_input_rsp_payload_fragment_source = _zz_9;
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_payload_fragment_source = logic_rspNoHit_source;
    end
  end

  always @ (*) begin
    io_input_rsp_payload_fragment_opcode = _zz_10;
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_payload_fragment_opcode = (1'b1);
    end
  end

  assign io_input_rsp_payload_fragment_data = _zz_11;
  always @ (*) begin
    io_input_rsp_payload_fragment_context = _zz_12;
    if(logic_rspNoHit_doIt)begin
      io_input_rsp_payload_fragment_context = logic_rspNoHit_context;
    end
  end

  assign io_outputs_0_rsp_ready = io_input_rsp_ready;
  assign io_outputs_1_rsp_ready = io_input_rsp_ready;
  assign io_outputs_2_rsp_ready = io_input_rsp_ready;
  assign io_outputs_3_rsp_ready = io_input_rsp_ready;
  assign logic_cmdWait = ((logic_rspPending && (((((logic_hits_0 != logic_rspHits_0) || (logic_hits_1 != logic_rspHits_1)) || (logic_hits_2 != logic_rspHits_2)) || (logic_hits_3 != logic_rspHits_3)) || logic_rspNoHitValid)) || (logic_rspPendingCounter == (4'b1111)));
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      logic_rspPendingCounter <= (4'b0000);
      logic_rspNoHit_doIt <= 1'b0;
    end else begin
      logic_rspPendingCounter <= (_zz_13 - _zz_17);
      if(((io_input_rsp_valid && io_input_rsp_ready) && io_input_rsp_payload_last))begin
        logic_rspNoHit_doIt <= 1'b0;
      end
      if((((io_input_cmd_valid && io_input_cmd_ready) && logic_noHit) && io_input_cmd_payload_last))begin
        logic_rspNoHit_doIt <= 1'b1;
      end
    end
  end

  always @ (posedge io_systemClk) begin
    if((io_input_cmd_valid && (! logic_cmdWait)))begin
      logic_rspHits_0 <= logic_hits_0;
      logic_rspHits_1 <= logic_hits_1;
      logic_rspHits_2 <= logic_hits_2;
      logic_rspHits_3 <= logic_hits_3;
    end
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      logic_rspNoHit_singleBeatRsp <= (io_input_cmd_payload_fragment_opcode == (1'b1));
    end
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      logic_rspNoHit_source <= io_input_cmd_payload_fragment_source;
    end
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      logic_rspNoHit_context <= io_input_cmd_payload_fragment_context;
    end
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      logic_rspNoHit_counter <= io_input_cmd_payload_fragment_length[4 : 2];
    end
    if(logic_rspNoHit_doIt)begin
      if((io_input_rsp_valid && io_input_rsp_ready))begin
        logic_rspNoHit_counter <= (logic_rspNoHit_counter - (3'b001));
      end
    end
  end


endmodule

module BmbUnburstify_e12a9decc0704226832aec4017b36e8d (
  input               io_input_cmd_valid,
  output reg          io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [11:0]   io_input_cmd_payload_fragment_address,
  input      [4:0]    io_input_cmd_payload_fragment_length,
  input      [31:0]   io_input_cmd_payload_fragment_data,
  input      [3:0]    io_input_cmd_payload_fragment_mask,
  input      [0:0]    io_input_cmd_payload_fragment_context,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [0:0]    io_input_rsp_payload_fragment_source,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [31:0]   io_input_rsp_payload_fragment_data,
  output     [0:0]    io_input_rsp_payload_fragment_context,
  output reg          io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output reg [0:0]    io_output_cmd_payload_fragment_source,
  output reg [0:0]    io_output_cmd_payload_fragment_opcode,
  output reg [11:0]   io_output_cmd_payload_fragment_address,
  output reg [1:0]    io_output_cmd_payload_fragment_length,
  output     [31:0]   io_output_cmd_payload_fragment_data,
  output     [3:0]    io_output_cmd_payload_fragment_mask,
  output reg [2:0]    io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [0:0]    io_output_rsp_payload_fragment_source,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [31:0]   io_output_rsp_payload_fragment_data,
  input      [2:0]    io_output_rsp_payload_fragment_context,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  wire                _zz_1;
  wire       [11:0]   _zz_2;
  wire       [11:0]   _zz_3;
  wire       [11:0]   _zz_4;
  wire                doResult;
  reg                 buffer_valid;
  reg        [0:0]    buffer_opcode;
  reg        [0:0]    buffer_source;
  reg        [11:0]   buffer_address;
  reg        [0:0]    buffer_context;
  reg        [2:0]    buffer_beat;
  wire                buffer_last;
  wire       [11:0]   buffer_addressIncr;
  wire                buffer_isWrite;
  wire       [2:0]    cmdTransferBeatCount;
  wire                requireBuffer;

  assign _zz_1 = (io_output_cmd_valid && io_output_cmd_ready);
  assign _zz_2 = (_zz_4 + 12'h004);
  assign _zz_3 = buffer_address[11 : 0];
  assign _zz_4 = _zz_3;
  assign buffer_last = (buffer_beat == (3'b001));
  assign buffer_addressIncr = (_zz_2 & (~ 12'h003));
  assign buffer_isWrite = (buffer_opcode == (1'b1));
  assign cmdTransferBeatCount = io_input_cmd_payload_fragment_length[4 : 2];
  assign requireBuffer = (cmdTransferBeatCount != (3'b000));
  assign io_output_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_output_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_output_cmd_payload_last = 1'b1;
  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_source = buffer_source;
    end else begin
      io_output_cmd_payload_fragment_source = io_input_cmd_payload_fragment_source;
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_address = buffer_addressIncr;
    end else begin
      io_output_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
      if(requireBuffer)begin
        io_output_cmd_payload_fragment_address[1 : 0] = (2'b00);
      end
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_opcode = buffer_opcode;
    end else begin
      io_output_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_length = (2'b11);
    end else begin
      if(requireBuffer)begin
        io_output_cmd_payload_fragment_length = (2'b11);
      end else begin
        io_output_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length[1:0];
      end
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_context[0 : 0] = buffer_context;
    end else begin
      io_output_cmd_payload_fragment_context[0 : 0] = io_input_cmd_payload_fragment_context;
    end
    if(buffer_valid)begin
      io_output_cmd_payload_fragment_context[2] = buffer_last;
      io_output_cmd_payload_fragment_context[1] = buffer_isWrite;
    end else begin
      io_output_cmd_payload_fragment_context[1] = (io_input_cmd_payload_fragment_opcode == (1'b1));
      io_output_cmd_payload_fragment_context[2] = (! requireBuffer);
    end
  end

  always @ (*) begin
    io_input_cmd_ready = 1'b0;
    if(buffer_valid)begin
      io_input_cmd_ready = (buffer_isWrite && io_output_cmd_ready);
    end else begin
      io_input_cmd_ready = io_output_cmd_ready;
    end
  end

  always @ (*) begin
    if(buffer_valid)begin
      io_output_cmd_valid = (! (buffer_isWrite && (! io_input_cmd_valid)));
    end else begin
      io_output_cmd_valid = io_input_cmd_valid;
    end
  end

  assign io_input_rsp_valid = (io_output_rsp_valid && (io_output_rsp_payload_fragment_context[2] || (! io_output_rsp_payload_fragment_context[1])));
  assign io_input_rsp_payload_last = io_output_rsp_payload_fragment_context[2];
  assign io_input_rsp_payload_fragment_source = io_output_rsp_payload_fragment_source;
  assign io_input_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_input_rsp_payload_fragment_context = io_output_rsp_payload_fragment_context[0:0];
  assign io_output_rsp_ready = io_input_rsp_ready;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      buffer_valid <= 1'b0;
    end else begin
      if(_zz_1)begin
        if(buffer_last)begin
          buffer_valid <= 1'b0;
        end
      end
      if(! buffer_valid) begin
        buffer_valid <= (requireBuffer && (io_output_cmd_valid && io_output_cmd_ready));
      end
    end
  end

  always @ (posedge io_systemClk) begin
    if(_zz_1)begin
      buffer_beat <= (buffer_beat - (3'b001));
      buffer_address[11 : 0] <= buffer_addressIncr[11 : 0];
    end
    if(! buffer_valid) begin
      buffer_opcode <= io_input_cmd_payload_fragment_opcode;
      buffer_source <= io_input_cmd_payload_fragment_source;
      buffer_address <= io_input_cmd_payload_fragment_address;
      buffer_context <= io_input_cmd_payload_fragment_context;
      buffer_beat <= cmdTransferBeatCount;
    end
  end


endmodule

module BmbArbiter_3_e12a9decc0704226832aec4017b36e8d (
  input               io_inputs_0_cmd_valid,
  output              io_inputs_0_cmd_ready,
  input               io_inputs_0_cmd_payload_last,
  input      [0:0]    io_inputs_0_cmd_payload_fragment_source,
  input      [0:0]    io_inputs_0_cmd_payload_fragment_opcode,
  input      [11:0]   io_inputs_0_cmd_payload_fragment_address,
  input      [4:0]    io_inputs_0_cmd_payload_fragment_length,
  input      [31:0]   io_inputs_0_cmd_payload_fragment_data,
  input      [3:0]    io_inputs_0_cmd_payload_fragment_mask,
  input      [0:0]    io_inputs_0_cmd_payload_fragment_context,
  output              io_inputs_0_rsp_valid,
  input               io_inputs_0_rsp_ready,
  output              io_inputs_0_rsp_payload_last,
  output     [0:0]    io_inputs_0_rsp_payload_fragment_source,
  output     [0:0]    io_inputs_0_rsp_payload_fragment_opcode,
  output     [31:0]   io_inputs_0_rsp_payload_fragment_data,
  output     [0:0]    io_inputs_0_rsp_payload_fragment_context,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output     [0:0]    io_output_cmd_payload_fragment_source,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output     [11:0]   io_output_cmd_payload_fragment_address,
  output     [4:0]    io_output_cmd_payload_fragment_length,
  output     [31:0]   io_output_cmd_payload_fragment_data,
  output     [3:0]    io_output_cmd_payload_fragment_mask,
  output     [0:0]    io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [0:0]    io_output_rsp_payload_fragment_source,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [31:0]   io_output_rsp_payload_fragment_data,
  input      [0:0]    io_output_rsp_payload_fragment_context
);

  assign io_output_cmd_valid = io_inputs_0_cmd_valid;
  assign io_inputs_0_cmd_ready = io_output_cmd_ready;
  assign io_inputs_0_rsp_valid = io_output_rsp_valid;
  assign io_output_rsp_ready = io_inputs_0_rsp_ready;
  assign io_output_cmd_payload_last = io_inputs_0_cmd_payload_last;
  assign io_inputs_0_rsp_payload_last = io_output_rsp_payload_last;
  assign io_output_cmd_payload_fragment_source = io_inputs_0_cmd_payload_fragment_source;
  assign io_output_cmd_payload_fragment_opcode = io_inputs_0_cmd_payload_fragment_opcode;
  assign io_output_cmd_payload_fragment_address = io_inputs_0_cmd_payload_fragment_address;
  assign io_output_cmd_payload_fragment_length = io_inputs_0_cmd_payload_fragment_length;
  assign io_output_cmd_payload_fragment_data = io_inputs_0_cmd_payload_fragment_data;
  assign io_output_cmd_payload_fragment_mask = io_inputs_0_cmd_payload_fragment_mask;
  assign io_output_cmd_payload_fragment_context = io_inputs_0_cmd_payload_fragment_context;
  assign io_inputs_0_rsp_payload_fragment_source = io_output_rsp_payload_fragment_source;
  assign io_inputs_0_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_inputs_0_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_inputs_0_rsp_payload_fragment_context = io_output_rsp_payload_fragment_context;

endmodule

module BmbOnChipRam_e12a9decc0704226832aec4017b36e8d (
  input               io_bus_cmd_valid,
  output              io_bus_cmd_ready,
  input               io_bus_cmd_payload_last,
  input      [0:0]    io_bus_cmd_payload_fragment_source,
  input      [0:0]    io_bus_cmd_payload_fragment_opcode,
  input      [11:0]   io_bus_cmd_payload_fragment_address,
  input      [1:0]    io_bus_cmd_payload_fragment_length,
  input      [31:0]   io_bus_cmd_payload_fragment_data,
  input      [3:0]    io_bus_cmd_payload_fragment_mask,
  input      [2:0]    io_bus_cmd_payload_fragment_context,
  output              io_bus_rsp_valid,
  input               io_bus_rsp_ready,
  output              io_bus_rsp_payload_last,
  output     [0:0]    io_bus_rsp_payload_fragment_source,
  output     [0:0]    io_bus_rsp_payload_fragment_opcode,
  output     [31:0]   io_bus_rsp_payload_fragment_data,
  output     [2:0]    io_bus_rsp_payload_fragment_context,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg        [31:0]   _zz_5;
  reg                 io_bus_cmd_valid_regNextWhen;
  reg        [0:0]    io_bus_cmd_payload_fragment_source_regNextWhen;
  reg        [2:0]    io_bus_cmd_payload_fragment_context_regNextWhen;
  wire       [9:0]    _zz_1;
  wire                _zz_2;
  wire                _zz_3;
  wire       [31:0]   _zz_4;
  reg [7:0] ram_symbol0 [0:1023];
  reg [7:0] ram_symbol1 [0:1023];
  reg [7:0] ram_symbol2 [0:1023];
  reg [7:0] ram_symbol3 [0:1023];
  reg [7:0] _zz_6;
  reg [7:0] _zz_7;
  reg [7:0] _zz_8;
  reg [7:0] _zz_9;

  initial begin
    $readmemb("efxSapphireSoc.v_toplevel_system_ramA_logic_ram_symbol0.bin",ram_symbol0);
    $readmemb("efxSapphireSoc.v_toplevel_system_ramA_logic_ram_symbol1.bin",ram_symbol1);
    $readmemb("efxSapphireSoc.v_toplevel_system_ramA_logic_ram_symbol2.bin",ram_symbol2);
    $readmemb("efxSapphireSoc.v_toplevel_system_ramA_logic_ram_symbol3.bin",ram_symbol3);
  end
  always @ (*) begin
    _zz_5 = {_zz_9, _zz_8, _zz_7, _zz_6};
  end
  always @ (posedge io_systemClk) begin
    if(_zz_2) begin
      _zz_6 <= ram_symbol0[_zz_1];
      _zz_7 <= ram_symbol1[_zz_1];
      _zz_8 <= ram_symbol2[_zz_1];
      _zz_9 <= ram_symbol3[_zz_1];
    end
  end

  always @ (posedge io_systemClk) begin
    if(io_bus_cmd_payload_fragment_mask[0] && _zz_2 && _zz_3 ) begin
      ram_symbol0[_zz_1] <= _zz_4[7 : 0];
    end
    if(io_bus_cmd_payload_fragment_mask[1] && _zz_2 && _zz_3 ) begin
      ram_symbol1[_zz_1] <= _zz_4[15 : 8];
    end
    if(io_bus_cmd_payload_fragment_mask[2] && _zz_2 && _zz_3 ) begin
      ram_symbol2[_zz_1] <= _zz_4[23 : 16];
    end
    if(io_bus_cmd_payload_fragment_mask[3] && _zz_2 && _zz_3 ) begin
      ram_symbol3[_zz_1] <= _zz_4[31 : 24];
    end
  end

  assign io_bus_cmd_ready = (! (io_bus_rsp_valid && (! io_bus_rsp_ready)));
  assign io_bus_rsp_valid = io_bus_cmd_valid_regNextWhen;
  assign io_bus_rsp_payload_fragment_source = io_bus_cmd_payload_fragment_source_regNextWhen;
  assign io_bus_rsp_payload_fragment_context = io_bus_cmd_payload_fragment_context_regNextWhen;
  assign _zz_1 = (io_bus_cmd_payload_fragment_address >>> 2);
  assign _zz_2 = (io_bus_cmd_valid && io_bus_cmd_ready);
  assign _zz_3 = (io_bus_cmd_payload_fragment_opcode == (1'b1));
  assign _zz_4 = io_bus_cmd_payload_fragment_data;
  assign io_bus_rsp_payload_fragment_data = _zz_5;
  assign io_bus_rsp_payload_fragment_opcode = (1'b0);
  assign io_bus_rsp_payload_last = 1'b1;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      io_bus_cmd_valid_regNextWhen <= 1'b0;
    end else begin
      if(io_bus_cmd_ready)begin
        io_bus_cmd_valid_regNextWhen <= io_bus_cmd_valid;
      end
    end
  end

  always @ (posedge io_systemClk) begin
    if(io_bus_cmd_ready)begin
      io_bus_cmd_payload_fragment_source_regNextWhen <= io_bus_cmd_payload_fragment_source;
    end
    if(io_bus_cmd_ready)begin
      io_bus_cmd_payload_fragment_context_regNextWhen <= io_bus_cmd_payload_fragment_context;
    end
  end


endmodule

module BufferCC_28_e12a9decc0704226832aec4017b36e8d (
  input               io_initial,
  input               io_dataIn,
  output              io_dataOut,
  input               io_memoryClk,
  input               system_cpu_debugReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge io_memoryClk or posedge system_cpu_debugReset) begin
    if (system_cpu_debugReset) begin
      buffers_0 <= io_initial;
      buffers_1 <= io_initial;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

//BmbArbiter_1_e12a9decc0704226832aec4017b36e8d replaced by BmbArbiter_1_e12a9decc0704226832aec4017b36e8d

module BmbToAxi4SharedBridge_1_e12a9decc0704226832aec4017b36e8d (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [4:0]    io_input_cmd_payload_fragment_length,
  input      [31:0]   io_input_cmd_payload_fragment_data,
  input      [3:0]    io_input_cmd_payload_fragment_mask,
  input      [0:0]    io_input_cmd_payload_fragment_context,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [0:0]    io_input_rsp_payload_fragment_source,
  output reg [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [31:0]   io_input_rsp_payload_fragment_data,
  output     [0:0]    io_input_rsp_payload_fragment_context,
  output              io_output_arw_valid,
  input               io_output_arw_ready,
  output     [31:0]   io_output_arw_payload_addr,
  output     [7:0]    io_output_arw_payload_len,
  output     [2:0]    io_output_arw_payload_size,
  output     [3:0]    io_output_arw_payload_cache,
  output     [2:0]    io_output_arw_payload_prot,
  output              io_output_arw_payload_write,
  output              io_output_w_valid,
  input               io_output_w_ready,
  output     [31:0]   io_output_w_payload_data,
  output     [3:0]    io_output_w_payload_strb,
  output              io_output_w_payload_last,
  input               io_output_b_valid,
  output              io_output_b_ready,
  input      [1:0]    io_output_b_payload_resp,
  input               io_output_r_valid,
  output              io_output_r_ready,
  input      [31:0]   io_output_r_payload_data,
  input      [1:0]    io_output_r_payload_resp,
  input               io_output_r_payload_last,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  wire                _zz_2;
  reg                 _zz_3;
  reg                 _zz_4;
  wire                _zz_5;
  wire                streamFork_5_io_input_ready;
  wire                streamFork_5_io_outputs_0_valid;
  wire                streamFork_5_io_outputs_0_payload_last;
  wire       [0:0]    streamFork_5_io_outputs_0_payload_fragment_source;
  wire       [0:0]    streamFork_5_io_outputs_0_payload_fragment_opcode;
  wire       [31:0]   streamFork_5_io_outputs_0_payload_fragment_address;
  wire       [4:0]    streamFork_5_io_outputs_0_payload_fragment_length;
  wire       [31:0]   streamFork_5_io_outputs_0_payload_fragment_data;
  wire       [3:0]    streamFork_5_io_outputs_0_payload_fragment_mask;
  wire       [0:0]    streamFork_5_io_outputs_0_payload_fragment_context;
  wire                streamFork_5_io_outputs_1_valid;
  wire                streamFork_5_io_outputs_1_payload_last;
  wire       [0:0]    streamFork_5_io_outputs_1_payload_fragment_source;
  wire       [0:0]    streamFork_5_io_outputs_1_payload_fragment_opcode;
  wire       [31:0]   streamFork_5_io_outputs_1_payload_fragment_address;
  wire       [4:0]    streamFork_5_io_outputs_1_payload_fragment_length;
  wire       [31:0]   streamFork_5_io_outputs_1_payload_fragment_data;
  wire       [3:0]    streamFork_5_io_outputs_1_payload_fragment_mask;
  wire       [0:0]    streamFork_5_io_outputs_1_payload_fragment_context;
  wire                cmdInfo_fifo_io_push_ready;
  wire                cmdInfo_fifo_io_pop_valid;
  wire       [0:0]    cmdInfo_fifo_io_pop_payload_source;
  wire       [0:0]    cmdInfo_fifo_io_pop_payload_context;
  wire       [3:0]    cmdInfo_fifo_io_occupancy;
  wire       [3:0]    cmdInfo_fifo_io_availability;
  wire                _zz_6;
  wire                _zz_7;
  wire                _zz_8;
  wire       [2:0]    _zz_9;
  reg                 pendingCounter_incrementIt;
  reg                 pendingCounter_decrementIt;
  wire       [2:0]    pendingCounter_valueNext;
  reg        [2:0]    pendingCounter_value;
  wire                pendingCounter_willOverflowIfInc;
  wire                pendingCounter_willOverflow;
  reg        [2:0]    pendingCounter_finalIncrement;
  reg                 pendingWrite;
  wire                hazard;
  wire                _zz_1;
  reg                 io_input_cmd_payload_first;
  reg                 cmdStage_valid;
  wire                cmdStage_ready;
  wire                cmdStage_payload_last;
  wire       [0:0]    cmdStage_payload_fragment_source;
  wire       [0:0]    cmdStage_payload_fragment_opcode;
  wire       [31:0]   cmdStage_payload_fragment_address;
  wire       [4:0]    cmdStage_payload_fragment_length;
  wire       [31:0]   cmdStage_payload_fragment_data;
  wire       [3:0]    cmdStage_payload_fragment_mask;
  wire       [0:0]    cmdStage_payload_fragment_context;
  reg                 dataStage_valid;
  wire                dataStage_ready;
  wire                dataStage_payload_last;
  wire       [0:0]    dataStage_payload_fragment_source;
  wire       [0:0]    dataStage_payload_fragment_opcode;
  wire       [31:0]   dataStage_payload_fragment_address;
  wire       [4:0]    dataStage_payload_fragment_length;
  wire       [31:0]   dataStage_payload_fragment_data;
  wire       [3:0]    dataStage_payload_fragment_mask;
  wire       [0:0]    dataStage_payload_fragment_context;
  wire                cmdInfo_valid;
  wire                cmdInfo_ready;
  wire       [0:0]    cmdInfo_payload_source;
  wire       [0:0]    cmdInfo_payload_context;
  wire                cmdInfo_fifo_io_pop_halfPipe_valid;
  wire                cmdInfo_fifo_io_pop_halfPipe_ready;
  wire       [0:0]    cmdInfo_fifo_io_pop_halfPipe_payload_source;
  wire       [0:0]    cmdInfo_fifo_io_pop_halfPipe_payload_context;
  reg                 cmdInfo_fifo_io_pop_halfPipe_regs_valid;
  reg                 cmdInfo_fifo_io_pop_halfPipe_regs_ready;
  reg        [0:0]    cmdInfo_fifo_io_pop_halfPipe_regs_payload_source;
  reg        [0:0]    cmdInfo_fifo_io_pop_halfPipe_regs_payload_context;

  assign _zz_6 = (! io_input_cmd_payload_first);
  assign _zz_7 = (! (streamFork_5_io_outputs_1_payload_fragment_opcode == (1'b1)));
  assign _zz_8 = (! cmdInfo_fifo_io_pop_halfPipe_regs_valid);
  assign _zz_9 = io_input_cmd_payload_fragment_length[4 : 2];
  StreamFork_4_e12a9decc0704226832aec4017b36e8d streamFork_5 (
    .io_input_valid                           (_zz_2                                                     ), //i
    .io_input_ready                           (streamFork_5_io_input_ready                               ), //o
    .io_input_payload_last                    (io_input_cmd_payload_last                                 ), //i
    .io_input_payload_fragment_source         (io_input_cmd_payload_fragment_source                      ), //i
    .io_input_payload_fragment_opcode         (io_input_cmd_payload_fragment_opcode                      ), //i
    .io_input_payload_fragment_address        (io_input_cmd_payload_fragment_address[31:0]               ), //i
    .io_input_payload_fragment_length         (io_input_cmd_payload_fragment_length[4:0]                 ), //i
    .io_input_payload_fragment_data           (io_input_cmd_payload_fragment_data[31:0]                  ), //i
    .io_input_payload_fragment_mask           (io_input_cmd_payload_fragment_mask[3:0]                   ), //i
    .io_input_payload_fragment_context        (io_input_cmd_payload_fragment_context                     ), //i
    .io_outputs_0_valid                       (streamFork_5_io_outputs_0_valid                           ), //o
    .io_outputs_0_ready                       (_zz_3                                                     ), //i
    .io_outputs_0_payload_last                (streamFork_5_io_outputs_0_payload_last                    ), //o
    .io_outputs_0_payload_fragment_source     (streamFork_5_io_outputs_0_payload_fragment_source         ), //o
    .io_outputs_0_payload_fragment_opcode     (streamFork_5_io_outputs_0_payload_fragment_opcode         ), //o
    .io_outputs_0_payload_fragment_address    (streamFork_5_io_outputs_0_payload_fragment_address[31:0]  ), //o
    .io_outputs_0_payload_fragment_length     (streamFork_5_io_outputs_0_payload_fragment_length[4:0]    ), //o
    .io_outputs_0_payload_fragment_data       (streamFork_5_io_outputs_0_payload_fragment_data[31:0]     ), //o
    .io_outputs_0_payload_fragment_mask       (streamFork_5_io_outputs_0_payload_fragment_mask[3:0]      ), //o
    .io_outputs_0_payload_fragment_context    (streamFork_5_io_outputs_0_payload_fragment_context        ), //o
    .io_outputs_1_valid                       (streamFork_5_io_outputs_1_valid                           ), //o
    .io_outputs_1_ready                       (_zz_4                                                     ), //i
    .io_outputs_1_payload_last                (streamFork_5_io_outputs_1_payload_last                    ), //o
    .io_outputs_1_payload_fragment_source     (streamFork_5_io_outputs_1_payload_fragment_source         ), //o
    .io_outputs_1_payload_fragment_opcode     (streamFork_5_io_outputs_1_payload_fragment_opcode         ), //o
    .io_outputs_1_payload_fragment_address    (streamFork_5_io_outputs_1_payload_fragment_address[31:0]  ), //o
    .io_outputs_1_payload_fragment_length     (streamFork_5_io_outputs_1_payload_fragment_length[4:0]    ), //o
    .io_outputs_1_payload_fragment_data       (streamFork_5_io_outputs_1_payload_fragment_data[31:0]     ), //o
    .io_outputs_1_payload_fragment_mask       (streamFork_5_io_outputs_1_payload_fragment_mask[3:0]      ), //o
    .io_outputs_1_payload_fragment_context    (streamFork_5_io_outputs_1_payload_fragment_context        ), //o
    .io_systemClk                             (io_systemClk                                              ), //i
    .systemCd_logic_outputReset               (systemCd_logic_outputReset                                )  //i
  );
  StreamFifo_6_e12a9decc0704226832aec4017b36e8d cmdInfo_fifo (
    .io_push_valid                 (cmdInfo_valid                            ), //i
    .io_push_ready                 (cmdInfo_fifo_io_push_ready               ), //o
    .io_push_payload_source        (cmdInfo_payload_source                   ), //i
    .io_push_payload_context       (cmdInfo_payload_context                  ), //i
    .io_pop_valid                  (cmdInfo_fifo_io_pop_valid                ), //o
    .io_pop_ready                  (cmdInfo_fifo_io_pop_halfPipe_regs_ready  ), //i
    .io_pop_payload_source         (cmdInfo_fifo_io_pop_payload_source       ), //o
    .io_pop_payload_context        (cmdInfo_fifo_io_pop_payload_context      ), //o
    .io_flush                      (_zz_5                                    ), //i
    .io_occupancy                  (cmdInfo_fifo_io_occupancy[3:0]           ), //o
    .io_availability               (cmdInfo_fifo_io_availability[3:0]        ), //o
    .io_systemClk                  (io_systemClk                             ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset               )  //i
  );
  always @ (*) begin
    pendingCounter_incrementIt = 1'b0;
    if(((io_input_cmd_valid && io_input_cmd_ready) && io_input_cmd_payload_last))begin
      pendingCounter_incrementIt = 1'b1;
    end
  end

  always @ (*) begin
    pendingCounter_decrementIt = 1'b0;
    if(((io_input_rsp_valid && io_input_rsp_ready) && io_input_rsp_payload_last))begin
      pendingCounter_decrementIt = 1'b1;
    end
  end

  assign pendingCounter_willOverflowIfInc = ((pendingCounter_value == (3'b111)) && (! pendingCounter_decrementIt));
  assign pendingCounter_willOverflow = (pendingCounter_willOverflowIfInc && pendingCounter_incrementIt);
  always @ (*) begin
    if((pendingCounter_incrementIt && (! pendingCounter_decrementIt)))begin
      pendingCounter_finalIncrement = (3'b001);
    end else begin
      if(((! pendingCounter_incrementIt) && pendingCounter_decrementIt))begin
        pendingCounter_finalIncrement = (3'b111);
      end else begin
        pendingCounter_finalIncrement = (3'b000);
      end
    end
  end

  assign pendingCounter_valueNext = (pendingCounter_value + pendingCounter_finalIncrement);
  assign hazard = ((((io_input_cmd_payload_fragment_opcode == (1'b1)) != pendingWrite) && (pendingCounter_value != (3'b000))) || (pendingCounter_value == (3'b111)));
  assign _zz_1 = (! hazard);
  assign io_input_cmd_ready = (streamFork_5_io_input_ready && _zz_1);
  assign _zz_2 = (io_input_cmd_valid && _zz_1);
  always @ (*) begin
    cmdStage_valid = streamFork_5_io_outputs_0_valid;
    if(_zz_6)begin
      cmdStage_valid = 1'b0;
    end
  end

  always @ (*) begin
    _zz_3 = cmdStage_ready;
    if(_zz_6)begin
      _zz_3 = 1'b1;
    end
  end

  assign cmdStage_payload_last = streamFork_5_io_outputs_0_payload_last;
  assign cmdStage_payload_fragment_source = streamFork_5_io_outputs_0_payload_fragment_source;
  assign cmdStage_payload_fragment_opcode = streamFork_5_io_outputs_0_payload_fragment_opcode;
  assign cmdStage_payload_fragment_address = streamFork_5_io_outputs_0_payload_fragment_address;
  assign cmdStage_payload_fragment_length = streamFork_5_io_outputs_0_payload_fragment_length;
  assign cmdStage_payload_fragment_data = streamFork_5_io_outputs_0_payload_fragment_data;
  assign cmdStage_payload_fragment_mask = streamFork_5_io_outputs_0_payload_fragment_mask;
  assign cmdStage_payload_fragment_context = streamFork_5_io_outputs_0_payload_fragment_context;
  always @ (*) begin
    dataStage_valid = streamFork_5_io_outputs_1_valid;
    if(_zz_7)begin
      dataStage_valid = 1'b0;
    end
  end

  always @ (*) begin
    _zz_4 = dataStage_ready;
    if(_zz_7)begin
      _zz_4 = 1'b1;
    end
  end

  assign dataStage_payload_last = streamFork_5_io_outputs_1_payload_last;
  assign dataStage_payload_fragment_source = streamFork_5_io_outputs_1_payload_fragment_source;
  assign dataStage_payload_fragment_opcode = streamFork_5_io_outputs_1_payload_fragment_opcode;
  assign dataStage_payload_fragment_address = streamFork_5_io_outputs_1_payload_fragment_address;
  assign dataStage_payload_fragment_length = streamFork_5_io_outputs_1_payload_fragment_length;
  assign dataStage_payload_fragment_data = streamFork_5_io_outputs_1_payload_fragment_data;
  assign dataStage_payload_fragment_mask = streamFork_5_io_outputs_1_payload_fragment_mask;
  assign dataStage_payload_fragment_context = streamFork_5_io_outputs_1_payload_fragment_context;
  assign cmdInfo_valid = (cmdStage_valid && cmdStage_ready);
  assign cmdInfo_payload_source = cmdStage_payload_fragment_source;
  assign cmdInfo_payload_context = cmdStage_payload_fragment_context;
  assign cmdInfo_ready = cmdInfo_fifo_io_push_ready;
  assign cmdInfo_fifo_io_pop_halfPipe_valid = cmdInfo_fifo_io_pop_halfPipe_regs_valid;
  assign cmdInfo_fifo_io_pop_halfPipe_payload_source = cmdInfo_fifo_io_pop_halfPipe_regs_payload_source;
  assign cmdInfo_fifo_io_pop_halfPipe_payload_context = cmdInfo_fifo_io_pop_halfPipe_regs_payload_context;
  assign io_output_arw_valid = cmdStage_valid;
  assign cmdStage_ready = io_output_arw_ready;
  assign io_output_arw_payload_write = (io_input_cmd_payload_fragment_opcode == (1'b1));
  assign io_output_arw_payload_addr = io_input_cmd_payload_fragment_address;
  assign io_output_arw_payload_len = {5'd0, _zz_9};
  assign io_output_arw_payload_size = (3'b010);
  assign io_output_arw_payload_prot = (3'b010);
  assign io_output_arw_payload_cache = (4'b1111);
  assign io_output_w_valid = dataStage_valid;
  assign dataStage_ready = io_output_w_ready;
  assign io_output_w_payload_data = dataStage_payload_fragment_data;
  assign io_output_w_payload_strb = dataStage_payload_fragment_mask;
  assign io_output_w_payload_last = dataStage_payload_last;
  assign io_input_rsp_valid = ((io_output_b_valid || io_output_r_valid) && cmdInfo_fifo_io_pop_halfPipe_valid);
  assign io_input_rsp_payload_last = (pendingWrite ? 1'b1 : io_output_r_payload_last);
  assign io_input_rsp_payload_fragment_data = io_output_r_payload_data;
  assign io_input_rsp_payload_fragment_source = cmdInfo_fifo_io_pop_halfPipe_payload_source;
  assign io_input_rsp_payload_fragment_context = cmdInfo_fifo_io_pop_halfPipe_payload_context;
  always @ (*) begin
    if((pendingWrite ? (io_output_b_payload_resp == (2'b00)) : (io_output_r_payload_resp == (2'b00))))begin
      io_input_rsp_payload_fragment_opcode = (1'b0);
    end else begin
      io_input_rsp_payload_fragment_opcode = (1'b1);
    end
  end

  assign io_output_b_ready = (io_input_rsp_ready && cmdInfo_fifo_io_pop_halfPipe_valid);
  assign io_output_r_ready = (io_input_rsp_ready && cmdInfo_fifo_io_pop_halfPipe_valid);
  assign cmdInfo_fifo_io_pop_halfPipe_ready = ((io_input_rsp_valid && io_input_rsp_ready) && io_input_rsp_payload_last);
  assign _zz_5 = 1'b0;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      pendingCounter_value <= (3'b000);
      io_input_cmd_payload_first <= 1'b1;
      cmdInfo_fifo_io_pop_halfPipe_regs_valid <= 1'b0;
      cmdInfo_fifo_io_pop_halfPipe_regs_ready <= 1'b1;
    end else begin
      pendingCounter_value <= pendingCounter_valueNext;
      if((io_input_cmd_valid && io_input_cmd_ready))begin
        io_input_cmd_payload_first <= io_input_cmd_payload_last;
      end
      if(_zz_8)begin
        cmdInfo_fifo_io_pop_halfPipe_regs_valid <= cmdInfo_fifo_io_pop_valid;
        cmdInfo_fifo_io_pop_halfPipe_regs_ready <= (! cmdInfo_fifo_io_pop_valid);
      end else begin
        cmdInfo_fifo_io_pop_halfPipe_regs_valid <= (! cmdInfo_fifo_io_pop_halfPipe_ready);
        cmdInfo_fifo_io_pop_halfPipe_regs_ready <= cmdInfo_fifo_io_pop_halfPipe_ready;
      end
    end
  end

  always @ (posedge io_systemClk) begin
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      pendingWrite <= (io_input_cmd_payload_fragment_opcode == (1'b1));
    end
    if(_zz_8)begin
      cmdInfo_fifo_io_pop_halfPipe_regs_payload_source <= cmdInfo_fifo_io_pop_payload_source;
      cmdInfo_fifo_io_pop_halfPipe_regs_payload_context <= cmdInfo_fifo_io_pop_payload_context;
    end
  end


endmodule

module Apb3SpiXdrMasterCtrl_e12a9decc0704226832aec4017b36e8d (
  input      [7:0]    io_apb_PADDR,
  input      [0:0]    io_apb_PSEL,
  input               io_apb_PENABLE,
  output              io_apb_PREADY,
  input               io_apb_PWRITE,
  input      [31:0]   io_apb_PWDATA,
  output reg [31:0]   io_apb_PRDATA,
  output     [0:0]    io_spi_sclk_write,
  output              io_spi_data_0_writeEnable,
  input      [0:0]    io_spi_data_0_read,
  output     [0:0]    io_spi_data_0_write,
  output              io_spi_data_1_writeEnable,
  input      [0:0]    io_spi_data_1_read,
  output     [0:0]    io_spi_data_1_write,
  output              io_spi_data_2_writeEnable,
  input      [0:0]    io_spi_data_2_read,
  output     [0:0]    io_spi_data_2_write,
  output              io_spi_data_3_writeEnable,
  input      [0:0]    io_spi_data_3_read,
  output     [0:0]    io_spi_data_3_write,
  output     [0:0]    io_spi_ss,
  output              io_interrupt,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  wire                _zz_13;
  wire                _zz_14;
  reg                 _zz_15;
  wire                _zz_16;
  wire                ctrl_io_cmd_ready;
  wire                ctrl_io_rsp_valid;
  wire       [7:0]    ctrl_io_rsp_payload_data;
  wire       [0:0]    ctrl_io_spi_sclk_write;
  wire       [0:0]    ctrl_io_spi_ss;
  wire       [0:0]    ctrl_io_spi_data_0_write;
  wire                ctrl_io_spi_data_0_writeEnable;
  wire       [0:0]    ctrl_io_spi_data_1_write;
  wire                ctrl_io_spi_data_1_writeEnable;
  wire       [0:0]    ctrl_io_spi_data_2_write;
  wire                ctrl_io_spi_data_2_writeEnable;
  wire       [0:0]    ctrl_io_spi_data_3_write;
  wire                ctrl_io_spi_data_3_writeEnable;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_push_ready;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_valid;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_kind;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_read;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_write;
  wire       [7:0]    mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_data;
  wire       [8:0]    mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_occupancy;
  wire       [8:0]    mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_availability;
  wire                ctrl_io_rsp_queueWithOccupancy_io_push_ready;
  wire                ctrl_io_rsp_queueWithOccupancy_io_pop_valid;
  wire       [7:0]    ctrl_io_rsp_queueWithOccupancy_io_pop_payload_data;
  wire       [8:0]    ctrl_io_rsp_queueWithOccupancy_io_occupancy;
  wire       [8:0]    ctrl_io_rsp_queueWithOccupancy_io_availability;
  wire                _zz_17;
  wire       [0:0]    _zz_18;
  wire       [0:0]    _zz_19;
  wire       [0:0]    _zz_20;
  wire       [0:0]    _zz_21;
  wire       [0:0]    _zz_22;
  wire       [0:0]    _zz_23;
  wire       [0:0]    _zz_24;
  wire                _zz_1;
  wire                _zz_2;
  wire                mapping_cmdLogic_streamUnbuffered_valid;
  wire                mapping_cmdLogic_streamUnbuffered_ready;
  wire                mapping_cmdLogic_streamUnbuffered_payload_kind;
  wire                mapping_cmdLogic_streamUnbuffered_payload_read;
  wire                mapping_cmdLogic_streamUnbuffered_payload_write;
  wire       [7:0]    mapping_cmdLogic_streamUnbuffered_payload_data;
  reg                 _zz_3;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_valid;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_ready;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_payload_kind;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_payload_read;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_payload_write;
  wire       [7:0]    mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_payload_data;
  reg                 mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rValid;
  reg                 mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rData_kind;
  reg                 mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rData_read;
  reg                 mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rData_write;
  reg        [7:0]    mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rData_data;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_valid;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_ready;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_payload_kind;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_payload_read;
  wire                mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_payload_write;
  wire       [7:0]    mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_payload_data;
  reg                 mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_rValid;
  reg                 mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_rData_kind;
  reg                 mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_rData_read;
  reg                 mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_rData_write;
  reg        [7:0]    mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_rData_data;
  reg                 mapping_interruptCtrl_cmdIntEnable;
  reg                 mapping_interruptCtrl_rspIntEnable;
  wire                mapping_interruptCtrl_cmdInt;
  wire                mapping_interruptCtrl_rspInt;
  wire                mapping_interruptCtrl_interrupt;
  reg                 _zz_4;
  reg                 _zz_5;
  reg        [1:0]    _zz_6;
  reg        [11:0]   _zz_7;
  reg        [11:0]   _zz_8;
  reg        [11:0]   _zz_9;
  reg        [11:0]   _zz_10;
  reg        [0:0]    _zz_11;
  wire       [1:0]    _zz_12;

  assign _zz_17 = (_zz_13 && (! mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_ready));
  assign _zz_18 = io_apb_PWDATA[8 : 8];
  assign _zz_19 = io_apb_PWDATA[9 : 9];
  assign _zz_20 = io_apb_PWDATA[11 : 11];
  assign _zz_21 = io_apb_PWDATA[0 : 0];
  assign _zz_22 = io_apb_PWDATA[1 : 1];
  assign _zz_23 = _zz_12[0 : 0];
  assign _zz_24 = _zz_12[1 : 1];
  SpiXdrMasterCtrl_e12a9decc0704226832aec4017b36e8d ctrl (
    .io_config_kind_cpol           (_zz_4                                                                                             ), //i
    .io_config_kind_cpha           (_zz_5                                                                                             ), //i
    .io_config_sclkToogle          (_zz_7[11:0]                                                                                       ), //i
    .io_config_mod                 (_zz_6[1:0]                                                                                        ), //i
    .io_config_ss_activeHigh       (_zz_11                                                                                            ), //i
    .io_config_ss_setup            (_zz_8[11:0]                                                                                       ), //i
    .io_config_ss_hold             (_zz_9[11:0]                                                                                       ), //i
    .io_config_ss_disable          (_zz_10[11:0]                                                                                      ), //i
    .io_cmd_valid                  (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_valid              ), //i
    .io_cmd_ready                  (ctrl_io_cmd_ready                                                                                 ), //o
    .io_cmd_payload_kind           (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_payload_kind       ), //i
    .io_cmd_payload_read           (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_payload_read       ), //i
    .io_cmd_payload_write          (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_payload_write      ), //i
    .io_cmd_payload_data           (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_payload_data[7:0]  ), //i
    .io_rsp_valid                  (ctrl_io_rsp_valid                                                                                 ), //o
    .io_rsp_payload_data           (ctrl_io_rsp_payload_data[7:0]                                                                     ), //o
    .io_spi_sclk_write             (ctrl_io_spi_sclk_write                                                                            ), //o
    .io_spi_data_0_writeEnable     (ctrl_io_spi_data_0_writeEnable                                                                    ), //o
    .io_spi_data_0_read            (io_spi_data_0_read                                                                                ), //i
    .io_spi_data_0_write           (ctrl_io_spi_data_0_write                                                                          ), //o
    .io_spi_data_1_writeEnable     (ctrl_io_spi_data_1_writeEnable                                                                    ), //o
    .io_spi_data_1_read            (io_spi_data_1_read                                                                                ), //i
    .io_spi_data_1_write           (ctrl_io_spi_data_1_write                                                                          ), //o
    .io_spi_data_2_writeEnable     (ctrl_io_spi_data_2_writeEnable                                                                    ), //o
    .io_spi_data_2_read            (io_spi_data_2_read                                                                                ), //i
    .io_spi_data_2_write           (ctrl_io_spi_data_2_write                                                                          ), //o
    .io_spi_data_3_writeEnable     (ctrl_io_spi_data_3_writeEnable                                                                    ), //o
    .io_spi_data_3_read            (io_spi_data_3_read                                                                                ), //i
    .io_spi_data_3_write           (ctrl_io_spi_data_3_write                                                                          ), //o
    .io_spi_ss                     (ctrl_io_spi_ss                                                                                    ), //o
    .io_systemClk                  (io_systemClk                                                                                      ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                                                                        )  //i
  );
  StreamFifo_4_e12a9decc0704226832aec4017b36e8d mapping_cmdLogic_streamUnbuffered_queueWithAvailability (
    .io_push_valid                 (mapping_cmdLogic_streamUnbuffered_valid                                           ), //i
    .io_push_ready                 (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_push_ready             ), //o
    .io_push_payload_kind          (mapping_cmdLogic_streamUnbuffered_payload_kind                                    ), //i
    .io_push_payload_read          (mapping_cmdLogic_streamUnbuffered_payload_read                                    ), //i
    .io_push_payload_write         (mapping_cmdLogic_streamUnbuffered_payload_write                                   ), //i
    .io_push_payload_data          (mapping_cmdLogic_streamUnbuffered_payload_data[7:0]                               ), //i
    .io_pop_valid                  (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_valid              ), //o
    .io_pop_ready                  (_zz_13                                                                            ), //i
    .io_pop_payload_kind           (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_kind       ), //o
    .io_pop_payload_read           (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_read       ), //o
    .io_pop_payload_write          (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_write      ), //o
    .io_pop_payload_data           (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_data[7:0]  ), //o
    .io_flush                      (_zz_14                                                                            ), //i
    .io_occupancy                  (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_occupancy[8:0]         ), //o
    .io_availability               (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_availability[8:0]      ), //o
    .io_systemClk                  (io_systemClk                                                                      ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                                                        )  //i
  );
  StreamFifo_5_e12a9decc0704226832aec4017b36e8d ctrl_io_rsp_queueWithOccupancy (
    .io_push_valid                 (ctrl_io_rsp_valid                                        ), //i
    .io_push_ready                 (ctrl_io_rsp_queueWithOccupancy_io_push_ready             ), //o
    .io_push_payload_data          (ctrl_io_rsp_payload_data[7:0]                            ), //i
    .io_pop_valid                  (ctrl_io_rsp_queueWithOccupancy_io_pop_valid              ), //o
    .io_pop_ready                  (_zz_15                                                   ), //i
    .io_pop_payload_data           (ctrl_io_rsp_queueWithOccupancy_io_pop_payload_data[7:0]  ), //o
    .io_flush                      (_zz_16                                                   ), //i
    .io_occupancy                  (ctrl_io_rsp_queueWithOccupancy_io_occupancy[8:0]         ), //o
    .io_availability               (ctrl_io_rsp_queueWithOccupancy_io_availability[8:0]      ), //o
    .io_systemClk                  (io_systemClk                                             ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                               )  //i
  );
  assign io_apb_PREADY = 1'b1;
  always @ (*) begin
    io_apb_PRDATA = 32'h0;
    case(io_apb_PADDR)
      8'b00000000 : begin
        io_apb_PRDATA[31 : 31] = (ctrl_io_rsp_queueWithOccupancy_io_pop_valid ^ 1'b1);
        io_apb_PRDATA[7 : 0] = ctrl_io_rsp_queueWithOccupancy_io_pop_payload_data;
      end
      8'b00000100 : begin
        io_apb_PRDATA[8 : 0] = mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_availability;
        io_apb_PRDATA[24 : 16] = ctrl_io_rsp_queueWithOccupancy_io_occupancy;
      end
      8'b00001100 : begin
        io_apb_PRDATA[16 : 16] = mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_valid;
        io_apb_PRDATA[0 : 0] = mapping_interruptCtrl_cmdIntEnable;
        io_apb_PRDATA[1 : 1] = mapping_interruptCtrl_rspIntEnable;
        io_apb_PRDATA[8 : 8] = mapping_interruptCtrl_cmdInt;
        io_apb_PRDATA[9 : 9] = mapping_interruptCtrl_rspInt;
      end
      8'b00001000 : begin
      end
      8'b00100000 : begin
      end
      8'b00100100 : begin
      end
      8'b00101000 : begin
      end
      8'b00101100 : begin
      end
      8'b00110000 : begin
      end
      default : begin
      end
    endcase
  end

  assign _zz_1 = (((io_apb_PSEL[0] && io_apb_PENABLE) && io_apb_PREADY) && io_apb_PWRITE);
  assign _zz_2 = (((io_apb_PSEL[0] && io_apb_PENABLE) && io_apb_PREADY) && (! io_apb_PWRITE));
  always @ (*) begin
    _zz_3 = 1'b0;
    case(io_apb_PADDR)
      8'b00000000 : begin
        if(_zz_1)begin
          _zz_3 = 1'b1;
        end
      end
      8'b00000100 : begin
      end
      8'b00001100 : begin
      end
      8'b00001000 : begin
      end
      8'b00100000 : begin
      end
      8'b00100100 : begin
      end
      8'b00101000 : begin
      end
      8'b00101100 : begin
      end
      8'b00110000 : begin
      end
      default : begin
      end
    endcase
  end

  assign mapping_cmdLogic_streamUnbuffered_valid = _zz_3;
  assign mapping_cmdLogic_streamUnbuffered_ready = mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_push_ready;
  assign mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_valid = (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_valid || mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rValid);
  assign _zz_13 = (! mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rValid);
  assign mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_payload_kind = (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rValid ? mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rData_kind : mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_kind);
  assign mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_payload_read = (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rValid ? mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rData_read : mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_read);
  assign mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_payload_write = (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rValid ? mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rData_write : mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_write);
  assign mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_payload_data = (mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rValid ? mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rData_data : mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_data);
  assign mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_ready = ((1'b1 && (! mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_valid)) || mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_ready);
  assign mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_valid = mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_rValid;
  assign mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_payload_kind = mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_rData_kind;
  assign mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_payload_read = mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_rData_read;
  assign mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_payload_write = mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_rData_write;
  assign mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_payload_data = mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_rData_data;
  assign mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_ready = ctrl_io_cmd_ready;
  always @ (*) begin
    _zz_15 = 1'b0;
    case(io_apb_PADDR)
      8'b00000000 : begin
        if(_zz_2)begin
          _zz_15 = 1'b1;
        end
      end
      8'b00000100 : begin
      end
      8'b00001100 : begin
      end
      8'b00001000 : begin
      end
      8'b00100000 : begin
      end
      8'b00100100 : begin
      end
      8'b00101000 : begin
      end
      8'b00101100 : begin
      end
      8'b00110000 : begin
      end
      default : begin
      end
    endcase
  end

  assign mapping_interruptCtrl_cmdInt = (mapping_interruptCtrl_cmdIntEnable && (! mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_valid));
  assign mapping_interruptCtrl_rspInt = (mapping_interruptCtrl_rspIntEnable && ctrl_io_rsp_queueWithOccupancy_io_pop_valid);
  assign mapping_interruptCtrl_interrupt = (mapping_interruptCtrl_rspInt || mapping_interruptCtrl_cmdInt);
  assign io_spi_sclk_write = ctrl_io_spi_sclk_write;
  assign io_spi_data_0_writeEnable = ctrl_io_spi_data_0_writeEnable;
  assign io_spi_data_0_write = ctrl_io_spi_data_0_write;
  assign io_spi_data_1_writeEnable = ctrl_io_spi_data_1_writeEnable;
  assign io_spi_data_1_write = ctrl_io_spi_data_1_write;
  assign io_spi_data_2_writeEnable = ctrl_io_spi_data_2_writeEnable;
  assign io_spi_data_2_write = ctrl_io_spi_data_2_write;
  assign io_spi_data_3_writeEnable = ctrl_io_spi_data_3_writeEnable;
  assign io_spi_data_3_write = ctrl_io_spi_data_3_write;
  assign io_spi_ss = ctrl_io_spi_ss;
  assign io_interrupt = mapping_interruptCtrl_interrupt;
  assign mapping_cmdLogic_streamUnbuffered_payload_data = io_apb_PWDATA[7 : 0];
  assign mapping_cmdLogic_streamUnbuffered_payload_write = _zz_18[0];
  assign mapping_cmdLogic_streamUnbuffered_payload_read = _zz_19[0];
  assign mapping_cmdLogic_streamUnbuffered_payload_kind = _zz_20[0];
  assign _zz_12 = io_apb_PWDATA[1 : 0];
  assign _zz_14 = 1'b0;
  assign _zz_16 = 1'b0;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rValid <= 1'b0;
      mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_rValid <= 1'b0;
      mapping_interruptCtrl_cmdIntEnable <= 1'b0;
      mapping_interruptCtrl_rspIntEnable <= 1'b0;
      _zz_11 <= (1'b0);
    end else begin
      if(mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_ready)begin
        mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_17)begin
        mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rValid <= mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_valid;
      end
      if(mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_ready)begin
        mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_rValid <= mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_valid;
      end
      case(io_apb_PADDR)
        8'b00000000 : begin
        end
        8'b00000100 : begin
        end
        8'b00001100 : begin
          if(_zz_1)begin
            mapping_interruptCtrl_cmdIntEnable <= _zz_21[0];
            mapping_interruptCtrl_rspIntEnable <= _zz_22[0];
          end
        end
        8'b00001000 : begin
        end
        8'b00100000 : begin
        end
        8'b00100100 : begin
        end
        8'b00101000 : begin
        end
        8'b00101100 : begin
        end
        8'b00110000 : begin
          if(_zz_1)begin
            _zz_11 <= io_apb_PWDATA[0 : 0];
          end
        end
        default : begin
        end
      endcase
    end
  end

  always @ (posedge io_systemClk) begin
    if(_zz_17)begin
      mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rData_kind <= mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_kind;
      mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rData_read <= mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_read;
      mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rData_write <= mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_write;
      mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_rData_data <= mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_payload_data;
    end
    if(mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_ready)begin
      mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_rData_kind <= mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_payload_kind;
      mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_rData_read <= mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_payload_read;
      mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_rData_write <= mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_payload_write;
      mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_m2sPipe_rData_data <= mapping_cmdLogic_streamUnbuffered_queueWithAvailability_io_pop_s2mPipe_payload_data;
    end
    case(io_apb_PADDR)
      8'b00000000 : begin
      end
      8'b00000100 : begin
      end
      8'b00001100 : begin
      end
      8'b00001000 : begin
        if(_zz_1)begin
          _zz_4 <= _zz_23[0];
          _zz_5 <= _zz_24[0];
          _zz_6 <= io_apb_PWDATA[5 : 4];
        end
      end
      8'b00100000 : begin
        if(_zz_1)begin
          _zz_7 <= io_apb_PWDATA[11 : 0];
        end
      end
      8'b00100100 : begin
        if(_zz_1)begin
          _zz_8 <= io_apb_PWDATA[11 : 0];
        end
      end
      8'b00101000 : begin
        if(_zz_1)begin
          _zz_9 <= io_apb_PWDATA[11 : 0];
        end
      end
      8'b00101100 : begin
        if(_zz_1)begin
          _zz_10 <= io_apb_PWDATA[11 : 0];
        end
      end
      8'b00110000 : begin
      end
      default : begin
      end
    endcase
  end


endmodule

module BmbUpSizerBridge_e12a9decc0704226832aec4017b36e8d (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_source,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [4:0]    io_input_cmd_payload_fragment_length,
  input      [31:0]   io_input_cmd_payload_fragment_data,
  input      [3:0]    io_input_cmd_payload_fragment_mask,
  input      [0:0]    io_input_cmd_payload_fragment_context,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output reg          io_input_rsp_payload_last,
  output     [0:0]    io_input_rsp_payload_fragment_source,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [31:0]   io_input_rsp_payload_fragment_data,
  output     [0:0]    io_input_rsp_payload_fragment_context,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output     [31:0]   io_output_cmd_payload_fragment_address,
  output     [4:0]    io_output_cmd_payload_fragment_length,
  output reg [127:0]  io_output_cmd_payload_fragment_data,
  output reg [15:0]   io_output_cmd_payload_fragment_mask,
  output     [5:0]    io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [127:0]  io_output_rsp_payload_fragment_data,
  input      [5:0]    io_output_rsp_payload_fragment_context,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg        [31:0]   _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire       [2:0]    _zz_6;
  wire       [1:0]    _zz_7;
  wire       [2:0]    _zz_8;
  wire       [0:0]    cmdArea_context_context;
  wire       [0:0]    cmdArea_context_source;
  wire       [1:0]    cmdArea_context_selStart;
  reg        [1:0]    cmdArea_context_selEnd;
  reg        [31:0]   cmdArea_writeLogic_dataRegs_0;
  reg        [31:0]   cmdArea_writeLogic_dataRegs_1;
  reg        [31:0]   cmdArea_writeLogic_dataRegs_2;
  reg        [3:0]    cmdArea_writeLogic_maskRegs_0;
  reg        [3:0]    cmdArea_writeLogic_maskRegs_1;
  reg        [3:0]    cmdArea_writeLogic_maskRegs_2;
  reg        [1:0]    cmdArea_writeLogic_selReg;
  reg                 io_input_cmd_payload_first;
  wire       [1:0]    cmdArea_writeLogic_sel;
  wire       [31:0]   cmdArea_writeLogic_outputData_0;
  wire       [31:0]   cmdArea_writeLogic_outputData_1;
  wire       [31:0]   cmdArea_writeLogic_outputData_2;
  wire       [31:0]   cmdArea_writeLogic_outputData_3;
  wire       [3:0]    cmdArea_writeLogic_outputMask_0;
  wire       [3:0]    cmdArea_writeLogic_outputMask_1;
  wire       [3:0]    cmdArea_writeLogic_outputMask_2;
  wire       [3:0]    cmdArea_writeLogic_outputMask_3;
  wire       [0:0]    rspArea_context_context;
  wire       [0:0]    rspArea_context_source;
  wire       [1:0]    rspArea_context_selStart;
  wire       [1:0]    rspArea_context_selEnd;
  wire       [5:0]    _zz_1;
  reg        [1:0]    rspArea_readLogic_selReg;
  reg                 io_input_rsp_payload_first;
  wire       [1:0]    rspArea_readLogic_sel;

  assign _zz_3 = ((! io_input_cmd_payload_first) && (cmdArea_writeLogic_selReg != (2'b00)));
  assign _zz_4 = ((! io_input_cmd_payload_first) && (cmdArea_writeLogic_selReg != (2'b01)));
  assign _zz_5 = ((! io_input_cmd_payload_first) && (cmdArea_writeLogic_selReg != (2'b10)));
  assign _zz_6 = (_zz_8 + io_input_cmd_payload_fragment_length[4 : 2]);
  assign _zz_7 = io_input_cmd_payload_fragment_address[3 : 2];
  assign _zz_8 = {1'd0, _zz_7};
  always @(*) begin
    case(rspArea_readLogic_sel)
      2'b00 : begin
        _zz_2 = io_output_rsp_payload_fragment_data[31 : 0];
      end
      2'b01 : begin
        _zz_2 = io_output_rsp_payload_fragment_data[63 : 32];
      end
      2'b10 : begin
        _zz_2 = io_output_rsp_payload_fragment_data[95 : 64];
      end
      default : begin
        _zz_2 = io_output_rsp_payload_fragment_data[127 : 96];
      end
    endcase
  end

  assign cmdArea_context_context = io_input_cmd_payload_fragment_context;
  assign cmdArea_context_source = io_input_cmd_payload_fragment_source;
  assign cmdArea_context_selStart = io_input_cmd_payload_fragment_address[3 : 2];
  always @ (*) begin
    cmdArea_context_selEnd = _zz_6[1:0];
    if((io_input_cmd_payload_fragment_opcode == (1'b1)))begin
      cmdArea_context_selEnd = io_input_cmd_payload_fragment_address[3 : 2];
    end
  end

  assign io_output_cmd_payload_last = io_input_cmd_payload_last;
  assign io_output_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_output_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_output_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_output_cmd_payload_fragment_context = {cmdArea_context_selEnd,{cmdArea_context_selStart,{cmdArea_context_source,cmdArea_context_context}}};
  assign cmdArea_writeLogic_sel = (io_input_cmd_payload_first ? cmdArea_context_selStart : cmdArea_writeLogic_selReg);
  assign cmdArea_writeLogic_outputData_0 = io_output_cmd_payload_fragment_data[31 : 0];
  assign cmdArea_writeLogic_outputData_1 = io_output_cmd_payload_fragment_data[63 : 32];
  assign cmdArea_writeLogic_outputData_2 = io_output_cmd_payload_fragment_data[95 : 64];
  assign cmdArea_writeLogic_outputData_3 = io_output_cmd_payload_fragment_data[127 : 96];
  assign cmdArea_writeLogic_outputMask_0 = io_output_cmd_payload_fragment_mask[3 : 0];
  assign cmdArea_writeLogic_outputMask_1 = io_output_cmd_payload_fragment_mask[7 : 4];
  assign cmdArea_writeLogic_outputMask_2 = io_output_cmd_payload_fragment_mask[11 : 8];
  assign cmdArea_writeLogic_outputMask_3 = io_output_cmd_payload_fragment_mask[15 : 12];
  always @ (*) begin
    io_output_cmd_payload_fragment_data[31 : 0] = io_input_cmd_payload_fragment_data;
    if(_zz_3)begin
      io_output_cmd_payload_fragment_data[31 : 0] = cmdArea_writeLogic_dataRegs_0;
    end
    io_output_cmd_payload_fragment_data[63 : 32] = io_input_cmd_payload_fragment_data;
    if(_zz_4)begin
      io_output_cmd_payload_fragment_data[63 : 32] = cmdArea_writeLogic_dataRegs_1;
    end
    io_output_cmd_payload_fragment_data[95 : 64] = io_input_cmd_payload_fragment_data;
    if(_zz_5)begin
      io_output_cmd_payload_fragment_data[95 : 64] = cmdArea_writeLogic_dataRegs_2;
    end
    io_output_cmd_payload_fragment_data[127 : 96] = io_input_cmd_payload_fragment_data;
  end

  always @ (*) begin
    io_output_cmd_payload_fragment_mask[3 : 0] = ((cmdArea_writeLogic_sel == (2'b00)) ? io_input_cmd_payload_fragment_mask : cmdArea_writeLogic_maskRegs_0);
    io_output_cmd_payload_fragment_mask[7 : 4] = ((cmdArea_writeLogic_sel == (2'b01)) ? io_input_cmd_payload_fragment_mask : cmdArea_writeLogic_maskRegs_1);
    io_output_cmd_payload_fragment_mask[11 : 8] = ((cmdArea_writeLogic_sel == (2'b10)) ? io_input_cmd_payload_fragment_mask : cmdArea_writeLogic_maskRegs_2);
    io_output_cmd_payload_fragment_mask[15 : 12] = ((cmdArea_writeLogic_sel == (2'b11)) ? io_input_cmd_payload_fragment_mask : (4'b0000));
  end

  assign io_output_cmd_valid = (io_input_cmd_valid && ((cmdArea_writeLogic_sel == (2'b11)) || io_input_cmd_payload_last));
  assign io_input_cmd_ready = (! (io_output_cmd_valid && (! io_output_cmd_ready)));
  assign _zz_1 = io_output_rsp_payload_fragment_context;
  assign rspArea_context_context = _zz_1[0 : 0];
  assign rspArea_context_source = _zz_1[1 : 1];
  assign rspArea_context_selStart = _zz_1[3 : 2];
  assign rspArea_context_selEnd = _zz_1[5 : 4];
  assign io_input_rsp_valid = io_output_rsp_valid;
  assign io_input_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_source = rspArea_context_source;
  assign io_input_rsp_payload_fragment_context = rspArea_context_context;
  assign rspArea_readLogic_sel = (io_input_rsp_payload_first ? rspArea_context_selStart : rspArea_readLogic_selReg);
  always @ (*) begin
    io_input_rsp_payload_last = (io_output_rsp_payload_last && (rspArea_readLogic_sel == rspArea_context_selEnd));
    if((rspArea_context_selEnd != rspArea_readLogic_sel))begin
      io_input_rsp_payload_last = 1'b0;
    end
  end

  assign io_output_rsp_ready = (io_input_rsp_ready && (io_input_rsp_payload_last || (rspArea_readLogic_sel == (2'b11))));
  assign io_input_rsp_payload_fragment_data = _zz_2;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      cmdArea_writeLogic_maskRegs_0 <= (4'b0000);
      cmdArea_writeLogic_maskRegs_1 <= (4'b0000);
      cmdArea_writeLogic_maskRegs_2 <= (4'b0000);
      io_input_cmd_payload_first <= 1'b1;
      io_input_rsp_payload_first <= 1'b1;
    end else begin
      if((io_input_cmd_valid && io_input_cmd_ready))begin
        io_input_cmd_payload_first <= io_input_cmd_payload_last;
      end
      if((io_input_cmd_valid && (cmdArea_writeLogic_sel == (2'b00))))begin
        cmdArea_writeLogic_maskRegs_0 <= io_input_cmd_payload_fragment_mask;
      end
      if((io_output_cmd_valid && io_output_cmd_ready))begin
        cmdArea_writeLogic_maskRegs_0 <= (4'b0000);
      end
      if((io_input_cmd_valid && (cmdArea_writeLogic_sel == (2'b01))))begin
        cmdArea_writeLogic_maskRegs_1 <= io_input_cmd_payload_fragment_mask;
      end
      if((io_output_cmd_valid && io_output_cmd_ready))begin
        cmdArea_writeLogic_maskRegs_1 <= (4'b0000);
      end
      if((io_input_cmd_valid && (cmdArea_writeLogic_sel == (2'b10))))begin
        cmdArea_writeLogic_maskRegs_2 <= io_input_cmd_payload_fragment_mask;
      end
      if((io_output_cmd_valid && io_output_cmd_ready))begin
        cmdArea_writeLogic_maskRegs_2 <= (4'b0000);
      end
      if((io_input_rsp_valid && io_input_rsp_ready))begin
        io_input_rsp_payload_first <= io_input_rsp_payload_last;
      end
    end
  end

  always @ (posedge io_systemClk) begin
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      cmdArea_writeLogic_selReg <= (cmdArea_writeLogic_sel + (2'b01));
    end
    if(! _zz_3) begin
      cmdArea_writeLogic_dataRegs_0 <= io_input_cmd_payload_fragment_data;
    end
    if(! _zz_4) begin
      cmdArea_writeLogic_dataRegs_1 <= io_input_cmd_payload_fragment_data;
    end
    if(! _zz_5) begin
      cmdArea_writeLogic_dataRegs_2 <= io_input_cmd_payload_fragment_data;
    end
    rspArea_readLogic_selReg <= rspArea_readLogic_sel;
    if((io_input_rsp_valid && io_input_rsp_ready))begin
      rspArea_readLogic_selReg <= (rspArea_readLogic_sel + (2'b01));
    end
  end


endmodule

module BmbArbiter_1_e12a9decc0704226832aec4017b36e8d (
  input               io_inputs_0_cmd_valid,
  output              io_inputs_0_cmd_ready,
  input               io_inputs_0_cmd_payload_last,
  input      [0:0]    io_inputs_0_cmd_payload_fragment_source,
  input      [0:0]    io_inputs_0_cmd_payload_fragment_opcode,
  input      [31:0]   io_inputs_0_cmd_payload_fragment_address,
  input      [4:0]    io_inputs_0_cmd_payload_fragment_length,
  input      [31:0]   io_inputs_0_cmd_payload_fragment_data,
  input      [3:0]    io_inputs_0_cmd_payload_fragment_mask,
  input      [0:0]    io_inputs_0_cmd_payload_fragment_context,
  output              io_inputs_0_rsp_valid,
  input               io_inputs_0_rsp_ready,
  output              io_inputs_0_rsp_payload_last,
  output     [0:0]    io_inputs_0_rsp_payload_fragment_source,
  output     [0:0]    io_inputs_0_rsp_payload_fragment_opcode,
  output     [31:0]   io_inputs_0_rsp_payload_fragment_data,
  output     [0:0]    io_inputs_0_rsp_payload_fragment_context,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output     [0:0]    io_output_cmd_payload_fragment_source,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output     [31:0]   io_output_cmd_payload_fragment_address,
  output     [4:0]    io_output_cmd_payload_fragment_length,
  output     [31:0]   io_output_cmd_payload_fragment_data,
  output     [3:0]    io_output_cmd_payload_fragment_mask,
  output     [0:0]    io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [0:0]    io_output_rsp_payload_fragment_source,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [31:0]   io_output_rsp_payload_fragment_data,
  input      [0:0]    io_output_rsp_payload_fragment_context
);

  assign io_output_cmd_valid = io_inputs_0_cmd_valid;
  assign io_inputs_0_cmd_ready = io_output_cmd_ready;
  assign io_inputs_0_rsp_valid = io_output_rsp_valid;
  assign io_output_rsp_ready = io_inputs_0_rsp_ready;
  assign io_output_cmd_payload_last = io_inputs_0_cmd_payload_last;
  assign io_inputs_0_rsp_payload_last = io_output_rsp_payload_last;
  assign io_output_cmd_payload_fragment_source = io_inputs_0_cmd_payload_fragment_source;
  assign io_output_cmd_payload_fragment_opcode = io_inputs_0_cmd_payload_fragment_opcode;
  assign io_output_cmd_payload_fragment_address = io_inputs_0_cmd_payload_fragment_address;
  assign io_output_cmd_payload_fragment_length = io_inputs_0_cmd_payload_fragment_length;
  assign io_output_cmd_payload_fragment_data = io_inputs_0_cmd_payload_fragment_data;
  assign io_output_cmd_payload_fragment_mask = io_inputs_0_cmd_payload_fragment_mask;
  assign io_output_cmd_payload_fragment_context = io_inputs_0_cmd_payload_fragment_context;
  assign io_inputs_0_rsp_payload_fragment_source = io_output_rsp_payload_fragment_source;
  assign io_inputs_0_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_inputs_0_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_inputs_0_rsp_payload_fragment_context = io_output_rsp_payload_fragment_context;

endmodule

module StreamFifoLowLatency_1_e12a9decc0704226832aec4017b36e8d (
  input               io_push_valid,
  output              io_push_ready,
  input      [7:0]    io_push_payload_id,
  input      [7:0]    io_push_payload_len,
  output reg          io_pop_valid,
  input               io_pop_ready,
  output reg [7:0]    io_pop_payload_id,
  output reg [7:0]    io_pop_payload_len,
  input               io_flush,
  output     [2:0]    io_occupancy,
  input               io_memoryClk,
  input               system_ddr_ddrLogic_ddrAReset_reset
);
  wire       [15:0]   _zz_3;
  wire                _zz_4;
  wire       [0:0]    _zz_5;
  wire       [1:0]    _zz_6;
  wire       [0:0]    _zz_7;
  wire       [1:0]    _zz_8;
  wire       [15:0]   _zz_9;
  reg                 _zz_1;
  reg                 pushPtr_willIncrement;
  reg                 pushPtr_willClear;
  reg        [1:0]    pushPtr_valueNext;
  reg        [1:0]    pushPtr_value;
  wire                pushPtr_willOverflowIfInc;
  wire                pushPtr_willOverflow;
  reg                 popPtr_willIncrement;
  reg                 popPtr_willClear;
  reg        [1:0]    popPtr_valueNext;
  reg        [1:0]    popPtr_value;
  wire                popPtr_willOverflowIfInc;
  wire                popPtr_willOverflow;
  wire                ptrMatch;
  reg                 risingOccupancy;
  wire                empty;
  wire                full;
  wire                pushing;
  wire                popping;
  wire       [15:0]   _zz_2;
  wire       [1:0]    ptrDif;
  reg [15:0] ram [0:3];

  assign _zz_4 = (! empty);
  assign _zz_5 = pushPtr_willIncrement;
  assign _zz_6 = {1'd0, _zz_5};
  assign _zz_7 = popPtr_willIncrement;
  assign _zz_8 = {1'd0, _zz_7};
  assign _zz_9 = {io_push_payload_len,io_push_payload_id};
  assign _zz_3 = ram[popPtr_value];
  always @ (posedge io_memoryClk) begin
    if(_zz_1) begin
      ram[pushPtr_value] <= _zz_9;
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(pushing)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    pushPtr_willIncrement = 1'b0;
    if(pushing)begin
      pushPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    pushPtr_willClear = 1'b0;
    if(io_flush)begin
      pushPtr_willClear = 1'b1;
    end
  end

  assign pushPtr_willOverflowIfInc = (pushPtr_value == (2'b11));
  assign pushPtr_willOverflow = (pushPtr_willOverflowIfInc && pushPtr_willIncrement);
  always @ (*) begin
    pushPtr_valueNext = (pushPtr_value + _zz_6);
    if(pushPtr_willClear)begin
      pushPtr_valueNext = (2'b00);
    end
  end

  always @ (*) begin
    popPtr_willIncrement = 1'b0;
    if(popping)begin
      popPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    popPtr_willClear = 1'b0;
    if(io_flush)begin
      popPtr_willClear = 1'b1;
    end
  end

  assign popPtr_willOverflowIfInc = (popPtr_value == (2'b11));
  assign popPtr_willOverflow = (popPtr_willOverflowIfInc && popPtr_willIncrement);
  always @ (*) begin
    popPtr_valueNext = (popPtr_value + _zz_8);
    if(popPtr_willClear)begin
      popPtr_valueNext = (2'b00);
    end
  end

  assign ptrMatch = (pushPtr_value == popPtr_value);
  assign empty = (ptrMatch && (! risingOccupancy));
  assign full = (ptrMatch && risingOccupancy);
  assign pushing = (io_push_valid && io_push_ready);
  assign popping = (io_pop_valid && io_pop_ready);
  assign io_push_ready = (! full);
  always @ (*) begin
    if(_zz_4)begin
      io_pop_valid = 1'b1;
    end else begin
      io_pop_valid = io_push_valid;
    end
  end

  assign _zz_2 = _zz_3;
  always @ (*) begin
    if(_zz_4)begin
      io_pop_payload_id = _zz_2[7 : 0];
    end else begin
      io_pop_payload_id = io_push_payload_id;
    end
  end

  always @ (*) begin
    if(_zz_4)begin
      io_pop_payload_len = _zz_2[15 : 8];
    end else begin
      io_pop_payload_len = io_push_payload_len;
    end
  end

  assign ptrDif = (pushPtr_value - popPtr_value);
  assign io_occupancy = {(risingOccupancy && ptrMatch),ptrDif};
  always @ (posedge io_memoryClk or posedge system_ddr_ddrLogic_ddrAReset_reset) begin
    if (system_ddr_ddrLogic_ddrAReset_reset) begin
      pushPtr_value <= (2'b00);
      popPtr_value <= (2'b00);
      risingOccupancy <= 1'b0;
    end else begin
      pushPtr_value <= pushPtr_valueNext;
      popPtr_value <= popPtr_valueNext;
      if((pushing != popping))begin
        risingOccupancy <= pushing;
      end
      if(io_flush)begin
        risingOccupancy <= 1'b0;
      end
    end
  end


endmodule

module StreamArbiter_2_e12a9decc0704226832aec4017b36e8d (
  input               io_inputs_0_valid,
  output              io_inputs_0_ready,
  input      [31:0]   io_inputs_0_payload_addr,
  input      [3:0]    io_inputs_0_payload_id,
  input      [3:0]    io_inputs_0_payload_region,
  input      [7:0]    io_inputs_0_payload_len,
  input      [2:0]    io_inputs_0_payload_size,
  input      [1:0]    io_inputs_0_payload_burst,
  input      [0:0]    io_inputs_0_payload_lock,
  input      [3:0]    io_inputs_0_payload_cache,
  input      [3:0]    io_inputs_0_payload_qos,
  input      [2:0]    io_inputs_0_payload_prot,
  input               io_inputs_1_valid,
  output              io_inputs_1_ready,
  input      [31:0]   io_inputs_1_payload_addr,
  input      [3:0]    io_inputs_1_payload_id,
  input      [3:0]    io_inputs_1_payload_region,
  input      [7:0]    io_inputs_1_payload_len,
  input      [2:0]    io_inputs_1_payload_size,
  input      [1:0]    io_inputs_1_payload_burst,
  input      [0:0]    io_inputs_1_payload_lock,
  input      [3:0]    io_inputs_1_payload_cache,
  input      [3:0]    io_inputs_1_payload_qos,
  input      [2:0]    io_inputs_1_payload_prot,
  output              io_output_valid,
  input               io_output_ready,
  output     [31:0]   io_output_payload_addr,
  output     [3:0]    io_output_payload_id,
  output     [3:0]    io_output_payload_region,
  output     [7:0]    io_output_payload_len,
  output     [2:0]    io_output_payload_size,
  output     [1:0]    io_output_payload_burst,
  output     [0:0]    io_output_payload_lock,
  output     [3:0]    io_output_payload_cache,
  output     [3:0]    io_output_payload_qos,
  output     [2:0]    io_output_payload_prot,
  output     [0:0]    io_chosen,
  output     [1:0]    io_chosenOH,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  wire       [3:0]    _zz_6;
  wire       [1:0]    _zz_7;
  wire       [3:0]    _zz_8;
  wire       [0:0]    _zz_9;
  wire       [0:0]    _zz_10;
  reg                 locked;
  wire                maskProposal_0;
  wire                maskProposal_1;
  reg                 maskLocked_0;
  reg                 maskLocked_1;
  wire                maskRouted_0;
  wire                maskRouted_1;
  wire       [1:0]    _zz_1;
  wire       [3:0]    _zz_2;
  wire       [3:0]    _zz_3;
  wire       [1:0]    _zz_4;
  wire                _zz_5;

  assign _zz_6 = (_zz_2 - _zz_8);
  assign _zz_7 = {maskLocked_0,maskLocked_1};
  assign _zz_8 = {2'd0, _zz_7};
  assign _zz_9 = _zz_4[0 : 0];
  assign _zz_10 = _zz_4[1 : 1];
  assign maskRouted_0 = (locked ? maskLocked_0 : maskProposal_0);
  assign maskRouted_1 = (locked ? maskLocked_1 : maskProposal_1);
  assign _zz_1 = {io_inputs_1_valid,io_inputs_0_valid};
  assign _zz_2 = {_zz_1,_zz_1};
  assign _zz_3 = (_zz_2 & (~ _zz_6));
  assign _zz_4 = (_zz_3[3 : 2] | _zz_3[1 : 0]);
  assign maskProposal_0 = _zz_9[0];
  assign maskProposal_1 = _zz_10[0];
  assign io_output_valid = ((io_inputs_0_valid && maskRouted_0) || (io_inputs_1_valid && maskRouted_1));
  assign io_output_payload_addr = (maskRouted_0 ? io_inputs_0_payload_addr : io_inputs_1_payload_addr);
  assign io_output_payload_id = (maskRouted_0 ? io_inputs_0_payload_id : io_inputs_1_payload_id);
  assign io_output_payload_region = (maskRouted_0 ? io_inputs_0_payload_region : io_inputs_1_payload_region);
  assign io_output_payload_len = (maskRouted_0 ? io_inputs_0_payload_len : io_inputs_1_payload_len);
  assign io_output_payload_size = (maskRouted_0 ? io_inputs_0_payload_size : io_inputs_1_payload_size);
  assign io_output_payload_burst = (maskRouted_0 ? io_inputs_0_payload_burst : io_inputs_1_payload_burst);
  assign io_output_payload_lock = (maskRouted_0 ? io_inputs_0_payload_lock : io_inputs_1_payload_lock);
  assign io_output_payload_cache = (maskRouted_0 ? io_inputs_0_payload_cache : io_inputs_1_payload_cache);
  assign io_output_payload_qos = (maskRouted_0 ? io_inputs_0_payload_qos : io_inputs_1_payload_qos);
  assign io_output_payload_prot = (maskRouted_0 ? io_inputs_0_payload_prot : io_inputs_1_payload_prot);
  assign io_inputs_0_ready = (maskRouted_0 && io_output_ready);
  assign io_inputs_1_ready = (maskRouted_1 && io_output_ready);
  assign io_chosenOH = {maskRouted_1,maskRouted_0};
  assign _zz_5 = io_chosenOH[1];
  assign io_chosen = _zz_5;
  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      locked <= 1'b0;
      maskLocked_0 <= 1'b0;
      maskLocked_1 <= 1'b1;
    end else begin
      if(io_output_valid)begin
        maskLocked_0 <= maskRouted_0;
        maskLocked_1 <= maskRouted_1;
      end
      if(io_output_valid)begin
        locked <= 1'b1;
      end
      if((io_output_valid && io_output_ready))begin
        locked <= 1'b0;
      end
    end
  end


endmodule

module Axi4Upsizer_e12a9decc0704226832aec4017b36e8d (
  input               io_input_aw_valid,
  output              io_input_aw_ready,
  input      [31:0]   io_input_aw_payload_addr,
  input      [3:0]    io_input_aw_payload_id,
  input      [3:0]    io_input_aw_payload_region,
  input      [7:0]    io_input_aw_payload_len,
  input      [2:0]    io_input_aw_payload_size,
  input      [1:0]    io_input_aw_payload_burst,
  input      [0:0]    io_input_aw_payload_lock,
  input      [3:0]    io_input_aw_payload_cache,
  input      [3:0]    io_input_aw_payload_qos,
  input      [2:0]    io_input_aw_payload_prot,
  input               io_input_w_valid,
  output              io_input_w_ready,
  input      [31:0]   io_input_w_payload_data,
  input      [3:0]    io_input_w_payload_strb,
  input               io_input_w_payload_last,
  output              io_input_b_valid,
  input               io_input_b_ready,
  output     [3:0]    io_input_b_payload_id,
  output     [1:0]    io_input_b_payload_resp,
  input               io_input_ar_valid,
  output              io_input_ar_ready,
  input      [31:0]   io_input_ar_payload_addr,
  input      [3:0]    io_input_ar_payload_id,
  input      [3:0]    io_input_ar_payload_region,
  input      [7:0]    io_input_ar_payload_len,
  input      [2:0]    io_input_ar_payload_size,
  input      [1:0]    io_input_ar_payload_burst,
  input      [0:0]    io_input_ar_payload_lock,
  input      [3:0]    io_input_ar_payload_cache,
  input      [3:0]    io_input_ar_payload_qos,
  input      [2:0]    io_input_ar_payload_prot,
  output              io_input_r_valid,
  input               io_input_r_ready,
  output     [31:0]   io_input_r_payload_data,
  output     [3:0]    io_input_r_payload_id,
  output     [1:0]    io_input_r_payload_resp,
  output              io_input_r_payload_last,
  output              io_output_aw_valid,
  input               io_output_aw_ready,
  output     [31:0]   io_output_aw_payload_addr,
  output     [3:0]    io_output_aw_payload_id,
  output     [3:0]    io_output_aw_payload_region,
  output     [7:0]    io_output_aw_payload_len,
  output     [2:0]    io_output_aw_payload_size,
  output     [1:0]    io_output_aw_payload_burst,
  output     [0:0]    io_output_aw_payload_lock,
  output     [3:0]    io_output_aw_payload_cache,
  output     [3:0]    io_output_aw_payload_qos,
  output     [2:0]    io_output_aw_payload_prot,
  output              io_output_w_valid,
  input               io_output_w_ready,
  output     [127:0]  io_output_w_payload_data,
  output     [15:0]   io_output_w_payload_strb,
  output              io_output_w_payload_last,
  input               io_output_b_valid,
  output              io_output_b_ready,
  input      [3:0]    io_output_b_payload_id,
  input      [1:0]    io_output_b_payload_resp,
  output              io_output_ar_valid,
  input               io_output_ar_ready,
  output     [31:0]   io_output_ar_payload_addr,
  output     [3:0]    io_output_ar_payload_id,
  output     [3:0]    io_output_ar_payload_region,
  output     [7:0]    io_output_ar_payload_len,
  output     [2:0]    io_output_ar_payload_size,
  output     [1:0]    io_output_ar_payload_burst,
  output     [0:0]    io_output_ar_payload_lock,
  output     [3:0]    io_output_ar_payload_cache,
  output     [3:0]    io_output_ar_payload_qos,
  output     [2:0]    io_output_ar_payload_prot,
  input               io_output_r_valid,
  output              io_output_r_ready,
  input      [127:0]  io_output_r_payload_data,
  input      [3:0]    io_output_r_payload_id,
  input      [1:0]    io_output_r_payload_resp,
  input               io_output_r_payload_last,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  wire                readOnly_io_input_ar_ready;
  wire                readOnly_io_input_r_valid;
  wire       [31:0]   readOnly_io_input_r_payload_data;
  wire       [3:0]    readOnly_io_input_r_payload_id;
  wire       [1:0]    readOnly_io_input_r_payload_resp;
  wire                readOnly_io_input_r_payload_last;
  wire                readOnly_io_output_ar_valid;
  wire       [31:0]   readOnly_io_output_ar_payload_addr;
  wire       [3:0]    readOnly_io_output_ar_payload_id;
  wire       [3:0]    readOnly_io_output_ar_payload_region;
  wire       [7:0]    readOnly_io_output_ar_payload_len;
  wire       [2:0]    readOnly_io_output_ar_payload_size;
  wire       [1:0]    readOnly_io_output_ar_payload_burst;
  wire       [0:0]    readOnly_io_output_ar_payload_lock;
  wire       [3:0]    readOnly_io_output_ar_payload_cache;
  wire       [3:0]    readOnly_io_output_ar_payload_qos;
  wire       [2:0]    readOnly_io_output_ar_payload_prot;
  wire                readOnly_io_output_r_ready;
  wire                writeOnly_io_input_aw_ready;
  wire                writeOnly_io_input_w_ready;
  wire                writeOnly_io_input_b_valid;
  wire       [3:0]    writeOnly_io_input_b_payload_id;
  wire       [1:0]    writeOnly_io_input_b_payload_resp;
  wire                writeOnly_io_output_aw_valid;
  wire       [31:0]   writeOnly_io_output_aw_payload_addr;
  wire       [3:0]    writeOnly_io_output_aw_payload_id;
  wire       [3:0]    writeOnly_io_output_aw_payload_region;
  wire       [7:0]    writeOnly_io_output_aw_payload_len;
  wire       [2:0]    writeOnly_io_output_aw_payload_size;
  wire       [1:0]    writeOnly_io_output_aw_payload_burst;
  wire       [0:0]    writeOnly_io_output_aw_payload_lock;
  wire       [3:0]    writeOnly_io_output_aw_payload_cache;
  wire       [3:0]    writeOnly_io_output_aw_payload_qos;
  wire       [2:0]    writeOnly_io_output_aw_payload_prot;
  wire                writeOnly_io_output_w_valid;
  wire       [127:0]  writeOnly_io_output_w_payload_data;
  wire       [15:0]   writeOnly_io_output_w_payload_strb;
  wire                writeOnly_io_output_w_payload_last;
  wire                writeOnly_io_output_b_ready;

  Axi4ReadOnlyUpsizer_e12a9decc0704226832aec4017b36e8d readOnly (
    .io_input_ar_valid              (io_input_ar_valid                          ), //i
    .io_input_ar_ready              (readOnly_io_input_ar_ready                 ), //o
    .io_input_ar_payload_addr       (io_input_ar_payload_addr[31:0]             ), //i
    .io_input_ar_payload_id         (io_input_ar_payload_id[3:0]                ), //i
    .io_input_ar_payload_region     (io_input_ar_payload_region[3:0]            ), //i
    .io_input_ar_payload_len        (io_input_ar_payload_len[7:0]               ), //i
    .io_input_ar_payload_size       (io_input_ar_payload_size[2:0]              ), //i
    .io_input_ar_payload_burst      (io_input_ar_payload_burst[1:0]             ), //i
    .io_input_ar_payload_lock       (io_input_ar_payload_lock                   ), //i
    .io_input_ar_payload_cache      (io_input_ar_payload_cache[3:0]             ), //i
    .io_input_ar_payload_qos        (io_input_ar_payload_qos[3:0]               ), //i
    .io_input_ar_payload_prot       (io_input_ar_payload_prot[2:0]              ), //i
    .io_input_r_valid               (readOnly_io_input_r_valid                  ), //o
    .io_input_r_ready               (io_input_r_ready                           ), //i
    .io_input_r_payload_data        (readOnly_io_input_r_payload_data[31:0]     ), //o
    .io_input_r_payload_id          (readOnly_io_input_r_payload_id[3:0]        ), //o
    .io_input_r_payload_resp        (readOnly_io_input_r_payload_resp[1:0]      ), //o
    .io_input_r_payload_last        (readOnly_io_input_r_payload_last           ), //o
    .io_output_ar_valid             (readOnly_io_output_ar_valid                ), //o
    .io_output_ar_ready             (io_output_ar_ready                         ), //i
    .io_output_ar_payload_addr      (readOnly_io_output_ar_payload_addr[31:0]   ), //o
    .io_output_ar_payload_id        (readOnly_io_output_ar_payload_id[3:0]      ), //o
    .io_output_ar_payload_region    (readOnly_io_output_ar_payload_region[3:0]  ), //o
    .io_output_ar_payload_len       (readOnly_io_output_ar_payload_len[7:0]     ), //o
    .io_output_ar_payload_size      (readOnly_io_output_ar_payload_size[2:0]    ), //o
    .io_output_ar_payload_burst     (readOnly_io_output_ar_payload_burst[1:0]   ), //o
    .io_output_ar_payload_lock      (readOnly_io_output_ar_payload_lock         ), //o
    .io_output_ar_payload_cache     (readOnly_io_output_ar_payload_cache[3:0]   ), //o
    .io_output_ar_payload_qos       (readOnly_io_output_ar_payload_qos[3:0]     ), //o
    .io_output_ar_payload_prot      (readOnly_io_output_ar_payload_prot[2:0]    ), //o
    .io_output_r_valid              (io_output_r_valid                          ), //i
    .io_output_r_ready              (readOnly_io_output_r_ready                 ), //o
    .io_output_r_payload_data       (io_output_r_payload_data[127:0]            ), //i
    .io_output_r_payload_id         (io_output_r_payload_id[3:0]                ), //i
    .io_output_r_payload_resp       (io_output_r_payload_resp[1:0]              ), //i
    .io_output_r_payload_last       (io_output_r_payload_last                   ), //i
    .io_memoryClk                   (io_memoryClk                               ), //i
    .ddrCd_logic_outputReset        (ddrCd_logic_outputReset                    )  //i
  );
  Axi4WriteOnlyUpsizer_e12a9decc0704226832aec4017b36e8d writeOnly (
    .io_input_aw_valid              (io_input_aw_valid                           ), //i
    .io_input_aw_ready              (writeOnly_io_input_aw_ready                 ), //o
    .io_input_aw_payload_addr       (io_input_aw_payload_addr[31:0]              ), //i
    .io_input_aw_payload_id         (io_input_aw_payload_id[3:0]                 ), //i
    .io_input_aw_payload_region     (io_input_aw_payload_region[3:0]             ), //i
    .io_input_aw_payload_len        (io_input_aw_payload_len[7:0]                ), //i
    .io_input_aw_payload_size       (io_input_aw_payload_size[2:0]               ), //i
    .io_input_aw_payload_burst      (io_input_aw_payload_burst[1:0]              ), //i
    .io_input_aw_payload_lock       (io_input_aw_payload_lock                    ), //i
    .io_input_aw_payload_cache      (io_input_aw_payload_cache[3:0]              ), //i
    .io_input_aw_payload_qos        (io_input_aw_payload_qos[3:0]                ), //i
    .io_input_aw_payload_prot       (io_input_aw_payload_prot[2:0]               ), //i
    .io_input_w_valid               (io_input_w_valid                            ), //i
    .io_input_w_ready               (writeOnly_io_input_w_ready                  ), //o
    .io_input_w_payload_data        (io_input_w_payload_data[31:0]               ), //i
    .io_input_w_payload_strb        (io_input_w_payload_strb[3:0]                ), //i
    .io_input_w_payload_last        (io_input_w_payload_last                     ), //i
    .io_input_b_valid               (writeOnly_io_input_b_valid                  ), //o
    .io_input_b_ready               (io_input_b_ready                            ), //i
    .io_input_b_payload_id          (writeOnly_io_input_b_payload_id[3:0]        ), //o
    .io_input_b_payload_resp        (writeOnly_io_input_b_payload_resp[1:0]      ), //o
    .io_output_aw_valid             (writeOnly_io_output_aw_valid                ), //o
    .io_output_aw_ready             (io_output_aw_ready                          ), //i
    .io_output_aw_payload_addr      (writeOnly_io_output_aw_payload_addr[31:0]   ), //o
    .io_output_aw_payload_id        (writeOnly_io_output_aw_payload_id[3:0]      ), //o
    .io_output_aw_payload_region    (writeOnly_io_output_aw_payload_region[3:0]  ), //o
    .io_output_aw_payload_len       (writeOnly_io_output_aw_payload_len[7:0]     ), //o
    .io_output_aw_payload_size      (writeOnly_io_output_aw_payload_size[2:0]    ), //o
    .io_output_aw_payload_burst     (writeOnly_io_output_aw_payload_burst[1:0]   ), //o
    .io_output_aw_payload_lock      (writeOnly_io_output_aw_payload_lock         ), //o
    .io_output_aw_payload_cache     (writeOnly_io_output_aw_payload_cache[3:0]   ), //o
    .io_output_aw_payload_qos       (writeOnly_io_output_aw_payload_qos[3:0]     ), //o
    .io_output_aw_payload_prot      (writeOnly_io_output_aw_payload_prot[2:0]    ), //o
    .io_output_w_valid              (writeOnly_io_output_w_valid                 ), //o
    .io_output_w_ready              (io_output_w_ready                           ), //i
    .io_output_w_payload_data       (writeOnly_io_output_w_payload_data[127:0]   ), //o
    .io_output_w_payload_strb       (writeOnly_io_output_w_payload_strb[15:0]    ), //o
    .io_output_w_payload_last       (writeOnly_io_output_w_payload_last          ), //o
    .io_output_b_valid              (io_output_b_valid                           ), //i
    .io_output_b_ready              (writeOnly_io_output_b_ready                 ), //o
    .io_output_b_payload_id         (io_output_b_payload_id[3:0]                 ), //i
    .io_output_b_payload_resp       (io_output_b_payload_resp[1:0]               ), //i
    .io_memoryClk                   (io_memoryClk                                ), //i
    .ddrCd_logic_outputReset        (ddrCd_logic_outputReset                     )  //i
  );
  assign io_input_ar_ready = readOnly_io_input_ar_ready;
  assign io_input_r_valid = readOnly_io_input_r_valid;
  assign io_input_r_payload_data = readOnly_io_input_r_payload_data;
  assign io_input_r_payload_id = readOnly_io_input_r_payload_id;
  assign io_input_r_payload_resp = readOnly_io_input_r_payload_resp;
  assign io_input_r_payload_last = readOnly_io_input_r_payload_last;
  assign io_input_aw_ready = writeOnly_io_input_aw_ready;
  assign io_input_w_ready = writeOnly_io_input_w_ready;
  assign io_input_b_valid = writeOnly_io_input_b_valid;
  assign io_input_b_payload_id = writeOnly_io_input_b_payload_id;
  assign io_input_b_payload_resp = writeOnly_io_input_b_payload_resp;
  assign io_output_ar_valid = readOnly_io_output_ar_valid;
  assign io_output_ar_payload_addr = readOnly_io_output_ar_payload_addr;
  assign io_output_ar_payload_id = readOnly_io_output_ar_payload_id;
  assign io_output_ar_payload_region = readOnly_io_output_ar_payload_region;
  assign io_output_ar_payload_len = readOnly_io_output_ar_payload_len;
  assign io_output_ar_payload_size = readOnly_io_output_ar_payload_size;
  assign io_output_ar_payload_burst = readOnly_io_output_ar_payload_burst;
  assign io_output_ar_payload_lock = readOnly_io_output_ar_payload_lock;
  assign io_output_ar_payload_cache = readOnly_io_output_ar_payload_cache;
  assign io_output_ar_payload_qos = readOnly_io_output_ar_payload_qos;
  assign io_output_ar_payload_prot = readOnly_io_output_ar_payload_prot;
  assign io_output_r_ready = readOnly_io_output_r_ready;
  assign io_output_aw_valid = writeOnly_io_output_aw_valid;
  assign io_output_aw_payload_addr = writeOnly_io_output_aw_payload_addr;
  assign io_output_aw_payload_id = writeOnly_io_output_aw_payload_id;
  assign io_output_aw_payload_region = writeOnly_io_output_aw_payload_region;
  assign io_output_aw_payload_len = writeOnly_io_output_aw_payload_len;
  assign io_output_aw_payload_size = writeOnly_io_output_aw_payload_size;
  assign io_output_aw_payload_burst = writeOnly_io_output_aw_payload_burst;
  assign io_output_aw_payload_lock = writeOnly_io_output_aw_payload_lock;
  assign io_output_aw_payload_cache = writeOnly_io_output_aw_payload_cache;
  assign io_output_aw_payload_qos = writeOnly_io_output_aw_payload_qos;
  assign io_output_aw_payload_prot = writeOnly_io_output_aw_payload_prot;
  assign io_output_w_valid = writeOnly_io_output_w_valid;
  assign io_output_w_payload_data = writeOnly_io_output_w_payload_data;
  assign io_output_w_payload_strb = writeOnly_io_output_w_payload_strb;
  assign io_output_w_payload_last = writeOnly_io_output_w_payload_last;
  assign io_output_b_ready = writeOnly_io_output_b_ready;

endmodule

module Axi4CC_e12a9decc0704226832aec4017b36e8d (
  input               io_input_aw_valid,
  output              io_input_aw_ready,
  input      [31:0]   io_input_aw_payload_addr,
  input      [3:0]    io_input_aw_payload_id,
  input      [3:0]    io_input_aw_payload_region,
  input      [7:0]    io_input_aw_payload_len,
  input      [2:0]    io_input_aw_payload_size,
  input      [1:0]    io_input_aw_payload_burst,
  input      [0:0]    io_input_aw_payload_lock,
  input      [3:0]    io_input_aw_payload_cache,
  input      [3:0]    io_input_aw_payload_qos,
  input      [2:0]    io_input_aw_payload_prot,
  input               io_input_w_valid,
  output              io_input_w_ready,
  input      [31:0]   io_input_w_payload_data,
  input      [3:0]    io_input_w_payload_strb,
  input               io_input_w_payload_last,
  output              io_input_b_valid,
  input               io_input_b_ready,
  output     [3:0]    io_input_b_payload_id,
  output     [1:0]    io_input_b_payload_resp,
  input               io_input_ar_valid,
  output              io_input_ar_ready,
  input      [31:0]   io_input_ar_payload_addr,
  input      [3:0]    io_input_ar_payload_id,
  input      [3:0]    io_input_ar_payload_region,
  input      [7:0]    io_input_ar_payload_len,
  input      [2:0]    io_input_ar_payload_size,
  input      [1:0]    io_input_ar_payload_burst,
  input      [0:0]    io_input_ar_payload_lock,
  input      [3:0]    io_input_ar_payload_cache,
  input      [3:0]    io_input_ar_payload_qos,
  input      [2:0]    io_input_ar_payload_prot,
  output              io_input_r_valid,
  input               io_input_r_ready,
  output     [31:0]   io_input_r_payload_data,
  output     [3:0]    io_input_r_payload_id,
  output     [1:0]    io_input_r_payload_resp,
  output              io_input_r_payload_last,
  output              io_output_aw_valid,
  input               io_output_aw_ready,
  output     [31:0]   io_output_aw_payload_addr,
  output     [3:0]    io_output_aw_payload_id,
  output     [3:0]    io_output_aw_payload_region,
  output     [7:0]    io_output_aw_payload_len,
  output     [2:0]    io_output_aw_payload_size,
  output     [1:0]    io_output_aw_payload_burst,
  output     [0:0]    io_output_aw_payload_lock,
  output     [3:0]    io_output_aw_payload_cache,
  output     [3:0]    io_output_aw_payload_qos,
  output     [2:0]    io_output_aw_payload_prot,
  output              io_output_w_valid,
  input               io_output_w_ready,
  output     [31:0]   io_output_w_payload_data,
  output     [3:0]    io_output_w_payload_strb,
  output              io_output_w_payload_last,
  input               io_output_b_valid,
  output              io_output_b_ready,
  input      [3:0]    io_output_b_payload_id,
  input      [1:0]    io_output_b_payload_resp,
  output              io_output_ar_valid,
  input               io_output_ar_ready,
  output     [31:0]   io_output_ar_payload_addr,
  output     [3:0]    io_output_ar_payload_id,
  output     [3:0]    io_output_ar_payload_region,
  output     [7:0]    io_output_ar_payload_len,
  output     [2:0]    io_output_ar_payload_size,
  output     [1:0]    io_output_ar_payload_burst,
  output     [0:0]    io_output_ar_payload_lock,
  output     [3:0]    io_output_ar_payload_cache,
  output     [3:0]    io_output_ar_payload_qos,
  output     [2:0]    io_output_ar_payload_prot,
  input               io_output_r_valid,
  output              io_output_r_ready,
  input      [31:0]   io_output_r_payload_data,
  input      [3:0]    io_output_r_payload_id,
  input      [1:0]    io_output_r_payload_resp,
  input               io_output_r_payload_last,
  input               io_ddrMasters_0_clk,
  input               io_ddrMasters_0_reset,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  wire                io_input_ar_queue_io_push_ready;
  wire                io_input_ar_queue_io_pop_valid;
  wire       [31:0]   io_input_ar_queue_io_pop_payload_addr;
  wire       [3:0]    io_input_ar_queue_io_pop_payload_id;
  wire       [3:0]    io_input_ar_queue_io_pop_payload_region;
  wire       [7:0]    io_input_ar_queue_io_pop_payload_len;
  wire       [2:0]    io_input_ar_queue_io_pop_payload_size;
  wire       [1:0]    io_input_ar_queue_io_pop_payload_burst;
  wire       [0:0]    io_input_ar_queue_io_pop_payload_lock;
  wire       [3:0]    io_input_ar_queue_io_pop_payload_cache;
  wire       [3:0]    io_input_ar_queue_io_pop_payload_qos;
  wire       [2:0]    io_input_ar_queue_io_pop_payload_prot;
  wire       [4:0]    io_input_ar_queue_io_pushOccupancy;
  wire       [4:0]    io_input_ar_queue_io_popOccupancy;
  wire                io_output_r_queue_io_push_ready;
  wire                io_output_r_queue_io_pop_valid;
  wire       [31:0]   io_output_r_queue_io_pop_payload_data;
  wire       [3:0]    io_output_r_queue_io_pop_payload_id;
  wire       [1:0]    io_output_r_queue_io_pop_payload_resp;
  wire                io_output_r_queue_io_pop_payload_last;
  wire       [4:0]    io_output_r_queue_io_pushOccupancy;
  wire       [4:0]    io_output_r_queue_io_popOccupancy;
  wire                io_input_aw_queue_io_push_ready;
  wire                io_input_aw_queue_io_pop_valid;
  wire       [31:0]   io_input_aw_queue_io_pop_payload_addr;
  wire       [3:0]    io_input_aw_queue_io_pop_payload_id;
  wire       [3:0]    io_input_aw_queue_io_pop_payload_region;
  wire       [7:0]    io_input_aw_queue_io_pop_payload_len;
  wire       [2:0]    io_input_aw_queue_io_pop_payload_size;
  wire       [1:0]    io_input_aw_queue_io_pop_payload_burst;
  wire       [0:0]    io_input_aw_queue_io_pop_payload_lock;
  wire       [3:0]    io_input_aw_queue_io_pop_payload_cache;
  wire       [3:0]    io_input_aw_queue_io_pop_payload_qos;
  wire       [2:0]    io_input_aw_queue_io_pop_payload_prot;
  wire       [4:0]    io_input_aw_queue_io_pushOccupancy;
  wire       [4:0]    io_input_aw_queue_io_popOccupancy;
  wire                io_input_w_queue_io_push_ready;
  wire                io_input_w_queue_io_pop_valid;
  wire       [31:0]   io_input_w_queue_io_pop_payload_data;
  wire       [3:0]    io_input_w_queue_io_pop_payload_strb;
  wire                io_input_w_queue_io_pop_payload_last;
  wire       [4:0]    io_input_w_queue_io_pushOccupancy;
  wire       [4:0]    io_input_w_queue_io_popOccupancy;
  wire                io_output_b_queue_io_push_ready;
  wire                io_output_b_queue_io_pop_valid;
  wire       [3:0]    io_output_b_queue_io_pop_payload_id;
  wire       [1:0]    io_output_b_queue_io_pop_payload_resp;
  wire       [4:0]    io_output_b_queue_io_pushOccupancy;
  wire       [4:0]    io_output_b_queue_io_popOccupancy;

  StreamFifoCC_4_e12a9decc0704226832aec4017b36e8d io_input_ar_queue (
    .io_push_valid              (io_input_ar_valid                             ), //i
    .io_push_ready              (io_input_ar_queue_io_push_ready               ), //o
    .io_push_payload_addr       (io_input_ar_payload_addr[31:0]                ), //i
    .io_push_payload_id         (io_input_ar_payload_id[3:0]                   ), //i
    .io_push_payload_region     (io_input_ar_payload_region[3:0]               ), //i
    .io_push_payload_len        (io_input_ar_payload_len[7:0]                  ), //i
    .io_push_payload_size       (io_input_ar_payload_size[2:0]                 ), //i
    .io_push_payload_burst      (io_input_ar_payload_burst[1:0]                ), //i
    .io_push_payload_lock       (io_input_ar_payload_lock                      ), //i
    .io_push_payload_cache      (io_input_ar_payload_cache[3:0]                ), //i
    .io_push_payload_qos        (io_input_ar_payload_qos[3:0]                  ), //i
    .io_push_payload_prot       (io_input_ar_payload_prot[2:0]                 ), //i
    .io_pop_valid               (io_input_ar_queue_io_pop_valid                ), //o
    .io_pop_ready               (io_output_ar_ready                            ), //i
    .io_pop_payload_addr        (io_input_ar_queue_io_pop_payload_addr[31:0]   ), //o
    .io_pop_payload_id          (io_input_ar_queue_io_pop_payload_id[3:0]      ), //o
    .io_pop_payload_region      (io_input_ar_queue_io_pop_payload_region[3:0]  ), //o
    .io_pop_payload_len         (io_input_ar_queue_io_pop_payload_len[7:0]     ), //o
    .io_pop_payload_size        (io_input_ar_queue_io_pop_payload_size[2:0]    ), //o
    .io_pop_payload_burst       (io_input_ar_queue_io_pop_payload_burst[1:0]   ), //o
    .io_pop_payload_lock        (io_input_ar_queue_io_pop_payload_lock         ), //o
    .io_pop_payload_cache       (io_input_ar_queue_io_pop_payload_cache[3:0]   ), //o
    .io_pop_payload_qos         (io_input_ar_queue_io_pop_payload_qos[3:0]     ), //o
    .io_pop_payload_prot        (io_input_ar_queue_io_pop_payload_prot[2:0]    ), //o
    .io_pushOccupancy           (io_input_ar_queue_io_pushOccupancy[4:0]       ), //o
    .io_popOccupancy            (io_input_ar_queue_io_popOccupancy[4:0]        ), //o
    .io_ddrMasters_0_clk        (io_ddrMasters_0_clk                           ), //i
    .io_ddrMasters_0_reset      (io_ddrMasters_0_reset                         ), //i
    .io_memoryClk               (io_memoryClk                                  ), //i
    .ddrCd_logic_outputReset    (ddrCd_logic_outputReset                       )  //i
  );
  StreamFifoCC_5_e12a9decc0704226832aec4017b36e8d io_output_r_queue (
    .io_push_valid              (io_output_r_valid                            ), //i
    .io_push_ready              (io_output_r_queue_io_push_ready              ), //o
    .io_push_payload_data       (io_output_r_payload_data[31:0]               ), //i
    .io_push_payload_id         (io_output_r_payload_id[3:0]                  ), //i
    .io_push_payload_resp       (io_output_r_payload_resp[1:0]                ), //i
    .io_push_payload_last       (io_output_r_payload_last                     ), //i
    .io_pop_valid               (io_output_r_queue_io_pop_valid               ), //o
    .io_pop_ready               (io_input_r_ready                             ), //i
    .io_pop_payload_data        (io_output_r_queue_io_pop_payload_data[31:0]  ), //o
    .io_pop_payload_id          (io_output_r_queue_io_pop_payload_id[3:0]     ), //o
    .io_pop_payload_resp        (io_output_r_queue_io_pop_payload_resp[1:0]   ), //o
    .io_pop_payload_last        (io_output_r_queue_io_pop_payload_last        ), //o
    .io_pushOccupancy           (io_output_r_queue_io_pushOccupancy[4:0]      ), //o
    .io_popOccupancy            (io_output_r_queue_io_popOccupancy[4:0]       ), //o
    .io_memoryClk               (io_memoryClk                                 ), //i
    .ddrCd_logic_outputReset    (ddrCd_logic_outputReset                      ), //i
    .io_ddrMasters_0_clk        (io_ddrMasters_0_clk                          ), //i
    .io_ddrMasters_0_reset      (io_ddrMasters_0_reset                        )  //i
  );
  StreamFifoCC_4_e12a9decc0704226832aec4017b36e8d io_input_aw_queue (
    .io_push_valid              (io_input_aw_valid                             ), //i
    .io_push_ready              (io_input_aw_queue_io_push_ready               ), //o
    .io_push_payload_addr       (io_input_aw_payload_addr[31:0]                ), //i
    .io_push_payload_id         (io_input_aw_payload_id[3:0]                   ), //i
    .io_push_payload_region     (io_input_aw_payload_region[3:0]               ), //i
    .io_push_payload_len        (io_input_aw_payload_len[7:0]                  ), //i
    .io_push_payload_size       (io_input_aw_payload_size[2:0]                 ), //i
    .io_push_payload_burst      (io_input_aw_payload_burst[1:0]                ), //i
    .io_push_payload_lock       (io_input_aw_payload_lock                      ), //i
    .io_push_payload_cache      (io_input_aw_payload_cache[3:0]                ), //i
    .io_push_payload_qos        (io_input_aw_payload_qos[3:0]                  ), //i
    .io_push_payload_prot       (io_input_aw_payload_prot[2:0]                 ), //i
    .io_pop_valid               (io_input_aw_queue_io_pop_valid                ), //o
    .io_pop_ready               (io_output_aw_ready                            ), //i
    .io_pop_payload_addr        (io_input_aw_queue_io_pop_payload_addr[31:0]   ), //o
    .io_pop_payload_id          (io_input_aw_queue_io_pop_payload_id[3:0]      ), //o
    .io_pop_payload_region      (io_input_aw_queue_io_pop_payload_region[3:0]  ), //o
    .io_pop_payload_len         (io_input_aw_queue_io_pop_payload_len[7:0]     ), //o
    .io_pop_payload_size        (io_input_aw_queue_io_pop_payload_size[2:0]    ), //o
    .io_pop_payload_burst       (io_input_aw_queue_io_pop_payload_burst[1:0]   ), //o
    .io_pop_payload_lock        (io_input_aw_queue_io_pop_payload_lock         ), //o
    .io_pop_payload_cache       (io_input_aw_queue_io_pop_payload_cache[3:0]   ), //o
    .io_pop_payload_qos         (io_input_aw_queue_io_pop_payload_qos[3:0]     ), //o
    .io_pop_payload_prot        (io_input_aw_queue_io_pop_payload_prot[2:0]    ), //o
    .io_pushOccupancy           (io_input_aw_queue_io_pushOccupancy[4:0]       ), //o
    .io_popOccupancy            (io_input_aw_queue_io_popOccupancy[4:0]        ), //o
    .io_ddrMasters_0_clk        (io_ddrMasters_0_clk                           ), //i
    .io_ddrMasters_0_reset      (io_ddrMasters_0_reset                         ), //i
    .io_memoryClk               (io_memoryClk                                  ), //i
    .ddrCd_logic_outputReset    (ddrCd_logic_outputReset                       )  //i
  );
  StreamFifoCC_7_e12a9decc0704226832aec4017b36e8d io_input_w_queue (
    .io_push_valid              (io_input_w_valid                            ), //i
    .io_push_ready              (io_input_w_queue_io_push_ready              ), //o
    .io_push_payload_data       (io_input_w_payload_data[31:0]               ), //i
    .io_push_payload_strb       (io_input_w_payload_strb[3:0]                ), //i
    .io_push_payload_last       (io_input_w_payload_last                     ), //i
    .io_pop_valid               (io_input_w_queue_io_pop_valid               ), //o
    .io_pop_ready               (io_output_w_ready                           ), //i
    .io_pop_payload_data        (io_input_w_queue_io_pop_payload_data[31:0]  ), //o
    .io_pop_payload_strb        (io_input_w_queue_io_pop_payload_strb[3:0]   ), //o
    .io_pop_payload_last        (io_input_w_queue_io_pop_payload_last        ), //o
    .io_pushOccupancy           (io_input_w_queue_io_pushOccupancy[4:0]      ), //o
    .io_popOccupancy            (io_input_w_queue_io_popOccupancy[4:0]       ), //o
    .io_ddrMasters_0_clk        (io_ddrMasters_0_clk                         ), //i
    .io_ddrMasters_0_reset      (io_ddrMasters_0_reset                       ), //i
    .io_memoryClk               (io_memoryClk                                ), //i
    .ddrCd_logic_outputReset    (ddrCd_logic_outputReset                     )  //i
  );
  StreamFifoCC_8_e12a9decc0704226832aec4017b36e8d io_output_b_queue (
    .io_push_valid              (io_output_b_valid                           ), //i
    .io_push_ready              (io_output_b_queue_io_push_ready             ), //o
    .io_push_payload_id         (io_output_b_payload_id[3:0]                 ), //i
    .io_push_payload_resp       (io_output_b_payload_resp[1:0]               ), //i
    .io_pop_valid               (io_output_b_queue_io_pop_valid              ), //o
    .io_pop_ready               (io_input_b_ready                            ), //i
    .io_pop_payload_id          (io_output_b_queue_io_pop_payload_id[3:0]    ), //o
    .io_pop_payload_resp        (io_output_b_queue_io_pop_payload_resp[1:0]  ), //o
    .io_pushOccupancy           (io_output_b_queue_io_pushOccupancy[4:0]     ), //o
    .io_popOccupancy            (io_output_b_queue_io_popOccupancy[4:0]      ), //o
    .io_memoryClk               (io_memoryClk                                ), //i
    .ddrCd_logic_outputReset    (ddrCd_logic_outputReset                     ), //i
    .io_ddrMasters_0_clk        (io_ddrMasters_0_clk                         ), //i
    .io_ddrMasters_0_reset      (io_ddrMasters_0_reset                       )  //i
  );
  assign io_input_ar_ready = io_input_ar_queue_io_push_ready;
  assign io_output_ar_valid = io_input_ar_queue_io_pop_valid;
  assign io_output_ar_payload_addr = io_input_ar_queue_io_pop_payload_addr;
  assign io_output_ar_payload_id = io_input_ar_queue_io_pop_payload_id;
  assign io_output_ar_payload_region = io_input_ar_queue_io_pop_payload_region;
  assign io_output_ar_payload_len = io_input_ar_queue_io_pop_payload_len;
  assign io_output_ar_payload_size = io_input_ar_queue_io_pop_payload_size;
  assign io_output_ar_payload_burst = io_input_ar_queue_io_pop_payload_burst;
  assign io_output_ar_payload_lock = io_input_ar_queue_io_pop_payload_lock;
  assign io_output_ar_payload_cache = io_input_ar_queue_io_pop_payload_cache;
  assign io_output_ar_payload_qos = io_input_ar_queue_io_pop_payload_qos;
  assign io_output_ar_payload_prot = io_input_ar_queue_io_pop_payload_prot;
  assign io_output_r_ready = io_output_r_queue_io_push_ready;
  assign io_input_r_valid = io_output_r_queue_io_pop_valid;
  assign io_input_r_payload_data = io_output_r_queue_io_pop_payload_data;
  assign io_input_r_payload_id = io_output_r_queue_io_pop_payload_id;
  assign io_input_r_payload_resp = io_output_r_queue_io_pop_payload_resp;
  assign io_input_r_payload_last = io_output_r_queue_io_pop_payload_last;
  assign io_input_aw_ready = io_input_aw_queue_io_push_ready;
  assign io_output_aw_valid = io_input_aw_queue_io_pop_valid;
  assign io_output_aw_payload_addr = io_input_aw_queue_io_pop_payload_addr;
  assign io_output_aw_payload_id = io_input_aw_queue_io_pop_payload_id;
  assign io_output_aw_payload_region = io_input_aw_queue_io_pop_payload_region;
  assign io_output_aw_payload_len = io_input_aw_queue_io_pop_payload_len;
  assign io_output_aw_payload_size = io_input_aw_queue_io_pop_payload_size;
  assign io_output_aw_payload_burst = io_input_aw_queue_io_pop_payload_burst;
  assign io_output_aw_payload_lock = io_input_aw_queue_io_pop_payload_lock;
  assign io_output_aw_payload_cache = io_input_aw_queue_io_pop_payload_cache;
  assign io_output_aw_payload_qos = io_input_aw_queue_io_pop_payload_qos;
  assign io_output_aw_payload_prot = io_input_aw_queue_io_pop_payload_prot;
  assign io_input_w_ready = io_input_w_queue_io_push_ready;
  assign io_output_w_valid = io_input_w_queue_io_pop_valid;
  assign io_output_w_payload_data = io_input_w_queue_io_pop_payload_data;
  assign io_output_w_payload_strb = io_input_w_queue_io_pop_payload_strb;
  assign io_output_w_payload_last = io_input_w_queue_io_pop_payload_last;
  assign io_output_b_ready = io_output_b_queue_io_push_ready;
  assign io_input_b_valid = io_output_b_queue_io_pop_valid;
  assign io_input_b_payload_id = io_output_b_queue_io_pop_payload_id;
  assign io_input_b_payload_resp = io_output_b_queue_io_pop_payload_resp;

endmodule

module BufferCC_27_e12a9decc0704226832aec4017b36e8d (
  input               io_dataIn,
  output              io_dataOut,
  input               io_ddrMasters_0_clk,
  input               io_ddrMasters_0_reset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge io_ddrMasters_0_clk) begin
    buffers_0 <= io_dataIn;
    buffers_1 <= buffers_0;
  end


endmodule

module Axi4SharedArbiter_e12a9decc0704226832aec4017b36e8d (
  input               io_sharedInputs_0_arw_valid,
  output              io_sharedInputs_0_arw_ready,
  input      [31:0]   io_sharedInputs_0_arw_payload_addr,
  input      [6:0]    io_sharedInputs_0_arw_payload_id,
  input      [3:0]    io_sharedInputs_0_arw_payload_region,
  input      [7:0]    io_sharedInputs_0_arw_payload_len,
  input      [2:0]    io_sharedInputs_0_arw_payload_size,
  input      [1:0]    io_sharedInputs_0_arw_payload_burst,
  input      [0:0]    io_sharedInputs_0_arw_payload_lock,
  input      [3:0]    io_sharedInputs_0_arw_payload_cache,
  input      [3:0]    io_sharedInputs_0_arw_payload_qos,
  input      [2:0]    io_sharedInputs_0_arw_payload_prot,
  input               io_sharedInputs_0_arw_payload_write,
  input               io_sharedInputs_0_w_valid,
  output              io_sharedInputs_0_w_ready,
  input      [127:0]  io_sharedInputs_0_w_payload_data,
  input      [15:0]   io_sharedInputs_0_w_payload_strb,
  input               io_sharedInputs_0_w_payload_last,
  output              io_sharedInputs_0_b_valid,
  input               io_sharedInputs_0_b_ready,
  output     [6:0]    io_sharedInputs_0_b_payload_id,
  output     [1:0]    io_sharedInputs_0_b_payload_resp,
  output              io_sharedInputs_0_r_valid,
  input               io_sharedInputs_0_r_ready,
  output     [127:0]  io_sharedInputs_0_r_payload_data,
  output     [6:0]    io_sharedInputs_0_r_payload_id,
  output     [1:0]    io_sharedInputs_0_r_payload_resp,
  output              io_sharedInputs_0_r_payload_last,
  input               io_sharedInputs_1_arw_valid,
  output              io_sharedInputs_1_arw_ready,
  input      [31:0]   io_sharedInputs_1_arw_payload_addr,
  input      [6:0]    io_sharedInputs_1_arw_payload_id,
  input      [3:0]    io_sharedInputs_1_arw_payload_region,
  input      [7:0]    io_sharedInputs_1_arw_payload_len,
  input      [2:0]    io_sharedInputs_1_arw_payload_size,
  input      [1:0]    io_sharedInputs_1_arw_payload_burst,
  input      [0:0]    io_sharedInputs_1_arw_payload_lock,
  input      [3:0]    io_sharedInputs_1_arw_payload_cache,
  input      [3:0]    io_sharedInputs_1_arw_payload_qos,
  input      [2:0]    io_sharedInputs_1_arw_payload_prot,
  input               io_sharedInputs_1_arw_payload_write,
  input               io_sharedInputs_1_w_valid,
  output              io_sharedInputs_1_w_ready,
  input      [127:0]  io_sharedInputs_1_w_payload_data,
  input      [15:0]   io_sharedInputs_1_w_payload_strb,
  input               io_sharedInputs_1_w_payload_last,
  output              io_sharedInputs_1_b_valid,
  input               io_sharedInputs_1_b_ready,
  output     [6:0]    io_sharedInputs_1_b_payload_id,
  output     [1:0]    io_sharedInputs_1_b_payload_resp,
  output              io_sharedInputs_1_r_valid,
  input               io_sharedInputs_1_r_ready,
  output     [127:0]  io_sharedInputs_1_r_payload_data,
  output     [6:0]    io_sharedInputs_1_r_payload_id,
  output     [1:0]    io_sharedInputs_1_r_payload_resp,
  output              io_sharedInputs_1_r_payload_last,
  output              io_output_arw_valid,
  input               io_output_arw_ready,
  output     [31:0]   io_output_arw_payload_addr,
  output     [7:0]    io_output_arw_payload_id,
  output     [3:0]    io_output_arw_payload_region,
  output     [7:0]    io_output_arw_payload_len,
  output     [2:0]    io_output_arw_payload_size,
  output     [1:0]    io_output_arw_payload_burst,
  output     [0:0]    io_output_arw_payload_lock,
  output     [3:0]    io_output_arw_payload_cache,
  output     [3:0]    io_output_arw_payload_qos,
  output     [2:0]    io_output_arw_payload_prot,
  output              io_output_arw_payload_write,
  output              io_output_w_valid,
  input               io_output_w_ready,
  output     [127:0]  io_output_w_payload_data,
  output     [15:0]   io_output_w_payload_strb,
  output              io_output_w_payload_last,
  input               io_output_b_valid,
  output              io_output_b_ready,
  input      [7:0]    io_output_b_payload_id,
  input      [1:0]    io_output_b_payload_resp,
  input               io_output_r_valid,
  output              io_output_r_ready,
  input      [127:0]  io_output_r_payload_data,
  input      [7:0]    io_output_r_payload_id,
  input      [1:0]    io_output_r_payload_resp,
  input               io_output_r_payload_last,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  reg                 _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  reg                 _zz_7;
  reg                 _zz_8;
  reg        [127:0]  _zz_9;
  reg        [15:0]   _zz_10;
  reg                 _zz_11;
  reg                 _zz_12;
  reg                 _zz_13;
  wire                cmdArbiter_io_inputs_0_ready;
  wire                cmdArbiter_io_inputs_1_ready;
  wire                cmdArbiter_io_output_valid;
  wire       [31:0]   cmdArbiter_io_output_payload_addr;
  wire       [6:0]    cmdArbiter_io_output_payload_id;
  wire       [3:0]    cmdArbiter_io_output_payload_region;
  wire       [7:0]    cmdArbiter_io_output_payload_len;
  wire       [2:0]    cmdArbiter_io_output_payload_size;
  wire       [1:0]    cmdArbiter_io_output_payload_burst;
  wire       [0:0]    cmdArbiter_io_output_payload_lock;
  wire       [3:0]    cmdArbiter_io_output_payload_cache;
  wire       [3:0]    cmdArbiter_io_output_payload_qos;
  wire       [2:0]    cmdArbiter_io_output_payload_prot;
  wire                cmdArbiter_io_output_payload_write;
  wire       [0:0]    cmdArbiter_io_chosen;
  wire       [1:0]    cmdArbiter_io_chosenOH;
  wire                cmdArbiter_io_output_fork_io_input_ready;
  wire                cmdArbiter_io_output_fork_io_outputs_0_valid;
  wire       [31:0]   cmdArbiter_io_output_fork_io_outputs_0_payload_addr;
  wire       [6:0]    cmdArbiter_io_output_fork_io_outputs_0_payload_id;
  wire       [3:0]    cmdArbiter_io_output_fork_io_outputs_0_payload_region;
  wire       [7:0]    cmdArbiter_io_output_fork_io_outputs_0_payload_len;
  wire       [2:0]    cmdArbiter_io_output_fork_io_outputs_0_payload_size;
  wire       [1:0]    cmdArbiter_io_output_fork_io_outputs_0_payload_burst;
  wire       [0:0]    cmdArbiter_io_output_fork_io_outputs_0_payload_lock;
  wire       [3:0]    cmdArbiter_io_output_fork_io_outputs_0_payload_cache;
  wire       [3:0]    cmdArbiter_io_output_fork_io_outputs_0_payload_qos;
  wire       [2:0]    cmdArbiter_io_output_fork_io_outputs_0_payload_prot;
  wire                cmdArbiter_io_output_fork_io_outputs_0_payload_write;
  wire                cmdArbiter_io_output_fork_io_outputs_1_valid;
  wire       [31:0]   cmdArbiter_io_output_fork_io_outputs_1_payload_addr;
  wire       [6:0]    cmdArbiter_io_output_fork_io_outputs_1_payload_id;
  wire       [3:0]    cmdArbiter_io_output_fork_io_outputs_1_payload_region;
  wire       [7:0]    cmdArbiter_io_output_fork_io_outputs_1_payload_len;
  wire       [2:0]    cmdArbiter_io_output_fork_io_outputs_1_payload_size;
  wire       [1:0]    cmdArbiter_io_output_fork_io_outputs_1_payload_burst;
  wire       [0:0]    cmdArbiter_io_output_fork_io_outputs_1_payload_lock;
  wire       [3:0]    cmdArbiter_io_output_fork_io_outputs_1_payload_cache;
  wire       [3:0]    cmdArbiter_io_output_fork_io_outputs_1_payload_qos;
  wire       [2:0]    cmdArbiter_io_output_fork_io_outputs_1_payload_prot;
  wire                cmdArbiter_io_output_fork_io_outputs_1_payload_write;
  wire                cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_push_ready;
  wire                cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_valid;
  wire       [0:0]    cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_payload;
  wire       [2:0]    cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_occupancy;
  wire                _zz_14;
  wire                _zz_15;
  wire       [1:0]    _zz_16;
  wire       [1:0]    _zz_17;
  wire       [1:0]    _zz_18;
  wire                inputsCmd_0_valid;
  wire                inputsCmd_0_ready;
  wire       [31:0]   inputsCmd_0_payload_addr;
  wire       [6:0]    inputsCmd_0_payload_id;
  wire       [3:0]    inputsCmd_0_payload_region;
  wire       [7:0]    inputsCmd_0_payload_len;
  wire       [2:0]    inputsCmd_0_payload_size;
  wire       [1:0]    inputsCmd_0_payload_burst;
  wire       [0:0]    inputsCmd_0_payload_lock;
  wire       [3:0]    inputsCmd_0_payload_cache;
  wire       [3:0]    inputsCmd_0_payload_qos;
  wire       [2:0]    inputsCmd_0_payload_prot;
  wire                inputsCmd_0_payload_write;
  wire                inputsCmd_1_valid;
  wire                inputsCmd_1_ready;
  wire       [31:0]   inputsCmd_1_payload_addr;
  wire       [6:0]    inputsCmd_1_payload_id;
  wire       [3:0]    inputsCmd_1_payload_region;
  wire       [7:0]    inputsCmd_1_payload_len;
  wire       [2:0]    inputsCmd_1_payload_size;
  wire       [1:0]    inputsCmd_1_payload_burst;
  wire       [0:0]    inputsCmd_1_payload_lock;
  wire       [3:0]    inputsCmd_1_payload_cache;
  wire       [3:0]    inputsCmd_1_payload_qos;
  wire       [2:0]    inputsCmd_1_payload_prot;
  wire                inputsCmd_1_payload_write;
  wire                _zz_1;
  wire                _zz_2;
  reg                 cmdArbiter_io_output_fork_io_outputs_1_thrown_valid;
  wire                cmdArbiter_io_output_fork_io_outputs_1_thrown_ready;
  wire       [31:0]   cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_addr;
  wire       [6:0]    cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_id;
  wire       [3:0]    cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_region;
  wire       [7:0]    cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_len;
  wire       [2:0]    cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_size;
  wire       [1:0]    cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_burst;
  wire       [0:0]    cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_lock;
  wire       [3:0]    cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_cache;
  wire       [3:0]    cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_qos;
  wire       [2:0]    cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_prot;
  wire                cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_write;
  wire                _zz_3;
  wire                cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_valid;
  wire                cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_ready;
  wire       [0:0]    cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_payload;
  wire                cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_valid;
  wire                cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_ready;
  wire       [0:0]    cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_payload;
  reg                 cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_rValid;
  reg        [0:0]    cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_rData;
  wire                cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_valid;
  wire                cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_ready;
  wire       [0:0]    cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_payload;
  reg                 cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_rValid;
  reg        [0:0]    cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_rData;
  wire                writeLogic_routeDataInput_valid;
  wire                writeLogic_routeDataInput_ready;
  wire       [127:0]  writeLogic_routeDataInput_payload_data;
  wire       [15:0]   writeLogic_routeDataInput_payload_strb;
  wire                writeLogic_routeDataInput_payload_last;
  wire       [0:0]    writeLogic_writeRspIndex;
  wire                writeLogic_writeRspSels_0;
  wire                writeLogic_writeRspSels_1;
  wire       [0:0]    readRspIndex;
  wire                readRspSels_0;
  wire                readRspSels_1;

  assign _zz_14 = (! cmdArbiter_io_output_fork_io_outputs_1_payload_write);
  assign _zz_15 = (cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_ready && (! cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_ready));
  assign _zz_16 = cmdArbiter_io_chosenOH[1 : 0];
  assign _zz_17 = cmdArbiter_io_chosenOH[1 : 0];
  assign _zz_18 = cmdArbiter_io_chosenOH[1 : 0];
  StreamArbiter_1_e12a9decc0704226832aec4017b36e8d cmdArbiter (
    .io_inputs_0_valid             (inputsCmd_0_valid                         ), //i
    .io_inputs_0_ready             (cmdArbiter_io_inputs_0_ready              ), //o
    .io_inputs_0_payload_addr      (inputsCmd_0_payload_addr[31:0]            ), //i
    .io_inputs_0_payload_id        (inputsCmd_0_payload_id[6:0]               ), //i
    .io_inputs_0_payload_region    (inputsCmd_0_payload_region[3:0]           ), //i
    .io_inputs_0_payload_len       (inputsCmd_0_payload_len[7:0]              ), //i
    .io_inputs_0_payload_size      (inputsCmd_0_payload_size[2:0]             ), //i
    .io_inputs_0_payload_burst     (inputsCmd_0_payload_burst[1:0]            ), //i
    .io_inputs_0_payload_lock      (inputsCmd_0_payload_lock                  ), //i
    .io_inputs_0_payload_cache     (inputsCmd_0_payload_cache[3:0]            ), //i
    .io_inputs_0_payload_qos       (inputsCmd_0_payload_qos[3:0]              ), //i
    .io_inputs_0_payload_prot      (inputsCmd_0_payload_prot[2:0]             ), //i
    .io_inputs_0_payload_write     (inputsCmd_0_payload_write                 ), //i
    .io_inputs_1_valid             (inputsCmd_1_valid                         ), //i
    .io_inputs_1_ready             (cmdArbiter_io_inputs_1_ready              ), //o
    .io_inputs_1_payload_addr      (inputsCmd_1_payload_addr[31:0]            ), //i
    .io_inputs_1_payload_id        (inputsCmd_1_payload_id[6:0]               ), //i
    .io_inputs_1_payload_region    (inputsCmd_1_payload_region[3:0]           ), //i
    .io_inputs_1_payload_len       (inputsCmd_1_payload_len[7:0]              ), //i
    .io_inputs_1_payload_size      (inputsCmd_1_payload_size[2:0]             ), //i
    .io_inputs_1_payload_burst     (inputsCmd_1_payload_burst[1:0]            ), //i
    .io_inputs_1_payload_lock      (inputsCmd_1_payload_lock                  ), //i
    .io_inputs_1_payload_cache     (inputsCmd_1_payload_cache[3:0]            ), //i
    .io_inputs_1_payload_qos       (inputsCmd_1_payload_qos[3:0]              ), //i
    .io_inputs_1_payload_prot      (inputsCmd_1_payload_prot[2:0]             ), //i
    .io_inputs_1_payload_write     (inputsCmd_1_payload_write                 ), //i
    .io_output_valid               (cmdArbiter_io_output_valid                ), //o
    .io_output_ready               (cmdArbiter_io_output_fork_io_input_ready  ), //i
    .io_output_payload_addr        (cmdArbiter_io_output_payload_addr[31:0]   ), //o
    .io_output_payload_id          (cmdArbiter_io_output_payload_id[6:0]      ), //o
    .io_output_payload_region      (cmdArbiter_io_output_payload_region[3:0]  ), //o
    .io_output_payload_len         (cmdArbiter_io_output_payload_len[7:0]     ), //o
    .io_output_payload_size        (cmdArbiter_io_output_payload_size[2:0]    ), //o
    .io_output_payload_burst       (cmdArbiter_io_output_payload_burst[1:0]   ), //o
    .io_output_payload_lock        (cmdArbiter_io_output_payload_lock         ), //o
    .io_output_payload_cache       (cmdArbiter_io_output_payload_cache[3:0]   ), //o
    .io_output_payload_qos         (cmdArbiter_io_output_payload_qos[3:0]     ), //o
    .io_output_payload_prot        (cmdArbiter_io_output_payload_prot[2:0]    ), //o
    .io_output_payload_write       (cmdArbiter_io_output_payload_write        ), //o
    .io_chosen                     (cmdArbiter_io_chosen                      ), //o
    .io_chosenOH                   (cmdArbiter_io_chosenOH[1:0]               ), //o
    .io_memoryClk                  (io_memoryClk                              ), //i
    .ddrCd_logic_outputReset       (ddrCd_logic_outputReset                   )  //i
  );
  StreamFork_3_e12a9decc0704226832aec4017b36e8d cmdArbiter_io_output_fork (
    .io_input_valid                 (cmdArbiter_io_output_valid                                  ), //i
    .io_input_ready                 (cmdArbiter_io_output_fork_io_input_ready                    ), //o
    .io_input_payload_addr          (cmdArbiter_io_output_payload_addr[31:0]                     ), //i
    .io_input_payload_id            (cmdArbiter_io_output_payload_id[6:0]                        ), //i
    .io_input_payload_region        (cmdArbiter_io_output_payload_region[3:0]                    ), //i
    .io_input_payload_len           (cmdArbiter_io_output_payload_len[7:0]                       ), //i
    .io_input_payload_size          (cmdArbiter_io_output_payload_size[2:0]                      ), //i
    .io_input_payload_burst         (cmdArbiter_io_output_payload_burst[1:0]                     ), //i
    .io_input_payload_lock          (cmdArbiter_io_output_payload_lock                           ), //i
    .io_input_payload_cache         (cmdArbiter_io_output_payload_cache[3:0]                     ), //i
    .io_input_payload_qos           (cmdArbiter_io_output_payload_qos[3:0]                       ), //i
    .io_input_payload_prot          (cmdArbiter_io_output_payload_prot[2:0]                      ), //i
    .io_input_payload_write         (cmdArbiter_io_output_payload_write                          ), //i
    .io_outputs_0_valid             (cmdArbiter_io_output_fork_io_outputs_0_valid                ), //o
    .io_outputs_0_ready             (io_output_arw_ready                                         ), //i
    .io_outputs_0_payload_addr      (cmdArbiter_io_output_fork_io_outputs_0_payload_addr[31:0]   ), //o
    .io_outputs_0_payload_id        (cmdArbiter_io_output_fork_io_outputs_0_payload_id[6:0]      ), //o
    .io_outputs_0_payload_region    (cmdArbiter_io_output_fork_io_outputs_0_payload_region[3:0]  ), //o
    .io_outputs_0_payload_len       (cmdArbiter_io_output_fork_io_outputs_0_payload_len[7:0]     ), //o
    .io_outputs_0_payload_size      (cmdArbiter_io_output_fork_io_outputs_0_payload_size[2:0]    ), //o
    .io_outputs_0_payload_burst     (cmdArbiter_io_output_fork_io_outputs_0_payload_burst[1:0]   ), //o
    .io_outputs_0_payload_lock      (cmdArbiter_io_output_fork_io_outputs_0_payload_lock         ), //o
    .io_outputs_0_payload_cache     (cmdArbiter_io_output_fork_io_outputs_0_payload_cache[3:0]   ), //o
    .io_outputs_0_payload_qos       (cmdArbiter_io_output_fork_io_outputs_0_payload_qos[3:0]     ), //o
    .io_outputs_0_payload_prot      (cmdArbiter_io_output_fork_io_outputs_0_payload_prot[2:0]    ), //o
    .io_outputs_0_payload_write     (cmdArbiter_io_output_fork_io_outputs_0_payload_write        ), //o
    .io_outputs_1_valid             (cmdArbiter_io_output_fork_io_outputs_1_valid                ), //o
    .io_outputs_1_ready             (_zz_4                                                       ), //i
    .io_outputs_1_payload_addr      (cmdArbiter_io_output_fork_io_outputs_1_payload_addr[31:0]   ), //o
    .io_outputs_1_payload_id        (cmdArbiter_io_output_fork_io_outputs_1_payload_id[6:0]      ), //o
    .io_outputs_1_payload_region    (cmdArbiter_io_output_fork_io_outputs_1_payload_region[3:0]  ), //o
    .io_outputs_1_payload_len       (cmdArbiter_io_output_fork_io_outputs_1_payload_len[7:0]     ), //o
    .io_outputs_1_payload_size      (cmdArbiter_io_output_fork_io_outputs_1_payload_size[2:0]    ), //o
    .io_outputs_1_payload_burst     (cmdArbiter_io_output_fork_io_outputs_1_payload_burst[1:0]   ), //o
    .io_outputs_1_payload_lock      (cmdArbiter_io_output_fork_io_outputs_1_payload_lock         ), //o
    .io_outputs_1_payload_cache     (cmdArbiter_io_output_fork_io_outputs_1_payload_cache[3:0]   ), //o
    .io_outputs_1_payload_qos       (cmdArbiter_io_output_fork_io_outputs_1_payload_qos[3:0]     ), //o
    .io_outputs_1_payload_prot      (cmdArbiter_io_output_fork_io_outputs_1_payload_prot[2:0]    ), //o
    .io_outputs_1_payload_write     (cmdArbiter_io_output_fork_io_outputs_1_payload_write        ), //o
    .io_memoryClk                   (io_memoryClk                                                ), //i
    .ddrCd_logic_outputReset        (ddrCd_logic_outputReset                                     )  //i
  );
  StreamFifoLowLatency_e12a9decc0704226832aec4017b36e8d cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo (
    .io_push_valid              (cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_valid                   ), //i
    .io_push_ready              (cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_push_ready      ), //o
    .io_push_payload            (cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_payload                 ), //i
    .io_pop_valid               (cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_valid       ), //o
    .io_pop_ready               (_zz_5                                                                            ), //i
    .io_pop_payload             (cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_payload     ), //o
    .io_flush                   (_zz_6                                                                            ), //i
    .io_occupancy               (cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_occupancy[2:0]  ), //o
    .io_memoryClk               (io_memoryClk                                                                     ), //i
    .ddrCd_logic_outputReset    (ddrCd_logic_outputReset                                                          )  //i
  );
  always @(*) begin
    case(cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_payload)
      1'b0 : begin
        _zz_7 = io_sharedInputs_0_w_valid;
        _zz_8 = io_sharedInputs_0_w_ready;
        _zz_9 = io_sharedInputs_0_w_payload_data;
        _zz_10 = io_sharedInputs_0_w_payload_strb;
        _zz_11 = io_sharedInputs_0_w_payload_last;
      end
      default : begin
        _zz_7 = io_sharedInputs_1_w_valid;
        _zz_8 = io_sharedInputs_1_w_ready;
        _zz_9 = io_sharedInputs_1_w_payload_data;
        _zz_10 = io_sharedInputs_1_w_payload_strb;
        _zz_11 = io_sharedInputs_1_w_payload_last;
      end
    endcase
  end

  always @(*) begin
    case(writeLogic_writeRspIndex)
      1'b0 : begin
        _zz_12 = io_sharedInputs_0_b_ready;
      end
      default : begin
        _zz_12 = io_sharedInputs_1_b_ready;
      end
    endcase
  end

  always @(*) begin
    case(readRspIndex)
      1'b0 : begin
        _zz_13 = io_sharedInputs_0_r_ready;
      end
      default : begin
        _zz_13 = io_sharedInputs_1_r_ready;
      end
    endcase
  end

  assign inputsCmd_0_valid = io_sharedInputs_0_arw_valid;
  assign io_sharedInputs_0_arw_ready = inputsCmd_0_ready;
  assign inputsCmd_0_payload_addr = io_sharedInputs_0_arw_payload_addr;
  assign inputsCmd_0_payload_id = io_sharedInputs_0_arw_payload_id;
  assign inputsCmd_0_payload_region = io_sharedInputs_0_arw_payload_region;
  assign inputsCmd_0_payload_len = io_sharedInputs_0_arw_payload_len;
  assign inputsCmd_0_payload_size = io_sharedInputs_0_arw_payload_size;
  assign inputsCmd_0_payload_burst = io_sharedInputs_0_arw_payload_burst;
  assign inputsCmd_0_payload_lock = io_sharedInputs_0_arw_payload_lock;
  assign inputsCmd_0_payload_cache = io_sharedInputs_0_arw_payload_cache;
  assign inputsCmd_0_payload_qos = io_sharedInputs_0_arw_payload_qos;
  assign inputsCmd_0_payload_prot = io_sharedInputs_0_arw_payload_prot;
  assign inputsCmd_0_payload_write = io_sharedInputs_0_arw_payload_write;
  assign inputsCmd_1_valid = io_sharedInputs_1_arw_valid;
  assign io_sharedInputs_1_arw_ready = inputsCmd_1_ready;
  assign inputsCmd_1_payload_addr = io_sharedInputs_1_arw_payload_addr;
  assign inputsCmd_1_payload_id = io_sharedInputs_1_arw_payload_id;
  assign inputsCmd_1_payload_region = io_sharedInputs_1_arw_payload_region;
  assign inputsCmd_1_payload_len = io_sharedInputs_1_arw_payload_len;
  assign inputsCmd_1_payload_size = io_sharedInputs_1_arw_payload_size;
  assign inputsCmd_1_payload_burst = io_sharedInputs_1_arw_payload_burst;
  assign inputsCmd_1_payload_lock = io_sharedInputs_1_arw_payload_lock;
  assign inputsCmd_1_payload_cache = io_sharedInputs_1_arw_payload_cache;
  assign inputsCmd_1_payload_qos = io_sharedInputs_1_arw_payload_qos;
  assign inputsCmd_1_payload_prot = io_sharedInputs_1_arw_payload_prot;
  assign inputsCmd_1_payload_write = io_sharedInputs_1_arw_payload_write;
  assign inputsCmd_0_ready = cmdArbiter_io_inputs_0_ready;
  assign inputsCmd_1_ready = cmdArbiter_io_inputs_1_ready;
  assign io_output_arw_valid = cmdArbiter_io_output_fork_io_outputs_0_valid;
  assign io_output_arw_payload_addr = cmdArbiter_io_output_fork_io_outputs_0_payload_addr;
  assign io_output_arw_payload_region = cmdArbiter_io_output_fork_io_outputs_0_payload_region;
  assign io_output_arw_payload_len = cmdArbiter_io_output_fork_io_outputs_0_payload_len;
  assign io_output_arw_payload_size = cmdArbiter_io_output_fork_io_outputs_0_payload_size;
  assign io_output_arw_payload_burst = cmdArbiter_io_output_fork_io_outputs_0_payload_burst;
  assign io_output_arw_payload_lock = cmdArbiter_io_output_fork_io_outputs_0_payload_lock;
  assign io_output_arw_payload_cache = cmdArbiter_io_output_fork_io_outputs_0_payload_cache;
  assign io_output_arw_payload_qos = cmdArbiter_io_output_fork_io_outputs_0_payload_qos;
  assign io_output_arw_payload_prot = cmdArbiter_io_output_fork_io_outputs_0_payload_prot;
  assign io_output_arw_payload_write = cmdArbiter_io_output_fork_io_outputs_0_payload_write;
  assign _zz_1 = _zz_16[1];
  assign _zz_2 = _zz_17[1];
  assign io_output_arw_payload_id = (cmdArbiter_io_output_fork_io_outputs_0_payload_write ? {_zz_1,cmdArbiter_io_output_fork_io_outputs_0_payload_id} : {_zz_2,cmdArbiter_io_output_fork_io_outputs_0_payload_id});
  always @ (*) begin
    cmdArbiter_io_output_fork_io_outputs_1_thrown_valid = cmdArbiter_io_output_fork_io_outputs_1_valid;
    if(_zz_14)begin
      cmdArbiter_io_output_fork_io_outputs_1_thrown_valid = 1'b0;
    end
  end

  always @ (*) begin
    _zz_4 = cmdArbiter_io_output_fork_io_outputs_1_thrown_ready;
    if(_zz_14)begin
      _zz_4 = 1'b1;
    end
  end

  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_addr = cmdArbiter_io_output_fork_io_outputs_1_payload_addr;
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_id = cmdArbiter_io_output_fork_io_outputs_1_payload_id;
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_region = cmdArbiter_io_output_fork_io_outputs_1_payload_region;
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_len = cmdArbiter_io_output_fork_io_outputs_1_payload_len;
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_size = cmdArbiter_io_output_fork_io_outputs_1_payload_size;
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_burst = cmdArbiter_io_output_fork_io_outputs_1_payload_burst;
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_lock = cmdArbiter_io_output_fork_io_outputs_1_payload_lock;
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_cache = cmdArbiter_io_output_fork_io_outputs_1_payload_cache;
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_qos = cmdArbiter_io_output_fork_io_outputs_1_payload_qos;
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_prot = cmdArbiter_io_output_fork_io_outputs_1_payload_prot;
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_payload_write = cmdArbiter_io_output_fork_io_outputs_1_payload_write;
  assign _zz_3 = _zz_18[1];
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_valid = cmdArbiter_io_output_fork_io_outputs_1_thrown_valid;
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_ready = cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_ready;
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_payload = _zz_3;
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_ready = cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_push_ready;
  assign _zz_5 = ((1'b1 && (! cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_valid)) || cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_ready);
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_valid = cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_rValid;
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_payload = cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_rData;
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_valid = (cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_valid || cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_rValid);
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_ready = (! cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_rValid);
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_payload = (cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_rValid ? cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_rData : cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_payload);
  assign writeLogic_routeDataInput_valid = _zz_7;
  assign writeLogic_routeDataInput_ready = _zz_8;
  assign writeLogic_routeDataInput_payload_data = _zz_9;
  assign writeLogic_routeDataInput_payload_strb = _zz_10;
  assign writeLogic_routeDataInput_payload_last = _zz_11;
  assign io_output_w_valid = (cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_valid && writeLogic_routeDataInput_valid);
  assign io_output_w_payload_data = writeLogic_routeDataInput_payload_data;
  assign io_output_w_payload_strb = writeLogic_routeDataInput_payload_strb;
  assign io_output_w_payload_last = writeLogic_routeDataInput_payload_last;
  assign io_sharedInputs_0_w_ready = ((cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_valid && io_output_w_ready) && (cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_payload == (1'b0)));
  assign io_sharedInputs_1_w_ready = ((cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_valid && io_output_w_ready) && (cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_payload == (1'b1)));
  assign cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_ready = ((io_output_w_valid && io_output_w_ready) && io_output_w_payload_last);
  assign writeLogic_writeRspIndex = io_output_b_payload_id[7 : 7];
  assign writeLogic_writeRspSels_0 = (writeLogic_writeRspIndex == (1'b0));
  assign writeLogic_writeRspSels_1 = (writeLogic_writeRspIndex == (1'b1));
  assign io_sharedInputs_0_b_valid = (io_output_b_valid && writeLogic_writeRspSels_0);
  assign io_sharedInputs_0_b_payload_resp = io_output_b_payload_resp;
  assign io_sharedInputs_0_b_payload_id = io_output_b_payload_id[6:0];
  assign io_sharedInputs_1_b_valid = (io_output_b_valid && writeLogic_writeRspSels_1);
  assign io_sharedInputs_1_b_payload_resp = io_output_b_payload_resp;
  assign io_sharedInputs_1_b_payload_id = io_output_b_payload_id[6:0];
  assign io_output_b_ready = _zz_12;
  assign readRspIndex = io_output_r_payload_id[7 : 7];
  assign readRspSels_0 = (readRspIndex == (1'b0));
  assign readRspSels_1 = (readRspIndex == (1'b1));
  assign io_sharedInputs_0_r_valid = (io_output_r_valid && readRspSels_0);
  assign io_sharedInputs_0_r_payload_data = io_output_r_payload_data;
  assign io_sharedInputs_0_r_payload_resp = io_output_r_payload_resp;
  assign io_sharedInputs_0_r_payload_last = io_output_r_payload_last;
  assign io_sharedInputs_0_r_payload_id = io_output_r_payload_id[6:0];
  assign io_sharedInputs_1_r_valid = (io_output_r_valid && readRspSels_1);
  assign io_sharedInputs_1_r_payload_data = io_output_r_payload_data;
  assign io_sharedInputs_1_r_payload_resp = io_output_r_payload_resp;
  assign io_sharedInputs_1_r_payload_last = io_output_r_payload_last;
  assign io_sharedInputs_1_r_payload_id = io_output_r_payload_id[6:0];
  assign io_output_r_ready = _zz_13;
  assign _zz_6 = 1'b0;
  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_rValid <= 1'b0;
      cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_rValid <= 1'b0;
    end else begin
      if(_zz_5)begin
        cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_rValid <= cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_valid;
      end
      if(cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_ready)begin
        cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_15)begin
        cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_rValid <= cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_valid;
      end
    end
  end

  always @ (posedge io_memoryClk) begin
    if(_zz_5)begin
      cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_rData <= cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_payload;
    end
    if(_zz_15)begin
      cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_s2mPipe_rData <= cmdArbiter_io_output_fork_io_outputs_1_thrown_translated_fifo_io_pop_m2sPipe_payload;
    end
  end


endmodule

module Axi4SharedCC_e12a9decc0704226832aec4017b36e8d (
  input               io_input_arw_valid,
  output              io_input_arw_ready,
  input      [31:0]   io_input_arw_payload_addr,
  input      [1:0]    io_input_arw_payload_id,
  input      [3:0]    io_input_arw_payload_region,
  input      [7:0]    io_input_arw_payload_len,
  input      [2:0]    io_input_arw_payload_size,
  input      [1:0]    io_input_arw_payload_burst,
  input      [0:0]    io_input_arw_payload_lock,
  input      [3:0]    io_input_arw_payload_cache,
  input      [3:0]    io_input_arw_payload_qos,
  input      [2:0]    io_input_arw_payload_prot,
  input               io_input_arw_payload_write,
  input               io_input_w_valid,
  output              io_input_w_ready,
  input      [127:0]  io_input_w_payload_data,
  input      [15:0]   io_input_w_payload_strb,
  input               io_input_w_payload_last,
  output              io_input_b_valid,
  input               io_input_b_ready,
  output     [1:0]    io_input_b_payload_id,
  output     [1:0]    io_input_b_payload_resp,
  output              io_input_r_valid,
  input               io_input_r_ready,
  output     [127:0]  io_input_r_payload_data,
  output     [1:0]    io_input_r_payload_id,
  output     [1:0]    io_input_r_payload_resp,
  output              io_input_r_payload_last,
  output              io_output_arw_valid,
  input               io_output_arw_ready,
  output     [31:0]   io_output_arw_payload_addr,
  output     [1:0]    io_output_arw_payload_id,
  output     [3:0]    io_output_arw_payload_region,
  output     [7:0]    io_output_arw_payload_len,
  output     [2:0]    io_output_arw_payload_size,
  output     [1:0]    io_output_arw_payload_burst,
  output     [0:0]    io_output_arw_payload_lock,
  output     [3:0]    io_output_arw_payload_cache,
  output     [3:0]    io_output_arw_payload_qos,
  output     [2:0]    io_output_arw_payload_prot,
  output              io_output_arw_payload_write,
  output              io_output_w_valid,
  input               io_output_w_ready,
  output     [127:0]  io_output_w_payload_data,
  output     [15:0]   io_output_w_payload_strb,
  output              io_output_w_payload_last,
  input               io_output_b_valid,
  output              io_output_b_ready,
  input      [1:0]    io_output_b_payload_id,
  input      [1:0]    io_output_b_payload_resp,
  input               io_output_r_valid,
  output              io_output_r_ready,
  input      [127:0]  io_output_r_payload_data,
  input      [1:0]    io_output_r_payload_id,
  input      [1:0]    io_output_r_payload_resp,
  input               io_output_r_payload_last,
  input               io_systemClk,
  input               systemCd_logic_outputReset,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  wire                io_input_arw_queue_io_push_ready;
  wire                io_input_arw_queue_io_pop_valid;
  wire       [31:0]   io_input_arw_queue_io_pop_payload_addr;
  wire       [1:0]    io_input_arw_queue_io_pop_payload_id;
  wire       [3:0]    io_input_arw_queue_io_pop_payload_region;
  wire       [7:0]    io_input_arw_queue_io_pop_payload_len;
  wire       [2:0]    io_input_arw_queue_io_pop_payload_size;
  wire       [1:0]    io_input_arw_queue_io_pop_payload_burst;
  wire       [0:0]    io_input_arw_queue_io_pop_payload_lock;
  wire       [3:0]    io_input_arw_queue_io_pop_payload_cache;
  wire       [3:0]    io_input_arw_queue_io_pop_payload_qos;
  wire       [2:0]    io_input_arw_queue_io_pop_payload_prot;
  wire                io_input_arw_queue_io_pop_payload_write;
  wire       [4:0]    io_input_arw_queue_io_pushOccupancy;
  wire       [4:0]    io_input_arw_queue_io_popOccupancy;
  wire                io_output_r_queue_io_push_ready;
  wire                io_output_r_queue_io_pop_valid;
  wire       [127:0]  io_output_r_queue_io_pop_payload_data;
  wire       [1:0]    io_output_r_queue_io_pop_payload_id;
  wire       [1:0]    io_output_r_queue_io_pop_payload_resp;
  wire                io_output_r_queue_io_pop_payload_last;
  wire       [6:0]    io_output_r_queue_io_pushOccupancy;
  wire       [6:0]    io_output_r_queue_io_popOccupancy;
  wire                io_input_w_queue_io_push_ready;
  wire                io_input_w_queue_io_pop_valid;
  wire       [127:0]  io_input_w_queue_io_pop_payload_data;
  wire       [15:0]   io_input_w_queue_io_pop_payload_strb;
  wire                io_input_w_queue_io_pop_payload_last;
  wire       [6:0]    io_input_w_queue_io_pushOccupancy;
  wire       [6:0]    io_input_w_queue_io_popOccupancy;
  wire                io_output_b_queue_io_push_ready;
  wire                io_output_b_queue_io_pop_valid;
  wire       [1:0]    io_output_b_queue_io_pop_payload_id;
  wire       [1:0]    io_output_b_queue_io_pop_payload_resp;
  wire       [4:0]    io_output_b_queue_io_pushOccupancy;
  wire       [4:0]    io_output_b_queue_io_popOccupancy;

  StreamFifoCC_e12a9decc0704226832aec4017b36e8d io_input_arw_queue (
    .io_push_valid                 (io_input_arw_valid                             ), //i
    .io_push_ready                 (io_input_arw_queue_io_push_ready               ), //o
    .io_push_payload_addr          (io_input_arw_payload_addr[31:0]                ), //i
    .io_push_payload_id            (io_input_arw_payload_id[1:0]                   ), //i
    .io_push_payload_region        (io_input_arw_payload_region[3:0]               ), //i
    .io_push_payload_len           (io_input_arw_payload_len[7:0]                  ), //i
    .io_push_payload_size          (io_input_arw_payload_size[2:0]                 ), //i
    .io_push_payload_burst         (io_input_arw_payload_burst[1:0]                ), //i
    .io_push_payload_lock          (io_input_arw_payload_lock                      ), //i
    .io_push_payload_cache         (io_input_arw_payload_cache[3:0]                ), //i
    .io_push_payload_qos           (io_input_arw_payload_qos[3:0]                  ), //i
    .io_push_payload_prot          (io_input_arw_payload_prot[2:0]                 ), //i
    .io_push_payload_write         (io_input_arw_payload_write                     ), //i
    .io_pop_valid                  (io_input_arw_queue_io_pop_valid                ), //o
    .io_pop_ready                  (io_output_arw_ready                            ), //i
    .io_pop_payload_addr           (io_input_arw_queue_io_pop_payload_addr[31:0]   ), //o
    .io_pop_payload_id             (io_input_arw_queue_io_pop_payload_id[1:0]      ), //o
    .io_pop_payload_region         (io_input_arw_queue_io_pop_payload_region[3:0]  ), //o
    .io_pop_payload_len            (io_input_arw_queue_io_pop_payload_len[7:0]     ), //o
    .io_pop_payload_size           (io_input_arw_queue_io_pop_payload_size[2:0]    ), //o
    .io_pop_payload_burst          (io_input_arw_queue_io_pop_payload_burst[1:0]   ), //o
    .io_pop_payload_lock           (io_input_arw_queue_io_pop_payload_lock         ), //o
    .io_pop_payload_cache          (io_input_arw_queue_io_pop_payload_cache[3:0]   ), //o
    .io_pop_payload_qos            (io_input_arw_queue_io_pop_payload_qos[3:0]     ), //o
    .io_pop_payload_prot           (io_input_arw_queue_io_pop_payload_prot[2:0]    ), //o
    .io_pop_payload_write          (io_input_arw_queue_io_pop_payload_write        ), //o
    .io_pushOccupancy              (io_input_arw_queue_io_pushOccupancy[4:0]       ), //o
    .io_popOccupancy               (io_input_arw_queue_io_popOccupancy[4:0]        ), //o
    .io_systemClk                  (io_systemClk                                   ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                     ), //i
    .io_memoryClk                  (io_memoryClk                                   ), //i
    .ddrCd_logic_outputReset       (ddrCd_logic_outputReset                        )  //i
  );
  StreamFifoCC_1_e12a9decc0704226832aec4017b36e8d io_output_r_queue (
    .io_push_valid                 (io_output_r_valid                             ), //i
    .io_push_ready                 (io_output_r_queue_io_push_ready               ), //o
    .io_push_payload_data          (io_output_r_payload_data[127:0]               ), //i
    .io_push_payload_id            (io_output_r_payload_id[1:0]                   ), //i
    .io_push_payload_resp          (io_output_r_payload_resp[1:0]                 ), //i
    .io_push_payload_last          (io_output_r_payload_last                      ), //i
    .io_pop_valid                  (io_output_r_queue_io_pop_valid                ), //o
    .io_pop_ready                  (io_input_r_ready                              ), //i
    .io_pop_payload_data           (io_output_r_queue_io_pop_payload_data[127:0]  ), //o
    .io_pop_payload_id             (io_output_r_queue_io_pop_payload_id[1:0]      ), //o
    .io_pop_payload_resp           (io_output_r_queue_io_pop_payload_resp[1:0]    ), //o
    .io_pop_payload_last           (io_output_r_queue_io_pop_payload_last         ), //o
    .io_pushOccupancy              (io_output_r_queue_io_pushOccupancy[6:0]       ), //o
    .io_popOccupancy               (io_output_r_queue_io_popOccupancy[6:0]        ), //o
    .io_memoryClk                  (io_memoryClk                                  ), //i
    .ddrCd_logic_outputReset       (ddrCd_logic_outputReset                       ), //i
    .io_systemClk                  (io_systemClk                                  ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                    )  //i
  );
  StreamFifoCC_2_e12a9decc0704226832aec4017b36e8d io_input_w_queue (
    .io_push_valid                 (io_input_w_valid                             ), //i
    .io_push_ready                 (io_input_w_queue_io_push_ready               ), //o
    .io_push_payload_data          (io_input_w_payload_data[127:0]               ), //i
    .io_push_payload_strb          (io_input_w_payload_strb[15:0]                ), //i
    .io_push_payload_last          (io_input_w_payload_last                      ), //i
    .io_pop_valid                  (io_input_w_queue_io_pop_valid                ), //o
    .io_pop_ready                  (io_output_w_ready                            ), //i
    .io_pop_payload_data           (io_input_w_queue_io_pop_payload_data[127:0]  ), //o
    .io_pop_payload_strb           (io_input_w_queue_io_pop_payload_strb[15:0]   ), //o
    .io_pop_payload_last           (io_input_w_queue_io_pop_payload_last         ), //o
    .io_pushOccupancy              (io_input_w_queue_io_pushOccupancy[6:0]       ), //o
    .io_popOccupancy               (io_input_w_queue_io_popOccupancy[6:0]        ), //o
    .io_systemClk                  (io_systemClk                                 ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                   ), //i
    .io_memoryClk                  (io_memoryClk                                 ), //i
    .ddrCd_logic_outputReset       (ddrCd_logic_outputReset                      )  //i
  );
  StreamFifoCC_3_e12a9decc0704226832aec4017b36e8d io_output_b_queue (
    .io_push_valid                 (io_output_b_valid                           ), //i
    .io_push_ready                 (io_output_b_queue_io_push_ready             ), //o
    .io_push_payload_id            (io_output_b_payload_id[1:0]                 ), //i
    .io_push_payload_resp          (io_output_b_payload_resp[1:0]               ), //i
    .io_pop_valid                  (io_output_b_queue_io_pop_valid              ), //o
    .io_pop_ready                  (io_input_b_ready                            ), //i
    .io_pop_payload_id             (io_output_b_queue_io_pop_payload_id[1:0]    ), //o
    .io_pop_payload_resp           (io_output_b_queue_io_pop_payload_resp[1:0]  ), //o
    .io_pushOccupancy              (io_output_b_queue_io_pushOccupancy[4:0]     ), //o
    .io_popOccupancy               (io_output_b_queue_io_popOccupancy[4:0]      ), //o
    .io_memoryClk                  (io_memoryClk                                ), //i
    .ddrCd_logic_outputReset       (ddrCd_logic_outputReset                     ), //i
    .io_systemClk                  (io_systemClk                                ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                  )  //i
  );
  assign io_input_arw_ready = io_input_arw_queue_io_push_ready;
  assign io_output_arw_valid = io_input_arw_queue_io_pop_valid;
  assign io_output_arw_payload_addr = io_input_arw_queue_io_pop_payload_addr;
  assign io_output_arw_payload_id = io_input_arw_queue_io_pop_payload_id;
  assign io_output_arw_payload_region = io_input_arw_queue_io_pop_payload_region;
  assign io_output_arw_payload_len = io_input_arw_queue_io_pop_payload_len;
  assign io_output_arw_payload_size = io_input_arw_queue_io_pop_payload_size;
  assign io_output_arw_payload_burst = io_input_arw_queue_io_pop_payload_burst;
  assign io_output_arw_payload_lock = io_input_arw_queue_io_pop_payload_lock;
  assign io_output_arw_payload_cache = io_input_arw_queue_io_pop_payload_cache;
  assign io_output_arw_payload_qos = io_input_arw_queue_io_pop_payload_qos;
  assign io_output_arw_payload_prot = io_input_arw_queue_io_pop_payload_prot;
  assign io_output_arw_payload_write = io_input_arw_queue_io_pop_payload_write;
  assign io_output_r_ready = io_output_r_queue_io_push_ready;
  assign io_input_r_valid = io_output_r_queue_io_pop_valid;
  assign io_input_r_payload_data = io_output_r_queue_io_pop_payload_data;
  assign io_input_r_payload_id = io_output_r_queue_io_pop_payload_id;
  assign io_input_r_payload_resp = io_output_r_queue_io_pop_payload_resp;
  assign io_input_r_payload_last = io_output_r_queue_io_pop_payload_last;
  assign io_input_w_ready = io_input_w_queue_io_push_ready;
  assign io_output_w_valid = io_input_w_queue_io_pop_valid;
  assign io_output_w_payload_data = io_input_w_queue_io_pop_payload_data;
  assign io_output_w_payload_strb = io_input_w_queue_io_pop_payload_strb;
  assign io_output_w_payload_last = io_input_w_queue_io_pop_payload_last;
  assign io_output_b_ready = io_output_b_queue_io_push_ready;
  assign io_input_b_valid = io_output_b_queue_io_pop_valid;
  assign io_input_b_payload_id = io_output_b_queue_io_pop_payload_id;
  assign io_input_b_payload_resp = io_output_b_queue_io_pop_payload_resp;

endmodule

module BmbToAxi4SharedBridge_e12a9decc0704226832aec4017b36e8d (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [4:0]    io_input_cmd_payload_fragment_length,
  input      [127:0]  io_input_cmd_payload_fragment_data,
  input      [15:0]   io_input_cmd_payload_fragment_mask,
  input      [5:0]    io_input_cmd_payload_fragment_context,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output reg [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [127:0]  io_input_rsp_payload_fragment_data,
  output     [5:0]    io_input_rsp_payload_fragment_context,
  output              io_output_arw_valid,
  input               io_output_arw_ready,
  output     [31:0]   io_output_arw_payload_addr,
  output     [7:0]    io_output_arw_payload_len,
  output     [2:0]    io_output_arw_payload_size,
  output     [3:0]    io_output_arw_payload_cache,
  output     [2:0]    io_output_arw_payload_prot,
  output              io_output_arw_payload_write,
  output              io_output_w_valid,
  input               io_output_w_ready,
  output     [127:0]  io_output_w_payload_data,
  output     [15:0]   io_output_w_payload_strb,
  output              io_output_w_payload_last,
  input               io_output_b_valid,
  output              io_output_b_ready,
  input      [1:0]    io_output_b_payload_resp,
  input               io_output_r_valid,
  output              io_output_r_ready,
  input      [127:0]  io_output_r_payload_data,
  input      [1:0]    io_output_r_payload_resp,
  input               io_output_r_payload_last,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  wire                _zz_2;
  reg                 _zz_3;
  reg                 _zz_4;
  wire                _zz_5;
  wire                streamFork_5_io_input_ready;
  wire                streamFork_5_io_outputs_0_valid;
  wire                streamFork_5_io_outputs_0_payload_last;
  wire       [0:0]    streamFork_5_io_outputs_0_payload_fragment_opcode;
  wire       [31:0]   streamFork_5_io_outputs_0_payload_fragment_address;
  wire       [4:0]    streamFork_5_io_outputs_0_payload_fragment_length;
  wire       [127:0]  streamFork_5_io_outputs_0_payload_fragment_data;
  wire       [15:0]   streamFork_5_io_outputs_0_payload_fragment_mask;
  wire       [5:0]    streamFork_5_io_outputs_0_payload_fragment_context;
  wire                streamFork_5_io_outputs_1_valid;
  wire                streamFork_5_io_outputs_1_payload_last;
  wire       [0:0]    streamFork_5_io_outputs_1_payload_fragment_opcode;
  wire       [31:0]   streamFork_5_io_outputs_1_payload_fragment_address;
  wire       [4:0]    streamFork_5_io_outputs_1_payload_fragment_length;
  wire       [127:0]  streamFork_5_io_outputs_1_payload_fragment_data;
  wire       [15:0]   streamFork_5_io_outputs_1_payload_fragment_mask;
  wire       [5:0]    streamFork_5_io_outputs_1_payload_fragment_context;
  wire                cmdInfo_fifo_io_push_ready;
  wire                cmdInfo_fifo_io_pop_valid;
  wire       [5:0]    cmdInfo_fifo_io_pop_payload_context;
  wire       [3:0]    cmdInfo_fifo_io_occupancy;
  wire       [3:0]    cmdInfo_fifo_io_availability;
  wire                _zz_6;
  wire                _zz_7;
  wire                _zz_8;
  wire       [0:0]    _zz_9;
  reg                 pendingCounter_incrementIt;
  reg                 pendingCounter_decrementIt;
  wire       [2:0]    pendingCounter_valueNext;
  reg        [2:0]    pendingCounter_value;
  wire                pendingCounter_willOverflowIfInc;
  wire                pendingCounter_willOverflow;
  reg        [2:0]    pendingCounter_finalIncrement;
  reg                 pendingWrite;
  wire                hazard;
  wire                _zz_1;
  reg                 io_input_cmd_payload_first;
  reg                 cmdStage_valid;
  wire                cmdStage_ready;
  wire                cmdStage_payload_last;
  wire       [0:0]    cmdStage_payload_fragment_opcode;
  wire       [31:0]   cmdStage_payload_fragment_address;
  wire       [4:0]    cmdStage_payload_fragment_length;
  wire       [127:0]  cmdStage_payload_fragment_data;
  wire       [15:0]   cmdStage_payload_fragment_mask;
  wire       [5:0]    cmdStage_payload_fragment_context;
  reg                 dataStage_valid;
  wire                dataStage_ready;
  wire                dataStage_payload_last;
  wire       [0:0]    dataStage_payload_fragment_opcode;
  wire       [31:0]   dataStage_payload_fragment_address;
  wire       [4:0]    dataStage_payload_fragment_length;
  wire       [127:0]  dataStage_payload_fragment_data;
  wire       [15:0]   dataStage_payload_fragment_mask;
  wire       [5:0]    dataStage_payload_fragment_context;
  wire                cmdInfo_valid;
  wire                cmdInfo_ready;
  wire       [5:0]    cmdInfo_payload_context;
  wire                cmdInfo_fifo_io_pop_halfPipe_valid;
  wire                cmdInfo_fifo_io_pop_halfPipe_ready;
  wire       [5:0]    cmdInfo_fifo_io_pop_halfPipe_payload_context;
  reg                 cmdInfo_fifo_io_pop_halfPipe_regs_valid;
  reg                 cmdInfo_fifo_io_pop_halfPipe_regs_ready;
  reg        [5:0]    cmdInfo_fifo_io_pop_halfPipe_regs_payload_context;

  assign _zz_6 = (! io_input_cmd_payload_first);
  assign _zz_7 = (! (streamFork_5_io_outputs_1_payload_fragment_opcode == (1'b1)));
  assign _zz_8 = (! cmdInfo_fifo_io_pop_halfPipe_regs_valid);
  assign _zz_9 = io_input_cmd_payload_fragment_length[4 : 4];
  StreamFork_2_e12a9decc0704226832aec4017b36e8d streamFork_5 (
    .io_input_valid                           (_zz_2                                                     ), //i
    .io_input_ready                           (streamFork_5_io_input_ready                               ), //o
    .io_input_payload_last                    (io_input_cmd_payload_last                                 ), //i
    .io_input_payload_fragment_opcode         (io_input_cmd_payload_fragment_opcode                      ), //i
    .io_input_payload_fragment_address        (io_input_cmd_payload_fragment_address[31:0]               ), //i
    .io_input_payload_fragment_length         (io_input_cmd_payload_fragment_length[4:0]                 ), //i
    .io_input_payload_fragment_data           (io_input_cmd_payload_fragment_data[127:0]                 ), //i
    .io_input_payload_fragment_mask           (io_input_cmd_payload_fragment_mask[15:0]                  ), //i
    .io_input_payload_fragment_context        (io_input_cmd_payload_fragment_context[5:0]                ), //i
    .io_outputs_0_valid                       (streamFork_5_io_outputs_0_valid                           ), //o
    .io_outputs_0_ready                       (_zz_3                                                     ), //i
    .io_outputs_0_payload_last                (streamFork_5_io_outputs_0_payload_last                    ), //o
    .io_outputs_0_payload_fragment_opcode     (streamFork_5_io_outputs_0_payload_fragment_opcode         ), //o
    .io_outputs_0_payload_fragment_address    (streamFork_5_io_outputs_0_payload_fragment_address[31:0]  ), //o
    .io_outputs_0_payload_fragment_length     (streamFork_5_io_outputs_0_payload_fragment_length[4:0]    ), //o
    .io_outputs_0_payload_fragment_data       (streamFork_5_io_outputs_0_payload_fragment_data[127:0]    ), //o
    .io_outputs_0_payload_fragment_mask       (streamFork_5_io_outputs_0_payload_fragment_mask[15:0]     ), //o
    .io_outputs_0_payload_fragment_context    (streamFork_5_io_outputs_0_payload_fragment_context[5:0]   ), //o
    .io_outputs_1_valid                       (streamFork_5_io_outputs_1_valid                           ), //o
    .io_outputs_1_ready                       (_zz_4                                                     ), //i
    .io_outputs_1_payload_last                (streamFork_5_io_outputs_1_payload_last                    ), //o
    .io_outputs_1_payload_fragment_opcode     (streamFork_5_io_outputs_1_payload_fragment_opcode         ), //o
    .io_outputs_1_payload_fragment_address    (streamFork_5_io_outputs_1_payload_fragment_address[31:0]  ), //o
    .io_outputs_1_payload_fragment_length     (streamFork_5_io_outputs_1_payload_fragment_length[4:0]    ), //o
    .io_outputs_1_payload_fragment_data       (streamFork_5_io_outputs_1_payload_fragment_data[127:0]    ), //o
    .io_outputs_1_payload_fragment_mask       (streamFork_5_io_outputs_1_payload_fragment_mask[15:0]     ), //o
    .io_outputs_1_payload_fragment_context    (streamFork_5_io_outputs_1_payload_fragment_context[5:0]   ), //o
    .io_systemClk                             (io_systemClk                                              ), //i
    .systemCd_logic_outputReset               (systemCd_logic_outputReset                                )  //i
  );
  StreamFifo_3_e12a9decc0704226832aec4017b36e8d cmdInfo_fifo (
    .io_push_valid                 (cmdInfo_valid                             ), //i
    .io_push_ready                 (cmdInfo_fifo_io_push_ready                ), //o
    .io_push_payload_context       (cmdInfo_payload_context[5:0]              ), //i
    .io_pop_valid                  (cmdInfo_fifo_io_pop_valid                 ), //o
    .io_pop_ready                  (cmdInfo_fifo_io_pop_halfPipe_regs_ready   ), //i
    .io_pop_payload_context        (cmdInfo_fifo_io_pop_payload_context[5:0]  ), //o
    .io_flush                      (_zz_5                                     ), //i
    .io_occupancy                  (cmdInfo_fifo_io_occupancy[3:0]            ), //o
    .io_availability               (cmdInfo_fifo_io_availability[3:0]         ), //o
    .io_systemClk                  (io_systemClk                              ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                )  //i
  );
  always @ (*) begin
    pendingCounter_incrementIt = 1'b0;
    if(((io_input_cmd_valid && io_input_cmd_ready) && io_input_cmd_payload_last))begin
      pendingCounter_incrementIt = 1'b1;
    end
  end

  always @ (*) begin
    pendingCounter_decrementIt = 1'b0;
    if(((io_input_rsp_valid && io_input_rsp_ready) && io_input_rsp_payload_last))begin
      pendingCounter_decrementIt = 1'b1;
    end
  end

  assign pendingCounter_willOverflowIfInc = ((pendingCounter_value == (3'b111)) && (! pendingCounter_decrementIt));
  assign pendingCounter_willOverflow = (pendingCounter_willOverflowIfInc && pendingCounter_incrementIt);
  always @ (*) begin
    if((pendingCounter_incrementIt && (! pendingCounter_decrementIt)))begin
      pendingCounter_finalIncrement = (3'b001);
    end else begin
      if(((! pendingCounter_incrementIt) && pendingCounter_decrementIt))begin
        pendingCounter_finalIncrement = (3'b111);
      end else begin
        pendingCounter_finalIncrement = (3'b000);
      end
    end
  end

  assign pendingCounter_valueNext = (pendingCounter_value + pendingCounter_finalIncrement);
  assign hazard = ((((io_input_cmd_payload_fragment_opcode == (1'b1)) != pendingWrite) && (pendingCounter_value != (3'b000))) || (pendingCounter_value == (3'b111)));
  assign _zz_1 = (! hazard);
  assign io_input_cmd_ready = (streamFork_5_io_input_ready && _zz_1);
  assign _zz_2 = (io_input_cmd_valid && _zz_1);
  always @ (*) begin
    cmdStage_valid = streamFork_5_io_outputs_0_valid;
    if(_zz_6)begin
      cmdStage_valid = 1'b0;
    end
  end

  always @ (*) begin
    _zz_3 = cmdStage_ready;
    if(_zz_6)begin
      _zz_3 = 1'b1;
    end
  end

  assign cmdStage_payload_last = streamFork_5_io_outputs_0_payload_last;
  assign cmdStage_payload_fragment_opcode = streamFork_5_io_outputs_0_payload_fragment_opcode;
  assign cmdStage_payload_fragment_address = streamFork_5_io_outputs_0_payload_fragment_address;
  assign cmdStage_payload_fragment_length = streamFork_5_io_outputs_0_payload_fragment_length;
  assign cmdStage_payload_fragment_data = streamFork_5_io_outputs_0_payload_fragment_data;
  assign cmdStage_payload_fragment_mask = streamFork_5_io_outputs_0_payload_fragment_mask;
  assign cmdStage_payload_fragment_context = streamFork_5_io_outputs_0_payload_fragment_context;
  always @ (*) begin
    dataStage_valid = streamFork_5_io_outputs_1_valid;
    if(_zz_7)begin
      dataStage_valid = 1'b0;
    end
  end

  always @ (*) begin
    _zz_4 = dataStage_ready;
    if(_zz_7)begin
      _zz_4 = 1'b1;
    end
  end

  assign dataStage_payload_last = streamFork_5_io_outputs_1_payload_last;
  assign dataStage_payload_fragment_opcode = streamFork_5_io_outputs_1_payload_fragment_opcode;
  assign dataStage_payload_fragment_address = streamFork_5_io_outputs_1_payload_fragment_address;
  assign dataStage_payload_fragment_length = streamFork_5_io_outputs_1_payload_fragment_length;
  assign dataStage_payload_fragment_data = streamFork_5_io_outputs_1_payload_fragment_data;
  assign dataStage_payload_fragment_mask = streamFork_5_io_outputs_1_payload_fragment_mask;
  assign dataStage_payload_fragment_context = streamFork_5_io_outputs_1_payload_fragment_context;
  assign cmdInfo_valid = (cmdStage_valid && cmdStage_ready);
  assign cmdInfo_payload_context = cmdStage_payload_fragment_context;
  assign cmdInfo_ready = cmdInfo_fifo_io_push_ready;
  assign cmdInfo_fifo_io_pop_halfPipe_valid = cmdInfo_fifo_io_pop_halfPipe_regs_valid;
  assign cmdInfo_fifo_io_pop_halfPipe_payload_context = cmdInfo_fifo_io_pop_halfPipe_regs_payload_context;
  assign io_output_arw_valid = cmdStage_valid;
  assign cmdStage_ready = io_output_arw_ready;
  assign io_output_arw_payload_write = (io_input_cmd_payload_fragment_opcode == (1'b1));
  assign io_output_arw_payload_addr = io_input_cmd_payload_fragment_address;
  assign io_output_arw_payload_len = {7'd0, _zz_9};
  assign io_output_arw_payload_size = (3'b100);
  assign io_output_arw_payload_prot = (3'b010);
  assign io_output_arw_payload_cache = (4'b1111);
  assign io_output_w_valid = dataStage_valid;
  assign dataStage_ready = io_output_w_ready;
  assign io_output_w_payload_data = dataStage_payload_fragment_data;
  assign io_output_w_payload_strb = dataStage_payload_fragment_mask;
  assign io_output_w_payload_last = dataStage_payload_last;
  assign io_input_rsp_valid = ((io_output_b_valid || io_output_r_valid) && cmdInfo_fifo_io_pop_halfPipe_valid);
  assign io_input_rsp_payload_last = (pendingWrite ? 1'b1 : io_output_r_payload_last);
  assign io_input_rsp_payload_fragment_data = io_output_r_payload_data;
  assign io_input_rsp_payload_fragment_context = cmdInfo_fifo_io_pop_halfPipe_payload_context;
  always @ (*) begin
    if((pendingWrite ? (io_output_b_payload_resp == (2'b00)) : (io_output_r_payload_resp == (2'b00))))begin
      io_input_rsp_payload_fragment_opcode = (1'b0);
    end else begin
      io_input_rsp_payload_fragment_opcode = (1'b1);
    end
  end

  assign io_output_b_ready = (io_input_rsp_ready && cmdInfo_fifo_io_pop_halfPipe_valid);
  assign io_output_r_ready = (io_input_rsp_ready && cmdInfo_fifo_io_pop_halfPipe_valid);
  assign cmdInfo_fifo_io_pop_halfPipe_ready = ((io_input_rsp_valid && io_input_rsp_ready) && io_input_rsp_payload_last);
  assign _zz_5 = 1'b0;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      pendingCounter_value <= (3'b000);
      io_input_cmd_payload_first <= 1'b1;
      cmdInfo_fifo_io_pop_halfPipe_regs_valid <= 1'b0;
      cmdInfo_fifo_io_pop_halfPipe_regs_ready <= 1'b1;
    end else begin
      pendingCounter_value <= pendingCounter_valueNext;
      if((io_input_cmd_valid && io_input_cmd_ready))begin
        io_input_cmd_payload_first <= io_input_cmd_payload_last;
      end
      if(_zz_8)begin
        cmdInfo_fifo_io_pop_halfPipe_regs_valid <= cmdInfo_fifo_io_pop_valid;
        cmdInfo_fifo_io_pop_halfPipe_regs_ready <= (! cmdInfo_fifo_io_pop_valid);
      end else begin
        cmdInfo_fifo_io_pop_halfPipe_regs_valid <= (! cmdInfo_fifo_io_pop_halfPipe_ready);
        cmdInfo_fifo_io_pop_halfPipe_regs_ready <= cmdInfo_fifo_io_pop_halfPipe_ready;
      end
    end
  end

  always @ (posedge io_systemClk) begin
    if((io_input_cmd_valid && io_input_cmd_ready))begin
      pendingWrite <= (io_input_cmd_payload_fragment_opcode == (1'b1));
    end
    if(_zz_8)begin
      cmdInfo_fifo_io_pop_halfPipe_regs_payload_context <= cmdInfo_fifo_io_pop_payload_context;
    end
  end


endmodule

module BmbArbiter_e12a9decc0704226832aec4017b36e8d (
  input               io_inputs_0_cmd_valid,
  output              io_inputs_0_cmd_ready,
  input               io_inputs_0_cmd_payload_last,
  input      [0:0]    io_inputs_0_cmd_payload_fragment_opcode,
  input      [31:0]   io_inputs_0_cmd_payload_fragment_address,
  input      [4:0]    io_inputs_0_cmd_payload_fragment_length,
  input      [31:0]   io_inputs_0_cmd_payload_fragment_data,
  input      [3:0]    io_inputs_0_cmd_payload_fragment_mask,
  input      [0:0]    io_inputs_0_cmd_payload_fragment_context,
  output              io_inputs_0_rsp_valid,
  input               io_inputs_0_rsp_ready,
  output              io_inputs_0_rsp_payload_last,
  output     [0:0]    io_inputs_0_rsp_payload_fragment_opcode,
  output     [31:0]   io_inputs_0_rsp_payload_fragment_data,
  output     [0:0]    io_inputs_0_rsp_payload_fragment_context,
  input               io_inputs_1_cmd_valid,
  output              io_inputs_1_cmd_ready,
  input               io_inputs_1_cmd_payload_last,
  input      [0:0]    io_inputs_1_cmd_payload_fragment_opcode,
  input      [31:0]   io_inputs_1_cmd_payload_fragment_address,
  input      [4:0]    io_inputs_1_cmd_payload_fragment_length,
  input      [31:0]   io_inputs_1_cmd_payload_fragment_data,
  input      [3:0]    io_inputs_1_cmd_payload_fragment_mask,
  input      [0:0]    io_inputs_1_cmd_payload_fragment_context,
  output              io_inputs_1_rsp_valid,
  input               io_inputs_1_rsp_ready,
  output              io_inputs_1_rsp_payload_last,
  output     [0:0]    io_inputs_1_rsp_payload_fragment_opcode,
  output     [31:0]   io_inputs_1_rsp_payload_fragment_data,
  output     [0:0]    io_inputs_1_rsp_payload_fragment_context,
  output              io_output_cmd_valid,
  input               io_output_cmd_ready,
  output              io_output_cmd_payload_last,
  output     [0:0]    io_output_cmd_payload_fragment_source,
  output     [0:0]    io_output_cmd_payload_fragment_opcode,
  output     [31:0]   io_output_cmd_payload_fragment_address,
  output     [4:0]    io_output_cmd_payload_fragment_length,
  output     [31:0]   io_output_cmd_payload_fragment_data,
  output     [3:0]    io_output_cmd_payload_fragment_mask,
  output     [0:0]    io_output_cmd_payload_fragment_context,
  input               io_output_rsp_valid,
  output              io_output_rsp_ready,
  input               io_output_rsp_payload_last,
  input      [0:0]    io_output_rsp_payload_fragment_source,
  input      [0:0]    io_output_rsp_payload_fragment_opcode,
  input      [31:0]   io_output_rsp_payload_fragment_data,
  input      [0:0]    io_output_rsp_payload_fragment_context,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  wire       [0:0]    _zz_1;
  wire       [0:0]    _zz_2;
  reg                 _zz_3;
  wire                memory_arbiter_io_inputs_0_ready;
  wire                memory_arbiter_io_inputs_1_ready;
  wire                memory_arbiter_io_output_valid;
  wire                memory_arbiter_io_output_payload_last;
  wire       [0:0]    memory_arbiter_io_output_payload_fragment_source;
  wire       [0:0]    memory_arbiter_io_output_payload_fragment_opcode;
  wire       [31:0]   memory_arbiter_io_output_payload_fragment_address;
  wire       [4:0]    memory_arbiter_io_output_payload_fragment_length;
  wire       [31:0]   memory_arbiter_io_output_payload_fragment_data;
  wire       [3:0]    memory_arbiter_io_output_payload_fragment_mask;
  wire       [0:0]    memory_arbiter_io_output_payload_fragment_context;
  wire       [0:0]    memory_arbiter_io_chosen;
  wire       [1:0]    memory_arbiter_io_chosenOH;
  wire       [0:0]    memory_rspSel;

  StreamArbiter_e12a9decc0704226832aec4017b36e8d memory_arbiter (
    .io_inputs_0_valid                       (io_inputs_0_cmd_valid                                    ), //i
    .io_inputs_0_ready                       (memory_arbiter_io_inputs_0_ready                         ), //o
    .io_inputs_0_payload_last                (io_inputs_0_cmd_payload_last                             ), //i
    .io_inputs_0_payload_fragment_source     (_zz_1                                                    ), //i
    .io_inputs_0_payload_fragment_opcode     (io_inputs_0_cmd_payload_fragment_opcode                  ), //i
    .io_inputs_0_payload_fragment_address    (io_inputs_0_cmd_payload_fragment_address[31:0]           ), //i
    .io_inputs_0_payload_fragment_length     (io_inputs_0_cmd_payload_fragment_length[4:0]             ), //i
    .io_inputs_0_payload_fragment_data       (io_inputs_0_cmd_payload_fragment_data[31:0]              ), //i
    .io_inputs_0_payload_fragment_mask       (io_inputs_0_cmd_payload_fragment_mask[3:0]               ), //i
    .io_inputs_0_payload_fragment_context    (io_inputs_0_cmd_payload_fragment_context                 ), //i
    .io_inputs_1_valid                       (io_inputs_1_cmd_valid                                    ), //i
    .io_inputs_1_ready                       (memory_arbiter_io_inputs_1_ready                         ), //o
    .io_inputs_1_payload_last                (io_inputs_1_cmd_payload_last                             ), //i
    .io_inputs_1_payload_fragment_source     (_zz_2                                                    ), //i
    .io_inputs_1_payload_fragment_opcode     (io_inputs_1_cmd_payload_fragment_opcode                  ), //i
    .io_inputs_1_payload_fragment_address    (io_inputs_1_cmd_payload_fragment_address[31:0]           ), //i
    .io_inputs_1_payload_fragment_length     (io_inputs_1_cmd_payload_fragment_length[4:0]             ), //i
    .io_inputs_1_payload_fragment_data       (io_inputs_1_cmd_payload_fragment_data[31:0]              ), //i
    .io_inputs_1_payload_fragment_mask       (io_inputs_1_cmd_payload_fragment_mask[3:0]               ), //i
    .io_inputs_1_payload_fragment_context    (io_inputs_1_cmd_payload_fragment_context                 ), //i
    .io_output_valid                         (memory_arbiter_io_output_valid                           ), //o
    .io_output_ready                         (io_output_cmd_ready                                      ), //i
    .io_output_payload_last                  (memory_arbiter_io_output_payload_last                    ), //o
    .io_output_payload_fragment_source       (memory_arbiter_io_output_payload_fragment_source         ), //o
    .io_output_payload_fragment_opcode       (memory_arbiter_io_output_payload_fragment_opcode         ), //o
    .io_output_payload_fragment_address      (memory_arbiter_io_output_payload_fragment_address[31:0]  ), //o
    .io_output_payload_fragment_length       (memory_arbiter_io_output_payload_fragment_length[4:0]    ), //o
    .io_output_payload_fragment_data         (memory_arbiter_io_output_payload_fragment_data[31:0]     ), //o
    .io_output_payload_fragment_mask         (memory_arbiter_io_output_payload_fragment_mask[3:0]      ), //o
    .io_output_payload_fragment_context      (memory_arbiter_io_output_payload_fragment_context        ), //o
    .io_chosen                               (memory_arbiter_io_chosen                                 ), //o
    .io_chosenOH                             (memory_arbiter_io_chosenOH[1:0]                          ), //o
    .io_systemClk                            (io_systemClk                                             ), //i
    .systemCd_logic_outputReset              (systemCd_logic_outputReset                               )  //i
  );
  always @(*) begin
    case(memory_rspSel)
      1'b0 : begin
        _zz_3 = io_inputs_0_rsp_ready;
      end
      default : begin
        _zz_3 = io_inputs_1_rsp_ready;
      end
    endcase
  end

  assign io_inputs_0_cmd_ready = memory_arbiter_io_inputs_0_ready;
  assign _zz_1 = (1'b0);
  assign io_inputs_1_cmd_ready = memory_arbiter_io_inputs_1_ready;
  assign _zz_2 = (1'b0);
  assign io_output_cmd_valid = memory_arbiter_io_output_valid;
  assign io_output_cmd_payload_last = memory_arbiter_io_output_payload_last;
  assign io_output_cmd_payload_fragment_opcode = memory_arbiter_io_output_payload_fragment_opcode;
  assign io_output_cmd_payload_fragment_address = memory_arbiter_io_output_payload_fragment_address;
  assign io_output_cmd_payload_fragment_length = memory_arbiter_io_output_payload_fragment_length;
  assign io_output_cmd_payload_fragment_data = memory_arbiter_io_output_payload_fragment_data;
  assign io_output_cmd_payload_fragment_mask = memory_arbiter_io_output_payload_fragment_mask;
  assign io_output_cmd_payload_fragment_context = memory_arbiter_io_output_payload_fragment_context;
  assign io_output_cmd_payload_fragment_source[0 : 0] = memory_arbiter_io_chosen;
  assign memory_rspSel = io_output_rsp_payload_fragment_source[0 : 0];
  assign io_inputs_0_rsp_valid = (io_output_rsp_valid && (memory_rspSel == (1'b0)));
  assign io_inputs_0_rsp_payload_last = io_output_rsp_payload_last;
  assign io_inputs_0_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_inputs_0_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_inputs_0_rsp_payload_fragment_context = io_output_rsp_payload_fragment_context;
  assign io_inputs_1_rsp_valid = (io_output_rsp_valid && (memory_rspSel == (1'b1)));
  assign io_inputs_1_rsp_payload_last = io_output_rsp_payload_last;
  assign io_inputs_1_rsp_payload_fragment_opcode = io_output_rsp_payload_fragment_opcode;
  assign io_inputs_1_rsp_payload_fragment_data = io_output_rsp_payload_fragment_data;
  assign io_inputs_1_rsp_payload_fragment_context = io_output_rsp_payload_fragment_context;
  assign io_output_rsp_ready = _zz_3;

endmodule

module BmbDecoder_1_e12a9decc0704226832aec4017b36e8d (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [4:0]    io_input_cmd_payload_fragment_length,
  input      [31:0]   io_input_cmd_payload_fragment_data,
  input      [3:0]    io_input_cmd_payload_fragment_mask,
  input      [0:0]    io_input_cmd_payload_fragment_context,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [31:0]   io_input_rsp_payload_fragment_data,
  output     [0:0]    io_input_rsp_payload_fragment_context,
  output              io_outputs_0_cmd_valid,
  input               io_outputs_0_cmd_ready,
  output              io_outputs_0_cmd_payload_last,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_opcode,
  output     [31:0]   io_outputs_0_cmd_payload_fragment_address,
  output     [4:0]    io_outputs_0_cmd_payload_fragment_length,
  output     [31:0]   io_outputs_0_cmd_payload_fragment_data,
  output     [3:0]    io_outputs_0_cmd_payload_fragment_mask,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_context,
  input               io_outputs_0_rsp_valid,
  output              io_outputs_0_rsp_ready,
  input               io_outputs_0_rsp_payload_last,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_0_rsp_payload_fragment_data,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_context
);

  assign io_outputs_0_cmd_valid = io_input_cmd_valid;
  assign io_input_cmd_ready = io_outputs_0_cmd_ready;
  assign io_input_rsp_valid = io_outputs_0_rsp_valid;
  assign io_outputs_0_rsp_ready = io_input_rsp_ready;
  assign io_outputs_0_cmd_payload_last = io_input_cmd_payload_last;
  assign io_input_rsp_payload_last = io_outputs_0_rsp_payload_last;
  assign io_outputs_0_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_0_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_0_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_outputs_0_cmd_payload_fragment_data = io_input_cmd_payload_fragment_data;
  assign io_outputs_0_cmd_payload_fragment_mask = io_input_cmd_payload_fragment_mask;
  assign io_outputs_0_cmd_payload_fragment_context = io_input_cmd_payload_fragment_context;
  assign io_input_rsp_payload_fragment_opcode = io_outputs_0_rsp_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_data = io_outputs_0_rsp_payload_fragment_data;
  assign io_input_rsp_payload_fragment_context = io_outputs_0_rsp_payload_fragment_context;

endmodule

module BmbDecoder_e12a9decc0704226832aec4017b36e8d (
  input               io_input_cmd_valid,
  output              io_input_cmd_ready,
  input               io_input_cmd_payload_last,
  input      [0:0]    io_input_cmd_payload_fragment_opcode,
  input      [31:0]   io_input_cmd_payload_fragment_address,
  input      [4:0]    io_input_cmd_payload_fragment_length,
  output              io_input_rsp_valid,
  input               io_input_rsp_ready,
  output              io_input_rsp_payload_last,
  output     [0:0]    io_input_rsp_payload_fragment_opcode,
  output     [31:0]   io_input_rsp_payload_fragment_data,
  output              io_outputs_0_cmd_valid,
  input               io_outputs_0_cmd_ready,
  output              io_outputs_0_cmd_payload_last,
  output     [0:0]    io_outputs_0_cmd_payload_fragment_opcode,
  output     [31:0]   io_outputs_0_cmd_payload_fragment_address,
  output     [4:0]    io_outputs_0_cmd_payload_fragment_length,
  input               io_outputs_0_rsp_valid,
  output              io_outputs_0_rsp_ready,
  input               io_outputs_0_rsp_payload_last,
  input      [0:0]    io_outputs_0_rsp_payload_fragment_opcode,
  input      [31:0]   io_outputs_0_rsp_payload_fragment_data
);

  assign io_outputs_0_cmd_valid = io_input_cmd_valid;
  assign io_input_cmd_ready = io_outputs_0_cmd_ready;
  assign io_input_rsp_valid = io_outputs_0_rsp_valid;
  assign io_outputs_0_rsp_ready = io_input_rsp_ready;
  assign io_outputs_0_cmd_payload_last = io_input_cmd_payload_last;
  assign io_input_rsp_payload_last = io_outputs_0_rsp_payload_last;
  assign io_outputs_0_cmd_payload_fragment_opcode = io_input_cmd_payload_fragment_opcode;
  assign io_outputs_0_cmd_payload_fragment_address = io_input_cmd_payload_fragment_address;
  assign io_outputs_0_cmd_payload_fragment_length = io_input_cmd_payload_fragment_length;
  assign io_input_rsp_payload_fragment_opcode = io_outputs_0_rsp_payload_fragment_opcode;
  assign io_input_rsp_payload_fragment_data = io_outputs_0_rsp_payload_fragment_data;

endmodule

module SystemDebugger_e12a9decc0704226832aec4017b36e8d (
  input               io_remote_cmd_valid,
  output              io_remote_cmd_ready,
  input               io_remote_cmd_payload_last,
  input      [0:0]    io_remote_cmd_payload_fragment,
  output              io_remote_rsp_valid,
  input               io_remote_rsp_ready,
  output              io_remote_rsp_payload_error,
  output     [31:0]   io_remote_rsp_payload_data,
  output              io_mem_cmd_valid,
  input               io_mem_cmd_ready,
  output     [31:0]   io_mem_cmd_payload_address,
  output     [31:0]   io_mem_cmd_payload_data,
  output              io_mem_cmd_payload_wr,
  output     [1:0]    io_mem_cmd_payload_size,
  input               io_mem_rsp_valid,
  input      [31:0]   io_mem_rsp_payload,
  input               io_systemClk,
  input               debugCd_logic_outputReset
);
  wire                _zz_2;
  wire       [0:0]    _zz_3;
  reg        [66:0]   dispatcher_dataShifter;
  reg                 dispatcher_dataLoaded;
  reg        [7:0]    dispatcher_headerShifter;
  wire       [7:0]    dispatcher_header;
  reg                 dispatcher_headerLoaded;
  reg        [2:0]    dispatcher_counter;
  wire       [66:0]   _zz_1;

  assign _zz_2 = (dispatcher_headerLoaded == 1'b0);
  assign _zz_3 = _zz_1[64 : 64];
  assign dispatcher_header = dispatcher_headerShifter[7 : 0];
  assign io_remote_cmd_ready = (! dispatcher_dataLoaded);
  assign _zz_1 = dispatcher_dataShifter[66 : 0];
  assign io_mem_cmd_payload_address = _zz_1[31 : 0];
  assign io_mem_cmd_payload_data = _zz_1[63 : 32];
  assign io_mem_cmd_payload_wr = _zz_3[0];
  assign io_mem_cmd_payload_size = _zz_1[66 : 65];
  assign io_mem_cmd_valid = (dispatcher_dataLoaded && (dispatcher_header == 8'h0));
  assign io_remote_rsp_valid = io_mem_rsp_valid;
  assign io_remote_rsp_payload_error = 1'b0;
  assign io_remote_rsp_payload_data = io_mem_rsp_payload;
  always @ (posedge io_systemClk) begin
    if(debugCd_logic_outputReset) begin
      dispatcher_dataLoaded <= 1'b0;
      dispatcher_headerLoaded <= 1'b0;
      dispatcher_counter <= (3'b000);
    end else begin
      if(io_remote_cmd_valid)begin
        if(_zz_2)begin
          dispatcher_counter <= (dispatcher_counter + (3'b001));
          if((dispatcher_counter == (3'b111)))begin
            dispatcher_headerLoaded <= 1'b1;
          end
        end
        if(io_remote_cmd_payload_last)begin
          dispatcher_headerLoaded <= 1'b1;
          dispatcher_dataLoaded <= 1'b1;
          dispatcher_counter <= (3'b000);
        end
      end
      if((io_mem_cmd_valid && io_mem_cmd_ready))begin
        dispatcher_headerLoaded <= 1'b0;
        dispatcher_dataLoaded <= 1'b0;
      end
    end
  end

  always @ (posedge io_systemClk) begin
    if(io_remote_cmd_valid)begin
      if(_zz_2)begin
        dispatcher_headerShifter <= ({io_remote_cmd_payload_fragment,dispatcher_headerShifter} >>> 1);
      end else begin
        dispatcher_dataShifter <= ({io_remote_cmd_payload_fragment,dispatcher_dataShifter} >>> 1);
      end
    end
  end


endmodule

module JtagBridgeNoTap_e12a9decc0704226832aec4017b36e8d (
  input               io_ctrl_tdi,
  input               io_ctrl_enable,
  input               io_ctrl_capture,
  input               io_ctrl_shift,
  input               io_ctrl_update,
  input               io_ctrl_reset,
  output              io_ctrl_tdo,
  output              io_remote_cmd_valid,
  input               io_remote_cmd_ready,
  output              io_remote_cmd_payload_last,
  output     [0:0]    io_remote_cmd_payload_fragment,
  input               io_remote_rsp_valid,
  output              io_remote_rsp_ready,
  input               io_remote_rsp_payload_error,
  input      [31:0]   io_remote_rsp_payload_data,
  input               io_systemClk,
  input               debugCd_logic_outputReset,
  input               jtagCtrl_tck
);
  wire                _zz_9;
  wire                flowCCByToggle_1_io_output_valid;
  wire                flowCCByToggle_1_io_output_payload_last;
  wire       [0:0]    flowCCByToggle_1_io_output_payload_fragment;
  wire                _zz_10;
  wire                _zz_11;
  wire                system_cmd_valid;
  wire                system_cmd_payload_last;
  wire       [0:0]    system_cmd_payload_fragment;
  reg                 system_rsp_valid;
  reg                 system_rsp_payload_error;
  reg        [31:0]   system_rsp_payload_data;
  wire                jtag_wrapper_ctrl_tdi;
  wire                jtag_wrapper_ctrl_enable;
  wire                jtag_wrapper_ctrl_capture;
  wire                jtag_wrapper_ctrl_shift;
  wire                jtag_wrapper_ctrl_update;
  wire                jtag_wrapper_ctrl_reset;
  reg                 jtag_wrapper_ctrl_tdo;
  reg        [1:0]    jtag_wrapper_header;
  wire       [1:0]    jtag_wrapper_headerNext;
  reg        [0:0]    jtag_wrapper_counter;
  reg                 jtag_wrapper_done;
  reg                 jtag_wrapper_sendCapture;
  reg                 jtag_wrapper_sendShift;
  reg                 jtag_wrapper_sendUpdate;
  wire                _zz_1;
  wire                _zz_2;
  wire       [0:0]    _zz_3;
  reg                 _zz_4;
  reg                 _zz_5;
  wire                _zz_6;
  reg        [33:0]   _zz_7;
  wire                _zz_8;

  assign _zz_10 = (! jtag_wrapper_done);
  assign _zz_11 = (jtag_wrapper_counter == (1'b1));
  FlowCCByToggle_e12a9decc0704226832aec4017b36e8d flowCCByToggle_1 (
    .io_input_valid                (_zz_4                                        ), //i
    .io_input_payload_last         (_zz_9                                        ), //i
    .io_input_payload_fragment     (_zz_3                                        ), //i
    .io_output_valid               (flowCCByToggle_1_io_output_valid             ), //o
    .io_output_payload_last        (flowCCByToggle_1_io_output_payload_last      ), //o
    .io_output_payload_fragment    (flowCCByToggle_1_io_output_payload_fragment  ), //o
    .jtagCtrl_tck                  (jtagCtrl_tck                                 ), //i
    .io_systemClk                  (io_systemClk                                 ), //i
    .debugCd_logic_outputReset     (debugCd_logic_outputReset                    )  //i
  );
  assign io_remote_cmd_valid = system_cmd_valid;
  assign io_remote_cmd_payload_last = system_cmd_payload_last;
  assign io_remote_cmd_payload_fragment = system_cmd_payload_fragment;
  assign io_remote_rsp_ready = 1'b1;
  assign jtag_wrapper_headerNext = ({jtag_wrapper_ctrl_tdi,jtag_wrapper_header} >>> 1);
  always @ (*) begin
    jtag_wrapper_sendCapture = 1'b0;
    if(jtag_wrapper_ctrl_enable)begin
      if(jtag_wrapper_ctrl_shift)begin
        if(_zz_10)begin
          if(_zz_11)begin
            jtag_wrapper_sendCapture = 1'b1;
          end
        end
      end
    end
  end

  always @ (*) begin
    jtag_wrapper_sendShift = 1'b0;
    if(jtag_wrapper_ctrl_enable)begin
      if(jtag_wrapper_ctrl_shift)begin
        if(! _zz_10) begin
          jtag_wrapper_sendShift = 1'b1;
        end
      end
    end
  end

  always @ (*) begin
    jtag_wrapper_sendUpdate = 1'b0;
    if(jtag_wrapper_ctrl_enable)begin
      if(jtag_wrapper_ctrl_update)begin
        jtag_wrapper_sendUpdate = 1'b1;
      end
    end
  end

  always @ (*) begin
    jtag_wrapper_ctrl_tdo = 1'b0;
    if(_zz_6)begin
      jtag_wrapper_ctrl_tdo = 1'b0;
    end
    if(_zz_8)begin
      jtag_wrapper_ctrl_tdo = _zz_7[0];
    end
  end

  assign jtag_wrapper_ctrl_tdi = io_ctrl_tdi;
  assign jtag_wrapper_ctrl_enable = io_ctrl_enable;
  assign jtag_wrapper_ctrl_capture = io_ctrl_capture;
  assign jtag_wrapper_ctrl_shift = io_ctrl_shift;
  assign jtag_wrapper_ctrl_update = io_ctrl_update;
  assign jtag_wrapper_ctrl_reset = io_ctrl_reset;
  assign io_ctrl_tdo = jtag_wrapper_ctrl_tdo;
  assign _zz_3[0] = _zz_5;
  assign _zz_9 = (! (_zz_1 && _zz_2));
  assign system_cmd_valid = flowCCByToggle_1_io_output_valid;
  assign system_cmd_payload_last = flowCCByToggle_1_io_output_payload_last;
  assign system_cmd_payload_fragment = flowCCByToggle_1_io_output_payload_fragment;
  assign _zz_6 = (jtag_wrapper_header == (2'b00));
  assign _zz_1 = 1'b1;
  assign _zz_2 = (_zz_6 && jtag_wrapper_sendShift);
  assign _zz_8 = (jtag_wrapper_header == (2'b01));
  always @ (posedge io_systemClk) begin
    if(io_remote_cmd_valid)begin
      system_rsp_valid <= 1'b0;
    end
    if((io_remote_rsp_valid && io_remote_rsp_ready))begin
      system_rsp_valid <= 1'b1;
      system_rsp_payload_error <= io_remote_rsp_payload_error;
      system_rsp_payload_data <= io_remote_rsp_payload_data;
    end
  end

  always @ (posedge jtagCtrl_tck) begin
    if(jtag_wrapper_ctrl_enable)begin
      if(jtag_wrapper_ctrl_capture)begin
        jtag_wrapper_done <= 1'b0;
        jtag_wrapper_counter <= (1'b0);
      end
      if(jtag_wrapper_ctrl_shift)begin
        if(_zz_10)begin
          jtag_wrapper_counter <= (jtag_wrapper_counter + (1'b1));
          jtag_wrapper_header <= jtag_wrapper_headerNext;
          if(_zz_11)begin
            jtag_wrapper_done <= 1'b1;
          end
        end
      end
    end
    _zz_4 <= (_zz_1 && _zz_2);
    _zz_5 <= jtag_wrapper_ctrl_tdi;
    if(1'b1)begin
      if(((jtag_wrapper_headerNext == (2'b01)) && jtag_wrapper_sendCapture))begin
        _zz_7 <= {{system_rsp_payload_data,system_rsp_payload_error},system_rsp_valid};
      end
      if((_zz_8 && jtag_wrapper_sendShift))begin
        _zz_7 <= ({jtag_wrapper_ctrl_tdi,_zz_7} >>> 1);
      end
    end
  end


endmodule

module VexRiscv_e12a9decc0704226832aec4017b36e8d (
  input               timerInterrupt,
  input               externalInterrupt,
  input               softwareInterrupt,
  input               debug_bus_cmd_valid,
  output reg          debug_bus_cmd_ready,
  input               debug_bus_cmd_payload_wr,
  input      [7:0]    debug_bus_cmd_payload_address,
  input      [31:0]   debug_bus_cmd_payload_data,
  output reg [31:0]   debug_bus_rsp_data,
  output              debug_resetOut,
  output              iBus_cmd_valid,
  input               iBus_cmd_ready,
  output reg [31:0]   iBus_cmd_payload_address,
  output     [2:0]    iBus_cmd_payload_size,
  input               iBus_rsp_valid,
  input      [31:0]   iBus_rsp_payload_data,
  input               iBus_rsp_payload_error,
  output              dBus_cmd_valid,
  input               dBus_cmd_ready,
  output              dBus_cmd_payload_wr,
  output     [31:0]   dBus_cmd_payload_address,
  output     [31:0]   dBus_cmd_payload_data,
  output     [3:0]    dBus_cmd_payload_mask,
  output     [2:0]    dBus_cmd_payload_length,
  output              dBus_cmd_payload_last,
  input               dBus_rsp_valid,
  input      [31:0]   dBus_rsp_payload_data,
  input               dBus_rsp_payload_error,
  input               io_systemClk,
  input               systemCd_logic_outputReset,
  input               debugCd_logic_outputReset
);
  wire                _zz_149;
  wire                _zz_150;
  wire                _zz_151;
  wire                _zz_152;
  wire                _zz_153;
  wire                _zz_154;
  wire                _zz_155;
  reg                 _zz_156;
  wire                _zz_157;
  wire       [31:0]   _zz_158;
  wire                _zz_159;
  wire       [31:0]   _zz_160;
  reg                 _zz_161;
  wire                _zz_162;
  wire                _zz_163;
  wire       [31:0]   _zz_164;
  wire                _zz_165;
  wire                _zz_166;
  reg        [31:0]   _zz_167;
  reg        [31:0]   _zz_168;
  reg        [31:0]   _zz_169;
  wire                IBusCachedPlugin_cache_io_cpu_prefetch_haltIt;
  wire       [31:0]   IBusCachedPlugin_cache_io_cpu_fetch_data;
  wire       [31:0]   IBusCachedPlugin_cache_io_cpu_fetch_physicalAddress;
  wire                IBusCachedPlugin_cache_io_cpu_fetch_haltIt;
  wire                IBusCachedPlugin_cache_io_cpu_fetch_mmuBus_cmd_isValid;
  wire       [31:0]   IBusCachedPlugin_cache_io_cpu_fetch_mmuBus_cmd_virtualAddress;
  wire                IBusCachedPlugin_cache_io_cpu_fetch_mmuBus_cmd_bypassTranslation;
  wire                IBusCachedPlugin_cache_io_cpu_fetch_mmuBus_end;
  wire                IBusCachedPlugin_cache_io_cpu_decode_error;
  wire                IBusCachedPlugin_cache_io_cpu_decode_mmuRefilling;
  wire                IBusCachedPlugin_cache_io_cpu_decode_mmuException;
  wire       [31:0]   IBusCachedPlugin_cache_io_cpu_decode_data;
  wire                IBusCachedPlugin_cache_io_cpu_decode_cacheMiss;
  wire       [31:0]   IBusCachedPlugin_cache_io_cpu_decode_physicalAddress;
  wire                IBusCachedPlugin_cache_io_mem_cmd_valid;
  wire       [31:0]   IBusCachedPlugin_cache_io_mem_cmd_payload_address;
  wire       [2:0]    IBusCachedPlugin_cache_io_mem_cmd_payload_size;
  wire                dataCache_1_io_cpu_memory_isWrite;
  wire                dataCache_1_io_cpu_memory_mmuBus_cmd_isValid;
  wire       [31:0]   dataCache_1_io_cpu_memory_mmuBus_cmd_virtualAddress;
  wire                dataCache_1_io_cpu_memory_mmuBus_cmd_bypassTranslation;
  wire                dataCache_1_io_cpu_memory_mmuBus_end;
  wire                dataCache_1_io_cpu_writeBack_haltIt;
  wire       [31:0]   dataCache_1_io_cpu_writeBack_data;
  wire                dataCache_1_io_cpu_writeBack_mmuException;
  wire                dataCache_1_io_cpu_writeBack_unalignedAccess;
  wire                dataCache_1_io_cpu_writeBack_accessError;
  wire                dataCache_1_io_cpu_writeBack_isWrite;
  wire                dataCache_1_io_cpu_flush_ready;
  wire                dataCache_1_io_cpu_redo;
  wire                dataCache_1_io_mem_cmd_valid;
  wire                dataCache_1_io_mem_cmd_payload_wr;
  wire       [31:0]   dataCache_1_io_mem_cmd_payload_address;
  wire       [31:0]   dataCache_1_io_mem_cmd_payload_data;
  wire       [3:0]    dataCache_1_io_mem_cmd_payload_mask;
  wire       [2:0]    dataCache_1_io_mem_cmd_payload_length;
  wire                dataCache_1_io_mem_cmd_payload_last;
  wire                _zz_170;
  wire                _zz_171;
  wire                _zz_172;
  wire                _zz_173;
  wire                _zz_174;
  wire                _zz_175;
  wire                _zz_176;
  wire                _zz_177;
  wire                _zz_178;
  wire                _zz_179;
  wire                _zz_180;
  wire                _zz_181;
  wire                _zz_182;
  wire                _zz_183;
  wire                _zz_184;
  wire       [1:0]    _zz_185;
  wire                _zz_186;
  wire       [1:0]    _zz_187;
  wire                _zz_188;
  wire                _zz_189;
  wire                _zz_190;
  wire                _zz_191;
  wire                _zz_192;
  wire                _zz_193;
  wire                _zz_194;
  wire                _zz_195;
  wire                _zz_196;
  wire                _zz_197;
  wire       [5:0]    _zz_198;
  wire                _zz_199;
  wire                _zz_200;
  wire                _zz_201;
  wire                _zz_202;
  wire                _zz_203;
  wire       [1:0]    _zz_204;
  wire       [1:0]    _zz_205;
  wire                _zz_206;
  wire       [51:0]   _zz_207;
  wire       [51:0]   _zz_208;
  wire       [51:0]   _zz_209;
  wire       [32:0]   _zz_210;
  wire       [51:0]   _zz_211;
  wire       [49:0]   _zz_212;
  wire       [51:0]   _zz_213;
  wire       [49:0]   _zz_214;
  wire       [51:0]   _zz_215;
  wire       [32:0]   _zz_216;
  wire       [31:0]   _zz_217;
  wire       [32:0]   _zz_218;
  wire       [0:0]    _zz_219;
  wire       [0:0]    _zz_220;
  wire       [0:0]    _zz_221;
  wire       [0:0]    _zz_222;
  wire       [0:0]    _zz_223;
  wire       [0:0]    _zz_224;
  wire       [0:0]    _zz_225;
  wire       [0:0]    _zz_226;
  wire       [0:0]    _zz_227;
  wire       [0:0]    _zz_228;
  wire       [0:0]    _zz_229;
  wire       [0:0]    _zz_230;
  wire       [0:0]    _zz_231;
  wire       [0:0]    _zz_232;
  wire       [0:0]    _zz_233;
  wire       [0:0]    _zz_234;
  wire       [0:0]    _zz_235;
  wire       [0:0]    _zz_236;
  wire       [3:0]    _zz_237;
  wire       [2:0]    _zz_238;
  wire       [31:0]   _zz_239;
  wire       [11:0]   _zz_240;
  wire       [31:0]   _zz_241;
  wire       [19:0]   _zz_242;
  wire       [11:0]   _zz_243;
  wire       [31:0]   _zz_244;
  wire       [31:0]   _zz_245;
  wire       [19:0]   _zz_246;
  wire       [11:0]   _zz_247;
  wire       [2:0]    _zz_248;
  wire       [2:0]    _zz_249;
  wire       [0:0]    _zz_250;
  wire       [2:0]    _zz_251;
  wire       [4:0]    _zz_252;
  wire       [11:0]   _zz_253;
  wire       [11:0]   _zz_254;
  wire       [31:0]   _zz_255;
  wire       [31:0]   _zz_256;
  wire       [31:0]   _zz_257;
  wire       [31:0]   _zz_258;
  wire       [31:0]   _zz_259;
  wire       [31:0]   _zz_260;
  wire       [31:0]   _zz_261;
  wire       [65:0]   _zz_262;
  wire       [65:0]   _zz_263;
  wire       [31:0]   _zz_264;
  wire       [31:0]   _zz_265;
  wire       [0:0]    _zz_266;
  wire       [5:0]    _zz_267;
  wire       [32:0]   _zz_268;
  wire       [31:0]   _zz_269;
  wire       [31:0]   _zz_270;
  wire       [32:0]   _zz_271;
  wire       [32:0]   _zz_272;
  wire       [32:0]   _zz_273;
  wire       [32:0]   _zz_274;
  wire       [0:0]    _zz_275;
  wire       [32:0]   _zz_276;
  wire       [0:0]    _zz_277;
  wire       [32:0]   _zz_278;
  wire       [0:0]    _zz_279;
  wire       [31:0]   _zz_280;
  wire       [11:0]   _zz_281;
  wire       [19:0]   _zz_282;
  wire       [11:0]   _zz_283;
  wire       [31:0]   _zz_284;
  wire       [31:0]   _zz_285;
  wire       [31:0]   _zz_286;
  wire       [11:0]   _zz_287;
  wire       [19:0]   _zz_288;
  wire       [11:0]   _zz_289;
  wire       [2:0]    _zz_290;
  wire       [1:0]    _zz_291;
  wire       [1:0]    _zz_292;
  wire       [0:0]    _zz_293;
  wire       [0:0]    _zz_294;
  wire       [0:0]    _zz_295;
  wire       [0:0]    _zz_296;
  wire       [0:0]    _zz_297;
  wire       [0:0]    _zz_298;
  wire                _zz_299;
  wire                _zz_300;
  wire       [1:0]    _zz_301;
  wire       [31:0]   _zz_302;
  wire       [31:0]   _zz_303;
  wire       [31:0]   _zz_304;
  wire                _zz_305;
  wire       [0:0]    _zz_306;
  wire       [13:0]   _zz_307;
  wire       [31:0]   _zz_308;
  wire       [31:0]   _zz_309;
  wire       [31:0]   _zz_310;
  wire                _zz_311;
  wire       [0:0]    _zz_312;
  wire       [7:0]    _zz_313;
  wire       [31:0]   _zz_314;
  wire       [31:0]   _zz_315;
  wire       [31:0]   _zz_316;
  wire                _zz_317;
  wire       [0:0]    _zz_318;
  wire       [1:0]    _zz_319;
  wire                _zz_320;
  wire                _zz_321;
  wire                _zz_322;
  wire       [31:0]   _zz_323;
  wire       [31:0]   _zz_324;
  wire       [31:0]   _zz_325;
  wire                _zz_326;
  wire       [1:0]    _zz_327;
  wire       [1:0]    _zz_328;
  wire                _zz_329;
  wire       [0:0]    _zz_330;
  wire       [26:0]   _zz_331;
  wire       [31:0]   _zz_332;
  wire       [31:0]   _zz_333;
  wire       [31:0]   _zz_334;
  wire       [31:0]   _zz_335;
  wire                _zz_336;
  wire                _zz_337;
  wire       [0:0]    _zz_338;
  wire       [0:0]    _zz_339;
  wire                _zz_340;
  wire       [0:0]    _zz_341;
  wire       [23:0]   _zz_342;
  wire       [31:0]   _zz_343;
  wire       [31:0]   _zz_344;
  wire                _zz_345;
  wire       [1:0]    _zz_346;
  wire       [1:0]    _zz_347;
  wire                _zz_348;
  wire       [0:0]    _zz_349;
  wire       [19:0]   _zz_350;
  wire       [31:0]   _zz_351;
  wire       [31:0]   _zz_352;
  wire       [31:0]   _zz_353;
  wire       [31:0]   _zz_354;
  wire                _zz_355;
  wire       [0:0]    _zz_356;
  wire       [0:0]    _zz_357;
  wire                _zz_358;
  wire       [0:0]    _zz_359;
  wire       [0:0]    _zz_360;
  wire                _zz_361;
  wire       [0:0]    _zz_362;
  wire       [16:0]   _zz_363;
  wire       [31:0]   _zz_364;
  wire       [31:0]   _zz_365;
  wire       [31:0]   _zz_366;
  wire       [31:0]   _zz_367;
  wire       [31:0]   _zz_368;
  wire       [0:0]    _zz_369;
  wire       [0:0]    _zz_370;
  wire       [0:0]    _zz_371;
  wire       [0:0]    _zz_372;
  wire                _zz_373;
  wire       [0:0]    _zz_374;
  wire       [13:0]   _zz_375;
  wire       [31:0]   _zz_376;
  wire       [31:0]   _zz_377;
  wire       [31:0]   _zz_378;
  wire                _zz_379;
  wire                _zz_380;
  wire       [0:0]    _zz_381;
  wire       [3:0]    _zz_382;
  wire       [0:0]    _zz_383;
  wire       [0:0]    _zz_384;
  wire                _zz_385;
  wire       [0:0]    _zz_386;
  wire       [10:0]   _zz_387;
  wire       [31:0]   _zz_388;
  wire       [31:0]   _zz_389;
  wire       [31:0]   _zz_390;
  wire                _zz_391;
  wire       [0:0]    _zz_392;
  wire       [0:0]    _zz_393;
  wire       [31:0]   _zz_394;
  wire                _zz_395;
  wire       [0:0]    _zz_396;
  wire       [2:0]    _zz_397;
  wire       [0:0]    _zz_398;
  wire       [3:0]    _zz_399;
  wire       [5:0]    _zz_400;
  wire       [5:0]    _zz_401;
  wire                _zz_402;
  wire       [0:0]    _zz_403;
  wire       [7:0]    _zz_404;
  wire       [31:0]   _zz_405;
  wire       [31:0]   _zz_406;
  wire       [31:0]   _zz_407;
  wire       [31:0]   _zz_408;
  wire       [31:0]   _zz_409;
  wire       [31:0]   _zz_410;
  wire                _zz_411;
  wire       [0:0]    _zz_412;
  wire       [0:0]    _zz_413;
  wire                _zz_414;
  wire       [0:0]    _zz_415;
  wire       [1:0]    _zz_416;
  wire       [0:0]    _zz_417;
  wire       [3:0]    _zz_418;
  wire       [0:0]    _zz_419;
  wire       [0:0]    _zz_420;
  wire       [1:0]    _zz_421;
  wire       [1:0]    _zz_422;
  wire                _zz_423;
  wire       [0:0]    _zz_424;
  wire       [5:0]    _zz_425;
  wire       [31:0]   _zz_426;
  wire       [31:0]   _zz_427;
  wire       [31:0]   _zz_428;
  wire       [31:0]   _zz_429;
  wire       [31:0]   _zz_430;
  wire       [31:0]   _zz_431;
  wire       [31:0]   _zz_432;
  wire       [31:0]   _zz_433;
  wire                _zz_434;
  wire                _zz_435;
  wire       [31:0]   _zz_436;
  wire       [31:0]   _zz_437;
  wire                _zz_438;
  wire       [0:0]    _zz_439;
  wire       [1:0]    _zz_440;
  wire       [31:0]   _zz_441;
  wire       [31:0]   _zz_442;
  wire                _zz_443;
  wire                _zz_444;
  wire       [0:0]    _zz_445;
  wire       [0:0]    _zz_446;
  wire                _zz_447;
  wire       [0:0]    _zz_448;
  wire       [3:0]    _zz_449;
  wire       [31:0]   _zz_450;
  wire       [31:0]   _zz_451;
  wire       [31:0]   _zz_452;
  wire       [31:0]   _zz_453;
  wire       [31:0]   _zz_454;
  wire                _zz_455;
  wire                _zz_456;
  wire       [31:0]   _zz_457;
  wire       [31:0]   _zz_458;
  wire       [31:0]   _zz_459;
  wire       [31:0]   _zz_460;
  wire       [0:0]    _zz_461;
  wire       [2:0]    _zz_462;
  wire       [0:0]    _zz_463;
  wire       [0:0]    _zz_464;
  wire                _zz_465;
  wire       [0:0]    _zz_466;
  wire       [1:0]    _zz_467;
  wire       [31:0]   _zz_468;
  wire       [31:0]   _zz_469;
  wire       [31:0]   _zz_470;
  wire                _zz_471;
  wire                _zz_472;
  wire       [31:0]   _zz_473;
  wire                _zz_474;
  wire       [0:0]    _zz_475;
  wire       [0:0]    _zz_476;
  wire       [0:0]    _zz_477;
  wire       [0:0]    _zz_478;
  wire       [1:0]    _zz_479;
  wire       [1:0]    _zz_480;
  wire       [0:0]    _zz_481;
  wire       [0:0]    _zz_482;
  wire       [31:0]   _zz_483;
  wire       [31:0]   _zz_484;
  wire       [31:0]   _zz_485;
  wire       [31:0]   _zz_486;
  wire       [31:0]   _zz_487;
  wire       [31:0]   _zz_488;
  wire                _zz_489;
  wire                _zz_490;
  wire                _zz_491;
  wire       [51:0]   memory_MUL_LOW;
  wire       [31:0]   execute_BRANCH_CALC;
  wire                execute_BRANCH_DO;
  wire       [33:0]   memory_MUL_HH;
  wire       [33:0]   execute_MUL_HH;
  wire       [33:0]   execute_MUL_HL;
  wire       [33:0]   execute_MUL_LH;
  wire       [31:0]   execute_MUL_LL;
  wire       [31:0]   execute_SHIFT_RIGHT;
  wire       [31:0]   execute_REGFILE_WRITE_DATA;
  wire       [1:0]    memory_MEMORY_ADDRESS_LOW;
  wire       [1:0]    execute_MEMORY_ADDRESS_LOW;
  wire                decode_DO_EBREAK;
  wire                decode_CSR_READ_OPCODE;
  wire                decode_CSR_WRITE_OPCODE;
  wire                decode_PREDICTION_HAD_BRANCHED2;
  wire       [31:0]   decode_SRC2;
  wire       [31:0]   decode_SRC1;
  wire                decode_SRC2_FORCE_ZERO;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_1;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_2;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_3;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_4;
  wire       `EnvCtrlEnum_defaultEncoding_type decode_ENV_CTRL;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_5;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_6;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_7;
  wire                decode_IS_CSR;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_8;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_9;
  wire                decode_IS_RS2_SIGNED;
  wire                decode_IS_RS1_SIGNED;
  wire                decode_IS_DIV;
  wire                memory_IS_MUL;
  wire                execute_IS_MUL;
  wire                decode_IS_MUL;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_10;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_11;
  wire       `ShiftCtrlEnum_defaultEncoding_type decode_SHIFT_CTRL;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_12;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_13;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_14;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type decode_ALU_BITWISE_CTRL;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_15;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_16;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_17;
  wire                decode_SRC_LESS_UNSIGNED;
  wire                decode_MEMORY_MANAGMENT;
  wire                memory_MEMORY_WR;
  wire                decode_MEMORY_WR;
  wire                execute_BYPASSABLE_MEMORY_STAGE;
  wire                decode_BYPASSABLE_MEMORY_STAGE;
  wire                decode_BYPASSABLE_EXECUTE_STAGE;
  wire       `AluCtrlEnum_defaultEncoding_type decode_ALU_CTRL;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_18;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_19;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_20;
  wire       [31:0]   writeBack_FORMAL_PC_NEXT;
  wire       [31:0]   memory_FORMAL_PC_NEXT;
  wire       [31:0]   execute_FORMAL_PC_NEXT;
  wire       [31:0]   decode_FORMAL_PC_NEXT;
  wire       [31:0]   memory_PC;
  wire                execute_DO_EBREAK;
  wire                decode_IS_EBREAK;
  reg        [31:0]   _zz_21;
  wire                execute_CSR_READ_OPCODE;
  wire                execute_CSR_WRITE_OPCODE;
  wire                execute_IS_CSR;
  wire       `EnvCtrlEnum_defaultEncoding_type memory_ENV_CTRL;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_22;
  wire       `EnvCtrlEnum_defaultEncoding_type execute_ENV_CTRL;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_23;
  wire       `EnvCtrlEnum_defaultEncoding_type writeBack_ENV_CTRL;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_24;
  wire       [31:0]   memory_BRANCH_CALC;
  wire                memory_BRANCH_DO;
  wire       [31:0]   execute_PC;
  wire                execute_PREDICTION_HAD_BRANCHED2;
  wire                execute_BRANCH_COND_RESULT;
  wire       `BranchCtrlEnum_defaultEncoding_type execute_BRANCH_CTRL;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_25;
  wire                decode_RS2_USE;
  wire                decode_RS1_USE;
  wire                execute_REGFILE_WRITE_VALID;
  wire                execute_BYPASSABLE_EXECUTE_STAGE;
  wire                memory_REGFILE_WRITE_VALID;
  wire                memory_BYPASSABLE_MEMORY_STAGE;
  wire                writeBack_REGFILE_WRITE_VALID;
  reg        [31:0]   decode_RS2;
  reg        [31:0]   decode_RS1;
  wire                execute_IS_RS1_SIGNED;
  wire                execute_IS_DIV;
  wire                execute_IS_RS2_SIGNED;
  wire       [31:0]   memory_INSTRUCTION;
  wire                memory_IS_DIV;
  wire                writeBack_IS_MUL;
  wire       [33:0]   writeBack_MUL_HH;
  wire       [51:0]   writeBack_MUL_LOW;
  wire       [33:0]   memory_MUL_HL;
  wire       [33:0]   memory_MUL_LH;
  wire       [31:0]   memory_MUL_LL;
  (* keep , syn_keep *) wire       [31:0]   execute_RS1 /* synthesis syn_keep = 1 */ ;
  wire       [31:0]   memory_SHIFT_RIGHT;
  reg        [31:0]   _zz_26;
  wire       `ShiftCtrlEnum_defaultEncoding_type memory_SHIFT_CTRL;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_27;
  wire       `ShiftCtrlEnum_defaultEncoding_type execute_SHIFT_CTRL;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_28;
  wire                execute_SRC_LESS_UNSIGNED;
  wire                execute_SRC2_FORCE_ZERO;
  wire                execute_SRC_USE_SUB_LESS;
  wire       [31:0]   _zz_29;
  wire       [31:0]   _zz_30;
  wire       `Src2CtrlEnum_defaultEncoding_type decode_SRC2_CTRL;
  wire       `Src2CtrlEnum_defaultEncoding_type _zz_31;
  wire       [31:0]   _zz_32;
  wire       `Src1CtrlEnum_defaultEncoding_type decode_SRC1_CTRL;
  wire       `Src1CtrlEnum_defaultEncoding_type _zz_33;
  wire                decode_SRC_USE_SUB_LESS;
  wire                decode_SRC_ADD_ZERO;
  wire       [31:0]   execute_SRC_ADD_SUB;
  wire                execute_SRC_LESS;
  wire       `AluCtrlEnum_defaultEncoding_type execute_ALU_CTRL;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_34;
  wire       [31:0]   execute_SRC2;
  wire       [31:0]   execute_SRC1;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type execute_ALU_BITWISE_CTRL;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_35;
  wire       [31:0]   _zz_36;
  wire                _zz_37;
  reg                 _zz_38;
  wire       [31:0]   decode_INSTRUCTION_ANTICIPATED;
  reg                 decode_REGFILE_WRITE_VALID;
  wire                decode_LEGAL_INSTRUCTION;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_39;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_40;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_41;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_42;
  wire       `Src2CtrlEnum_defaultEncoding_type _zz_43;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_44;
  wire       `Src1CtrlEnum_defaultEncoding_type _zz_45;
  reg        [31:0]   _zz_46;
  wire       [1:0]    writeBack_MEMORY_ADDRESS_LOW;
  wire                writeBack_MEMORY_WR;
  wire       [31:0]   writeBack_REGFILE_WRITE_DATA;
  wire                writeBack_MEMORY_ENABLE;
  wire       [31:0]   memory_REGFILE_WRITE_DATA;
  wire                memory_MEMORY_ENABLE;
  wire                execute_MEMORY_MANAGMENT;
  (* keep , syn_keep *) wire       [31:0]   execute_RS2 /* synthesis syn_keep = 1 */ ;
  wire                execute_MEMORY_WR;
  wire       [31:0]   execute_SRC_ADD;
  wire                execute_MEMORY_ENABLE;
  wire       [31:0]   execute_INSTRUCTION;
  wire                decode_MEMORY_ENABLE;
  wire                decode_FLUSH_ALL;
  reg                 _zz_47;
  reg                 _zz_47_2;
  reg                 _zz_47_1;
  reg                 _zz_47_0;
  wire       `BranchCtrlEnum_defaultEncoding_type decode_BRANCH_CTRL;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_48;
  wire       [31:0]   decode_INSTRUCTION;
  reg        [31:0]   _zz_49;
  reg        [31:0]   _zz_50;
  wire       [31:0]   decode_PC;
  wire       [31:0]   writeBack_PC;
  wire       [31:0]   writeBack_INSTRUCTION;
  reg                 decode_arbitration_haltItself;
  reg                 decode_arbitration_haltByOther;
  reg                 decode_arbitration_removeIt;
  wire                decode_arbitration_flushIt;
  reg                 decode_arbitration_flushNext;
  reg                 decode_arbitration_isValid;
  wire                decode_arbitration_isStuck;
  wire                decode_arbitration_isStuckByOthers;
  wire                decode_arbitration_isFlushed;
  wire                decode_arbitration_isMoving;
  wire                decode_arbitration_isFiring;
  reg                 execute_arbitration_haltItself;
  reg                 execute_arbitration_haltByOther;
  reg                 execute_arbitration_removeIt;
  reg                 execute_arbitration_flushIt;
  reg                 execute_arbitration_flushNext;
  reg                 execute_arbitration_isValid;
  wire                execute_arbitration_isStuck;
  wire                execute_arbitration_isStuckByOthers;
  wire                execute_arbitration_isFlushed;
  wire                execute_arbitration_isMoving;
  wire                execute_arbitration_isFiring;
  reg                 memory_arbitration_haltItself;
  wire                memory_arbitration_haltByOther;
  reg                 memory_arbitration_removeIt;
  wire                memory_arbitration_flushIt;
  reg                 memory_arbitration_flushNext;
  reg                 memory_arbitration_isValid;
  wire                memory_arbitration_isStuck;
  wire                memory_arbitration_isStuckByOthers;
  wire                memory_arbitration_isFlushed;
  wire                memory_arbitration_isMoving;
  wire                memory_arbitration_isFiring;
  reg                 writeBack_arbitration_haltItself;
  wire                writeBack_arbitration_haltByOther;
  reg                 writeBack_arbitration_removeIt;
  reg                 writeBack_arbitration_flushIt;
  reg                 writeBack_arbitration_flushNext;
  reg                 writeBack_arbitration_isValid;
  wire                writeBack_arbitration_isStuck;
  wire                writeBack_arbitration_isStuckByOthers;
  wire                writeBack_arbitration_isFlushed;
  wire                writeBack_arbitration_isMoving;
  wire                writeBack_arbitration_isFiring;
  wire       [31:0]   lastStageInstruction /* verilator public */ ;
  wire       [31:0]   lastStagePc /* verilator public */ ;
  wire                lastStageIsValid /* verilator public */ ;
  wire                lastStageIsFiring /* verilator public */ ;
  reg                 IBusCachedPlugin_fetcherHalt;
  reg                 IBusCachedPlugin_incomingInstruction;
  wire                IBusCachedPlugin_predictionJumpInterface_valid;
  (* keep , syn_keep *) wire       [31:0]   IBusCachedPlugin_predictionJumpInterface_payload /* synthesis syn_keep = 1 */ ;
  reg                 IBusCachedPlugin_decodePrediction_cmd_hadBranch;
  wire                IBusCachedPlugin_decodePrediction_rsp_wasWrong;
  wire                IBusCachedPlugin_pcValids_0;
  wire                IBusCachedPlugin_pcValids_1;
  wire                IBusCachedPlugin_pcValids_2;
  wire                IBusCachedPlugin_pcValids_3;
  reg                 IBusCachedPlugin_decodeExceptionPort_valid;
  reg        [3:0]    IBusCachedPlugin_decodeExceptionPort_payload_code;
  wire       [31:0]   IBusCachedPlugin_decodeExceptionPort_payload_badAddr;
  wire                IBusCachedPlugin_mmuBus_cmd_isValid;
  wire       [31:0]   IBusCachedPlugin_mmuBus_cmd_virtualAddress;
  wire                IBusCachedPlugin_mmuBus_cmd_bypassTranslation;
  wire       [31:0]   IBusCachedPlugin_mmuBus_rsp_physicalAddress;
  wire                IBusCachedPlugin_mmuBus_rsp_isIoAccess;
  wire                IBusCachedPlugin_mmuBus_rsp_allowRead;
  wire                IBusCachedPlugin_mmuBus_rsp_allowWrite;
  wire                IBusCachedPlugin_mmuBus_rsp_allowExecute;
  wire                IBusCachedPlugin_mmuBus_rsp_exception;
  wire                IBusCachedPlugin_mmuBus_rsp_refilling;
  wire                IBusCachedPlugin_mmuBus_end;
  wire                IBusCachedPlugin_mmuBus_busy;
  wire                DBusCachedPlugin_mmuBus_cmd_isValid;
  wire       [31:0]   DBusCachedPlugin_mmuBus_cmd_virtualAddress;
  wire                DBusCachedPlugin_mmuBus_cmd_bypassTranslation;
  wire       [31:0]   DBusCachedPlugin_mmuBus_rsp_physicalAddress;
  wire                DBusCachedPlugin_mmuBus_rsp_isIoAccess;
  wire                DBusCachedPlugin_mmuBus_rsp_allowRead;
  wire                DBusCachedPlugin_mmuBus_rsp_allowWrite;
  wire                DBusCachedPlugin_mmuBus_rsp_allowExecute;
  wire                DBusCachedPlugin_mmuBus_rsp_exception;
  wire                DBusCachedPlugin_mmuBus_rsp_refilling;
  wire                DBusCachedPlugin_mmuBus_end;
  wire                DBusCachedPlugin_mmuBus_busy;
  reg                 DBusCachedPlugin_redoBranch_valid;
  wire       [31:0]   DBusCachedPlugin_redoBranch_payload;
  reg                 DBusCachedPlugin_exceptionBus_valid;
  reg        [3:0]    DBusCachedPlugin_exceptionBus_payload_code;
  wire       [31:0]   DBusCachedPlugin_exceptionBus_payload_badAddr;
  reg                 _zz_51;
  wire                decodeExceptionPort_valid;
  wire       [3:0]    decodeExceptionPort_payload_code;
  wire       [31:0]   decodeExceptionPort_payload_badAddr;
  wire                BranchPlugin_jumpInterface_valid;
  wire       [31:0]   BranchPlugin_jumpInterface_payload;
  wire                BranchPlugin_branchExceptionPort_valid;
  wire       [3:0]    BranchPlugin_branchExceptionPort_payload_code;
  wire       [31:0]   BranchPlugin_branchExceptionPort_payload_badAddr;
  wire                CsrPlugin_inWfi /* verilator public */ ;
  reg                 CsrPlugin_thirdPartyWake;
  reg                 CsrPlugin_jumpInterface_valid;
  reg        [31:0]   CsrPlugin_jumpInterface_payload;
  wire                CsrPlugin_exceptionPendings_0;
  wire                CsrPlugin_exceptionPendings_1;
  wire                CsrPlugin_exceptionPendings_2;
  wire                CsrPlugin_exceptionPendings_3;
  wire                contextSwitching;
  reg        [1:0]    CsrPlugin_privilege;
  reg                 CsrPlugin_forceMachineWire;
  reg                 CsrPlugin_selfException_valid;
  reg        [3:0]    CsrPlugin_selfException_payload_code;
  wire       [31:0]   CsrPlugin_selfException_payload_badAddr;
  reg                 CsrPlugin_allowInterrupts;
  reg                 CsrPlugin_allowException;
  reg                 IBusCachedPlugin_injectionPort_valid;
  reg                 IBusCachedPlugin_injectionPort_ready;
  wire       [31:0]   IBusCachedPlugin_injectionPort_payload;
  wire                IBusCachedPlugin_externalFlush;
  wire                IBusCachedPlugin_jump_pcLoad_valid;
  wire       [31:0]   IBusCachedPlugin_jump_pcLoad_payload;
  wire       [3:0]    _zz_52;
  wire       [3:0]    _zz_53;
  wire                _zz_54;
  wire                _zz_55;
  wire                _zz_56;
  wire                IBusCachedPlugin_fetchPc_output_valid;
  wire                IBusCachedPlugin_fetchPc_output_ready;
  wire       [31:0]   IBusCachedPlugin_fetchPc_output_payload;
  reg        [31:0]   IBusCachedPlugin_fetchPc_pcReg /* verilator public */ ;
  reg                 IBusCachedPlugin_fetchPc_correction;
  reg                 IBusCachedPlugin_fetchPc_correctionReg;
  wire                IBusCachedPlugin_fetchPc_corrected;
  reg                 IBusCachedPlugin_fetchPc_pcRegPropagate;
  reg                 IBusCachedPlugin_fetchPc_booted;
  reg                 IBusCachedPlugin_fetchPc_inc;
  reg        [31:0]   IBusCachedPlugin_fetchPc_pc;
  wire                IBusCachedPlugin_fetchPc_redo_valid;
  wire       [31:0]   IBusCachedPlugin_fetchPc_redo_payload;
  reg                 IBusCachedPlugin_fetchPc_flushed;
  reg                 IBusCachedPlugin_iBusRsp_redoFetch;
  wire                IBusCachedPlugin_iBusRsp_stages_0_input_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_0_input_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_0_input_payload;
  wire                IBusCachedPlugin_iBusRsp_stages_0_output_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_0_output_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_0_output_payload;
  reg                 IBusCachedPlugin_iBusRsp_stages_0_halt;
  wire                IBusCachedPlugin_iBusRsp_stages_1_input_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_1_input_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_1_input_payload;
  wire                IBusCachedPlugin_iBusRsp_stages_1_output_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_1_output_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_1_output_payload;
  reg                 IBusCachedPlugin_iBusRsp_stages_1_halt;
  wire                IBusCachedPlugin_iBusRsp_stages_2_input_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_2_input_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_2_input_payload;
  wire                IBusCachedPlugin_iBusRsp_stages_2_output_valid;
  wire                IBusCachedPlugin_iBusRsp_stages_2_output_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_stages_2_output_payload;
  reg                 IBusCachedPlugin_iBusRsp_stages_2_halt;
  wire                _zz_57;
  wire                _zz_58;
  wire                _zz_59;
  wire                IBusCachedPlugin_iBusRsp_flush;
  wire                _zz_60;
  wire                _zz_61;
  reg                 _zz_62;
  wire                _zz_63;
  reg                 _zz_64;
  reg        [31:0]   _zz_65;
  reg                 IBusCachedPlugin_iBusRsp_readyForError;
  wire                IBusCachedPlugin_iBusRsp_output_valid;
  wire                IBusCachedPlugin_iBusRsp_output_ready;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_output_payload_pc;
  wire                IBusCachedPlugin_iBusRsp_output_payload_rsp_error;
  wire       [31:0]   IBusCachedPlugin_iBusRsp_output_payload_rsp_inst;
  wire                IBusCachedPlugin_iBusRsp_output_payload_isRvc;
  reg                 IBusCachedPlugin_injector_nextPcCalc_valids_0;
  reg                 IBusCachedPlugin_injector_nextPcCalc_valids_1;
  reg                 IBusCachedPlugin_injector_nextPcCalc_valids_2;
  reg                 IBusCachedPlugin_injector_nextPcCalc_valids_3;
  reg                 IBusCachedPlugin_injector_nextPcCalc_valids_4;
  wire                _zz_66;
  reg        [18:0]   _zz_67;
  wire                _zz_68;
  reg        [10:0]   _zz_69;
  wire                _zz_70;
  reg        [18:0]   _zz_71;
  reg                 _zz_72;
  wire                _zz_73;
  reg        [10:0]   _zz_74;
  wire                _zz_75;
  reg        [18:0]   _zz_76;
  wire       [31:0]   _zz_77;
  reg        [31:0]   IBusCachedPlugin_rspCounter;
  wire                IBusCachedPlugin_s0_tightlyCoupledHit;
  reg                 IBusCachedPlugin_s1_tightlyCoupledHit;
  reg                 IBusCachedPlugin_s2_tightlyCoupledHit;
  wire                IBusCachedPlugin_rsp_iBusRspOutputHalt;
  wire                IBusCachedPlugin_rsp_issueDetected;
  reg                 IBusCachedPlugin_rsp_redoFetch;
  wire                dataCache_1_io_mem_cmd_s2mPipe_valid;
  wire                dataCache_1_io_mem_cmd_s2mPipe_ready;
  wire                dataCache_1_io_mem_cmd_s2mPipe_payload_wr;
  wire       [31:0]   dataCache_1_io_mem_cmd_s2mPipe_payload_address;
  wire       [31:0]   dataCache_1_io_mem_cmd_s2mPipe_payload_data;
  wire       [3:0]    dataCache_1_io_mem_cmd_s2mPipe_payload_mask;
  wire       [2:0]    dataCache_1_io_mem_cmd_s2mPipe_payload_length;
  wire                dataCache_1_io_mem_cmd_s2mPipe_payload_last;
  reg                 dataCache_1_io_mem_cmd_s2mPipe_rValid;
  reg                 dataCache_1_io_mem_cmd_s2mPipe_rData_wr;
  reg        [31:0]   dataCache_1_io_mem_cmd_s2mPipe_rData_address;
  reg        [31:0]   dataCache_1_io_mem_cmd_s2mPipe_rData_data;
  reg        [3:0]    dataCache_1_io_mem_cmd_s2mPipe_rData_mask;
  reg        [2:0]    dataCache_1_io_mem_cmd_s2mPipe_rData_length;
  reg                 dataCache_1_io_mem_cmd_s2mPipe_rData_last;
  wire                dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_valid;
  wire                dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_ready;
  wire                dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_wr;
  wire       [31:0]   dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_address;
  wire       [31:0]   dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_data;
  wire       [3:0]    dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_mask;
  wire       [2:0]    dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_length;
  wire                dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_last;
  reg                 dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rValid;
  reg                 dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_wr;
  reg        [31:0]   dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_address;
  reg        [31:0]   dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_data;
  reg        [3:0]    dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_mask;
  reg        [2:0]    dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_length;
  reg                 dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_last;
  reg                 dBus_rsp_regNext_valid;
  reg        [31:0]   dBus_rsp_regNext_payload_data;
  reg                 dBus_rsp_regNext_payload_error;
  wire       [31:0]   _zz_78;
  reg        [31:0]   DBusCachedPlugin_rspCounter;
  wire       [1:0]    execute_DBusCachedPlugin_size;
  reg        [31:0]   _zz_79;
  reg        [31:0]   writeBack_DBusCachedPlugin_rspShifted;
  wire                _zz_80;
  reg        [31:0]   _zz_81;
  wire                _zz_82;
  reg        [31:0]   _zz_83;
  reg        [31:0]   writeBack_DBusCachedPlugin_rspFormated;
  wire       [32:0]   _zz_84;
  wire                _zz_85;
  wire                _zz_86;
  wire                _zz_87;
  wire                _zz_88;
  wire       `Src1CtrlEnum_defaultEncoding_type _zz_89;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_90;
  wire       `Src2CtrlEnum_defaultEncoding_type _zz_91;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_92;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_93;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_94;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_95;
  wire       [4:0]    decode_RegFilePlugin_regFileReadAddress1;
  wire       [4:0]    decode_RegFilePlugin_regFileReadAddress2;
  wire       [31:0]   decode_RegFilePlugin_rs1Data;
  wire       [31:0]   decode_RegFilePlugin_rs2Data;
  reg                 lastStageRegFileWrite_valid /* verilator public */ ;
  wire       [4:0]    lastStageRegFileWrite_payload_address /* verilator public */ ;
  wire       [31:0]   lastStageRegFileWrite_payload_data /* verilator public */ ;
  reg        [31:0]   execute_IntAluPlugin_bitwise;
  reg        [31:0]   _zz_96;
  reg        [31:0]   _zz_97;
  wire                _zz_98;
  reg        [19:0]   _zz_99;
  wire                _zz_100;
  reg        [19:0]   _zz_101;
  reg        [31:0]   _zz_102;
  reg        [31:0]   execute_SrcPlugin_addSub;
  wire                execute_SrcPlugin_less;
  wire       [4:0]    execute_FullBarrelShifterPlugin_amplitude;
  reg        [31:0]   _zz_103;
  wire       [31:0]   execute_FullBarrelShifterPlugin_reversed;
  reg        [31:0]   _zz_104;
  reg                 execute_MulPlugin_aSigned;
  reg                 execute_MulPlugin_bSigned;
  wire       [31:0]   execute_MulPlugin_a;
  wire       [31:0]   execute_MulPlugin_b;
  wire       [15:0]   execute_MulPlugin_aULow;
  wire       [15:0]   execute_MulPlugin_bULow;
  wire       [16:0]   execute_MulPlugin_aSLow;
  wire       [16:0]   execute_MulPlugin_bSLow;
  wire       [16:0]   execute_MulPlugin_aHigh;
  wire       [16:0]   execute_MulPlugin_bHigh;
  wire       [65:0]   writeBack_MulPlugin_result;
  reg        [32:0]   memory_DivPlugin_rs1;
  reg        [31:0]   memory_DivPlugin_rs2;
  reg        [64:0]   memory_DivPlugin_accumulator;
  wire                memory_DivPlugin_frontendOk;
  reg                 memory_DivPlugin_div_needRevert;
  reg                 memory_DivPlugin_div_counter_willIncrement;
  reg                 memory_DivPlugin_div_counter_willClear;
  reg        [5:0]    memory_DivPlugin_div_counter_valueNext;
  reg        [5:0]    memory_DivPlugin_div_counter_value;
  wire                memory_DivPlugin_div_counter_willOverflowIfInc;
  wire                memory_DivPlugin_div_counter_willOverflow;
  reg                 memory_DivPlugin_div_done;
  reg        [31:0]   memory_DivPlugin_div_result;
  wire       [31:0]   _zz_105;
  wire       [32:0]   memory_DivPlugin_div_stage_0_remainderShifted;
  wire       [32:0]   memory_DivPlugin_div_stage_0_remainderMinusDenominator;
  wire       [31:0]   memory_DivPlugin_div_stage_0_outRemainder;
  wire       [31:0]   memory_DivPlugin_div_stage_0_outNumerator;
  wire       [31:0]   _zz_106;
  wire                _zz_107;
  wire                _zz_108;
  reg        [32:0]   _zz_109;
  reg                 _zz_110;
  reg                 _zz_111;
  reg                 _zz_112;
  reg        [4:0]    _zz_113;
  reg        [31:0]   _zz_114;
  wire                _zz_115;
  wire                _zz_116;
  wire                _zz_117;
  wire                _zz_118;
  wire                execute_BranchPlugin_eq;
  wire       [2:0]    _zz_119;
  reg                 _zz_120;
  reg                 _zz_121;
  wire                _zz_122;
  reg        [19:0]   _zz_123;
  wire                _zz_124;
  reg        [10:0]   _zz_125;
  wire                _zz_126;
  reg        [18:0]   _zz_127;
  reg                 _zz_128;
  wire                execute_BranchPlugin_missAlignedTarget;
  reg        [31:0]   execute_BranchPlugin_branch_src1;
  reg        [31:0]   execute_BranchPlugin_branch_src2;
  wire                _zz_129;
  reg        [19:0]   _zz_130;
  wire                _zz_131;
  reg        [10:0]   _zz_132;
  wire                _zz_133;
  reg        [18:0]   _zz_134;
  wire       [31:0]   execute_BranchPlugin_branchAdder;
  wire       [1:0]    CsrPlugin_misa_base;
  wire       [25:0]   CsrPlugin_misa_extensions;
  reg        [1:0]    CsrPlugin_mtvec_mode;
  reg        [29:0]   CsrPlugin_mtvec_base;
  reg        [31:0]   CsrPlugin_mepc;
  reg                 CsrPlugin_mstatus_MIE;
  reg                 CsrPlugin_mstatus_MPIE;
  reg        [1:0]    CsrPlugin_mstatus_MPP;
  reg                 CsrPlugin_mip_MEIP;
  reg                 CsrPlugin_mip_MTIP;
  reg                 CsrPlugin_mip_MSIP;
  reg                 CsrPlugin_mie_MEIE;
  reg                 CsrPlugin_mie_MTIE;
  reg                 CsrPlugin_mie_MSIE;
  reg                 CsrPlugin_mcause_interrupt;
  reg        [3:0]    CsrPlugin_mcause_exceptionCode;
  reg        [31:0]   CsrPlugin_mtval;
  reg        [63:0]   CsrPlugin_mcycle = 64'b0000000000000000000000000000000000000000000000000000000000000000;
  reg        [63:0]   CsrPlugin_minstret = 64'b0000000000000000000000000000000000000000000000000000000000000000;
  wire                _zz_135;
  wire                _zz_136;
  wire                _zz_137;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValids_decode;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValids_execute;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValids_memory;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory;
  reg                 CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack;
  reg        [3:0]    CsrPlugin_exceptionPortCtrl_exceptionContext_code;
  reg        [31:0]   CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr;
  wire       [1:0]    CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped;
  wire       [1:0]    CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilege;
  wire       [1:0]    _zz_138;
  wire                _zz_139;
  reg                 CsrPlugin_interrupt_valid;
  reg        [3:0]    CsrPlugin_interrupt_code /* verilator public */ ;
  reg        [1:0]    CsrPlugin_interrupt_targetPrivilege;
  wire                CsrPlugin_exception;
  wire                CsrPlugin_lastStageWasWfi;
  reg                 CsrPlugin_pipelineLiberator_pcValids_0;
  reg                 CsrPlugin_pipelineLiberator_pcValids_1;
  reg                 CsrPlugin_pipelineLiberator_pcValids_2;
  wire                CsrPlugin_pipelineLiberator_active;
  reg                 CsrPlugin_pipelineLiberator_done;
  wire                CsrPlugin_interruptJump /* verilator public */ ;
  reg                 CsrPlugin_hadException;
  reg        [1:0]    CsrPlugin_targetPrivilege;
  reg        [3:0]    CsrPlugin_trapCause;
  reg        [1:0]    CsrPlugin_xtvec_mode;
  reg        [29:0]   CsrPlugin_xtvec_base;
  reg                 execute_CsrPlugin_wfiWake;
  wire                execute_CsrPlugin_blockedBySideEffects;
  reg                 execute_CsrPlugin_illegalAccess;
  reg                 execute_CsrPlugin_illegalInstruction;
  wire       [31:0]   execute_CsrPlugin_readData;
  wire                execute_CsrPlugin_writeInstruction;
  wire                execute_CsrPlugin_readInstruction;
  wire                execute_CsrPlugin_writeEnable;
  wire                execute_CsrPlugin_readEnable;
  wire       [31:0]   execute_CsrPlugin_readToWriteData;
  reg        [31:0]   execute_CsrPlugin_writeData;
  wire       [11:0]   execute_CsrPlugin_csrAddress;
  reg                 DebugPlugin_firstCycle;
  reg                 DebugPlugin_secondCycle;
  reg                 DebugPlugin_resetIt;
  reg                 DebugPlugin_haltIt;
  reg                 DebugPlugin_stepIt;
  reg                 DebugPlugin_isPipBusy;
  reg                 DebugPlugin_godmode;
  reg                 DebugPlugin_haltedByBreak;
  reg        [31:0]   DebugPlugin_busReadDataReg;
  reg                 _zz_140;
  reg                 DebugPlugin_resetIt_regNext;
  reg        [31:0]   decode_to_execute_PC;
  reg        [31:0]   execute_to_memory_PC;
  reg        [31:0]   memory_to_writeBack_PC;
  reg        [31:0]   decode_to_execute_INSTRUCTION;
  reg        [31:0]   execute_to_memory_INSTRUCTION;
  reg        [31:0]   memory_to_writeBack_INSTRUCTION;
  reg        [31:0]   decode_to_execute_FORMAL_PC_NEXT;
  reg        [31:0]   execute_to_memory_FORMAL_PC_NEXT;
  reg        [31:0]   memory_to_writeBack_FORMAL_PC_NEXT;
  reg                 decode_to_execute_SRC_USE_SUB_LESS;
  reg                 decode_to_execute_MEMORY_ENABLE;
  reg                 execute_to_memory_MEMORY_ENABLE;
  reg                 memory_to_writeBack_MEMORY_ENABLE;
  reg        `AluCtrlEnum_defaultEncoding_type decode_to_execute_ALU_CTRL;
  reg                 decode_to_execute_REGFILE_WRITE_VALID;
  reg                 execute_to_memory_REGFILE_WRITE_VALID;
  reg                 memory_to_writeBack_REGFILE_WRITE_VALID;
  reg                 decode_to_execute_BYPASSABLE_EXECUTE_STAGE;
  reg                 decode_to_execute_BYPASSABLE_MEMORY_STAGE;
  reg                 execute_to_memory_BYPASSABLE_MEMORY_STAGE;
  reg                 decode_to_execute_MEMORY_WR;
  reg                 execute_to_memory_MEMORY_WR;
  reg                 memory_to_writeBack_MEMORY_WR;
  reg                 decode_to_execute_MEMORY_MANAGMENT;
  reg                 decode_to_execute_SRC_LESS_UNSIGNED;
  reg        `AluBitwiseCtrlEnum_defaultEncoding_type decode_to_execute_ALU_BITWISE_CTRL;
  reg        `ShiftCtrlEnum_defaultEncoding_type decode_to_execute_SHIFT_CTRL;
  reg        `ShiftCtrlEnum_defaultEncoding_type execute_to_memory_SHIFT_CTRL;
  reg                 decode_to_execute_IS_MUL;
  reg                 execute_to_memory_IS_MUL;
  reg                 memory_to_writeBack_IS_MUL;
  reg                 decode_to_execute_IS_DIV;
  reg                 execute_to_memory_IS_DIV;
  reg                 decode_to_execute_IS_RS1_SIGNED;
  reg                 decode_to_execute_IS_RS2_SIGNED;
  reg        `BranchCtrlEnum_defaultEncoding_type decode_to_execute_BRANCH_CTRL;
  reg                 decode_to_execute_IS_CSR;
  reg        `EnvCtrlEnum_defaultEncoding_type decode_to_execute_ENV_CTRL;
  reg        `EnvCtrlEnum_defaultEncoding_type execute_to_memory_ENV_CTRL;
  reg        `EnvCtrlEnum_defaultEncoding_type memory_to_writeBack_ENV_CTRL;
  reg        [31:0]   decode_to_execute_RS1;
  reg        [31:0]   decode_to_execute_RS2;
  reg                 decode_to_execute_SRC2_FORCE_ZERO;
  reg        [31:0]   decode_to_execute_SRC1;
  reg        [31:0]   decode_to_execute_SRC2;
  reg                 decode_to_execute_PREDICTION_HAD_BRANCHED2;
  reg                 decode_to_execute_CSR_WRITE_OPCODE;
  reg                 decode_to_execute_CSR_READ_OPCODE;
  reg                 decode_to_execute_DO_EBREAK;
  reg        [1:0]    execute_to_memory_MEMORY_ADDRESS_LOW;
  reg        [1:0]    memory_to_writeBack_MEMORY_ADDRESS_LOW;
  reg        [31:0]   execute_to_memory_REGFILE_WRITE_DATA;
  reg        [31:0]   memory_to_writeBack_REGFILE_WRITE_DATA;
  reg        [31:0]   execute_to_memory_SHIFT_RIGHT;
  reg        [31:0]   execute_to_memory_MUL_LL;
  reg        [33:0]   execute_to_memory_MUL_LH;
  reg        [33:0]   execute_to_memory_MUL_HL;
  reg        [33:0]   execute_to_memory_MUL_HH;
  reg        [33:0]   memory_to_writeBack_MUL_HH;
  reg                 execute_to_memory_BRANCH_DO;
  reg        [31:0]   execute_to_memory_BRANCH_CALC;
  reg        [51:0]   memory_to_writeBack_MUL_LOW;
  reg        [2:0]    _zz_141;
  reg                 execute_CsrPlugin_csr_3860;
  reg                 execute_CsrPlugin_csr_768;
  reg                 execute_CsrPlugin_csr_836;
  reg                 execute_CsrPlugin_csr_772;
  reg                 execute_CsrPlugin_csr_773;
  reg                 execute_CsrPlugin_csr_833;
  reg                 execute_CsrPlugin_csr_834;
  reg                 execute_CsrPlugin_csr_835;
  reg        [31:0]   _zz_142;
  reg        [31:0]   _zz_143;
  reg        [31:0]   _zz_144;
  reg        [31:0]   _zz_145;
  reg        [31:0]   _zz_146;
  reg        [31:0]   _zz_147;
  reg        [31:0]   _zz_148;
  `ifndef SYNTHESIS
  reg [39:0] _zz_1_string;
  reg [39:0] _zz_2_string;
  reg [39:0] _zz_3_string;
  reg [39:0] _zz_4_string;
  reg [39:0] decode_ENV_CTRL_string;
  reg [39:0] _zz_5_string;
  reg [39:0] _zz_6_string;
  reg [39:0] _zz_7_string;
  reg [31:0] _zz_8_string;
  reg [31:0] _zz_9_string;
  reg [71:0] _zz_10_string;
  reg [71:0] _zz_11_string;
  reg [71:0] decode_SHIFT_CTRL_string;
  reg [71:0] _zz_12_string;
  reg [71:0] _zz_13_string;
  reg [71:0] _zz_14_string;
  reg [39:0] decode_ALU_BITWISE_CTRL_string;
  reg [39:0] _zz_15_string;
  reg [39:0] _zz_16_string;
  reg [39:0] _zz_17_string;
  reg [63:0] decode_ALU_CTRL_string;
  reg [63:0] _zz_18_string;
  reg [63:0] _zz_19_string;
  reg [63:0] _zz_20_string;
  reg [39:0] memory_ENV_CTRL_string;
  reg [39:0] _zz_22_string;
  reg [39:0] execute_ENV_CTRL_string;
  reg [39:0] _zz_23_string;
  reg [39:0] writeBack_ENV_CTRL_string;
  reg [39:0] _zz_24_string;
  reg [31:0] execute_BRANCH_CTRL_string;
  reg [31:0] _zz_25_string;
  reg [71:0] memory_SHIFT_CTRL_string;
  reg [71:0] _zz_27_string;
  reg [71:0] execute_SHIFT_CTRL_string;
  reg [71:0] _zz_28_string;
  reg [23:0] decode_SRC2_CTRL_string;
  reg [23:0] _zz_31_string;
  reg [95:0] decode_SRC1_CTRL_string;
  reg [95:0] _zz_33_string;
  reg [63:0] execute_ALU_CTRL_string;
  reg [63:0] _zz_34_string;
  reg [39:0] execute_ALU_BITWISE_CTRL_string;
  reg [39:0] _zz_35_string;
  reg [39:0] _zz_39_string;
  reg [31:0] _zz_40_string;
  reg [71:0] _zz_41_string;
  reg [39:0] _zz_42_string;
  reg [23:0] _zz_43_string;
  reg [63:0] _zz_44_string;
  reg [95:0] _zz_45_string;
  reg [31:0] decode_BRANCH_CTRL_string;
  reg [31:0] _zz_48_string;
  reg [95:0] _zz_89_string;
  reg [63:0] _zz_90_string;
  reg [23:0] _zz_91_string;
  reg [39:0] _zz_92_string;
  reg [71:0] _zz_93_string;
  reg [31:0] _zz_94_string;
  reg [39:0] _zz_95_string;
  reg [63:0] decode_to_execute_ALU_CTRL_string;
  reg [39:0] decode_to_execute_ALU_BITWISE_CTRL_string;
  reg [71:0] decode_to_execute_SHIFT_CTRL_string;
  reg [71:0] execute_to_memory_SHIFT_CTRL_string;
  reg [31:0] decode_to_execute_BRANCH_CTRL_string;
  reg [39:0] decode_to_execute_ENV_CTRL_string;
  reg [39:0] execute_to_memory_ENV_CTRL_string;
  reg [39:0] memory_to_writeBack_ENV_CTRL_string;
  `endif

  reg [31:0] RegFilePlugin_regFile [0:31] /* verilator public */ ;

  assign _zz_170 = (execute_arbitration_isValid && execute_IS_CSR);
  assign _zz_171 = (writeBack_arbitration_isValid && writeBack_REGFILE_WRITE_VALID);
  assign _zz_172 = 1'b1;
  assign _zz_173 = (memory_arbitration_isValid && memory_REGFILE_WRITE_VALID);
  assign _zz_174 = (memory_arbitration_isValid && memory_IS_DIV);
  assign _zz_175 = ((_zz_153 && IBusCachedPlugin_cache_io_cpu_decode_error) && (! _zz_47_2));
  assign _zz_176 = ((_zz_153 && IBusCachedPlugin_cache_io_cpu_decode_cacheMiss) && (! _zz_47_1));
  assign _zz_177 = ((_zz_153 && IBusCachedPlugin_cache_io_cpu_decode_mmuException) && (! _zz_47_0));
  assign _zz_178 = ((_zz_153 && IBusCachedPlugin_cache_io_cpu_decode_mmuRefilling) && (! IBusCachedPlugin_rsp_issueDetected));
  assign _zz_179 = ({decodeExceptionPort_valid,IBusCachedPlugin_decodeExceptionPort_valid} != (2'b00));
  assign _zz_180 = (execute_arbitration_isValid && execute_DO_EBREAK);
  assign _zz_181 = (({writeBack_arbitration_isValid,memory_arbitration_isValid} != (2'b00)) == 1'b0);
  assign _zz_182 = (CsrPlugin_hadException || CsrPlugin_interruptJump);
  assign _zz_183 = (writeBack_arbitration_isValid && (writeBack_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_XRET));
  assign _zz_184 = (DebugPlugin_stepIt && IBusCachedPlugin_incomingInstruction);
  assign _zz_185 = writeBack_INSTRUCTION[29 : 28];
  assign _zz_186 = (writeBack_arbitration_isValid && writeBack_MEMORY_ENABLE);
  assign _zz_187 = execute_INSTRUCTION[13 : 12];
  assign _zz_188 = (memory_DivPlugin_frontendOk && (! memory_DivPlugin_div_done));
  assign _zz_189 = (! memory_arbitration_isStuck);
  assign _zz_190 = (writeBack_arbitration_isValid && writeBack_REGFILE_WRITE_VALID);
  assign _zz_191 = (1'b0 || (! 1'b1));
  assign _zz_192 = (memory_arbitration_isValid && memory_REGFILE_WRITE_VALID);
  assign _zz_193 = (1'b0 || (! memory_BYPASSABLE_MEMORY_STAGE));
  assign _zz_194 = (execute_arbitration_isValid && execute_REGFILE_WRITE_VALID);
  assign _zz_195 = (1'b1 || (! execute_BYPASSABLE_EXECUTE_STAGE));
  assign _zz_196 = (execute_CsrPlugin_illegalAccess || execute_CsrPlugin_illegalInstruction);
  assign _zz_197 = (execute_arbitration_isValid && (execute_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_ECALL));
  assign _zz_198 = debug_bus_cmd_payload_address[7 : 2];
  assign _zz_199 = (_zz_166 && (! dataCache_1_io_mem_cmd_s2mPipe_ready));
  assign _zz_200 = (CsrPlugin_mstatus_MIE || (CsrPlugin_privilege < (2'b11)));
  assign _zz_201 = ((_zz_135 && 1'b1) && (! 1'b0));
  assign _zz_202 = ((_zz_136 && 1'b1) && (! 1'b0));
  assign _zz_203 = ((_zz_137 && 1'b1) && (! 1'b0));
  assign _zz_204 = writeBack_INSTRUCTION[13 : 12];
  assign _zz_205 = writeBack_INSTRUCTION[13 : 12];
  assign _zz_206 = execute_INSTRUCTION[13];
  assign _zz_207 = ($signed(_zz_208) + $signed(_zz_213));
  assign _zz_208 = ($signed(_zz_209) + $signed(_zz_211));
  assign _zz_209 = 52'h0;
  assign _zz_210 = {1'b0,memory_MUL_LL};
  assign _zz_211 = {{19{_zz_210[32]}}, _zz_210};
  assign _zz_212 = ({16'd0,memory_MUL_LH} <<< 16);
  assign _zz_213 = {{2{_zz_212[49]}}, _zz_212};
  assign _zz_214 = ({16'd0,memory_MUL_HL} <<< 16);
  assign _zz_215 = {{2{_zz_214[49]}}, _zz_214};
  assign _zz_216 = ($signed(_zz_218) >>> execute_FullBarrelShifterPlugin_amplitude);
  assign _zz_217 = _zz_216[31 : 0];
  assign _zz_218 = {((execute_SHIFT_CTRL == `ShiftCtrlEnum_defaultEncoding_SRA_1) && execute_FullBarrelShifterPlugin_reversed[31]),execute_FullBarrelShifterPlugin_reversed};
  assign _zz_219 = _zz_84[29 : 29];
  assign _zz_220 = _zz_84[26 : 26];
  assign _zz_221 = _zz_84[25 : 25];
  assign _zz_222 = _zz_84[24 : 24];
  assign _zz_223 = _zz_84[23 : 23];
  assign _zz_224 = _zz_84[17 : 17];
  assign _zz_225 = _zz_84[16 : 16];
  assign _zz_226 = _zz_84[13 : 13];
  assign _zz_227 = _zz_84[12 : 12];
  assign _zz_228 = _zz_84[11 : 11];
  assign _zz_229 = _zz_84[32 : 32];
  assign _zz_230 = _zz_84[15 : 15];
  assign _zz_231 = _zz_84[5 : 5];
  assign _zz_232 = _zz_84[3 : 3];
  assign _zz_233 = _zz_84[20 : 20];
  assign _zz_234 = _zz_84[10 : 10];
  assign _zz_235 = _zz_84[4 : 4];
  assign _zz_236 = _zz_84[0 : 0];
  assign _zz_237 = (_zz_52 - (4'b0001));
  assign _zz_238 = {IBusCachedPlugin_fetchPc_inc,(2'b00)};
  assign _zz_239 = {29'd0, _zz_238};
  assign _zz_240 = {{{decode_INSTRUCTION[31],decode_INSTRUCTION[7]},decode_INSTRUCTION[30 : 25]},decode_INSTRUCTION[11 : 8]};
  assign _zz_241 = {{_zz_67,{{{decode_INSTRUCTION[31],decode_INSTRUCTION[7]},decode_INSTRUCTION[30 : 25]},decode_INSTRUCTION[11 : 8]}},1'b0};
  assign _zz_242 = {{{decode_INSTRUCTION[31],decode_INSTRUCTION[19 : 12]},decode_INSTRUCTION[20]},decode_INSTRUCTION[30 : 21]};
  assign _zz_243 = {{{decode_INSTRUCTION[31],decode_INSTRUCTION[7]},decode_INSTRUCTION[30 : 25]},decode_INSTRUCTION[11 : 8]};
  assign _zz_244 = {{_zz_69,{{{decode_INSTRUCTION[31],decode_INSTRUCTION[19 : 12]},decode_INSTRUCTION[20]},decode_INSTRUCTION[30 : 21]}},1'b0};
  assign _zz_245 = {{_zz_71,{{{decode_INSTRUCTION[31],decode_INSTRUCTION[7]},decode_INSTRUCTION[30 : 25]},decode_INSTRUCTION[11 : 8]}},1'b0};
  assign _zz_246 = {{{decode_INSTRUCTION[31],decode_INSTRUCTION[19 : 12]},decode_INSTRUCTION[20]},decode_INSTRUCTION[30 : 21]};
  assign _zz_247 = {{{decode_INSTRUCTION[31],decode_INSTRUCTION[7]},decode_INSTRUCTION[30 : 25]},decode_INSTRUCTION[11 : 8]};
  assign _zz_248 = (writeBack_MEMORY_WR ? (3'b111) : (3'b101));
  assign _zz_249 = (writeBack_MEMORY_WR ? (3'b110) : (3'b100));
  assign _zz_250 = execute_SRC_LESS;
  assign _zz_251 = (3'b100);
  assign _zz_252 = decode_INSTRUCTION[19 : 15];
  assign _zz_253 = decode_INSTRUCTION[31 : 20];
  assign _zz_254 = {decode_INSTRUCTION[31 : 25],decode_INSTRUCTION[11 : 7]};
  assign _zz_255 = ($signed(_zz_256) + $signed(_zz_259));
  assign _zz_256 = ($signed(_zz_257) + $signed(_zz_258));
  assign _zz_257 = execute_SRC1;
  assign _zz_258 = (execute_SRC_USE_SUB_LESS ? (~ execute_SRC2) : execute_SRC2);
  assign _zz_259 = (execute_SRC_USE_SUB_LESS ? _zz_260 : _zz_261);
  assign _zz_260 = 32'h00000001;
  assign _zz_261 = 32'h0;
  assign _zz_262 = {{14{writeBack_MUL_LOW[51]}}, writeBack_MUL_LOW};
  assign _zz_263 = ({32'd0,writeBack_MUL_HH} <<< 32);
  assign _zz_264 = writeBack_MUL_LOW[31 : 0];
  assign _zz_265 = writeBack_MulPlugin_result[63 : 32];
  assign _zz_266 = memory_DivPlugin_div_counter_willIncrement;
  assign _zz_267 = {5'd0, _zz_266};
  assign _zz_268 = {1'd0, memory_DivPlugin_rs2};
  assign _zz_269 = memory_DivPlugin_div_stage_0_remainderMinusDenominator[31:0];
  assign _zz_270 = memory_DivPlugin_div_stage_0_remainderShifted[31:0];
  assign _zz_271 = {_zz_105,(! memory_DivPlugin_div_stage_0_remainderMinusDenominator[32])};
  assign _zz_272 = _zz_273;
  assign _zz_273 = _zz_274;
  assign _zz_274 = ({1'b0,(memory_DivPlugin_div_needRevert ? (~ _zz_106) : _zz_106)} + _zz_276);
  assign _zz_275 = memory_DivPlugin_div_needRevert;
  assign _zz_276 = {32'd0, _zz_275};
  assign _zz_277 = _zz_108;
  assign _zz_278 = {32'd0, _zz_277};
  assign _zz_279 = _zz_107;
  assign _zz_280 = {31'd0, _zz_279};
  assign _zz_281 = execute_INSTRUCTION[31 : 20];
  assign _zz_282 = {{{execute_INSTRUCTION[31],execute_INSTRUCTION[19 : 12]},execute_INSTRUCTION[20]},execute_INSTRUCTION[30 : 21]};
  assign _zz_283 = {{{execute_INSTRUCTION[31],execute_INSTRUCTION[7]},execute_INSTRUCTION[30 : 25]},execute_INSTRUCTION[11 : 8]};
  assign _zz_284 = {_zz_123,execute_INSTRUCTION[31 : 20]};
  assign _zz_285 = {{_zz_125,{{{execute_INSTRUCTION[31],execute_INSTRUCTION[19 : 12]},execute_INSTRUCTION[20]},execute_INSTRUCTION[30 : 21]}},1'b0};
  assign _zz_286 = {{_zz_127,{{{execute_INSTRUCTION[31],execute_INSTRUCTION[7]},execute_INSTRUCTION[30 : 25]},execute_INSTRUCTION[11 : 8]}},1'b0};
  assign _zz_287 = execute_INSTRUCTION[31 : 20];
  assign _zz_288 = {{{execute_INSTRUCTION[31],execute_INSTRUCTION[19 : 12]},execute_INSTRUCTION[20]},execute_INSTRUCTION[30 : 21]};
  assign _zz_289 = {{{execute_INSTRUCTION[31],execute_INSTRUCTION[7]},execute_INSTRUCTION[30 : 25]},execute_INSTRUCTION[11 : 8]};
  assign _zz_290 = (3'b100);
  assign _zz_291 = (_zz_138 & (~ _zz_292));
  assign _zz_292 = (_zz_138 - (2'b01));
  assign _zz_293 = execute_CsrPlugin_writeData[7 : 7];
  assign _zz_294 = execute_CsrPlugin_writeData[3 : 3];
  assign _zz_295 = execute_CsrPlugin_writeData[3 : 3];
  assign _zz_296 = execute_CsrPlugin_writeData[11 : 11];
  assign _zz_297 = execute_CsrPlugin_writeData[7 : 7];
  assign _zz_298 = execute_CsrPlugin_writeData[3 : 3];
  assign _zz_299 = 1'b1;
  assign _zz_300 = 1'b1;
  assign _zz_301 = {_zz_56,_zz_55};
  assign _zz_302 = 32'h0000107f;
  assign _zz_303 = (decode_INSTRUCTION & 32'h0000207f);
  assign _zz_304 = 32'h00002073;
  assign _zz_305 = ((decode_INSTRUCTION & 32'h0000407f) == 32'h00004063);
  assign _zz_306 = ((decode_INSTRUCTION & 32'h0000207f) == 32'h00002013);
  assign _zz_307 = {((decode_INSTRUCTION & 32'h0000603f) == 32'h00000023),{((decode_INSTRUCTION & 32'h0000207f) == 32'h00000003),{((decode_INSTRUCTION & _zz_308) == 32'h00000003),{(_zz_309 == _zz_310),{_zz_311,{_zz_312,_zz_313}}}}}};
  assign _zz_308 = 32'h0000505f;
  assign _zz_309 = (decode_INSTRUCTION & 32'h0000707b);
  assign _zz_310 = 32'h00000063;
  assign _zz_311 = ((decode_INSTRUCTION & 32'h0000607f) == 32'h0000000f);
  assign _zz_312 = ((decode_INSTRUCTION & 32'hfc00007f) == 32'h00000033);
  assign _zz_313 = {((decode_INSTRUCTION & 32'h01f0707f) == 32'h0000500f),{((decode_INSTRUCTION & 32'hbc00707f) == 32'h00005013),{((decode_INSTRUCTION & _zz_314) == 32'h00001013),{(_zz_315 == _zz_316),{_zz_317,{_zz_318,_zz_319}}}}}};
  assign _zz_314 = 32'hfc00307f;
  assign _zz_315 = (decode_INSTRUCTION & 32'hbe00707f);
  assign _zz_316 = 32'h00005033;
  assign _zz_317 = ((decode_INSTRUCTION & 32'hbe00707f) == 32'h00000033);
  assign _zz_318 = ((decode_INSTRUCTION & 32'hdfffffff) == 32'h10200073);
  assign _zz_319 = {((decode_INSTRUCTION & 32'hffefffff) == 32'h00000073),((decode_INSTRUCTION & 32'hffffffff) == 32'h10500073)};
  assign _zz_320 = decode_INSTRUCTION[31];
  assign _zz_321 = decode_INSTRUCTION[31];
  assign _zz_322 = decode_INSTRUCTION[7];
  assign _zz_323 = 32'h10103050;
  assign _zz_324 = (decode_INSTRUCTION & 32'h10103050);
  assign _zz_325 = 32'h00000050;
  assign _zz_326 = ((decode_INSTRUCTION & 32'h10403050) == 32'h10000050);
  assign _zz_327 = {(_zz_332 == _zz_333),(_zz_334 == _zz_335)};
  assign _zz_328 = (2'b00);
  assign _zz_329 = ({_zz_87,_zz_336} != (2'b00));
  assign _zz_330 = (_zz_337 != (1'b0));
  assign _zz_331 = {(_zz_338 != _zz_339),{_zz_340,{_zz_341,_zz_342}}};
  assign _zz_332 = (decode_INSTRUCTION & 32'h00001050);
  assign _zz_333 = 32'h00001050;
  assign _zz_334 = (decode_INSTRUCTION & 32'h00002050);
  assign _zz_335 = 32'h00002050;
  assign _zz_336 = ((decode_INSTRUCTION & 32'h0000001c) == 32'h00000004);
  assign _zz_337 = ((decode_INSTRUCTION & 32'h00000058) == 32'h00000040);
  assign _zz_338 = _zz_88;
  assign _zz_339 = (1'b0);
  assign _zz_340 = (_zz_88 != (1'b0));
  assign _zz_341 = ((_zz_343 == _zz_344) != (1'b0));
  assign _zz_342 = {(_zz_345 != (1'b0)),{(_zz_346 != _zz_347),{_zz_348,{_zz_349,_zz_350}}}};
  assign _zz_343 = (decode_INSTRUCTION & 32'h02004064);
  assign _zz_344 = 32'h02004020;
  assign _zz_345 = ((decode_INSTRUCTION & 32'h02004074) == 32'h02000030);
  assign _zz_346 = {(_zz_351 == _zz_352),(_zz_353 == _zz_354)};
  assign _zz_347 = (2'b00);
  assign _zz_348 = ({_zz_355,{_zz_356,_zz_357}} != (3'b000));
  assign _zz_349 = (_zz_358 != (1'b0));
  assign _zz_350 = {(_zz_359 != _zz_360),{_zz_361,{_zz_362,_zz_363}}};
  assign _zz_351 = (decode_INSTRUCTION & 32'h00007034);
  assign _zz_352 = 32'h00005010;
  assign _zz_353 = (decode_INSTRUCTION & 32'h02007064);
  assign _zz_354 = 32'h00005020;
  assign _zz_355 = ((decode_INSTRUCTION & 32'h40003054) == 32'h40001010);
  assign _zz_356 = ((decode_INSTRUCTION & _zz_364) == 32'h00001010);
  assign _zz_357 = ((decode_INSTRUCTION & _zz_365) == 32'h00001010);
  assign _zz_358 = ((decode_INSTRUCTION & 32'h00000064) == 32'h00000024);
  assign _zz_359 = ((decode_INSTRUCTION & _zz_366) == 32'h00001000);
  assign _zz_360 = (1'b0);
  assign _zz_361 = ((_zz_367 == _zz_368) != (1'b0));
  assign _zz_362 = ({_zz_369,_zz_370} != (2'b00));
  assign _zz_363 = {(_zz_371 != _zz_372),{_zz_373,{_zz_374,_zz_375}}};
  assign _zz_364 = 32'h00007034;
  assign _zz_365 = 32'h02007054;
  assign _zz_366 = 32'h00001000;
  assign _zz_367 = (decode_INSTRUCTION & 32'h00003000);
  assign _zz_368 = 32'h00002000;
  assign _zz_369 = ((decode_INSTRUCTION & _zz_376) == 32'h00002000);
  assign _zz_370 = ((decode_INSTRUCTION & _zz_377) == 32'h00001000);
  assign _zz_371 = ((decode_INSTRUCTION & _zz_378) == 32'h00004008);
  assign _zz_372 = (1'b0);
  assign _zz_373 = ({_zz_379,_zz_380} != (2'b00));
  assign _zz_374 = ({_zz_381,_zz_382} != 5'h0);
  assign _zz_375 = {(_zz_383 != _zz_384),{_zz_385,{_zz_386,_zz_387}}};
  assign _zz_376 = 32'h00002010;
  assign _zz_377 = 32'h00005000;
  assign _zz_378 = 32'h00004048;
  assign _zz_379 = ((decode_INSTRUCTION & 32'h00000034) == 32'h00000020);
  assign _zz_380 = ((decode_INSTRUCTION & 32'h00000064) == 32'h00000020);
  assign _zz_381 = ((decode_INSTRUCTION & _zz_388) == 32'h00002040);
  assign _zz_382 = {(_zz_389 == _zz_390),{_zz_391,{_zz_392,_zz_393}}};
  assign _zz_383 = ((decode_INSTRUCTION & _zz_394) == 32'h00000020);
  assign _zz_384 = (1'b0);
  assign _zz_385 = ({_zz_395,{_zz_396,_zz_397}} != 5'h0);
  assign _zz_386 = ({_zz_398,_zz_399} != 5'h0);
  assign _zz_387 = {(_zz_400 != _zz_401),{_zz_402,{_zz_403,_zz_404}}};
  assign _zz_388 = 32'h00002040;
  assign _zz_389 = (decode_INSTRUCTION & 32'h00001040);
  assign _zz_390 = 32'h00001040;
  assign _zz_391 = ((decode_INSTRUCTION & _zz_405) == 32'h00000040);
  assign _zz_392 = (_zz_406 == _zz_407);
  assign _zz_393 = (_zz_408 == _zz_409);
  assign _zz_394 = 32'h00000020;
  assign _zz_395 = ((decode_INSTRUCTION & _zz_410) == 32'h00000040);
  assign _zz_396 = _zz_86;
  assign _zz_397 = {_zz_411,{_zz_412,_zz_413}};
  assign _zz_398 = _zz_86;
  assign _zz_399 = {_zz_414,{_zz_415,_zz_416}};
  assign _zz_400 = {_zz_87,{_zz_417,_zz_418}};
  assign _zz_401 = 6'h0;
  assign _zz_402 = ({_zz_419,_zz_420} != (2'b00));
  assign _zz_403 = (_zz_421 != _zz_422);
  assign _zz_404 = {_zz_423,{_zz_424,_zz_425}};
  assign _zz_405 = 32'h00100040;
  assign _zz_406 = (decode_INSTRUCTION & 32'h00000050);
  assign _zz_407 = 32'h00000040;
  assign _zz_408 = (decode_INSTRUCTION & 32'h00000038);
  assign _zz_409 = 32'h0;
  assign _zz_410 = 32'h00000040;
  assign _zz_411 = ((decode_INSTRUCTION & _zz_426) == 32'h00004020);
  assign _zz_412 = (_zz_427 == _zz_428);
  assign _zz_413 = (_zz_429 == _zz_430);
  assign _zz_414 = ((decode_INSTRUCTION & _zz_431) == 32'h00002010);
  assign _zz_415 = (_zz_432 == _zz_433);
  assign _zz_416 = {_zz_434,_zz_435};
  assign _zz_417 = (_zz_436 == _zz_437);
  assign _zz_418 = {_zz_438,{_zz_439,_zz_440}};
  assign _zz_419 = _zz_86;
  assign _zz_420 = (_zz_441 == _zz_442);
  assign _zz_421 = {_zz_86,_zz_443};
  assign _zz_422 = (2'b00);
  assign _zz_423 = (_zz_444 != (1'b0));
  assign _zz_424 = (_zz_445 != _zz_446);
  assign _zz_425 = {_zz_447,{_zz_448,_zz_449}};
  assign _zz_426 = 32'h00004020;
  assign _zz_427 = (decode_INSTRUCTION & 32'h00000030);
  assign _zz_428 = 32'h00000010;
  assign _zz_429 = (decode_INSTRUCTION & 32'h02000020);
  assign _zz_430 = 32'h00000020;
  assign _zz_431 = 32'h00002030;
  assign _zz_432 = (decode_INSTRUCTION & 32'h00001030);
  assign _zz_433 = 32'h00000010;
  assign _zz_434 = ((decode_INSTRUCTION & _zz_450) == 32'h00002020);
  assign _zz_435 = ((decode_INSTRUCTION & _zz_451) == 32'h00000020);
  assign _zz_436 = (decode_INSTRUCTION & 32'h00001010);
  assign _zz_437 = 32'h00001010;
  assign _zz_438 = ((decode_INSTRUCTION & _zz_452) == 32'h00002010);
  assign _zz_439 = (_zz_453 == _zz_454);
  assign _zz_440 = {_zz_455,_zz_456};
  assign _zz_441 = (decode_INSTRUCTION & 32'h00000070);
  assign _zz_442 = 32'h00000020;
  assign _zz_443 = ((decode_INSTRUCTION & _zz_457) == 32'h0);
  assign _zz_444 = ((decode_INSTRUCTION & _zz_458) == 32'h00004010);
  assign _zz_445 = (_zz_459 == _zz_460);
  assign _zz_446 = (1'b0);
  assign _zz_447 = ({_zz_461,_zz_462} != (4'b0000));
  assign _zz_448 = (_zz_463 != _zz_464);
  assign _zz_449 = {_zz_465,{_zz_466,_zz_467}};
  assign _zz_450 = 32'h02002060;
  assign _zz_451 = 32'h02003020;
  assign _zz_452 = 32'h00002010;
  assign _zz_453 = (decode_INSTRUCTION & 32'h00000050);
  assign _zz_454 = 32'h00000010;
  assign _zz_455 = ((decode_INSTRUCTION & 32'h0000000c) == 32'h00000004);
  assign _zz_456 = ((decode_INSTRUCTION & 32'h00000028) == 32'h0);
  assign _zz_457 = 32'h00000020;
  assign _zz_458 = 32'h00004014;
  assign _zz_459 = (decode_INSTRUCTION & 32'h00006014);
  assign _zz_460 = 32'h00002010;
  assign _zz_461 = ((decode_INSTRUCTION & _zz_468) == 32'h0);
  assign _zz_462 = {(_zz_469 == _zz_470),{_zz_471,_zz_472}};
  assign _zz_463 = ((decode_INSTRUCTION & _zz_473) == 32'h0);
  assign _zz_464 = (1'b0);
  assign _zz_465 = ({_zz_474,{_zz_475,_zz_476}} != (3'b000));
  assign _zz_466 = ({_zz_477,_zz_478} != (2'b00));
  assign _zz_467 = {(_zz_479 != _zz_480),(_zz_481 != _zz_482)};
  assign _zz_468 = 32'h00000044;
  assign _zz_469 = (decode_INSTRUCTION & 32'h00000018);
  assign _zz_470 = 32'h0;
  assign _zz_471 = ((decode_INSTRUCTION & 32'h00006004) == 32'h00002000);
  assign _zz_472 = ((decode_INSTRUCTION & 32'h00005004) == 32'h00001000);
  assign _zz_473 = 32'h00000058;
  assign _zz_474 = ((decode_INSTRUCTION & 32'h00000044) == 32'h00000040);
  assign _zz_475 = ((decode_INSTRUCTION & _zz_483) == 32'h00002010);
  assign _zz_476 = ((decode_INSTRUCTION & _zz_484) == 32'h40000030);
  assign _zz_477 = ((decode_INSTRUCTION & _zz_485) == 32'h00000004);
  assign _zz_478 = _zz_85;
  assign _zz_479 = {(_zz_486 == _zz_487),_zz_85};
  assign _zz_480 = (2'b00);
  assign _zz_481 = ((decode_INSTRUCTION & _zz_488) == 32'h00001008);
  assign _zz_482 = (1'b0);
  assign _zz_483 = 32'h00002014;
  assign _zz_484 = 32'h40000034;
  assign _zz_485 = 32'h00000014;
  assign _zz_486 = (decode_INSTRUCTION & 32'h00000044);
  assign _zz_487 = 32'h00000004;
  assign _zz_488 = 32'h00005048;
  assign _zz_489 = execute_INSTRUCTION[31];
  assign _zz_490 = execute_INSTRUCTION[31];
  assign _zz_491 = execute_INSTRUCTION[7];
  initial begin
    $readmemb("efxSapphireSoc.v_toplevel_system_cpu_logic_cpu_RegFilePlugin_regFile.bin",RegFilePlugin_regFile);
  end
  always @ (posedge io_systemClk) begin
    if(_zz_299) begin
      _zz_167 <= RegFilePlugin_regFile[decode_RegFilePlugin_regFileReadAddress1];
    end
  end

  always @ (posedge io_systemClk) begin
    if(_zz_300) begin
      _zz_168 <= RegFilePlugin_regFile[decode_RegFilePlugin_regFileReadAddress2];
    end
  end

  always @ (posedge io_systemClk) begin
    if(_zz_38) begin
      RegFilePlugin_regFile[lastStageRegFileWrite_payload_address] <= lastStageRegFileWrite_payload_data;
    end
  end

  InstructionCache_e12a9decc0704226832aec4017b36e8d IBusCachedPlugin_cache (
    .io_flush                                     (_zz_149                                                              ), //i
    .io_cpu_prefetch_isValid                      (_zz_150                                                              ), //i
    .io_cpu_prefetch_haltIt                       (IBusCachedPlugin_cache_io_cpu_prefetch_haltIt                        ), //o
    .io_cpu_prefetch_pc                           (IBusCachedPlugin_iBusRsp_stages_0_input_payload[31:0]                ), //i
    .io_cpu_fetch_isValid                         (_zz_151                                                              ), //i
    .io_cpu_fetch_isStuck                         (_zz_152                                                              ), //i
    .io_cpu_fetch_isRemoved                       (IBusCachedPlugin_externalFlush                                       ), //i
    .io_cpu_fetch_pc                              (IBusCachedPlugin_iBusRsp_stages_1_input_payload[31:0]                ), //i
    .io_cpu_fetch_data                            (IBusCachedPlugin_cache_io_cpu_fetch_data[31:0]                       ), //o
    .io_cpu_fetch_mmuBus_cmd_isValid              (IBusCachedPlugin_cache_io_cpu_fetch_mmuBus_cmd_isValid               ), //o
    .io_cpu_fetch_mmuBus_cmd_virtualAddress       (IBusCachedPlugin_cache_io_cpu_fetch_mmuBus_cmd_virtualAddress[31:0]  ), //o
    .io_cpu_fetch_mmuBus_cmd_bypassTranslation    (IBusCachedPlugin_cache_io_cpu_fetch_mmuBus_cmd_bypassTranslation     ), //o
    .io_cpu_fetch_mmuBus_rsp_physicalAddress      (IBusCachedPlugin_mmuBus_rsp_physicalAddress[31:0]                    ), //i
    .io_cpu_fetch_mmuBus_rsp_isIoAccess           (IBusCachedPlugin_mmuBus_rsp_isIoAccess                               ), //i
    .io_cpu_fetch_mmuBus_rsp_allowRead            (IBusCachedPlugin_mmuBus_rsp_allowRead                                ), //i
    .io_cpu_fetch_mmuBus_rsp_allowWrite           (IBusCachedPlugin_mmuBus_rsp_allowWrite                               ), //i
    .io_cpu_fetch_mmuBus_rsp_allowExecute         (IBusCachedPlugin_mmuBus_rsp_allowExecute                             ), //i
    .io_cpu_fetch_mmuBus_rsp_exception            (IBusCachedPlugin_mmuBus_rsp_exception                                ), //i
    .io_cpu_fetch_mmuBus_rsp_refilling            (IBusCachedPlugin_mmuBus_rsp_refilling                                ), //i
    .io_cpu_fetch_mmuBus_end                      (IBusCachedPlugin_cache_io_cpu_fetch_mmuBus_end                       ), //o
    .io_cpu_fetch_mmuBus_busy                     (IBusCachedPlugin_mmuBus_busy                                         ), //i
    .io_cpu_fetch_physicalAddress                 (IBusCachedPlugin_cache_io_cpu_fetch_physicalAddress[31:0]            ), //o
    .io_cpu_fetch_haltIt                          (IBusCachedPlugin_cache_io_cpu_fetch_haltIt                           ), //o
    .io_cpu_decode_isValid                        (_zz_153                                                              ), //i
    .io_cpu_decode_isStuck                        (_zz_154                                                              ), //i
    .io_cpu_decode_pc                             (IBusCachedPlugin_iBusRsp_stages_2_input_payload[31:0]                ), //i
    .io_cpu_decode_physicalAddress                (IBusCachedPlugin_cache_io_cpu_decode_physicalAddress[31:0]           ), //o
    .io_cpu_decode_data                           (IBusCachedPlugin_cache_io_cpu_decode_data[31:0]                      ), //o
    .io_cpu_decode_cacheMiss                      (IBusCachedPlugin_cache_io_cpu_decode_cacheMiss                       ), //o
    .io_cpu_decode_error                          (IBusCachedPlugin_cache_io_cpu_decode_error                           ), //o
    .io_cpu_decode_mmuRefilling                   (IBusCachedPlugin_cache_io_cpu_decode_mmuRefilling                    ), //o
    .io_cpu_decode_mmuException                   (IBusCachedPlugin_cache_io_cpu_decode_mmuException                    ), //o
    .io_cpu_decode_isUser                         (_zz_155                                                              ), //i
    .io_cpu_fill_valid                            (_zz_156                                                              ), //i
    .io_cpu_fill_payload                          (IBusCachedPlugin_cache_io_cpu_decode_physicalAddress[31:0]           ), //i
    .io_mem_cmd_valid                             (IBusCachedPlugin_cache_io_mem_cmd_valid                              ), //o
    .io_mem_cmd_ready                             (iBus_cmd_ready                                                       ), //i
    .io_mem_cmd_payload_address                   (IBusCachedPlugin_cache_io_mem_cmd_payload_address[31:0]              ), //o
    .io_mem_cmd_payload_size                      (IBusCachedPlugin_cache_io_mem_cmd_payload_size[2:0]                  ), //o
    .io_mem_rsp_valid                             (iBus_rsp_valid                                                       ), //i
    .io_mem_rsp_payload_data                      (iBus_rsp_payload_data[31:0]                                          ), //i
    .io_mem_rsp_payload_error                     (iBus_rsp_payload_error                                               ), //i
    ._zz_11                                       (_zz_141[2:0]                                                         ), //i
    ._zz_12                                       (IBusCachedPlugin_injectionPort_payload[31:0]                         ), //i
    .io_systemClk                                 (io_systemClk                                                         ), //i
    .systemCd_logic_outputReset                   (systemCd_logic_outputReset                                           )  //i
  );
  DataCache_e12a9decc0704226832aec4017b36e8d dataCache_1 (
    .io_cpu_execute_isValid                        (_zz_157                                                    ), //i
    .io_cpu_execute_address                        (_zz_158[31:0]                                              ), //i
    .io_cpu_execute_args_wr                        (execute_MEMORY_WR                                          ), //i
    .io_cpu_execute_args_data                      (_zz_79[31:0]                                               ), //i
    .io_cpu_execute_args_size                      (execute_DBusCachedPlugin_size[1:0]                         ), //i
    .io_cpu_memory_isValid                         (_zz_159                                                    ), //i
    .io_cpu_memory_isStuck                         (memory_arbitration_isStuck                                 ), //i
    .io_cpu_memory_isRemoved                       (memory_arbitration_removeIt                                ), //i
    .io_cpu_memory_isWrite                         (dataCache_1_io_cpu_memory_isWrite                          ), //o
    .io_cpu_memory_address                         (_zz_160[31:0]                                              ), //i
    .io_cpu_memory_mmuBus_cmd_isValid              (dataCache_1_io_cpu_memory_mmuBus_cmd_isValid               ), //o
    .io_cpu_memory_mmuBus_cmd_virtualAddress       (dataCache_1_io_cpu_memory_mmuBus_cmd_virtualAddress[31:0]  ), //o
    .io_cpu_memory_mmuBus_cmd_bypassTranslation    (dataCache_1_io_cpu_memory_mmuBus_cmd_bypassTranslation     ), //o
    .io_cpu_memory_mmuBus_rsp_physicalAddress      (DBusCachedPlugin_mmuBus_rsp_physicalAddress[31:0]          ), //i
    .io_cpu_memory_mmuBus_rsp_isIoAccess           (_zz_161                                                    ), //i
    .io_cpu_memory_mmuBus_rsp_allowRead            (DBusCachedPlugin_mmuBus_rsp_allowRead                      ), //i
    .io_cpu_memory_mmuBus_rsp_allowWrite           (DBusCachedPlugin_mmuBus_rsp_allowWrite                     ), //i
    .io_cpu_memory_mmuBus_rsp_allowExecute         (DBusCachedPlugin_mmuBus_rsp_allowExecute                   ), //i
    .io_cpu_memory_mmuBus_rsp_exception            (DBusCachedPlugin_mmuBus_rsp_exception                      ), //i
    .io_cpu_memory_mmuBus_rsp_refilling            (DBusCachedPlugin_mmuBus_rsp_refilling                      ), //i
    .io_cpu_memory_mmuBus_end                      (dataCache_1_io_cpu_memory_mmuBus_end                       ), //o
    .io_cpu_memory_mmuBus_busy                     (DBusCachedPlugin_mmuBus_busy                               ), //i
    .io_cpu_writeBack_isValid                      (_zz_162                                                    ), //i
    .io_cpu_writeBack_isStuck                      (writeBack_arbitration_isStuck                              ), //i
    .io_cpu_writeBack_isUser                       (_zz_163                                                    ), //i
    .io_cpu_writeBack_haltIt                       (dataCache_1_io_cpu_writeBack_haltIt                        ), //o
    .io_cpu_writeBack_isWrite                      (dataCache_1_io_cpu_writeBack_isWrite                       ), //o
    .io_cpu_writeBack_data                         (dataCache_1_io_cpu_writeBack_data[31:0]                    ), //o
    .io_cpu_writeBack_address                      (_zz_164[31:0]                                              ), //i
    .io_cpu_writeBack_mmuException                 (dataCache_1_io_cpu_writeBack_mmuException                  ), //o
    .io_cpu_writeBack_unalignedAccess              (dataCache_1_io_cpu_writeBack_unalignedAccess               ), //o
    .io_cpu_writeBack_accessError                  (dataCache_1_io_cpu_writeBack_accessError                   ), //o
    .io_cpu_redo                                   (dataCache_1_io_cpu_redo                                    ), //o
    .io_cpu_flush_valid                            (_zz_165                                                    ), //i
    .io_cpu_flush_ready                            (dataCache_1_io_cpu_flush_ready                             ), //o
    .io_mem_cmd_valid                              (dataCache_1_io_mem_cmd_valid                               ), //o
    .io_mem_cmd_ready                              (_zz_166                                                    ), //i
    .io_mem_cmd_payload_wr                         (dataCache_1_io_mem_cmd_payload_wr                          ), //o
    .io_mem_cmd_payload_address                    (dataCache_1_io_mem_cmd_payload_address[31:0]               ), //o
    .io_mem_cmd_payload_data                       (dataCache_1_io_mem_cmd_payload_data[31:0]                  ), //o
    .io_mem_cmd_payload_mask                       (dataCache_1_io_mem_cmd_payload_mask[3:0]                   ), //o
    .io_mem_cmd_payload_length                     (dataCache_1_io_mem_cmd_payload_length[2:0]                 ), //o
    .io_mem_cmd_payload_last                       (dataCache_1_io_mem_cmd_payload_last                        ), //o
    .io_mem_rsp_valid                              (dBus_rsp_regNext_valid                                     ), //i
    .io_mem_rsp_payload_data                       (dBus_rsp_regNext_payload_data[31:0]                        ), //i
    .io_mem_rsp_payload_error                      (dBus_rsp_regNext_payload_error                             ), //i
    .io_systemClk                                  (io_systemClk                                               ), //i
    .systemCd_logic_outputReset                    (systemCd_logic_outputReset                                 )  //i
  );
  always @(*) begin
    case(_zz_301)
      2'b00 : begin
        _zz_169 = DBusCachedPlugin_redoBranch_payload;
      end
      2'b01 : begin
        _zz_169 = CsrPlugin_jumpInterface_payload;
      end
      2'b10 : begin
        _zz_169 = BranchPlugin_jumpInterface_payload;
      end
      default : begin
        _zz_169 = IBusCachedPlugin_predictionJumpInterface_payload;
      end
    endcase
  end

  `ifndef SYNTHESIS
  always @(*) begin
    case(_zz_1)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_1_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_1_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_1_string = "ECALL";
      default : _zz_1_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_2)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_2_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_2_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_2_string = "ECALL";
      default : _zz_2_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_3)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_3_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_3_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_3_string = "ECALL";
      default : _zz_3_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_4)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_4_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_4_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_4_string = "ECALL";
      default : _zz_4_string = "?????";
    endcase
  end
  always @(*) begin
    case(decode_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : decode_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : decode_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : decode_ENV_CTRL_string = "ECALL";
      default : decode_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_5)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_5_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_5_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_5_string = "ECALL";
      default : _zz_5_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_6)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_6_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_6_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_6_string = "ECALL";
      default : _zz_6_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_7)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_7_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_7_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_7_string = "ECALL";
      default : _zz_7_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_8)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_8_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_8_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_8_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_8_string = "JALR";
      default : _zz_8_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_9)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_9_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_9_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_9_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_9_string = "JALR";
      default : _zz_9_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_10)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_10_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_10_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_10_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_10_string = "SRA_1    ";
      default : _zz_10_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_11)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_11_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_11_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_11_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_11_string = "SRA_1    ";
      default : _zz_11_string = "?????????";
    endcase
  end
  always @(*) begin
    case(decode_SHIFT_CTRL)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : decode_SHIFT_CTRL_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : decode_SHIFT_CTRL_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : decode_SHIFT_CTRL_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : decode_SHIFT_CTRL_string = "SRA_1    ";
      default : decode_SHIFT_CTRL_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_12)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_12_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_12_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_12_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_12_string = "SRA_1    ";
      default : _zz_12_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_13)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_13_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_13_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_13_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_13_string = "SRA_1    ";
      default : _zz_13_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_14)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_14_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_14_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_14_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_14_string = "SRA_1    ";
      default : _zz_14_string = "?????????";
    endcase
  end
  always @(*) begin
    case(decode_ALU_BITWISE_CTRL)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : decode_ALU_BITWISE_CTRL_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : decode_ALU_BITWISE_CTRL_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : decode_ALU_BITWISE_CTRL_string = "AND_1";
      default : decode_ALU_BITWISE_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_15)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_15_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_15_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_15_string = "AND_1";
      default : _zz_15_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_16)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_16_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_16_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_16_string = "AND_1";
      default : _zz_16_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_17)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_17_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_17_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_17_string = "AND_1";
      default : _zz_17_string = "?????";
    endcase
  end
  always @(*) begin
    case(decode_ALU_CTRL)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : decode_ALU_CTRL_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : decode_ALU_CTRL_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : decode_ALU_CTRL_string = "BITWISE ";
      default : decode_ALU_CTRL_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_18)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_18_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_18_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_18_string = "BITWISE ";
      default : _zz_18_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_19)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_19_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_19_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_19_string = "BITWISE ";
      default : _zz_19_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_20)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_20_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_20_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_20_string = "BITWISE ";
      default : _zz_20_string = "????????";
    endcase
  end
  always @(*) begin
    case(memory_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : memory_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : memory_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : memory_ENV_CTRL_string = "ECALL";
      default : memory_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_22)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_22_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_22_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_22_string = "ECALL";
      default : _zz_22_string = "?????";
    endcase
  end
  always @(*) begin
    case(execute_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : execute_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : execute_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : execute_ENV_CTRL_string = "ECALL";
      default : execute_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_23)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_23_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_23_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_23_string = "ECALL";
      default : _zz_23_string = "?????";
    endcase
  end
  always @(*) begin
    case(writeBack_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : writeBack_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : writeBack_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : writeBack_ENV_CTRL_string = "ECALL";
      default : writeBack_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_24)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_24_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_24_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_24_string = "ECALL";
      default : _zz_24_string = "?????";
    endcase
  end
  always @(*) begin
    case(execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_INC : execute_BRANCH_CTRL_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : execute_BRANCH_CTRL_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : execute_BRANCH_CTRL_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : execute_BRANCH_CTRL_string = "JALR";
      default : execute_BRANCH_CTRL_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_25)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_25_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_25_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_25_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_25_string = "JALR";
      default : _zz_25_string = "????";
    endcase
  end
  always @(*) begin
    case(memory_SHIFT_CTRL)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : memory_SHIFT_CTRL_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : memory_SHIFT_CTRL_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : memory_SHIFT_CTRL_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : memory_SHIFT_CTRL_string = "SRA_1    ";
      default : memory_SHIFT_CTRL_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_27)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_27_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_27_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_27_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_27_string = "SRA_1    ";
      default : _zz_27_string = "?????????";
    endcase
  end
  always @(*) begin
    case(execute_SHIFT_CTRL)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : execute_SHIFT_CTRL_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : execute_SHIFT_CTRL_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : execute_SHIFT_CTRL_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : execute_SHIFT_CTRL_string = "SRA_1    ";
      default : execute_SHIFT_CTRL_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_28)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_28_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_28_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_28_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_28_string = "SRA_1    ";
      default : _zz_28_string = "?????????";
    endcase
  end
  always @(*) begin
    case(decode_SRC2_CTRL)
      `Src2CtrlEnum_defaultEncoding_RS : decode_SRC2_CTRL_string = "RS ";
      `Src2CtrlEnum_defaultEncoding_IMI : decode_SRC2_CTRL_string = "IMI";
      `Src2CtrlEnum_defaultEncoding_IMS : decode_SRC2_CTRL_string = "IMS";
      `Src2CtrlEnum_defaultEncoding_PC : decode_SRC2_CTRL_string = "PC ";
      default : decode_SRC2_CTRL_string = "???";
    endcase
  end
  always @(*) begin
    case(_zz_31)
      `Src2CtrlEnum_defaultEncoding_RS : _zz_31_string = "RS ";
      `Src2CtrlEnum_defaultEncoding_IMI : _zz_31_string = "IMI";
      `Src2CtrlEnum_defaultEncoding_IMS : _zz_31_string = "IMS";
      `Src2CtrlEnum_defaultEncoding_PC : _zz_31_string = "PC ";
      default : _zz_31_string = "???";
    endcase
  end
  always @(*) begin
    case(decode_SRC1_CTRL)
      `Src1CtrlEnum_defaultEncoding_RS : decode_SRC1_CTRL_string = "RS          ";
      `Src1CtrlEnum_defaultEncoding_IMU : decode_SRC1_CTRL_string = "IMU         ";
      `Src1CtrlEnum_defaultEncoding_PC_INCREMENT : decode_SRC1_CTRL_string = "PC_INCREMENT";
      `Src1CtrlEnum_defaultEncoding_URS1 : decode_SRC1_CTRL_string = "URS1        ";
      default : decode_SRC1_CTRL_string = "????????????";
    endcase
  end
  always @(*) begin
    case(_zz_33)
      `Src1CtrlEnum_defaultEncoding_RS : _zz_33_string = "RS          ";
      `Src1CtrlEnum_defaultEncoding_IMU : _zz_33_string = "IMU         ";
      `Src1CtrlEnum_defaultEncoding_PC_INCREMENT : _zz_33_string = "PC_INCREMENT";
      `Src1CtrlEnum_defaultEncoding_URS1 : _zz_33_string = "URS1        ";
      default : _zz_33_string = "????????????";
    endcase
  end
  always @(*) begin
    case(execute_ALU_CTRL)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : execute_ALU_CTRL_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : execute_ALU_CTRL_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : execute_ALU_CTRL_string = "BITWISE ";
      default : execute_ALU_CTRL_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_34)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_34_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_34_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_34_string = "BITWISE ";
      default : _zz_34_string = "????????";
    endcase
  end
  always @(*) begin
    case(execute_ALU_BITWISE_CTRL)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : execute_ALU_BITWISE_CTRL_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : execute_ALU_BITWISE_CTRL_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : execute_ALU_BITWISE_CTRL_string = "AND_1";
      default : execute_ALU_BITWISE_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_35)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_35_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_35_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_35_string = "AND_1";
      default : _zz_35_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_39)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_39_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_39_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_39_string = "ECALL";
      default : _zz_39_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_40)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_40_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_40_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_40_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_40_string = "JALR";
      default : _zz_40_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_41)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_41_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_41_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_41_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_41_string = "SRA_1    ";
      default : _zz_41_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_42)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_42_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_42_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_42_string = "AND_1";
      default : _zz_42_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_43)
      `Src2CtrlEnum_defaultEncoding_RS : _zz_43_string = "RS ";
      `Src2CtrlEnum_defaultEncoding_IMI : _zz_43_string = "IMI";
      `Src2CtrlEnum_defaultEncoding_IMS : _zz_43_string = "IMS";
      `Src2CtrlEnum_defaultEncoding_PC : _zz_43_string = "PC ";
      default : _zz_43_string = "???";
    endcase
  end
  always @(*) begin
    case(_zz_44)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_44_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_44_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_44_string = "BITWISE ";
      default : _zz_44_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_45)
      `Src1CtrlEnum_defaultEncoding_RS : _zz_45_string = "RS          ";
      `Src1CtrlEnum_defaultEncoding_IMU : _zz_45_string = "IMU         ";
      `Src1CtrlEnum_defaultEncoding_PC_INCREMENT : _zz_45_string = "PC_INCREMENT";
      `Src1CtrlEnum_defaultEncoding_URS1 : _zz_45_string = "URS1        ";
      default : _zz_45_string = "????????????";
    endcase
  end
  always @(*) begin
    case(decode_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_INC : decode_BRANCH_CTRL_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : decode_BRANCH_CTRL_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : decode_BRANCH_CTRL_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : decode_BRANCH_CTRL_string = "JALR";
      default : decode_BRANCH_CTRL_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_48)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_48_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_48_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_48_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_48_string = "JALR";
      default : _zz_48_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_89)
      `Src1CtrlEnum_defaultEncoding_RS : _zz_89_string = "RS          ";
      `Src1CtrlEnum_defaultEncoding_IMU : _zz_89_string = "IMU         ";
      `Src1CtrlEnum_defaultEncoding_PC_INCREMENT : _zz_89_string = "PC_INCREMENT";
      `Src1CtrlEnum_defaultEncoding_URS1 : _zz_89_string = "URS1        ";
      default : _zz_89_string = "????????????";
    endcase
  end
  always @(*) begin
    case(_zz_90)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_90_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_90_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_90_string = "BITWISE ";
      default : _zz_90_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_91)
      `Src2CtrlEnum_defaultEncoding_RS : _zz_91_string = "RS ";
      `Src2CtrlEnum_defaultEncoding_IMI : _zz_91_string = "IMI";
      `Src2CtrlEnum_defaultEncoding_IMS : _zz_91_string = "IMS";
      `Src2CtrlEnum_defaultEncoding_PC : _zz_91_string = "PC ";
      default : _zz_91_string = "???";
    endcase
  end
  always @(*) begin
    case(_zz_92)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_92_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_92_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_92_string = "AND_1";
      default : _zz_92_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_93)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_93_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_93_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_93_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_93_string = "SRA_1    ";
      default : _zz_93_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_94)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_94_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_94_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_94_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_94_string = "JALR";
      default : _zz_94_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_95)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_95_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_95_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : _zz_95_string = "ECALL";
      default : _zz_95_string = "?????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_ALU_CTRL)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : decode_to_execute_ALU_CTRL_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : decode_to_execute_ALU_CTRL_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : decode_to_execute_ALU_CTRL_string = "BITWISE ";
      default : decode_to_execute_ALU_CTRL_string = "????????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_ALU_BITWISE_CTRL)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : decode_to_execute_ALU_BITWISE_CTRL_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : decode_to_execute_ALU_BITWISE_CTRL_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : decode_to_execute_ALU_BITWISE_CTRL_string = "AND_1";
      default : decode_to_execute_ALU_BITWISE_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_SHIFT_CTRL)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : decode_to_execute_SHIFT_CTRL_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : decode_to_execute_SHIFT_CTRL_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : decode_to_execute_SHIFT_CTRL_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : decode_to_execute_SHIFT_CTRL_string = "SRA_1    ";
      default : decode_to_execute_SHIFT_CTRL_string = "?????????";
    endcase
  end
  always @(*) begin
    case(execute_to_memory_SHIFT_CTRL)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : execute_to_memory_SHIFT_CTRL_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : execute_to_memory_SHIFT_CTRL_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : execute_to_memory_SHIFT_CTRL_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : execute_to_memory_SHIFT_CTRL_string = "SRA_1    ";
      default : execute_to_memory_SHIFT_CTRL_string = "?????????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_INC : decode_to_execute_BRANCH_CTRL_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : decode_to_execute_BRANCH_CTRL_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : decode_to_execute_BRANCH_CTRL_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : decode_to_execute_BRANCH_CTRL_string = "JALR";
      default : decode_to_execute_BRANCH_CTRL_string = "????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : decode_to_execute_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : decode_to_execute_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : decode_to_execute_ENV_CTRL_string = "ECALL";
      default : decode_to_execute_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(execute_to_memory_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : execute_to_memory_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : execute_to_memory_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : execute_to_memory_ENV_CTRL_string = "ECALL";
      default : execute_to_memory_ENV_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(memory_to_writeBack_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : memory_to_writeBack_ENV_CTRL_string = "NONE ";
      `EnvCtrlEnum_defaultEncoding_XRET : memory_to_writeBack_ENV_CTRL_string = "XRET ";
      `EnvCtrlEnum_defaultEncoding_ECALL : memory_to_writeBack_ENV_CTRL_string = "ECALL";
      default : memory_to_writeBack_ENV_CTRL_string = "?????";
    endcase
  end
  `endif

  assign memory_MUL_LOW = ($signed(_zz_207) + $signed(_zz_215));
  assign execute_BRANCH_CALC = {execute_BranchPlugin_branchAdder[31 : 1],(1'b0)};
  assign execute_BRANCH_DO = ((execute_PREDICTION_HAD_BRANCHED2 != execute_BRANCH_COND_RESULT) || execute_BranchPlugin_missAlignedTarget);
  assign memory_MUL_HH = execute_to_memory_MUL_HH;
  assign execute_MUL_HH = ($signed(execute_MulPlugin_aHigh) * $signed(execute_MulPlugin_bHigh));
  assign execute_MUL_HL = ($signed(execute_MulPlugin_aHigh) * $signed(execute_MulPlugin_bSLow));
  assign execute_MUL_LH = ($signed(execute_MulPlugin_aSLow) * $signed(execute_MulPlugin_bHigh));
  assign execute_MUL_LL = (execute_MulPlugin_aULow * execute_MulPlugin_bULow);
  assign execute_SHIFT_RIGHT = _zz_217;
  assign execute_REGFILE_WRITE_DATA = _zz_96;
  assign memory_MEMORY_ADDRESS_LOW = execute_to_memory_MEMORY_ADDRESS_LOW;
  assign execute_MEMORY_ADDRESS_LOW = _zz_158[1 : 0];
  assign decode_DO_EBREAK = ((! DebugPlugin_haltIt) && (decode_IS_EBREAK || 1'b0));
  assign decode_CSR_READ_OPCODE = (decode_INSTRUCTION[13 : 7] != 7'h20);
  assign decode_CSR_WRITE_OPCODE = (! (((decode_INSTRUCTION[14 : 13] == (2'b01)) && (decode_INSTRUCTION[19 : 15] == 5'h0)) || ((decode_INSTRUCTION[14 : 13] == (2'b11)) && (decode_INSTRUCTION[19 : 15] == 5'h0))));
  assign decode_PREDICTION_HAD_BRANCHED2 = IBusCachedPlugin_decodePrediction_cmd_hadBranch;
  assign decode_SRC2 = _zz_102;
  assign decode_SRC1 = _zz_97;
  assign decode_SRC2_FORCE_ZERO = (decode_SRC_ADD_ZERO && (! decode_SRC_USE_SUB_LESS));
  assign _zz_1 = _zz_2;
  assign _zz_3 = _zz_4;
  assign decode_ENV_CTRL = _zz_5;
  assign _zz_6 = _zz_7;
  assign decode_IS_CSR = _zz_219[0];
  assign _zz_8 = _zz_9;
  assign decode_IS_RS2_SIGNED = _zz_220[0];
  assign decode_IS_RS1_SIGNED = _zz_221[0];
  assign decode_IS_DIV = _zz_222[0];
  assign memory_IS_MUL = execute_to_memory_IS_MUL;
  assign execute_IS_MUL = decode_to_execute_IS_MUL;
  assign decode_IS_MUL = _zz_223[0];
  assign _zz_10 = _zz_11;
  assign decode_SHIFT_CTRL = _zz_12;
  assign _zz_13 = _zz_14;
  assign decode_ALU_BITWISE_CTRL = _zz_15;
  assign _zz_16 = _zz_17;
  assign decode_SRC_LESS_UNSIGNED = _zz_224[0];
  assign decode_MEMORY_MANAGMENT = _zz_225[0];
  assign memory_MEMORY_WR = execute_to_memory_MEMORY_WR;
  assign decode_MEMORY_WR = _zz_226[0];
  assign execute_BYPASSABLE_MEMORY_STAGE = decode_to_execute_BYPASSABLE_MEMORY_STAGE;
  assign decode_BYPASSABLE_MEMORY_STAGE = _zz_227[0];
  assign decode_BYPASSABLE_EXECUTE_STAGE = _zz_228[0];
  assign decode_ALU_CTRL = _zz_18;
  assign _zz_19 = _zz_20;
  assign writeBack_FORMAL_PC_NEXT = memory_to_writeBack_FORMAL_PC_NEXT;
  assign memory_FORMAL_PC_NEXT = execute_to_memory_FORMAL_PC_NEXT;
  assign execute_FORMAL_PC_NEXT = decode_to_execute_FORMAL_PC_NEXT;
  assign decode_FORMAL_PC_NEXT = (decode_PC + 32'h00000004);
  assign memory_PC = execute_to_memory_PC;
  assign execute_DO_EBREAK = decode_to_execute_DO_EBREAK;
  assign decode_IS_EBREAK = _zz_229[0];
  always @ (*) begin
    _zz_21 = execute_REGFILE_WRITE_DATA;
    if(_zz_170)begin
      _zz_21 = execute_CsrPlugin_readData;
    end
  end

  assign execute_CSR_READ_OPCODE = decode_to_execute_CSR_READ_OPCODE;
  assign execute_CSR_WRITE_OPCODE = decode_to_execute_CSR_WRITE_OPCODE;
  assign execute_IS_CSR = decode_to_execute_IS_CSR;
  assign memory_ENV_CTRL = _zz_22;
  assign execute_ENV_CTRL = _zz_23;
  assign writeBack_ENV_CTRL = _zz_24;
  assign memory_BRANCH_CALC = execute_to_memory_BRANCH_CALC;
  assign memory_BRANCH_DO = execute_to_memory_BRANCH_DO;
  assign execute_PC = decode_to_execute_PC;
  assign execute_PREDICTION_HAD_BRANCHED2 = decode_to_execute_PREDICTION_HAD_BRANCHED2;
  assign execute_BRANCH_COND_RESULT = _zz_121;
  assign execute_BRANCH_CTRL = _zz_25;
  assign decode_RS2_USE = _zz_230[0];
  assign decode_RS1_USE = _zz_231[0];
  assign execute_REGFILE_WRITE_VALID = decode_to_execute_REGFILE_WRITE_VALID;
  assign execute_BYPASSABLE_EXECUTE_STAGE = decode_to_execute_BYPASSABLE_EXECUTE_STAGE;
  assign memory_REGFILE_WRITE_VALID = execute_to_memory_REGFILE_WRITE_VALID;
  assign memory_BYPASSABLE_MEMORY_STAGE = execute_to_memory_BYPASSABLE_MEMORY_STAGE;
  assign writeBack_REGFILE_WRITE_VALID = memory_to_writeBack_REGFILE_WRITE_VALID;
  always @ (*) begin
    decode_RS2 = decode_RegFilePlugin_rs2Data;
    if(_zz_112)begin
      if((_zz_113 == decode_INSTRUCTION[24 : 20]))begin
        decode_RS2 = _zz_114;
      end
    end
    if(_zz_171)begin
      if(_zz_172)begin
        if(_zz_116)begin
          decode_RS2 = _zz_46;
        end
      end
    end
    if(_zz_173)begin
      if(memory_BYPASSABLE_MEMORY_STAGE)begin
        if(_zz_118)begin
          decode_RS2 = _zz_26;
        end
      end
    end
  end

  always @ (*) begin
    decode_RS1 = decode_RegFilePlugin_rs1Data;
    if(_zz_112)begin
      if((_zz_113 == decode_INSTRUCTION[19 : 15]))begin
        decode_RS1 = _zz_114;
      end
    end
    if(_zz_171)begin
      if(_zz_172)begin
        if(_zz_115)begin
          decode_RS1 = _zz_46;
        end
      end
    end
    if(_zz_173)begin
      if(memory_BYPASSABLE_MEMORY_STAGE)begin
        if(_zz_117)begin
          decode_RS1 = _zz_26;
        end
      end
    end
  end

  assign execute_IS_RS1_SIGNED = decode_to_execute_IS_RS1_SIGNED;
  assign execute_IS_DIV = decode_to_execute_IS_DIV;
  assign execute_IS_RS2_SIGNED = decode_to_execute_IS_RS2_SIGNED;
  assign memory_INSTRUCTION = execute_to_memory_INSTRUCTION;
  assign memory_IS_DIV = execute_to_memory_IS_DIV;
  assign writeBack_IS_MUL = memory_to_writeBack_IS_MUL;
  assign writeBack_MUL_HH = memory_to_writeBack_MUL_HH;
  assign writeBack_MUL_LOW = memory_to_writeBack_MUL_LOW;
  assign memory_MUL_HL = execute_to_memory_MUL_HL;
  assign memory_MUL_LH = execute_to_memory_MUL_LH;
  assign memory_MUL_LL = execute_to_memory_MUL_LL;
  assign execute_RS1 = decode_to_execute_RS1;
  assign memory_SHIFT_RIGHT = execute_to_memory_SHIFT_RIGHT;
  always @ (*) begin
    _zz_26 = memory_REGFILE_WRITE_DATA;
    if(memory_arbitration_isValid)begin
      case(memory_SHIFT_CTRL)
        `ShiftCtrlEnum_defaultEncoding_SLL_1 : begin
          _zz_26 = _zz_104;
        end
        `ShiftCtrlEnum_defaultEncoding_SRL_1, `ShiftCtrlEnum_defaultEncoding_SRA_1 : begin
          _zz_26 = memory_SHIFT_RIGHT;
        end
        default : begin
        end
      endcase
    end
    if(_zz_174)begin
      _zz_26 = memory_DivPlugin_div_result;
    end
  end

  assign memory_SHIFT_CTRL = _zz_27;
  assign execute_SHIFT_CTRL = _zz_28;
  assign execute_SRC_LESS_UNSIGNED = decode_to_execute_SRC_LESS_UNSIGNED;
  assign execute_SRC2_FORCE_ZERO = decode_to_execute_SRC2_FORCE_ZERO;
  assign execute_SRC_USE_SUB_LESS = decode_to_execute_SRC_USE_SUB_LESS;
  assign _zz_29 = decode_PC;
  assign _zz_30 = decode_RS2;
  assign decode_SRC2_CTRL = _zz_31;
  assign _zz_32 = decode_RS1;
  assign decode_SRC1_CTRL = _zz_33;
  assign decode_SRC_USE_SUB_LESS = _zz_232[0];
  assign decode_SRC_ADD_ZERO = _zz_233[0];
  assign execute_SRC_ADD_SUB = execute_SrcPlugin_addSub;
  assign execute_SRC_LESS = execute_SrcPlugin_less;
  assign execute_ALU_CTRL = _zz_34;
  assign execute_SRC2 = decode_to_execute_SRC2;
  assign execute_SRC1 = decode_to_execute_SRC1;
  assign execute_ALU_BITWISE_CTRL = _zz_35;
  assign _zz_36 = writeBack_INSTRUCTION;
  assign _zz_37 = writeBack_REGFILE_WRITE_VALID;
  always @ (*) begin
    _zz_38 = 1'b0;
    if(lastStageRegFileWrite_valid)begin
      _zz_38 = 1'b1;
    end
  end

  assign decode_INSTRUCTION_ANTICIPATED = (decode_arbitration_isStuck ? decode_INSTRUCTION : IBusCachedPlugin_cache_io_cpu_fetch_data);
  always @ (*) begin
    decode_REGFILE_WRITE_VALID = _zz_234[0];
    if((decode_INSTRUCTION[11 : 7] == 5'h0))begin
      decode_REGFILE_WRITE_VALID = 1'b0;
    end
  end

  assign decode_LEGAL_INSTRUCTION = ({((decode_INSTRUCTION & 32'h0000005f) == 32'h00000017),{((decode_INSTRUCTION & 32'h0000007f) == 32'h0000006f),{((decode_INSTRUCTION & 32'h0000106f) == 32'h00000003),{((decode_INSTRUCTION & _zz_302) == 32'h00001073),{(_zz_303 == _zz_304),{_zz_305,{_zz_306,_zz_307}}}}}}} != 21'h0);
  always @ (*) begin
    _zz_46 = writeBack_REGFILE_WRITE_DATA;
    if((writeBack_arbitration_isValid && writeBack_MEMORY_ENABLE))begin
      _zz_46 = writeBack_DBusCachedPlugin_rspFormated;
    end
    if((writeBack_arbitration_isValid && writeBack_IS_MUL))begin
      case(_zz_205)
        2'b00 : begin
          _zz_46 = _zz_264;
        end
        default : begin
          _zz_46 = _zz_265;
        end
      endcase
    end
  end

  assign writeBack_MEMORY_ADDRESS_LOW = memory_to_writeBack_MEMORY_ADDRESS_LOW;
  assign writeBack_MEMORY_WR = memory_to_writeBack_MEMORY_WR;
  assign writeBack_REGFILE_WRITE_DATA = memory_to_writeBack_REGFILE_WRITE_DATA;
  assign writeBack_MEMORY_ENABLE = memory_to_writeBack_MEMORY_ENABLE;
  assign memory_REGFILE_WRITE_DATA = execute_to_memory_REGFILE_WRITE_DATA;
  assign memory_MEMORY_ENABLE = execute_to_memory_MEMORY_ENABLE;
  assign execute_MEMORY_MANAGMENT = decode_to_execute_MEMORY_MANAGMENT;
  assign execute_RS2 = decode_to_execute_RS2;
  assign execute_MEMORY_WR = decode_to_execute_MEMORY_WR;
  assign execute_SRC_ADD = execute_SrcPlugin_addSub;
  assign execute_MEMORY_ENABLE = decode_to_execute_MEMORY_ENABLE;
  assign execute_INSTRUCTION = decode_to_execute_INSTRUCTION;
  assign decode_MEMORY_ENABLE = _zz_235[0];
  assign decode_FLUSH_ALL = _zz_236[0];
  always @ (*) begin
    _zz_47 = _zz_47_2;
    if(_zz_175)begin
      _zz_47 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_47_2 = _zz_47_1;
    if(_zz_176)begin
      _zz_47_2 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_47_1 = _zz_47_0;
    if(_zz_177)begin
      _zz_47_1 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_47_0 = IBusCachedPlugin_rsp_issueDetected;
    if(_zz_178)begin
      _zz_47_0 = 1'b1;
    end
  end

  assign decode_BRANCH_CTRL = _zz_48;
  assign decode_INSTRUCTION = IBusCachedPlugin_iBusRsp_output_payload_rsp_inst;
  always @ (*) begin
    _zz_49 = memory_FORMAL_PC_NEXT;
    if(BranchPlugin_jumpInterface_valid)begin
      _zz_49 = BranchPlugin_jumpInterface_payload;
    end
  end

  always @ (*) begin
    _zz_50 = decode_FORMAL_PC_NEXT;
    if(IBusCachedPlugin_predictionJumpInterface_valid)begin
      _zz_50 = IBusCachedPlugin_predictionJumpInterface_payload;
    end
  end

  assign decode_PC = IBusCachedPlugin_iBusRsp_output_payload_pc;
  assign writeBack_PC = memory_to_writeBack_PC;
  assign writeBack_INSTRUCTION = memory_to_writeBack_INSTRUCTION;
  always @ (*) begin
    decode_arbitration_haltItself = 1'b0;
    if(((DBusCachedPlugin_mmuBus_busy && decode_arbitration_isValid) && decode_MEMORY_ENABLE))begin
      decode_arbitration_haltItself = 1'b1;
    end
    case(_zz_141)
      3'b000 : begin
      end
      3'b001 : begin
      end
      3'b010 : begin
        decode_arbitration_haltItself = 1'b1;
      end
      3'b011 : begin
      end
      3'b100 : begin
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    decode_arbitration_haltByOther = 1'b0;
    if((decode_arbitration_isValid && (_zz_110 || _zz_111)))begin
      decode_arbitration_haltByOther = 1'b1;
    end
    if(CsrPlugin_pipelineLiberator_active)begin
      decode_arbitration_haltByOther = 1'b1;
    end
    if(({(writeBack_arbitration_isValid && (writeBack_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_XRET)),{(memory_arbitration_isValid && (memory_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_XRET)),(execute_arbitration_isValid && (execute_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_XRET))}} != (3'b000)))begin
      decode_arbitration_haltByOther = 1'b1;
    end
  end

  always @ (*) begin
    decode_arbitration_removeIt = 1'b0;
    if(_zz_179)begin
      decode_arbitration_removeIt = 1'b1;
    end
    if(decode_arbitration_isFlushed)begin
      decode_arbitration_removeIt = 1'b1;
    end
  end

  assign decode_arbitration_flushIt = 1'b0;
  always @ (*) begin
    decode_arbitration_flushNext = 1'b0;
    if(IBusCachedPlugin_predictionJumpInterface_valid)begin
      decode_arbitration_flushNext = 1'b1;
    end
    if(_zz_179)begin
      decode_arbitration_flushNext = 1'b1;
    end
  end

  always @ (*) begin
    execute_arbitration_haltItself = 1'b0;
    if((_zz_165 && (! dataCache_1_io_cpu_flush_ready)))begin
      execute_arbitration_haltItself = 1'b1;
    end
    if(((dataCache_1_io_cpu_redo && execute_arbitration_isValid) && execute_MEMORY_ENABLE))begin
      execute_arbitration_haltItself = 1'b1;
    end
    if(_zz_170)begin
      if(execute_CsrPlugin_blockedBySideEffects)begin
        execute_arbitration_haltItself = 1'b1;
      end
    end
  end

  always @ (*) begin
    execute_arbitration_haltByOther = 1'b0;
    if(_zz_180)begin
      execute_arbitration_haltByOther = 1'b1;
    end
  end

  always @ (*) begin
    execute_arbitration_removeIt = 1'b0;
    if(CsrPlugin_selfException_valid)begin
      execute_arbitration_removeIt = 1'b1;
    end
    if(execute_arbitration_isFlushed)begin
      execute_arbitration_removeIt = 1'b1;
    end
  end

  always @ (*) begin
    execute_arbitration_flushIt = 1'b0;
    if(_zz_180)begin
      if(_zz_181)begin
        execute_arbitration_flushIt = 1'b1;
      end
    end
  end

  always @ (*) begin
    execute_arbitration_flushNext = 1'b0;
    if(CsrPlugin_selfException_valid)begin
      execute_arbitration_flushNext = 1'b1;
    end
    if(_zz_180)begin
      if(_zz_181)begin
        execute_arbitration_flushNext = 1'b1;
      end
    end
  end

  always @ (*) begin
    memory_arbitration_haltItself = 1'b0;
    if(_zz_174)begin
      if(((! memory_DivPlugin_frontendOk) || (! memory_DivPlugin_div_done)))begin
        memory_arbitration_haltItself = 1'b1;
      end
    end
  end

  assign memory_arbitration_haltByOther = 1'b0;
  always @ (*) begin
    memory_arbitration_removeIt = 1'b0;
    if(BranchPlugin_branchExceptionPort_valid)begin
      memory_arbitration_removeIt = 1'b1;
    end
    if(memory_arbitration_isFlushed)begin
      memory_arbitration_removeIt = 1'b1;
    end
  end

  assign memory_arbitration_flushIt = 1'b0;
  always @ (*) begin
    memory_arbitration_flushNext = 1'b0;
    if(BranchPlugin_jumpInterface_valid)begin
      memory_arbitration_flushNext = 1'b1;
    end
    if(BranchPlugin_branchExceptionPort_valid)begin
      memory_arbitration_flushNext = 1'b1;
    end
  end

  always @ (*) begin
    writeBack_arbitration_haltItself = 1'b0;
    if(dataCache_1_io_cpu_writeBack_haltIt)begin
      writeBack_arbitration_haltItself = 1'b1;
    end
  end

  assign writeBack_arbitration_haltByOther = 1'b0;
  always @ (*) begin
    writeBack_arbitration_removeIt = 1'b0;
    if(DBusCachedPlugin_exceptionBus_valid)begin
      writeBack_arbitration_removeIt = 1'b1;
    end
    if(writeBack_arbitration_isFlushed)begin
      writeBack_arbitration_removeIt = 1'b1;
    end
  end

  always @ (*) begin
    writeBack_arbitration_flushIt = 1'b0;
    if(DBusCachedPlugin_redoBranch_valid)begin
      writeBack_arbitration_flushIt = 1'b1;
    end
  end

  always @ (*) begin
    writeBack_arbitration_flushNext = 1'b0;
    if(DBusCachedPlugin_redoBranch_valid)begin
      writeBack_arbitration_flushNext = 1'b1;
    end
    if(DBusCachedPlugin_exceptionBus_valid)begin
      writeBack_arbitration_flushNext = 1'b1;
    end
    if(_zz_182)begin
      writeBack_arbitration_flushNext = 1'b1;
    end
    if(_zz_183)begin
      writeBack_arbitration_flushNext = 1'b1;
    end
  end

  assign lastStageInstruction = writeBack_INSTRUCTION;
  assign lastStagePc = writeBack_PC;
  assign lastStageIsValid = writeBack_arbitration_isValid;
  assign lastStageIsFiring = writeBack_arbitration_isFiring;
  always @ (*) begin
    IBusCachedPlugin_fetcherHalt = 1'b0;
    if(({CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack,{CsrPlugin_exceptionPortCtrl_exceptionValids_memory,{CsrPlugin_exceptionPortCtrl_exceptionValids_execute,CsrPlugin_exceptionPortCtrl_exceptionValids_decode}}} != (4'b0000)))begin
      IBusCachedPlugin_fetcherHalt = 1'b1;
    end
    if(_zz_182)begin
      IBusCachedPlugin_fetcherHalt = 1'b1;
    end
    if(_zz_183)begin
      IBusCachedPlugin_fetcherHalt = 1'b1;
    end
    if(_zz_180)begin
      if(_zz_181)begin
        IBusCachedPlugin_fetcherHalt = 1'b1;
      end
    end
    if(DebugPlugin_haltIt)begin
      IBusCachedPlugin_fetcherHalt = 1'b1;
    end
    if(_zz_184)begin
      IBusCachedPlugin_fetcherHalt = 1'b1;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_incomingInstruction = 1'b0;
    if((IBusCachedPlugin_iBusRsp_stages_1_input_valid || IBusCachedPlugin_iBusRsp_stages_2_input_valid))begin
      IBusCachedPlugin_incomingInstruction = 1'b1;
    end
  end

  always @ (*) begin
    _zz_51 = 1'b0;
    if(DebugPlugin_godmode)begin
      _zz_51 = 1'b1;
    end
  end

  assign CsrPlugin_inWfi = 1'b0;
  always @ (*) begin
    CsrPlugin_thirdPartyWake = 1'b0;
    if(DebugPlugin_haltIt)begin
      CsrPlugin_thirdPartyWake = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_jumpInterface_valid = 1'b0;
    if(_zz_182)begin
      CsrPlugin_jumpInterface_valid = 1'b1;
    end
    if(_zz_183)begin
      CsrPlugin_jumpInterface_valid = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_jumpInterface_payload = 32'h0;
    if(_zz_182)begin
      CsrPlugin_jumpInterface_payload = {CsrPlugin_xtvec_base,(2'b00)};
    end
    if(_zz_183)begin
      case(_zz_185)
        2'b11 : begin
          CsrPlugin_jumpInterface_payload = CsrPlugin_mepc;
        end
        default : begin
        end
      endcase
    end
  end

  always @ (*) begin
    CsrPlugin_forceMachineWire = 1'b0;
    if(DebugPlugin_godmode)begin
      CsrPlugin_forceMachineWire = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_allowInterrupts = 1'b1;
    if((DebugPlugin_haltIt || DebugPlugin_stepIt))begin
      CsrPlugin_allowInterrupts = 1'b0;
    end
  end

  always @ (*) begin
    CsrPlugin_allowException = 1'b1;
    if(DebugPlugin_godmode)begin
      CsrPlugin_allowException = 1'b0;
    end
  end

  assign IBusCachedPlugin_externalFlush = ({writeBack_arbitration_flushNext,{memory_arbitration_flushNext,{execute_arbitration_flushNext,decode_arbitration_flushNext}}} != (4'b0000));
  assign IBusCachedPlugin_jump_pcLoad_valid = ({CsrPlugin_jumpInterface_valid,{BranchPlugin_jumpInterface_valid,{DBusCachedPlugin_redoBranch_valid,IBusCachedPlugin_predictionJumpInterface_valid}}} != (4'b0000));
  assign _zz_52 = {IBusCachedPlugin_predictionJumpInterface_valid,{BranchPlugin_jumpInterface_valid,{CsrPlugin_jumpInterface_valid,DBusCachedPlugin_redoBranch_valid}}};
  assign _zz_53 = (_zz_52 & (~ _zz_237));
  assign _zz_54 = _zz_53[3];
  assign _zz_55 = (_zz_53[1] || _zz_54);
  assign _zz_56 = (_zz_53[2] || _zz_54);
  assign IBusCachedPlugin_jump_pcLoad_payload = _zz_169;
  always @ (*) begin
    IBusCachedPlugin_fetchPc_correction = 1'b0;
    if(IBusCachedPlugin_fetchPc_redo_valid)begin
      IBusCachedPlugin_fetchPc_correction = 1'b1;
    end
    if(IBusCachedPlugin_jump_pcLoad_valid)begin
      IBusCachedPlugin_fetchPc_correction = 1'b1;
    end
  end

  assign IBusCachedPlugin_fetchPc_corrected = (IBusCachedPlugin_fetchPc_correction || IBusCachedPlugin_fetchPc_correctionReg);
  always @ (*) begin
    IBusCachedPlugin_fetchPc_pcRegPropagate = 1'b0;
    if(IBusCachedPlugin_iBusRsp_stages_1_input_ready)begin
      IBusCachedPlugin_fetchPc_pcRegPropagate = 1'b1;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_fetchPc_pc = (IBusCachedPlugin_fetchPc_pcReg + _zz_239);
    if(IBusCachedPlugin_fetchPc_redo_valid)begin
      IBusCachedPlugin_fetchPc_pc = IBusCachedPlugin_fetchPc_redo_payload;
    end
    if(IBusCachedPlugin_jump_pcLoad_valid)begin
      IBusCachedPlugin_fetchPc_pc = IBusCachedPlugin_jump_pcLoad_payload;
    end
    IBusCachedPlugin_fetchPc_pc[0] = 1'b0;
    IBusCachedPlugin_fetchPc_pc[1] = 1'b0;
  end

  always @ (*) begin
    IBusCachedPlugin_fetchPc_flushed = 1'b0;
    if(IBusCachedPlugin_fetchPc_redo_valid)begin
      IBusCachedPlugin_fetchPc_flushed = 1'b1;
    end
    if(IBusCachedPlugin_jump_pcLoad_valid)begin
      IBusCachedPlugin_fetchPc_flushed = 1'b1;
    end
  end

  assign IBusCachedPlugin_fetchPc_output_valid = ((! IBusCachedPlugin_fetcherHalt) && IBusCachedPlugin_fetchPc_booted);
  assign IBusCachedPlugin_fetchPc_output_payload = IBusCachedPlugin_fetchPc_pc;
  always @ (*) begin
    IBusCachedPlugin_iBusRsp_redoFetch = 1'b0;
    if(IBusCachedPlugin_rsp_redoFetch)begin
      IBusCachedPlugin_iBusRsp_redoFetch = 1'b1;
    end
  end

  assign IBusCachedPlugin_iBusRsp_stages_0_input_valid = IBusCachedPlugin_fetchPc_output_valid;
  assign IBusCachedPlugin_fetchPc_output_ready = IBusCachedPlugin_iBusRsp_stages_0_input_ready;
  assign IBusCachedPlugin_iBusRsp_stages_0_input_payload = IBusCachedPlugin_fetchPc_output_payload;
  always @ (*) begin
    IBusCachedPlugin_iBusRsp_stages_0_halt = 1'b0;
    if(IBusCachedPlugin_cache_io_cpu_prefetch_haltIt)begin
      IBusCachedPlugin_iBusRsp_stages_0_halt = 1'b1;
    end
  end

  assign _zz_57 = (! IBusCachedPlugin_iBusRsp_stages_0_halt);
  assign IBusCachedPlugin_iBusRsp_stages_0_input_ready = (IBusCachedPlugin_iBusRsp_stages_0_output_ready && _zz_57);
  assign IBusCachedPlugin_iBusRsp_stages_0_output_valid = (IBusCachedPlugin_iBusRsp_stages_0_input_valid && _zz_57);
  assign IBusCachedPlugin_iBusRsp_stages_0_output_payload = IBusCachedPlugin_iBusRsp_stages_0_input_payload;
  always @ (*) begin
    IBusCachedPlugin_iBusRsp_stages_1_halt = 1'b0;
    if(IBusCachedPlugin_cache_io_cpu_fetch_haltIt)begin
      IBusCachedPlugin_iBusRsp_stages_1_halt = 1'b1;
    end
  end

  assign _zz_58 = (! IBusCachedPlugin_iBusRsp_stages_1_halt);
  assign IBusCachedPlugin_iBusRsp_stages_1_input_ready = (IBusCachedPlugin_iBusRsp_stages_1_output_ready && _zz_58);
  assign IBusCachedPlugin_iBusRsp_stages_1_output_valid = (IBusCachedPlugin_iBusRsp_stages_1_input_valid && _zz_58);
  assign IBusCachedPlugin_iBusRsp_stages_1_output_payload = IBusCachedPlugin_iBusRsp_stages_1_input_payload;
  always @ (*) begin
    IBusCachedPlugin_iBusRsp_stages_2_halt = 1'b0;
    if((_zz_47 || IBusCachedPlugin_rsp_iBusRspOutputHalt))begin
      IBusCachedPlugin_iBusRsp_stages_2_halt = 1'b1;
    end
  end

  assign _zz_59 = (! IBusCachedPlugin_iBusRsp_stages_2_halt);
  assign IBusCachedPlugin_iBusRsp_stages_2_input_ready = (IBusCachedPlugin_iBusRsp_stages_2_output_ready && _zz_59);
  assign IBusCachedPlugin_iBusRsp_stages_2_output_valid = (IBusCachedPlugin_iBusRsp_stages_2_input_valid && _zz_59);
  assign IBusCachedPlugin_iBusRsp_stages_2_output_payload = IBusCachedPlugin_iBusRsp_stages_2_input_payload;
  assign IBusCachedPlugin_fetchPc_redo_valid = IBusCachedPlugin_iBusRsp_redoFetch;
  assign IBusCachedPlugin_fetchPc_redo_payload = IBusCachedPlugin_iBusRsp_stages_2_input_payload;
  assign IBusCachedPlugin_iBusRsp_flush = ((decode_arbitration_removeIt || (decode_arbitration_flushNext && (! decode_arbitration_isStuck))) || IBusCachedPlugin_iBusRsp_redoFetch);
  assign IBusCachedPlugin_iBusRsp_stages_0_output_ready = _zz_60;
  assign _zz_60 = ((1'b0 && (! _zz_61)) || IBusCachedPlugin_iBusRsp_stages_1_input_ready);
  assign _zz_61 = _zz_62;
  assign IBusCachedPlugin_iBusRsp_stages_1_input_valid = _zz_61;
  assign IBusCachedPlugin_iBusRsp_stages_1_input_payload = IBusCachedPlugin_fetchPc_pcReg;
  assign IBusCachedPlugin_iBusRsp_stages_1_output_ready = ((1'b0 && (! _zz_63)) || IBusCachedPlugin_iBusRsp_stages_2_input_ready);
  assign _zz_63 = _zz_64;
  assign IBusCachedPlugin_iBusRsp_stages_2_input_valid = _zz_63;
  assign IBusCachedPlugin_iBusRsp_stages_2_input_payload = _zz_65;
  always @ (*) begin
    IBusCachedPlugin_iBusRsp_readyForError = 1'b1;
    if((! IBusCachedPlugin_pcValids_0))begin
      IBusCachedPlugin_iBusRsp_readyForError = 1'b0;
    end
  end

  assign IBusCachedPlugin_pcValids_0 = IBusCachedPlugin_injector_nextPcCalc_valids_1;
  assign IBusCachedPlugin_pcValids_1 = IBusCachedPlugin_injector_nextPcCalc_valids_2;
  assign IBusCachedPlugin_pcValids_2 = IBusCachedPlugin_injector_nextPcCalc_valids_3;
  assign IBusCachedPlugin_pcValids_3 = IBusCachedPlugin_injector_nextPcCalc_valids_4;
  assign IBusCachedPlugin_iBusRsp_output_ready = (! decode_arbitration_isStuck);
  always @ (*) begin
    decode_arbitration_isValid = IBusCachedPlugin_iBusRsp_output_valid;
    case(_zz_141)
      3'b000 : begin
      end
      3'b001 : begin
      end
      3'b010 : begin
        decode_arbitration_isValid = 1'b1;
      end
      3'b011 : begin
        decode_arbitration_isValid = 1'b1;
      end
      3'b100 : begin
      end
      default : begin
      end
    endcase
  end

  assign _zz_66 = _zz_240[11];
  always @ (*) begin
    _zz_67[18] = _zz_66;
    _zz_67[17] = _zz_66;
    _zz_67[16] = _zz_66;
    _zz_67[15] = _zz_66;
    _zz_67[14] = _zz_66;
    _zz_67[13] = _zz_66;
    _zz_67[12] = _zz_66;
    _zz_67[11] = _zz_66;
    _zz_67[10] = _zz_66;
    _zz_67[9] = _zz_66;
    _zz_67[8] = _zz_66;
    _zz_67[7] = _zz_66;
    _zz_67[6] = _zz_66;
    _zz_67[5] = _zz_66;
    _zz_67[4] = _zz_66;
    _zz_67[3] = _zz_66;
    _zz_67[2] = _zz_66;
    _zz_67[1] = _zz_66;
    _zz_67[0] = _zz_66;
  end

  always @ (*) begin
    IBusCachedPlugin_decodePrediction_cmd_hadBranch = ((decode_BRANCH_CTRL == `BranchCtrlEnum_defaultEncoding_JAL) || ((decode_BRANCH_CTRL == `BranchCtrlEnum_defaultEncoding_B) && _zz_241[31]));
    if(_zz_72)begin
      IBusCachedPlugin_decodePrediction_cmd_hadBranch = 1'b0;
    end
  end

  assign _zz_68 = _zz_242[19];
  always @ (*) begin
    _zz_69[10] = _zz_68;
    _zz_69[9] = _zz_68;
    _zz_69[8] = _zz_68;
    _zz_69[7] = _zz_68;
    _zz_69[6] = _zz_68;
    _zz_69[5] = _zz_68;
    _zz_69[4] = _zz_68;
    _zz_69[3] = _zz_68;
    _zz_69[2] = _zz_68;
    _zz_69[1] = _zz_68;
    _zz_69[0] = _zz_68;
  end

  assign _zz_70 = _zz_243[11];
  always @ (*) begin
    _zz_71[18] = _zz_70;
    _zz_71[17] = _zz_70;
    _zz_71[16] = _zz_70;
    _zz_71[15] = _zz_70;
    _zz_71[14] = _zz_70;
    _zz_71[13] = _zz_70;
    _zz_71[12] = _zz_70;
    _zz_71[11] = _zz_70;
    _zz_71[10] = _zz_70;
    _zz_71[9] = _zz_70;
    _zz_71[8] = _zz_70;
    _zz_71[7] = _zz_70;
    _zz_71[6] = _zz_70;
    _zz_71[5] = _zz_70;
    _zz_71[4] = _zz_70;
    _zz_71[3] = _zz_70;
    _zz_71[2] = _zz_70;
    _zz_71[1] = _zz_70;
    _zz_71[0] = _zz_70;
  end

  always @ (*) begin
    case(decode_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_JAL : begin
        _zz_72 = _zz_244[1];
      end
      default : begin
        _zz_72 = _zz_245[1];
      end
    endcase
  end

  assign IBusCachedPlugin_predictionJumpInterface_valid = (decode_arbitration_isValid && IBusCachedPlugin_decodePrediction_cmd_hadBranch);
  assign _zz_73 = _zz_246[19];
  always @ (*) begin
    _zz_74[10] = _zz_73;
    _zz_74[9] = _zz_73;
    _zz_74[8] = _zz_73;
    _zz_74[7] = _zz_73;
    _zz_74[6] = _zz_73;
    _zz_74[5] = _zz_73;
    _zz_74[4] = _zz_73;
    _zz_74[3] = _zz_73;
    _zz_74[2] = _zz_73;
    _zz_74[1] = _zz_73;
    _zz_74[0] = _zz_73;
  end

  assign _zz_75 = _zz_247[11];
  always @ (*) begin
    _zz_76[18] = _zz_75;
    _zz_76[17] = _zz_75;
    _zz_76[16] = _zz_75;
    _zz_76[15] = _zz_75;
    _zz_76[14] = _zz_75;
    _zz_76[13] = _zz_75;
    _zz_76[12] = _zz_75;
    _zz_76[11] = _zz_75;
    _zz_76[10] = _zz_75;
    _zz_76[9] = _zz_75;
    _zz_76[8] = _zz_75;
    _zz_76[7] = _zz_75;
    _zz_76[6] = _zz_75;
    _zz_76[5] = _zz_75;
    _zz_76[4] = _zz_75;
    _zz_76[3] = _zz_75;
    _zz_76[2] = _zz_75;
    _zz_76[1] = _zz_75;
    _zz_76[0] = _zz_75;
  end

  assign IBusCachedPlugin_predictionJumpInterface_payload = (decode_PC + ((decode_BRANCH_CTRL == `BranchCtrlEnum_defaultEncoding_JAL) ? {{_zz_74,{{{_zz_320,decode_INSTRUCTION[19 : 12]},decode_INSTRUCTION[20]},decode_INSTRUCTION[30 : 21]}},1'b0} : {{_zz_76,{{{_zz_321,_zz_322},decode_INSTRUCTION[30 : 25]},decode_INSTRUCTION[11 : 8]}},1'b0}));
  assign iBus_cmd_valid = IBusCachedPlugin_cache_io_mem_cmd_valid;
  always @ (*) begin
    iBus_cmd_payload_address = IBusCachedPlugin_cache_io_mem_cmd_payload_address;
    iBus_cmd_payload_address = IBusCachedPlugin_cache_io_mem_cmd_payload_address;
  end

  assign iBus_cmd_payload_size = IBusCachedPlugin_cache_io_mem_cmd_payload_size;
  assign IBusCachedPlugin_s0_tightlyCoupledHit = 1'b0;
  assign _zz_150 = (IBusCachedPlugin_iBusRsp_stages_0_input_valid && (! IBusCachedPlugin_s0_tightlyCoupledHit));
  assign _zz_151 = (IBusCachedPlugin_iBusRsp_stages_1_input_valid && (! IBusCachedPlugin_s1_tightlyCoupledHit));
  assign _zz_152 = (! IBusCachedPlugin_iBusRsp_stages_1_input_ready);
  assign _zz_153 = (IBusCachedPlugin_iBusRsp_stages_2_input_valid && (! IBusCachedPlugin_s2_tightlyCoupledHit));
  assign _zz_154 = (! IBusCachedPlugin_iBusRsp_stages_2_input_ready);
  assign _zz_155 = (CsrPlugin_privilege == (2'b00));
  assign IBusCachedPlugin_rsp_iBusRspOutputHalt = 1'b0;
  assign IBusCachedPlugin_rsp_issueDetected = 1'b0;
  always @ (*) begin
    IBusCachedPlugin_rsp_redoFetch = 1'b0;
    if(_zz_178)begin
      IBusCachedPlugin_rsp_redoFetch = 1'b1;
    end
    if(_zz_176)begin
      IBusCachedPlugin_rsp_redoFetch = 1'b1;
    end
  end

  always @ (*) begin
    _zz_156 = (IBusCachedPlugin_rsp_redoFetch && (! IBusCachedPlugin_cache_io_cpu_decode_mmuRefilling));
    if(_zz_176)begin
      _zz_156 = 1'b1;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_decodeExceptionPort_valid = 1'b0;
    if(_zz_177)begin
      IBusCachedPlugin_decodeExceptionPort_valid = IBusCachedPlugin_iBusRsp_readyForError;
    end
    if(_zz_175)begin
      IBusCachedPlugin_decodeExceptionPort_valid = IBusCachedPlugin_iBusRsp_readyForError;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_decodeExceptionPort_payload_code = (4'bxxxx);
    if(_zz_177)begin
      IBusCachedPlugin_decodeExceptionPort_payload_code = (4'b1100);
    end
    if(_zz_175)begin
      IBusCachedPlugin_decodeExceptionPort_payload_code = (4'b0001);
    end
  end

  assign IBusCachedPlugin_decodeExceptionPort_payload_badAddr = {IBusCachedPlugin_iBusRsp_stages_2_input_payload[31 : 2],(2'b00)};
  assign IBusCachedPlugin_iBusRsp_output_valid = IBusCachedPlugin_iBusRsp_stages_2_output_valid;
  assign IBusCachedPlugin_iBusRsp_stages_2_output_ready = IBusCachedPlugin_iBusRsp_output_ready;
  assign IBusCachedPlugin_iBusRsp_output_payload_rsp_inst = IBusCachedPlugin_cache_io_cpu_decode_data;
  assign IBusCachedPlugin_iBusRsp_output_payload_pc = IBusCachedPlugin_iBusRsp_stages_2_output_payload;
  assign IBusCachedPlugin_mmuBus_cmd_isValid = IBusCachedPlugin_cache_io_cpu_fetch_mmuBus_cmd_isValid;
  assign IBusCachedPlugin_mmuBus_cmd_virtualAddress = IBusCachedPlugin_cache_io_cpu_fetch_mmuBus_cmd_virtualAddress;
  assign IBusCachedPlugin_mmuBus_cmd_bypassTranslation = IBusCachedPlugin_cache_io_cpu_fetch_mmuBus_cmd_bypassTranslation;
  assign IBusCachedPlugin_mmuBus_end = IBusCachedPlugin_cache_io_cpu_fetch_mmuBus_end;
  assign _zz_149 = (decode_arbitration_isValid && decode_FLUSH_ALL);
  assign dataCache_1_io_mem_cmd_s2mPipe_valid = (dataCache_1_io_mem_cmd_valid || dataCache_1_io_mem_cmd_s2mPipe_rValid);
  assign _zz_166 = (! dataCache_1_io_mem_cmd_s2mPipe_rValid);
  assign dataCache_1_io_mem_cmd_s2mPipe_payload_wr = (dataCache_1_io_mem_cmd_s2mPipe_rValid ? dataCache_1_io_mem_cmd_s2mPipe_rData_wr : dataCache_1_io_mem_cmd_payload_wr);
  assign dataCache_1_io_mem_cmd_s2mPipe_payload_address = (dataCache_1_io_mem_cmd_s2mPipe_rValid ? dataCache_1_io_mem_cmd_s2mPipe_rData_address : dataCache_1_io_mem_cmd_payload_address);
  assign dataCache_1_io_mem_cmd_s2mPipe_payload_data = (dataCache_1_io_mem_cmd_s2mPipe_rValid ? dataCache_1_io_mem_cmd_s2mPipe_rData_data : dataCache_1_io_mem_cmd_payload_data);
  assign dataCache_1_io_mem_cmd_s2mPipe_payload_mask = (dataCache_1_io_mem_cmd_s2mPipe_rValid ? dataCache_1_io_mem_cmd_s2mPipe_rData_mask : dataCache_1_io_mem_cmd_payload_mask);
  assign dataCache_1_io_mem_cmd_s2mPipe_payload_length = (dataCache_1_io_mem_cmd_s2mPipe_rValid ? dataCache_1_io_mem_cmd_s2mPipe_rData_length : dataCache_1_io_mem_cmd_payload_length);
  assign dataCache_1_io_mem_cmd_s2mPipe_payload_last = (dataCache_1_io_mem_cmd_s2mPipe_rValid ? dataCache_1_io_mem_cmd_s2mPipe_rData_last : dataCache_1_io_mem_cmd_payload_last);
  assign dataCache_1_io_mem_cmd_s2mPipe_ready = ((1'b1 && (! dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_valid)) || dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_ready);
  assign dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_valid = dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rValid;
  assign dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_wr = dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_wr;
  assign dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_address = dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_address;
  assign dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_data = dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_data;
  assign dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_mask = dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_mask;
  assign dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_length = dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_length;
  assign dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_last = dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_last;
  assign dBus_cmd_valid = dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_valid;
  assign dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_ready = dBus_cmd_ready;
  assign dBus_cmd_payload_wr = dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_wr;
  assign dBus_cmd_payload_address = dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_address;
  assign dBus_cmd_payload_data = dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_data;
  assign dBus_cmd_payload_mask = dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_mask;
  assign dBus_cmd_payload_length = dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_length;
  assign dBus_cmd_payload_last = dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_payload_last;
  assign execute_DBusCachedPlugin_size = execute_INSTRUCTION[13 : 12];
  assign _zz_157 = (execute_arbitration_isValid && execute_MEMORY_ENABLE);
  assign _zz_158 = execute_SRC_ADD;
  always @ (*) begin
    case(execute_DBusCachedPlugin_size)
      2'b00 : begin
        _zz_79 = {{{execute_RS2[7 : 0],execute_RS2[7 : 0]},execute_RS2[7 : 0]},execute_RS2[7 : 0]};
      end
      2'b01 : begin
        _zz_79 = {execute_RS2[15 : 0],execute_RS2[15 : 0]};
      end
      default : begin
        _zz_79 = execute_RS2[31 : 0];
      end
    endcase
  end

  assign _zz_165 = (execute_arbitration_isValid && execute_MEMORY_MANAGMENT);
  assign _zz_159 = (memory_arbitration_isValid && memory_MEMORY_ENABLE);
  assign _zz_160 = memory_REGFILE_WRITE_DATA;
  assign DBusCachedPlugin_mmuBus_cmd_isValid = dataCache_1_io_cpu_memory_mmuBus_cmd_isValid;
  assign DBusCachedPlugin_mmuBus_cmd_virtualAddress = dataCache_1_io_cpu_memory_mmuBus_cmd_virtualAddress;
  assign DBusCachedPlugin_mmuBus_cmd_bypassTranslation = dataCache_1_io_cpu_memory_mmuBus_cmd_bypassTranslation;
  always @ (*) begin
    _zz_161 = DBusCachedPlugin_mmuBus_rsp_isIoAccess;
    if((_zz_51 && (! dataCache_1_io_cpu_memory_isWrite)))begin
      _zz_161 = 1'b1;
    end
  end

  assign DBusCachedPlugin_mmuBus_end = dataCache_1_io_cpu_memory_mmuBus_end;
  assign _zz_162 = (writeBack_arbitration_isValid && writeBack_MEMORY_ENABLE);
  assign _zz_163 = (CsrPlugin_privilege == (2'b00));
  assign _zz_164 = writeBack_REGFILE_WRITE_DATA;
  always @ (*) begin
    DBusCachedPlugin_redoBranch_valid = 1'b0;
    if(_zz_186)begin
      if(dataCache_1_io_cpu_redo)begin
        DBusCachedPlugin_redoBranch_valid = 1'b1;
      end
    end
  end

  assign DBusCachedPlugin_redoBranch_payload = writeBack_PC;
  always @ (*) begin
    DBusCachedPlugin_exceptionBus_valid = 1'b0;
    if(_zz_186)begin
      if(dataCache_1_io_cpu_writeBack_accessError)begin
        DBusCachedPlugin_exceptionBus_valid = 1'b1;
      end
      if(dataCache_1_io_cpu_writeBack_unalignedAccess)begin
        DBusCachedPlugin_exceptionBus_valid = 1'b1;
      end
      if(dataCache_1_io_cpu_writeBack_mmuException)begin
        DBusCachedPlugin_exceptionBus_valid = 1'b1;
      end
      if(dataCache_1_io_cpu_redo)begin
        DBusCachedPlugin_exceptionBus_valid = 1'b0;
      end
    end
  end

  assign DBusCachedPlugin_exceptionBus_payload_badAddr = writeBack_REGFILE_WRITE_DATA;
  always @ (*) begin
    DBusCachedPlugin_exceptionBus_payload_code = (4'bxxxx);
    if(_zz_186)begin
      if(dataCache_1_io_cpu_writeBack_accessError)begin
        DBusCachedPlugin_exceptionBus_payload_code = {1'd0, _zz_248};
      end
      if(dataCache_1_io_cpu_writeBack_unalignedAccess)begin
        DBusCachedPlugin_exceptionBus_payload_code = {1'd0, _zz_249};
      end
      if(dataCache_1_io_cpu_writeBack_mmuException)begin
        DBusCachedPlugin_exceptionBus_payload_code = (writeBack_MEMORY_WR ? (4'b1111) : (4'b1101));
      end
    end
  end

  always @ (*) begin
    writeBack_DBusCachedPlugin_rspShifted = dataCache_1_io_cpu_writeBack_data;
    case(writeBack_MEMORY_ADDRESS_LOW)
      2'b01 : begin
        writeBack_DBusCachedPlugin_rspShifted[7 : 0] = dataCache_1_io_cpu_writeBack_data[15 : 8];
      end
      2'b10 : begin
        writeBack_DBusCachedPlugin_rspShifted[15 : 0] = dataCache_1_io_cpu_writeBack_data[31 : 16];
      end
      2'b11 : begin
        writeBack_DBusCachedPlugin_rspShifted[7 : 0] = dataCache_1_io_cpu_writeBack_data[31 : 24];
      end
      default : begin
      end
    endcase
  end

  assign _zz_80 = (writeBack_DBusCachedPlugin_rspShifted[7] && (! writeBack_INSTRUCTION[14]));
  always @ (*) begin
    _zz_81[31] = _zz_80;
    _zz_81[30] = _zz_80;
    _zz_81[29] = _zz_80;
    _zz_81[28] = _zz_80;
    _zz_81[27] = _zz_80;
    _zz_81[26] = _zz_80;
    _zz_81[25] = _zz_80;
    _zz_81[24] = _zz_80;
    _zz_81[23] = _zz_80;
    _zz_81[22] = _zz_80;
    _zz_81[21] = _zz_80;
    _zz_81[20] = _zz_80;
    _zz_81[19] = _zz_80;
    _zz_81[18] = _zz_80;
    _zz_81[17] = _zz_80;
    _zz_81[16] = _zz_80;
    _zz_81[15] = _zz_80;
    _zz_81[14] = _zz_80;
    _zz_81[13] = _zz_80;
    _zz_81[12] = _zz_80;
    _zz_81[11] = _zz_80;
    _zz_81[10] = _zz_80;
    _zz_81[9] = _zz_80;
    _zz_81[8] = _zz_80;
    _zz_81[7 : 0] = writeBack_DBusCachedPlugin_rspShifted[7 : 0];
  end

  assign _zz_82 = (writeBack_DBusCachedPlugin_rspShifted[15] && (! writeBack_INSTRUCTION[14]));
  always @ (*) begin
    _zz_83[31] = _zz_82;
    _zz_83[30] = _zz_82;
    _zz_83[29] = _zz_82;
    _zz_83[28] = _zz_82;
    _zz_83[27] = _zz_82;
    _zz_83[26] = _zz_82;
    _zz_83[25] = _zz_82;
    _zz_83[24] = _zz_82;
    _zz_83[23] = _zz_82;
    _zz_83[22] = _zz_82;
    _zz_83[21] = _zz_82;
    _zz_83[20] = _zz_82;
    _zz_83[19] = _zz_82;
    _zz_83[18] = _zz_82;
    _zz_83[17] = _zz_82;
    _zz_83[16] = _zz_82;
    _zz_83[15 : 0] = writeBack_DBusCachedPlugin_rspShifted[15 : 0];
  end

  always @ (*) begin
    case(_zz_204)
      2'b00 : begin
        writeBack_DBusCachedPlugin_rspFormated = _zz_81;
      end
      2'b01 : begin
        writeBack_DBusCachedPlugin_rspFormated = _zz_83;
      end
      default : begin
        writeBack_DBusCachedPlugin_rspFormated = writeBack_DBusCachedPlugin_rspShifted;
      end
    endcase
  end

  assign IBusCachedPlugin_mmuBus_rsp_physicalAddress = IBusCachedPlugin_mmuBus_cmd_virtualAddress;
  assign IBusCachedPlugin_mmuBus_rsp_allowRead = 1'b1;
  assign IBusCachedPlugin_mmuBus_rsp_allowWrite = 1'b1;
  assign IBusCachedPlugin_mmuBus_rsp_allowExecute = 1'b1;
  assign IBusCachedPlugin_mmuBus_rsp_isIoAccess = (((IBusCachedPlugin_mmuBus_rsp_physicalAddress & (~ 32'h00ffffff)) == 32'hf8000000) || ((IBusCachedPlugin_mmuBus_rsp_physicalAddress & (~ 32'h00ffffff)) == 32'hfa000000));
  assign IBusCachedPlugin_mmuBus_rsp_exception = 1'b0;
  assign IBusCachedPlugin_mmuBus_rsp_refilling = 1'b0;
  assign IBusCachedPlugin_mmuBus_busy = 1'b0;
  assign DBusCachedPlugin_mmuBus_rsp_physicalAddress = DBusCachedPlugin_mmuBus_cmd_virtualAddress;
  assign DBusCachedPlugin_mmuBus_rsp_allowRead = 1'b1;
  assign DBusCachedPlugin_mmuBus_rsp_allowWrite = 1'b1;
  assign DBusCachedPlugin_mmuBus_rsp_allowExecute = 1'b1;
  assign DBusCachedPlugin_mmuBus_rsp_isIoAccess = (((DBusCachedPlugin_mmuBus_rsp_physicalAddress & (~ 32'h00ffffff)) == 32'hf8000000) || ((DBusCachedPlugin_mmuBus_rsp_physicalAddress & (~ 32'h00ffffff)) == 32'hfa000000));
  assign DBusCachedPlugin_mmuBus_rsp_exception = 1'b0;
  assign DBusCachedPlugin_mmuBus_rsp_refilling = 1'b0;
  assign DBusCachedPlugin_mmuBus_busy = 1'b0;
  assign _zz_85 = ((decode_INSTRUCTION & 32'h00004050) == 32'h00004050);
  assign _zz_86 = ((decode_INSTRUCTION & 32'h00000004) == 32'h00000004);
  assign _zz_87 = ((decode_INSTRUCTION & 32'h00000048) == 32'h00000048);
  assign _zz_88 = ((decode_INSTRUCTION & 32'h00001000) == 32'h0);
  assign _zz_84 = {(((decode_INSTRUCTION & _zz_323) == 32'h00100050) != (1'b0)),{((_zz_324 == _zz_325) != (1'b0)),{(_zz_326 != (1'b0)),{(_zz_327 != _zz_328),{_zz_329,{_zz_330,_zz_331}}}}}};
  assign _zz_89 = _zz_84[2 : 1];
  assign _zz_45 = _zz_89;
  assign _zz_90 = _zz_84[7 : 6];
  assign _zz_44 = _zz_90;
  assign _zz_91 = _zz_84[9 : 8];
  assign _zz_43 = _zz_91;
  assign _zz_92 = _zz_84[19 : 18];
  assign _zz_42 = _zz_92;
  assign _zz_93 = _zz_84[22 : 21];
  assign _zz_41 = _zz_93;
  assign _zz_94 = _zz_84[28 : 27];
  assign _zz_40 = _zz_94;
  assign _zz_95 = _zz_84[31 : 30];
  assign _zz_39 = _zz_95;
  assign decodeExceptionPort_valid = (decode_arbitration_isValid && (! decode_LEGAL_INSTRUCTION));
  assign decodeExceptionPort_payload_code = (4'b0010);
  assign decodeExceptionPort_payload_badAddr = decode_INSTRUCTION;
  assign decode_RegFilePlugin_regFileReadAddress1 = decode_INSTRUCTION_ANTICIPATED[19 : 15];
  assign decode_RegFilePlugin_regFileReadAddress2 = decode_INSTRUCTION_ANTICIPATED[24 : 20];
  assign decode_RegFilePlugin_rs1Data = _zz_167;
  assign decode_RegFilePlugin_rs2Data = _zz_168;
  always @ (*) begin
    lastStageRegFileWrite_valid = (_zz_37 && writeBack_arbitration_isFiring);
    if((lastStageRegFileWrite_payload_address == 5'h0))begin
      lastStageRegFileWrite_valid = 1'b0;
    end
  end

  assign lastStageRegFileWrite_payload_address = _zz_36[11 : 7];
  assign lastStageRegFileWrite_payload_data = _zz_46;
  always @ (*) begin
    case(execute_ALU_BITWISE_CTRL)
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : begin
        execute_IntAluPlugin_bitwise = (execute_SRC1 & execute_SRC2);
      end
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : begin
        execute_IntAluPlugin_bitwise = (execute_SRC1 | execute_SRC2);
      end
      default : begin
        execute_IntAluPlugin_bitwise = (execute_SRC1 ^ execute_SRC2);
      end
    endcase
  end

  always @ (*) begin
    case(execute_ALU_CTRL)
      `AluCtrlEnum_defaultEncoding_BITWISE : begin
        _zz_96 = execute_IntAluPlugin_bitwise;
      end
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : begin
        _zz_96 = {31'd0, _zz_250};
      end
      default : begin
        _zz_96 = execute_SRC_ADD_SUB;
      end
    endcase
  end

  always @ (*) begin
    case(decode_SRC1_CTRL)
      `Src1CtrlEnum_defaultEncoding_RS : begin
        _zz_97 = _zz_32;
      end
      `Src1CtrlEnum_defaultEncoding_PC_INCREMENT : begin
        _zz_97 = {29'd0, _zz_251};
      end
      `Src1CtrlEnum_defaultEncoding_IMU : begin
        _zz_97 = {decode_INSTRUCTION[31 : 12],12'h0};
      end
      default : begin
        _zz_97 = {27'd0, _zz_252};
      end
    endcase
  end

  assign _zz_98 = _zz_253[11];
  always @ (*) begin
    _zz_99[19] = _zz_98;
    _zz_99[18] = _zz_98;
    _zz_99[17] = _zz_98;
    _zz_99[16] = _zz_98;
    _zz_99[15] = _zz_98;
    _zz_99[14] = _zz_98;
    _zz_99[13] = _zz_98;
    _zz_99[12] = _zz_98;
    _zz_99[11] = _zz_98;
    _zz_99[10] = _zz_98;
    _zz_99[9] = _zz_98;
    _zz_99[8] = _zz_98;
    _zz_99[7] = _zz_98;
    _zz_99[6] = _zz_98;
    _zz_99[5] = _zz_98;
    _zz_99[4] = _zz_98;
    _zz_99[3] = _zz_98;
    _zz_99[2] = _zz_98;
    _zz_99[1] = _zz_98;
    _zz_99[0] = _zz_98;
  end

  assign _zz_100 = _zz_254[11];
  always @ (*) begin
    _zz_101[19] = _zz_100;
    _zz_101[18] = _zz_100;
    _zz_101[17] = _zz_100;
    _zz_101[16] = _zz_100;
    _zz_101[15] = _zz_100;
    _zz_101[14] = _zz_100;
    _zz_101[13] = _zz_100;
    _zz_101[12] = _zz_100;
    _zz_101[11] = _zz_100;
    _zz_101[10] = _zz_100;
    _zz_101[9] = _zz_100;
    _zz_101[8] = _zz_100;
    _zz_101[7] = _zz_100;
    _zz_101[6] = _zz_100;
    _zz_101[5] = _zz_100;
    _zz_101[4] = _zz_100;
    _zz_101[3] = _zz_100;
    _zz_101[2] = _zz_100;
    _zz_101[1] = _zz_100;
    _zz_101[0] = _zz_100;
  end

  always @ (*) begin
    case(decode_SRC2_CTRL)
      `Src2CtrlEnum_defaultEncoding_RS : begin
        _zz_102 = _zz_30;
      end
      `Src2CtrlEnum_defaultEncoding_IMI : begin
        _zz_102 = {_zz_99,decode_INSTRUCTION[31 : 20]};
      end
      `Src2CtrlEnum_defaultEncoding_IMS : begin
        _zz_102 = {_zz_101,{decode_INSTRUCTION[31 : 25],decode_INSTRUCTION[11 : 7]}};
      end
      default : begin
        _zz_102 = _zz_29;
      end
    endcase
  end

  always @ (*) begin
    execute_SrcPlugin_addSub = _zz_255;
    if(execute_SRC2_FORCE_ZERO)begin
      execute_SrcPlugin_addSub = execute_SRC1;
    end
  end

  assign execute_SrcPlugin_less = ((execute_SRC1[31] == execute_SRC2[31]) ? execute_SrcPlugin_addSub[31] : (execute_SRC_LESS_UNSIGNED ? execute_SRC2[31] : execute_SRC1[31]));
  assign execute_FullBarrelShifterPlugin_amplitude = execute_SRC2[4 : 0];
  always @ (*) begin
    _zz_103[0] = execute_SRC1[31];
    _zz_103[1] = execute_SRC1[30];
    _zz_103[2] = execute_SRC1[29];
    _zz_103[3] = execute_SRC1[28];
    _zz_103[4] = execute_SRC1[27];
    _zz_103[5] = execute_SRC1[26];
    _zz_103[6] = execute_SRC1[25];
    _zz_103[7] = execute_SRC1[24];
    _zz_103[8] = execute_SRC1[23];
    _zz_103[9] = execute_SRC1[22];
    _zz_103[10] = execute_SRC1[21];
    _zz_103[11] = execute_SRC1[20];
    _zz_103[12] = execute_SRC1[19];
    _zz_103[13] = execute_SRC1[18];
    _zz_103[14] = execute_SRC1[17];
    _zz_103[15] = execute_SRC1[16];
    _zz_103[16] = execute_SRC1[15];
    _zz_103[17] = execute_SRC1[14];
    _zz_103[18] = execute_SRC1[13];
    _zz_103[19] = execute_SRC1[12];
    _zz_103[20] = execute_SRC1[11];
    _zz_103[21] = execute_SRC1[10];
    _zz_103[22] = execute_SRC1[9];
    _zz_103[23] = execute_SRC1[8];
    _zz_103[24] = execute_SRC1[7];
    _zz_103[25] = execute_SRC1[6];
    _zz_103[26] = execute_SRC1[5];
    _zz_103[27] = execute_SRC1[4];
    _zz_103[28] = execute_SRC1[3];
    _zz_103[29] = execute_SRC1[2];
    _zz_103[30] = execute_SRC1[1];
    _zz_103[31] = execute_SRC1[0];
  end

  assign execute_FullBarrelShifterPlugin_reversed = ((execute_SHIFT_CTRL == `ShiftCtrlEnum_defaultEncoding_SLL_1) ? _zz_103 : execute_SRC1);
  always @ (*) begin
    _zz_104[0] = memory_SHIFT_RIGHT[31];
    _zz_104[1] = memory_SHIFT_RIGHT[30];
    _zz_104[2] = memory_SHIFT_RIGHT[29];
    _zz_104[3] = memory_SHIFT_RIGHT[28];
    _zz_104[4] = memory_SHIFT_RIGHT[27];
    _zz_104[5] = memory_SHIFT_RIGHT[26];
    _zz_104[6] = memory_SHIFT_RIGHT[25];
    _zz_104[7] = memory_SHIFT_RIGHT[24];
    _zz_104[8] = memory_SHIFT_RIGHT[23];
    _zz_104[9] = memory_SHIFT_RIGHT[22];
    _zz_104[10] = memory_SHIFT_RIGHT[21];
    _zz_104[11] = memory_SHIFT_RIGHT[20];
    _zz_104[12] = memory_SHIFT_RIGHT[19];
    _zz_104[13] = memory_SHIFT_RIGHT[18];
    _zz_104[14] = memory_SHIFT_RIGHT[17];
    _zz_104[15] = memory_SHIFT_RIGHT[16];
    _zz_104[16] = memory_SHIFT_RIGHT[15];
    _zz_104[17] = memory_SHIFT_RIGHT[14];
    _zz_104[18] = memory_SHIFT_RIGHT[13];
    _zz_104[19] = memory_SHIFT_RIGHT[12];
    _zz_104[20] = memory_SHIFT_RIGHT[11];
    _zz_104[21] = memory_SHIFT_RIGHT[10];
    _zz_104[22] = memory_SHIFT_RIGHT[9];
    _zz_104[23] = memory_SHIFT_RIGHT[8];
    _zz_104[24] = memory_SHIFT_RIGHT[7];
    _zz_104[25] = memory_SHIFT_RIGHT[6];
    _zz_104[26] = memory_SHIFT_RIGHT[5];
    _zz_104[27] = memory_SHIFT_RIGHT[4];
    _zz_104[28] = memory_SHIFT_RIGHT[3];
    _zz_104[29] = memory_SHIFT_RIGHT[2];
    _zz_104[30] = memory_SHIFT_RIGHT[1];
    _zz_104[31] = memory_SHIFT_RIGHT[0];
  end

  assign execute_MulPlugin_a = execute_RS1;
  assign execute_MulPlugin_b = execute_RS2;
  always @ (*) begin
    case(_zz_187)
      2'b01 : begin
        execute_MulPlugin_aSigned = 1'b1;
      end
      2'b10 : begin
        execute_MulPlugin_aSigned = 1'b1;
      end
      default : begin
        execute_MulPlugin_aSigned = 1'b0;
      end
    endcase
  end

  always @ (*) begin
    case(_zz_187)
      2'b01 : begin
        execute_MulPlugin_bSigned = 1'b1;
      end
      2'b10 : begin
        execute_MulPlugin_bSigned = 1'b0;
      end
      default : begin
        execute_MulPlugin_bSigned = 1'b0;
      end
    endcase
  end

  assign execute_MulPlugin_aULow = execute_MulPlugin_a[15 : 0];
  assign execute_MulPlugin_bULow = execute_MulPlugin_b[15 : 0];
  assign execute_MulPlugin_aSLow = {1'b0,execute_MulPlugin_a[15 : 0]};
  assign execute_MulPlugin_bSLow = {1'b0,execute_MulPlugin_b[15 : 0]};
  assign execute_MulPlugin_aHigh = {(execute_MulPlugin_aSigned && execute_MulPlugin_a[31]),execute_MulPlugin_a[31 : 16]};
  assign execute_MulPlugin_bHigh = {(execute_MulPlugin_bSigned && execute_MulPlugin_b[31]),execute_MulPlugin_b[31 : 16]};
  assign writeBack_MulPlugin_result = ($signed(_zz_262) + $signed(_zz_263));
  assign memory_DivPlugin_frontendOk = 1'b1;
  always @ (*) begin
    memory_DivPlugin_div_counter_willIncrement = 1'b0;
    if(_zz_174)begin
      if(_zz_188)begin
        memory_DivPlugin_div_counter_willIncrement = 1'b1;
      end
    end
  end

  always @ (*) begin
    memory_DivPlugin_div_counter_willClear = 1'b0;
    if(_zz_189)begin
      memory_DivPlugin_div_counter_willClear = 1'b1;
    end
  end

  assign memory_DivPlugin_div_counter_willOverflowIfInc = (memory_DivPlugin_div_counter_value == 6'h21);
  assign memory_DivPlugin_div_counter_willOverflow = (memory_DivPlugin_div_counter_willOverflowIfInc && memory_DivPlugin_div_counter_willIncrement);
  always @ (*) begin
    if(memory_DivPlugin_div_counter_willOverflow)begin
      memory_DivPlugin_div_counter_valueNext = 6'h0;
    end else begin
      memory_DivPlugin_div_counter_valueNext = (memory_DivPlugin_div_counter_value + _zz_267);
    end
    if(memory_DivPlugin_div_counter_willClear)begin
      memory_DivPlugin_div_counter_valueNext = 6'h0;
    end
  end

  assign _zz_105 = memory_DivPlugin_rs1[31 : 0];
  assign memory_DivPlugin_div_stage_0_remainderShifted = {memory_DivPlugin_accumulator[31 : 0],_zz_105[31]};
  assign memory_DivPlugin_div_stage_0_remainderMinusDenominator = (memory_DivPlugin_div_stage_0_remainderShifted - _zz_268);
  assign memory_DivPlugin_div_stage_0_outRemainder = ((! memory_DivPlugin_div_stage_0_remainderMinusDenominator[32]) ? _zz_269 : _zz_270);
  assign memory_DivPlugin_div_stage_0_outNumerator = _zz_271[31:0];
  assign _zz_106 = (memory_INSTRUCTION[13] ? memory_DivPlugin_accumulator[31 : 0] : memory_DivPlugin_rs1[31 : 0]);
  assign _zz_107 = (execute_RS2[31] && execute_IS_RS2_SIGNED);
  assign _zz_108 = (1'b0 || ((execute_IS_DIV && execute_RS1[31]) && execute_IS_RS1_SIGNED));
  always @ (*) begin
    _zz_109[32] = (execute_IS_RS1_SIGNED && execute_RS1[31]);
    _zz_109[31 : 0] = execute_RS1;
  end

  always @ (*) begin
    _zz_110 = 1'b0;
    if(_zz_190)begin
      if(_zz_191)begin
        if(_zz_115)begin
          _zz_110 = 1'b1;
        end
      end
    end
    if(_zz_192)begin
      if(_zz_193)begin
        if(_zz_117)begin
          _zz_110 = 1'b1;
        end
      end
    end
    if(_zz_194)begin
      if(_zz_195)begin
        if((execute_INSTRUCTION[11 : 7] == decode_INSTRUCTION[19 : 15]))begin
          _zz_110 = 1'b1;
        end
      end
    end
    if((! decode_RS1_USE))begin
      _zz_110 = 1'b0;
    end
  end

  always @ (*) begin
    _zz_111 = 1'b0;
    if(_zz_190)begin
      if(_zz_191)begin
        if(_zz_116)begin
          _zz_111 = 1'b1;
        end
      end
    end
    if(_zz_192)begin
      if(_zz_193)begin
        if(_zz_118)begin
          _zz_111 = 1'b1;
        end
      end
    end
    if(_zz_194)begin
      if(_zz_195)begin
        if((execute_INSTRUCTION[11 : 7] == decode_INSTRUCTION[24 : 20]))begin
          _zz_111 = 1'b1;
        end
      end
    end
    if((! decode_RS2_USE))begin
      _zz_111 = 1'b0;
    end
  end

  assign _zz_115 = (writeBack_INSTRUCTION[11 : 7] == decode_INSTRUCTION[19 : 15]);
  assign _zz_116 = (writeBack_INSTRUCTION[11 : 7] == decode_INSTRUCTION[24 : 20]);
  assign _zz_117 = (memory_INSTRUCTION[11 : 7] == decode_INSTRUCTION[19 : 15]);
  assign _zz_118 = (memory_INSTRUCTION[11 : 7] == decode_INSTRUCTION[24 : 20]);
  assign execute_BranchPlugin_eq = (execute_SRC1 == execute_SRC2);
  assign _zz_119 = execute_INSTRUCTION[14 : 12];
  always @ (*) begin
    if((_zz_119 == (3'b000))) begin
        _zz_120 = execute_BranchPlugin_eq;
    end else if((_zz_119 == (3'b001))) begin
        _zz_120 = (! execute_BranchPlugin_eq);
    end else if((((_zz_119 & (3'b101)) == (3'b101)))) begin
        _zz_120 = (! execute_SRC_LESS);
    end else begin
        _zz_120 = execute_SRC_LESS;
    end
  end

  always @ (*) begin
    case(execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_INC : begin
        _zz_121 = 1'b0;
      end
      `BranchCtrlEnum_defaultEncoding_JAL : begin
        _zz_121 = 1'b1;
      end
      `BranchCtrlEnum_defaultEncoding_JALR : begin
        _zz_121 = 1'b1;
      end
      default : begin
        _zz_121 = _zz_120;
      end
    endcase
  end

  assign _zz_122 = _zz_281[11];
  always @ (*) begin
    _zz_123[19] = _zz_122;
    _zz_123[18] = _zz_122;
    _zz_123[17] = _zz_122;
    _zz_123[16] = _zz_122;
    _zz_123[15] = _zz_122;
    _zz_123[14] = _zz_122;
    _zz_123[13] = _zz_122;
    _zz_123[12] = _zz_122;
    _zz_123[11] = _zz_122;
    _zz_123[10] = _zz_122;
    _zz_123[9] = _zz_122;
    _zz_123[8] = _zz_122;
    _zz_123[7] = _zz_122;
    _zz_123[6] = _zz_122;
    _zz_123[5] = _zz_122;
    _zz_123[4] = _zz_122;
    _zz_123[3] = _zz_122;
    _zz_123[2] = _zz_122;
    _zz_123[1] = _zz_122;
    _zz_123[0] = _zz_122;
  end

  assign _zz_124 = _zz_282[19];
  always @ (*) begin
    _zz_125[10] = _zz_124;
    _zz_125[9] = _zz_124;
    _zz_125[8] = _zz_124;
    _zz_125[7] = _zz_124;
    _zz_125[6] = _zz_124;
    _zz_125[5] = _zz_124;
    _zz_125[4] = _zz_124;
    _zz_125[3] = _zz_124;
    _zz_125[2] = _zz_124;
    _zz_125[1] = _zz_124;
    _zz_125[0] = _zz_124;
  end

  assign _zz_126 = _zz_283[11];
  always @ (*) begin
    _zz_127[18] = _zz_126;
    _zz_127[17] = _zz_126;
    _zz_127[16] = _zz_126;
    _zz_127[15] = _zz_126;
    _zz_127[14] = _zz_126;
    _zz_127[13] = _zz_126;
    _zz_127[12] = _zz_126;
    _zz_127[11] = _zz_126;
    _zz_127[10] = _zz_126;
    _zz_127[9] = _zz_126;
    _zz_127[8] = _zz_126;
    _zz_127[7] = _zz_126;
    _zz_127[6] = _zz_126;
    _zz_127[5] = _zz_126;
    _zz_127[4] = _zz_126;
    _zz_127[3] = _zz_126;
    _zz_127[2] = _zz_126;
    _zz_127[1] = _zz_126;
    _zz_127[0] = _zz_126;
  end

  always @ (*) begin
    case(execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_JALR : begin
        _zz_128 = (_zz_284[1] ^ execute_RS1[1]);
      end
      `BranchCtrlEnum_defaultEncoding_JAL : begin
        _zz_128 = _zz_285[1];
      end
      default : begin
        _zz_128 = _zz_286[1];
      end
    endcase
  end

  assign execute_BranchPlugin_missAlignedTarget = (execute_BRANCH_COND_RESULT && _zz_128);
  always @ (*) begin
    case(execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_JALR : begin
        execute_BranchPlugin_branch_src1 = execute_RS1;
      end
      default : begin
        execute_BranchPlugin_branch_src1 = execute_PC;
      end
    endcase
  end

  assign _zz_129 = _zz_287[11];
  always @ (*) begin
    _zz_130[19] = _zz_129;
    _zz_130[18] = _zz_129;
    _zz_130[17] = _zz_129;
    _zz_130[16] = _zz_129;
    _zz_130[15] = _zz_129;
    _zz_130[14] = _zz_129;
    _zz_130[13] = _zz_129;
    _zz_130[12] = _zz_129;
    _zz_130[11] = _zz_129;
    _zz_130[10] = _zz_129;
    _zz_130[9] = _zz_129;
    _zz_130[8] = _zz_129;
    _zz_130[7] = _zz_129;
    _zz_130[6] = _zz_129;
    _zz_130[5] = _zz_129;
    _zz_130[4] = _zz_129;
    _zz_130[3] = _zz_129;
    _zz_130[2] = _zz_129;
    _zz_130[1] = _zz_129;
    _zz_130[0] = _zz_129;
  end

  always @ (*) begin
    case(execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_JALR : begin
        execute_BranchPlugin_branch_src2 = {_zz_130,execute_INSTRUCTION[31 : 20]};
      end
      default : begin
        execute_BranchPlugin_branch_src2 = ((execute_BRANCH_CTRL == `BranchCtrlEnum_defaultEncoding_JAL) ? {{_zz_132,{{{_zz_489,execute_INSTRUCTION[19 : 12]},execute_INSTRUCTION[20]},execute_INSTRUCTION[30 : 21]}},1'b0} : {{_zz_134,{{{_zz_490,_zz_491},execute_INSTRUCTION[30 : 25]},execute_INSTRUCTION[11 : 8]}},1'b0});
        if(execute_PREDICTION_HAD_BRANCHED2)begin
          execute_BranchPlugin_branch_src2 = {29'd0, _zz_290};
        end
      end
    endcase
  end

  assign _zz_131 = _zz_288[19];
  always @ (*) begin
    _zz_132[10] = _zz_131;
    _zz_132[9] = _zz_131;
    _zz_132[8] = _zz_131;
    _zz_132[7] = _zz_131;
    _zz_132[6] = _zz_131;
    _zz_132[5] = _zz_131;
    _zz_132[4] = _zz_131;
    _zz_132[3] = _zz_131;
    _zz_132[2] = _zz_131;
    _zz_132[1] = _zz_131;
    _zz_132[0] = _zz_131;
  end

  assign _zz_133 = _zz_289[11];
  always @ (*) begin
    _zz_134[18] = _zz_133;
    _zz_134[17] = _zz_133;
    _zz_134[16] = _zz_133;
    _zz_134[15] = _zz_133;
    _zz_134[14] = _zz_133;
    _zz_134[13] = _zz_133;
    _zz_134[12] = _zz_133;
    _zz_134[11] = _zz_133;
    _zz_134[10] = _zz_133;
    _zz_134[9] = _zz_133;
    _zz_134[8] = _zz_133;
    _zz_134[7] = _zz_133;
    _zz_134[6] = _zz_133;
    _zz_134[5] = _zz_133;
    _zz_134[4] = _zz_133;
    _zz_134[3] = _zz_133;
    _zz_134[2] = _zz_133;
    _zz_134[1] = _zz_133;
    _zz_134[0] = _zz_133;
  end

  assign execute_BranchPlugin_branchAdder = (execute_BranchPlugin_branch_src1 + execute_BranchPlugin_branch_src2);
  assign BranchPlugin_jumpInterface_valid = ((memory_arbitration_isValid && memory_BRANCH_DO) && (! 1'b0));
  assign BranchPlugin_jumpInterface_payload = memory_BRANCH_CALC;
  assign BranchPlugin_branchExceptionPort_valid = (memory_arbitration_isValid && (memory_BRANCH_DO && memory_BRANCH_CALC[1]));
  assign BranchPlugin_branchExceptionPort_payload_code = (4'b0000);
  assign BranchPlugin_branchExceptionPort_payload_badAddr = memory_BRANCH_CALC;
  assign IBusCachedPlugin_decodePrediction_rsp_wasWrong = BranchPlugin_jumpInterface_valid;
  always @ (*) begin
    CsrPlugin_privilege = (2'b11);
    if(CsrPlugin_forceMachineWire)begin
      CsrPlugin_privilege = (2'b11);
    end
  end

  assign CsrPlugin_misa_base = (2'b01);
  assign CsrPlugin_misa_extensions = 26'h0;
  assign _zz_135 = (CsrPlugin_mip_MTIP && CsrPlugin_mie_MTIE);
  assign _zz_136 = (CsrPlugin_mip_MSIP && CsrPlugin_mie_MSIE);
  assign _zz_137 = (CsrPlugin_mip_MEIP && CsrPlugin_mie_MEIE);
  assign CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped = (2'b11);
  assign CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilege = ((CsrPlugin_privilege < CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped) ? CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilegeUncapped : CsrPlugin_privilege);
  assign _zz_138 = {decodeExceptionPort_valid,IBusCachedPlugin_decodeExceptionPort_valid};
  assign _zz_139 = _zz_291[0];
  always @ (*) begin
    CsrPlugin_exceptionPortCtrl_exceptionValids_decode = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode;
    if(_zz_179)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_decode = 1'b1;
    end
    if(decode_arbitration_isFlushed)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_decode = 1'b0;
    end
  end

  always @ (*) begin
    CsrPlugin_exceptionPortCtrl_exceptionValids_execute = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute;
    if(CsrPlugin_selfException_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_execute = 1'b1;
    end
    if(execute_arbitration_isFlushed)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_execute = 1'b0;
    end
  end

  always @ (*) begin
    CsrPlugin_exceptionPortCtrl_exceptionValids_memory = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory;
    if(BranchPlugin_branchExceptionPort_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_memory = 1'b1;
    end
    if(memory_arbitration_isFlushed)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_memory = 1'b0;
    end
  end

  always @ (*) begin
    CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack;
    if(DBusCachedPlugin_exceptionBus_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack = 1'b1;
    end
    if(writeBack_arbitration_isFlushed)begin
      CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack = 1'b0;
    end
  end

  assign CsrPlugin_exceptionPendings_0 = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode;
  assign CsrPlugin_exceptionPendings_1 = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute;
  assign CsrPlugin_exceptionPendings_2 = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory;
  assign CsrPlugin_exceptionPendings_3 = CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack;
  assign CsrPlugin_exception = (CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack && CsrPlugin_allowException);
  assign CsrPlugin_lastStageWasWfi = 1'b0;
  assign CsrPlugin_pipelineLiberator_active = ((CsrPlugin_interrupt_valid && CsrPlugin_allowInterrupts) && decode_arbitration_isValid);
  always @ (*) begin
    CsrPlugin_pipelineLiberator_done = CsrPlugin_pipelineLiberator_pcValids_2;
    if(({CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack,{CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory,CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute}} != (3'b000)))begin
      CsrPlugin_pipelineLiberator_done = 1'b0;
    end
    if(CsrPlugin_hadException)begin
      CsrPlugin_pipelineLiberator_done = 1'b0;
    end
  end

  assign CsrPlugin_interruptJump = ((CsrPlugin_interrupt_valid && CsrPlugin_pipelineLiberator_done) && CsrPlugin_allowInterrupts);
  always @ (*) begin
    CsrPlugin_targetPrivilege = CsrPlugin_interrupt_targetPrivilege;
    if(CsrPlugin_hadException)begin
      CsrPlugin_targetPrivilege = CsrPlugin_exceptionPortCtrl_exceptionTargetPrivilege;
    end
  end

  always @ (*) begin
    CsrPlugin_trapCause = CsrPlugin_interrupt_code;
    if(CsrPlugin_hadException)begin
      CsrPlugin_trapCause = CsrPlugin_exceptionPortCtrl_exceptionContext_code;
    end
  end

  always @ (*) begin
    CsrPlugin_xtvec_mode = (2'bxx);
    case(CsrPlugin_targetPrivilege)
      2'b11 : begin
        CsrPlugin_xtvec_mode = CsrPlugin_mtvec_mode;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    CsrPlugin_xtvec_base = 30'h0;
    case(CsrPlugin_targetPrivilege)
      2'b11 : begin
        CsrPlugin_xtvec_base = CsrPlugin_mtvec_base;
      end
      default : begin
      end
    endcase
  end

  assign contextSwitching = CsrPlugin_jumpInterface_valid;
  assign execute_CsrPlugin_blockedBySideEffects = ({writeBack_arbitration_isValid,memory_arbitration_isValid} != (2'b00));
  always @ (*) begin
    execute_CsrPlugin_illegalAccess = 1'b1;
    if(execute_CsrPlugin_csr_3860)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_768)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_836)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_772)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_773)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_833)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_834)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if(execute_CsrPlugin_csr_835)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if((CsrPlugin_privilege < execute_CsrPlugin_csrAddress[9 : 8]))begin
      execute_CsrPlugin_illegalAccess = 1'b1;
    end
    if(((! execute_arbitration_isValid) || (! execute_IS_CSR)))begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
  end

  always @ (*) begin
    execute_CsrPlugin_illegalInstruction = 1'b0;
    if((execute_arbitration_isValid && (execute_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_XRET)))begin
      if((CsrPlugin_privilege < execute_INSTRUCTION[29 : 28]))begin
        execute_CsrPlugin_illegalInstruction = 1'b1;
      end
    end
  end

  always @ (*) begin
    CsrPlugin_selfException_valid = 1'b0;
    if(_zz_196)begin
      CsrPlugin_selfException_valid = 1'b1;
    end
    if(_zz_197)begin
      CsrPlugin_selfException_valid = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_selfException_payload_code = (4'bxxxx);
    if(_zz_196)begin
      CsrPlugin_selfException_payload_code = (4'b0010);
    end
    if(_zz_197)begin
      case(CsrPlugin_privilege)
        2'b00 : begin
          CsrPlugin_selfException_payload_code = (4'b1000);
        end
        default : begin
          CsrPlugin_selfException_payload_code = (4'b1011);
        end
      endcase
    end
  end

  assign CsrPlugin_selfException_payload_badAddr = execute_INSTRUCTION;
  assign execute_CsrPlugin_writeInstruction = ((execute_arbitration_isValid && execute_IS_CSR) && execute_CSR_WRITE_OPCODE);
  assign execute_CsrPlugin_readInstruction = ((execute_arbitration_isValid && execute_IS_CSR) && execute_CSR_READ_OPCODE);
  assign execute_CsrPlugin_writeEnable = ((execute_CsrPlugin_writeInstruction && (! execute_CsrPlugin_blockedBySideEffects)) && (! execute_arbitration_isStuckByOthers));
  assign execute_CsrPlugin_readEnable = ((execute_CsrPlugin_readInstruction && (! execute_CsrPlugin_blockedBySideEffects)) && (! execute_arbitration_isStuckByOthers));
  assign execute_CsrPlugin_readToWriteData = execute_CsrPlugin_readData;
  always @ (*) begin
    case(_zz_206)
      1'b0 : begin
        execute_CsrPlugin_writeData = execute_SRC1;
      end
      default : begin
        execute_CsrPlugin_writeData = (execute_INSTRUCTION[12] ? (execute_CsrPlugin_readToWriteData & (~ execute_SRC1)) : (execute_CsrPlugin_readToWriteData | execute_SRC1));
      end
    endcase
  end

  assign execute_CsrPlugin_csrAddress = execute_INSTRUCTION[31 : 20];
  always @ (*) begin
    debug_bus_cmd_ready = 1'b1;
    if(debug_bus_cmd_valid)begin
      case(_zz_198)
        6'b000000 : begin
        end
        6'b000001 : begin
          if(debug_bus_cmd_payload_wr)begin
            debug_bus_cmd_ready = IBusCachedPlugin_injectionPort_ready;
          end
        end
        default : begin
        end
      endcase
    end
  end

  always @ (*) begin
    debug_bus_rsp_data = DebugPlugin_busReadDataReg;
    if((! _zz_140))begin
      debug_bus_rsp_data[0] = DebugPlugin_resetIt;
      debug_bus_rsp_data[1] = DebugPlugin_haltIt;
      debug_bus_rsp_data[2] = DebugPlugin_isPipBusy;
      debug_bus_rsp_data[3] = DebugPlugin_haltedByBreak;
      debug_bus_rsp_data[4] = DebugPlugin_stepIt;
    end
  end

  always @ (*) begin
    IBusCachedPlugin_injectionPort_valid = 1'b0;
    if(debug_bus_cmd_valid)begin
      case(_zz_198)
        6'b000000 : begin
        end
        6'b000001 : begin
          if(debug_bus_cmd_payload_wr)begin
            IBusCachedPlugin_injectionPort_valid = 1'b1;
          end
        end
        default : begin
        end
      endcase
    end
  end

  assign IBusCachedPlugin_injectionPort_payload = debug_bus_cmd_payload_data;
  assign debug_resetOut = DebugPlugin_resetIt_regNext;
  assign _zz_33 = _zz_45;
  assign _zz_20 = decode_ALU_CTRL;
  assign _zz_18 = _zz_44;
  assign _zz_34 = decode_to_execute_ALU_CTRL;
  assign _zz_31 = _zz_43;
  assign _zz_17 = decode_ALU_BITWISE_CTRL;
  assign _zz_15 = _zz_42;
  assign _zz_35 = decode_to_execute_ALU_BITWISE_CTRL;
  assign _zz_14 = decode_SHIFT_CTRL;
  assign _zz_11 = execute_SHIFT_CTRL;
  assign _zz_12 = _zz_41;
  assign _zz_28 = decode_to_execute_SHIFT_CTRL;
  assign _zz_27 = execute_to_memory_SHIFT_CTRL;
  assign _zz_9 = decode_BRANCH_CTRL;
  assign _zz_48 = _zz_40;
  assign _zz_25 = decode_to_execute_BRANCH_CTRL;
  assign _zz_7 = decode_ENV_CTRL;
  assign _zz_4 = execute_ENV_CTRL;
  assign _zz_2 = memory_ENV_CTRL;
  assign _zz_5 = _zz_39;
  assign _zz_23 = decode_to_execute_ENV_CTRL;
  assign _zz_22 = execute_to_memory_ENV_CTRL;
  assign _zz_24 = memory_to_writeBack_ENV_CTRL;
  assign decode_arbitration_isFlushed = (({writeBack_arbitration_flushNext,{memory_arbitration_flushNext,execute_arbitration_flushNext}} != (3'b000)) || ({writeBack_arbitration_flushIt,{memory_arbitration_flushIt,{execute_arbitration_flushIt,decode_arbitration_flushIt}}} != (4'b0000)));
  assign execute_arbitration_isFlushed = (({writeBack_arbitration_flushNext,memory_arbitration_flushNext} != (2'b00)) || ({writeBack_arbitration_flushIt,{memory_arbitration_flushIt,execute_arbitration_flushIt}} != (3'b000)));
  assign memory_arbitration_isFlushed = ((writeBack_arbitration_flushNext != (1'b0)) || ({writeBack_arbitration_flushIt,memory_arbitration_flushIt} != (2'b00)));
  assign writeBack_arbitration_isFlushed = (1'b0 || (writeBack_arbitration_flushIt != (1'b0)));
  assign decode_arbitration_isStuckByOthers = (decode_arbitration_haltByOther || (((1'b0 || execute_arbitration_isStuck) || memory_arbitration_isStuck) || writeBack_arbitration_isStuck));
  assign decode_arbitration_isStuck = (decode_arbitration_haltItself || decode_arbitration_isStuckByOthers);
  assign decode_arbitration_isMoving = ((! decode_arbitration_isStuck) && (! decode_arbitration_removeIt));
  assign decode_arbitration_isFiring = ((decode_arbitration_isValid && (! decode_arbitration_isStuck)) && (! decode_arbitration_removeIt));
  assign execute_arbitration_isStuckByOthers = (execute_arbitration_haltByOther || ((1'b0 || memory_arbitration_isStuck) || writeBack_arbitration_isStuck));
  assign execute_arbitration_isStuck = (execute_arbitration_haltItself || execute_arbitration_isStuckByOthers);
  assign execute_arbitration_isMoving = ((! execute_arbitration_isStuck) && (! execute_arbitration_removeIt));
  assign execute_arbitration_isFiring = ((execute_arbitration_isValid && (! execute_arbitration_isStuck)) && (! execute_arbitration_removeIt));
  assign memory_arbitration_isStuckByOthers = (memory_arbitration_haltByOther || (1'b0 || writeBack_arbitration_isStuck));
  assign memory_arbitration_isStuck = (memory_arbitration_haltItself || memory_arbitration_isStuckByOthers);
  assign memory_arbitration_isMoving = ((! memory_arbitration_isStuck) && (! memory_arbitration_removeIt));
  assign memory_arbitration_isFiring = ((memory_arbitration_isValid && (! memory_arbitration_isStuck)) && (! memory_arbitration_removeIt));
  assign writeBack_arbitration_isStuckByOthers = (writeBack_arbitration_haltByOther || 1'b0);
  assign writeBack_arbitration_isStuck = (writeBack_arbitration_haltItself || writeBack_arbitration_isStuckByOthers);
  assign writeBack_arbitration_isMoving = ((! writeBack_arbitration_isStuck) && (! writeBack_arbitration_removeIt));
  assign writeBack_arbitration_isFiring = ((writeBack_arbitration_isValid && (! writeBack_arbitration_isStuck)) && (! writeBack_arbitration_removeIt));
  always @ (*) begin
    IBusCachedPlugin_injectionPort_ready = 1'b0;
    case(_zz_141)
      3'b000 : begin
      end
      3'b001 : begin
      end
      3'b010 : begin
      end
      3'b011 : begin
      end
      3'b100 : begin
        IBusCachedPlugin_injectionPort_ready = 1'b1;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_142 = 32'h0;
    if(execute_CsrPlugin_csr_768)begin
      _zz_142[12 : 11] = CsrPlugin_mstatus_MPP;
      _zz_142[7 : 7] = CsrPlugin_mstatus_MPIE;
      _zz_142[3 : 3] = CsrPlugin_mstatus_MIE;
    end
  end

  always @ (*) begin
    _zz_143 = 32'h0;
    if(execute_CsrPlugin_csr_836)begin
      _zz_143[11 : 11] = CsrPlugin_mip_MEIP;
      _zz_143[7 : 7] = CsrPlugin_mip_MTIP;
      _zz_143[3 : 3] = CsrPlugin_mip_MSIP;
    end
  end

  always @ (*) begin
    _zz_144 = 32'h0;
    if(execute_CsrPlugin_csr_772)begin
      _zz_144[11 : 11] = CsrPlugin_mie_MEIE;
      _zz_144[7 : 7] = CsrPlugin_mie_MTIE;
      _zz_144[3 : 3] = CsrPlugin_mie_MSIE;
    end
  end

  always @ (*) begin
    _zz_145 = 32'h0;
    if(execute_CsrPlugin_csr_773)begin
      _zz_145[31 : 2] = CsrPlugin_mtvec_base;
      _zz_145[1 : 0] = CsrPlugin_mtvec_mode;
    end
  end

  always @ (*) begin
    _zz_146 = 32'h0;
    if(execute_CsrPlugin_csr_833)begin
      _zz_146[31 : 0] = CsrPlugin_mepc;
    end
  end

  always @ (*) begin
    _zz_147 = 32'h0;
    if(execute_CsrPlugin_csr_834)begin
      _zz_147[31 : 31] = CsrPlugin_mcause_interrupt;
      _zz_147[3 : 0] = CsrPlugin_mcause_exceptionCode;
    end
  end

  always @ (*) begin
    _zz_148 = 32'h0;
    if(execute_CsrPlugin_csr_835)begin
      _zz_148[31 : 0] = CsrPlugin_mtval;
    end
  end

  assign execute_CsrPlugin_readData = (((32'h0 | _zz_142) | (_zz_143 | _zz_144)) | ((_zz_145 | _zz_146) | (_zz_147 | _zz_148)));
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      IBusCachedPlugin_fetchPc_pcReg <= 32'hf9000000;
      IBusCachedPlugin_fetchPc_correctionReg <= 1'b0;
      IBusCachedPlugin_fetchPc_booted <= 1'b0;
      IBusCachedPlugin_fetchPc_inc <= 1'b0;
      _zz_62 <= 1'b0;
      _zz_64 <= 1'b0;
      IBusCachedPlugin_injector_nextPcCalc_valids_0 <= 1'b0;
      IBusCachedPlugin_injector_nextPcCalc_valids_1 <= 1'b0;
      IBusCachedPlugin_injector_nextPcCalc_valids_2 <= 1'b0;
      IBusCachedPlugin_injector_nextPcCalc_valids_3 <= 1'b0;
      IBusCachedPlugin_injector_nextPcCalc_valids_4 <= 1'b0;
      IBusCachedPlugin_rspCounter <= _zz_77;
      IBusCachedPlugin_rspCounter <= 32'h0;
      dataCache_1_io_mem_cmd_s2mPipe_rValid <= 1'b0;
      dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rValid <= 1'b0;
      dBus_rsp_regNext_valid <= 1'b0;
      DBusCachedPlugin_rspCounter <= _zz_78;
      DBusCachedPlugin_rspCounter <= 32'h0;
      memory_DivPlugin_div_counter_value <= 6'h0;
      _zz_112 <= 1'b0;
      CsrPlugin_mstatus_MIE <= 1'b0;
      CsrPlugin_mstatus_MPIE <= 1'b0;
      CsrPlugin_mstatus_MPP <= (2'b11);
      CsrPlugin_mie_MEIE <= 1'b0;
      CsrPlugin_mie_MTIE <= 1'b0;
      CsrPlugin_mie_MSIE <= 1'b0;
      CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode <= 1'b0;
      CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute <= 1'b0;
      CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory <= 1'b0;
      CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack <= 1'b0;
      CsrPlugin_interrupt_valid <= 1'b0;
      CsrPlugin_pipelineLiberator_pcValids_0 <= 1'b0;
      CsrPlugin_pipelineLiberator_pcValids_1 <= 1'b0;
      CsrPlugin_pipelineLiberator_pcValids_2 <= 1'b0;
      CsrPlugin_hadException <= 1'b0;
      execute_CsrPlugin_wfiWake <= 1'b0;
      execute_arbitration_isValid <= 1'b0;
      memory_arbitration_isValid <= 1'b0;
      writeBack_arbitration_isValid <= 1'b0;
      _zz_141 <= (3'b000);
    end else begin
      if(IBusCachedPlugin_fetchPc_correction)begin
        IBusCachedPlugin_fetchPc_correctionReg <= 1'b1;
      end
      if((IBusCachedPlugin_fetchPc_output_valid && IBusCachedPlugin_fetchPc_output_ready))begin
        IBusCachedPlugin_fetchPc_correctionReg <= 1'b0;
      end
      IBusCachedPlugin_fetchPc_booted <= 1'b1;
      if((IBusCachedPlugin_fetchPc_correction || IBusCachedPlugin_fetchPc_pcRegPropagate))begin
        IBusCachedPlugin_fetchPc_inc <= 1'b0;
      end
      if((IBusCachedPlugin_fetchPc_output_valid && IBusCachedPlugin_fetchPc_output_ready))begin
        IBusCachedPlugin_fetchPc_inc <= 1'b1;
      end
      if(((! IBusCachedPlugin_fetchPc_output_valid) && IBusCachedPlugin_fetchPc_output_ready))begin
        IBusCachedPlugin_fetchPc_inc <= 1'b0;
      end
      if((IBusCachedPlugin_fetchPc_booted && ((IBusCachedPlugin_fetchPc_output_ready || IBusCachedPlugin_fetchPc_correction) || IBusCachedPlugin_fetchPc_pcRegPropagate)))begin
        IBusCachedPlugin_fetchPc_pcReg <= IBusCachedPlugin_fetchPc_pc;
      end
      if(IBusCachedPlugin_iBusRsp_flush)begin
        _zz_62 <= 1'b0;
      end
      if(_zz_60)begin
        _zz_62 <= (IBusCachedPlugin_iBusRsp_stages_0_output_valid && (! 1'b0));
      end
      if(IBusCachedPlugin_iBusRsp_flush)begin
        _zz_64 <= 1'b0;
      end
      if(IBusCachedPlugin_iBusRsp_stages_1_output_ready)begin
        _zz_64 <= (IBusCachedPlugin_iBusRsp_stages_1_output_valid && (! IBusCachedPlugin_iBusRsp_flush));
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_0 <= 1'b0;
      end
      if((! (! IBusCachedPlugin_iBusRsp_stages_1_input_ready)))begin
        IBusCachedPlugin_injector_nextPcCalc_valids_0 <= 1'b1;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_1 <= 1'b0;
      end
      if((! (! IBusCachedPlugin_iBusRsp_stages_2_input_ready)))begin
        IBusCachedPlugin_injector_nextPcCalc_valids_1 <= IBusCachedPlugin_injector_nextPcCalc_valids_0;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_1 <= 1'b0;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_2 <= 1'b0;
      end
      if((! execute_arbitration_isStuck))begin
        IBusCachedPlugin_injector_nextPcCalc_valids_2 <= IBusCachedPlugin_injector_nextPcCalc_valids_1;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_2 <= 1'b0;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_3 <= 1'b0;
      end
      if((! memory_arbitration_isStuck))begin
        IBusCachedPlugin_injector_nextPcCalc_valids_3 <= IBusCachedPlugin_injector_nextPcCalc_valids_2;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_3 <= 1'b0;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_4 <= 1'b0;
      end
      if((! writeBack_arbitration_isStuck))begin
        IBusCachedPlugin_injector_nextPcCalc_valids_4 <= IBusCachedPlugin_injector_nextPcCalc_valids_3;
      end
      if(IBusCachedPlugin_fetchPc_flushed)begin
        IBusCachedPlugin_injector_nextPcCalc_valids_4 <= 1'b0;
      end
      if(iBus_rsp_valid)begin
        IBusCachedPlugin_rspCounter <= (IBusCachedPlugin_rspCounter + 32'h00000001);
      end
      if(dataCache_1_io_mem_cmd_s2mPipe_ready)begin
        dataCache_1_io_mem_cmd_s2mPipe_rValid <= 1'b0;
      end
      if(_zz_199)begin
        dataCache_1_io_mem_cmd_s2mPipe_rValid <= dataCache_1_io_mem_cmd_valid;
      end
      if(dataCache_1_io_mem_cmd_s2mPipe_ready)begin
        dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rValid <= dataCache_1_io_mem_cmd_s2mPipe_valid;
      end
      dBus_rsp_regNext_valid <= dBus_rsp_valid;
      if(dBus_rsp_valid)begin
        DBusCachedPlugin_rspCounter <= (DBusCachedPlugin_rspCounter + 32'h00000001);
      end
      memory_DivPlugin_div_counter_value <= memory_DivPlugin_div_counter_valueNext;
      _zz_112 <= (_zz_37 && writeBack_arbitration_isFiring);
      if((! decode_arbitration_isStuck))begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode <= 1'b0;
      end else begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_decode <= CsrPlugin_exceptionPortCtrl_exceptionValids_decode;
      end
      if((! execute_arbitration_isStuck))begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute <= (CsrPlugin_exceptionPortCtrl_exceptionValids_decode && (! decode_arbitration_isStuck));
      end else begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_execute <= CsrPlugin_exceptionPortCtrl_exceptionValids_execute;
      end
      if((! memory_arbitration_isStuck))begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory <= (CsrPlugin_exceptionPortCtrl_exceptionValids_execute && (! execute_arbitration_isStuck));
      end else begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_memory <= CsrPlugin_exceptionPortCtrl_exceptionValids_memory;
      end
      if((! writeBack_arbitration_isStuck))begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack <= (CsrPlugin_exceptionPortCtrl_exceptionValids_memory && (! memory_arbitration_isStuck));
      end else begin
        CsrPlugin_exceptionPortCtrl_exceptionValidsRegs_writeBack <= 1'b0;
      end
      CsrPlugin_interrupt_valid <= 1'b0;
      if(_zz_200)begin
        if(_zz_201)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_202)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_203)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
      end
      if(CsrPlugin_pipelineLiberator_active)begin
        if((! execute_arbitration_isStuck))begin
          CsrPlugin_pipelineLiberator_pcValids_0 <= 1'b1;
        end
        if((! memory_arbitration_isStuck))begin
          CsrPlugin_pipelineLiberator_pcValids_1 <= CsrPlugin_pipelineLiberator_pcValids_0;
        end
        if((! writeBack_arbitration_isStuck))begin
          CsrPlugin_pipelineLiberator_pcValids_2 <= CsrPlugin_pipelineLiberator_pcValids_1;
        end
      end
      if(((! CsrPlugin_pipelineLiberator_active) || decode_arbitration_removeIt))begin
        CsrPlugin_pipelineLiberator_pcValids_0 <= 1'b0;
        CsrPlugin_pipelineLiberator_pcValids_1 <= 1'b0;
        CsrPlugin_pipelineLiberator_pcValids_2 <= 1'b0;
      end
      if(CsrPlugin_interruptJump)begin
        CsrPlugin_interrupt_valid <= 1'b0;
      end
      CsrPlugin_hadException <= CsrPlugin_exception;
      if(_zz_182)begin
        case(CsrPlugin_targetPrivilege)
          2'b11 : begin
            CsrPlugin_mstatus_MIE <= 1'b0;
            CsrPlugin_mstatus_MPIE <= CsrPlugin_mstatus_MIE;
            CsrPlugin_mstatus_MPP <= CsrPlugin_privilege;
          end
          default : begin
          end
        endcase
      end
      if(_zz_183)begin
        case(_zz_185)
          2'b11 : begin
            CsrPlugin_mstatus_MPP <= (2'b00);
            CsrPlugin_mstatus_MIE <= CsrPlugin_mstatus_MPIE;
            CsrPlugin_mstatus_MPIE <= 1'b1;
          end
          default : begin
          end
        endcase
      end
      execute_CsrPlugin_wfiWake <= (({_zz_137,{_zz_136,_zz_135}} != (3'b000)) || CsrPlugin_thirdPartyWake);
      if(((! execute_arbitration_isStuck) || execute_arbitration_removeIt))begin
        execute_arbitration_isValid <= 1'b0;
      end
      if(((! decode_arbitration_isStuck) && (! decode_arbitration_removeIt)))begin
        execute_arbitration_isValid <= decode_arbitration_isValid;
      end
      if(((! memory_arbitration_isStuck) || memory_arbitration_removeIt))begin
        memory_arbitration_isValid <= 1'b0;
      end
      if(((! execute_arbitration_isStuck) && (! execute_arbitration_removeIt)))begin
        memory_arbitration_isValid <= execute_arbitration_isValid;
      end
      if(((! writeBack_arbitration_isStuck) || writeBack_arbitration_removeIt))begin
        writeBack_arbitration_isValid <= 1'b0;
      end
      if(((! memory_arbitration_isStuck) && (! memory_arbitration_removeIt)))begin
        writeBack_arbitration_isValid <= memory_arbitration_isValid;
      end
      case(_zz_141)
        3'b000 : begin
          if(IBusCachedPlugin_injectionPort_valid)begin
            _zz_141 <= (3'b001);
          end
        end
        3'b001 : begin
          _zz_141 <= (3'b010);
        end
        3'b010 : begin
          _zz_141 <= (3'b011);
        end
        3'b011 : begin
          if((! decode_arbitration_isStuck))begin
            _zz_141 <= (3'b100);
          end
        end
        3'b100 : begin
          _zz_141 <= (3'b000);
        end
        default : begin
        end
      endcase
      if(execute_CsrPlugin_csr_768)begin
        if(execute_CsrPlugin_writeEnable)begin
          CsrPlugin_mstatus_MPP <= execute_CsrPlugin_writeData[12 : 11];
          CsrPlugin_mstatus_MPIE <= _zz_293[0];
          CsrPlugin_mstatus_MIE <= _zz_294[0];
        end
      end
      if(execute_CsrPlugin_csr_772)begin
        if(execute_CsrPlugin_writeEnable)begin
          CsrPlugin_mie_MEIE <= _zz_296[0];
          CsrPlugin_mie_MTIE <= _zz_297[0];
          CsrPlugin_mie_MSIE <= _zz_298[0];
        end
      end
    end
  end

  always @ (posedge io_systemClk) begin
    if(IBusCachedPlugin_iBusRsp_stages_1_output_ready)begin
      _zz_65 <= IBusCachedPlugin_iBusRsp_stages_1_output_payload;
    end
    if(IBusCachedPlugin_iBusRsp_stages_1_input_ready)begin
      IBusCachedPlugin_s1_tightlyCoupledHit <= IBusCachedPlugin_s0_tightlyCoupledHit;
    end
    if(IBusCachedPlugin_iBusRsp_stages_2_input_ready)begin
      IBusCachedPlugin_s2_tightlyCoupledHit <= IBusCachedPlugin_s1_tightlyCoupledHit;
    end
    if(_zz_199)begin
      dataCache_1_io_mem_cmd_s2mPipe_rData_wr <= dataCache_1_io_mem_cmd_payload_wr;
      dataCache_1_io_mem_cmd_s2mPipe_rData_address <= dataCache_1_io_mem_cmd_payload_address;
      dataCache_1_io_mem_cmd_s2mPipe_rData_data <= dataCache_1_io_mem_cmd_payload_data;
      dataCache_1_io_mem_cmd_s2mPipe_rData_mask <= dataCache_1_io_mem_cmd_payload_mask;
      dataCache_1_io_mem_cmd_s2mPipe_rData_length <= dataCache_1_io_mem_cmd_payload_length;
      dataCache_1_io_mem_cmd_s2mPipe_rData_last <= dataCache_1_io_mem_cmd_payload_last;
    end
    if(dataCache_1_io_mem_cmd_s2mPipe_ready)begin
      dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_wr <= dataCache_1_io_mem_cmd_s2mPipe_payload_wr;
      dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_address <= dataCache_1_io_mem_cmd_s2mPipe_payload_address;
      dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_data <= dataCache_1_io_mem_cmd_s2mPipe_payload_data;
      dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_mask <= dataCache_1_io_mem_cmd_s2mPipe_payload_mask;
      dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_length <= dataCache_1_io_mem_cmd_s2mPipe_payload_length;
      dataCache_1_io_mem_cmd_s2mPipe_m2sPipe_rData_last <= dataCache_1_io_mem_cmd_s2mPipe_payload_last;
    end
    dBus_rsp_regNext_payload_data <= dBus_rsp_payload_data;
    dBus_rsp_regNext_payload_error <= dBus_rsp_payload_error;
    if((memory_DivPlugin_div_counter_value == 6'h20))begin
      memory_DivPlugin_div_done <= 1'b1;
    end
    if((! memory_arbitration_isStuck))begin
      memory_DivPlugin_div_done <= 1'b0;
    end
    if(_zz_174)begin
      if(_zz_188)begin
        memory_DivPlugin_rs1[31 : 0] <= memory_DivPlugin_div_stage_0_outNumerator;
        memory_DivPlugin_accumulator[31 : 0] <= memory_DivPlugin_div_stage_0_outRemainder;
        if((memory_DivPlugin_div_counter_value == 6'h20))begin
          memory_DivPlugin_div_result <= _zz_272[31:0];
        end
      end
    end
    if(_zz_189)begin
      memory_DivPlugin_accumulator <= 65'h0;
      memory_DivPlugin_rs1 <= ((_zz_108 ? (~ _zz_109) : _zz_109) + _zz_278);
      memory_DivPlugin_rs2 <= ((_zz_107 ? (~ execute_RS2) : execute_RS2) + _zz_280);
      memory_DivPlugin_div_needRevert <= ((_zz_108 ^ (_zz_107 && (! execute_INSTRUCTION[13]))) && (! (((execute_RS2 == 32'h0) && execute_IS_RS2_SIGNED) && (! execute_INSTRUCTION[13]))));
    end
    _zz_113 <= _zz_36[11 : 7];
    _zz_114 <= _zz_46;
    CsrPlugin_mip_MEIP <= externalInterrupt;
    CsrPlugin_mip_MTIP <= timerInterrupt;
    CsrPlugin_mip_MSIP <= softwareInterrupt;
    CsrPlugin_mcycle <= (CsrPlugin_mcycle + 64'h0000000000000001);
    if(writeBack_arbitration_isFiring)begin
      CsrPlugin_minstret <= (CsrPlugin_minstret + 64'h0000000000000001);
    end
    if(_zz_179)begin
      CsrPlugin_exceptionPortCtrl_exceptionContext_code <= (_zz_139 ? IBusCachedPlugin_decodeExceptionPort_payload_code : decodeExceptionPort_payload_code);
      CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr <= (_zz_139 ? IBusCachedPlugin_decodeExceptionPort_payload_badAddr : decodeExceptionPort_payload_badAddr);
    end
    if(CsrPlugin_selfException_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionContext_code <= CsrPlugin_selfException_payload_code;
      CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr <= CsrPlugin_selfException_payload_badAddr;
    end
    if(BranchPlugin_branchExceptionPort_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionContext_code <= BranchPlugin_branchExceptionPort_payload_code;
      CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr <= BranchPlugin_branchExceptionPort_payload_badAddr;
    end
    if(DBusCachedPlugin_exceptionBus_valid)begin
      CsrPlugin_exceptionPortCtrl_exceptionContext_code <= DBusCachedPlugin_exceptionBus_payload_code;
      CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr <= DBusCachedPlugin_exceptionBus_payload_badAddr;
    end
    if(_zz_200)begin
      if(_zz_201)begin
        CsrPlugin_interrupt_code <= (4'b0111);
        CsrPlugin_interrupt_targetPrivilege <= (2'b11);
      end
      if(_zz_202)begin
        CsrPlugin_interrupt_code <= (4'b0011);
        CsrPlugin_interrupt_targetPrivilege <= (2'b11);
      end
      if(_zz_203)begin
        CsrPlugin_interrupt_code <= (4'b1011);
        CsrPlugin_interrupt_targetPrivilege <= (2'b11);
      end
    end
    if(_zz_182)begin
      case(CsrPlugin_targetPrivilege)
        2'b11 : begin
          CsrPlugin_mcause_interrupt <= (! CsrPlugin_hadException);
          CsrPlugin_mcause_exceptionCode <= CsrPlugin_trapCause;
          CsrPlugin_mepc <= writeBack_PC;
          if(CsrPlugin_hadException)begin
            CsrPlugin_mtval <= CsrPlugin_exceptionPortCtrl_exceptionContext_badAddr;
          end
        end
        default : begin
        end
      endcase
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_PC <= _zz_29;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_PC <= execute_PC;
    end
    if(((! writeBack_arbitration_isStuck) && (! CsrPlugin_exceptionPortCtrl_exceptionValids_writeBack)))begin
      memory_to_writeBack_PC <= memory_PC;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_INSTRUCTION <= decode_INSTRUCTION;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_INSTRUCTION <= execute_INSTRUCTION;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_INSTRUCTION <= memory_INSTRUCTION;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_FORMAL_PC_NEXT <= _zz_50;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_FORMAL_PC_NEXT <= execute_FORMAL_PC_NEXT;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_FORMAL_PC_NEXT <= _zz_49;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC_USE_SUB_LESS <= decode_SRC_USE_SUB_LESS;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_ENABLE <= decode_MEMORY_ENABLE;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_ENABLE <= execute_MEMORY_ENABLE;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_ENABLE <= memory_MEMORY_ENABLE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_ALU_CTRL <= _zz_19;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_REGFILE_WRITE_VALID <= decode_REGFILE_WRITE_VALID;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_REGFILE_WRITE_VALID <= execute_REGFILE_WRITE_VALID;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_REGFILE_WRITE_VALID <= memory_REGFILE_WRITE_VALID;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_BYPASSABLE_EXECUTE_STAGE <= decode_BYPASSABLE_EXECUTE_STAGE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_BYPASSABLE_MEMORY_STAGE <= decode_BYPASSABLE_MEMORY_STAGE;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_BYPASSABLE_MEMORY_STAGE <= execute_BYPASSABLE_MEMORY_STAGE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_WR <= decode_MEMORY_WR;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_WR <= execute_MEMORY_WR;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_WR <= memory_MEMORY_WR;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_MANAGMENT <= decode_MEMORY_MANAGMENT;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC_LESS_UNSIGNED <= decode_SRC_LESS_UNSIGNED;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_ALU_BITWISE_CTRL <= _zz_16;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SHIFT_CTRL <= _zz_13;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_SHIFT_CTRL <= _zz_10;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_MUL <= decode_IS_MUL;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_IS_MUL <= execute_IS_MUL;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_IS_MUL <= memory_IS_MUL;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_DIV <= decode_IS_DIV;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_IS_DIV <= execute_IS_DIV;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_RS1_SIGNED <= decode_IS_RS1_SIGNED;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_RS2_SIGNED <= decode_IS_RS2_SIGNED;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_BRANCH_CTRL <= _zz_8;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_CSR <= decode_IS_CSR;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_ENV_CTRL <= _zz_6;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_ENV_CTRL <= _zz_3;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_ENV_CTRL <= _zz_1;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_RS1 <= _zz_32;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_RS2 <= _zz_30;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC2_FORCE_ZERO <= decode_SRC2_FORCE_ZERO;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC1 <= decode_SRC1;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC2 <= decode_SRC2;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_PREDICTION_HAD_BRANCHED2 <= decode_PREDICTION_HAD_BRANCHED2;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_CSR_WRITE_OPCODE <= decode_CSR_WRITE_OPCODE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_CSR_READ_OPCODE <= decode_CSR_READ_OPCODE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_DO_EBREAK <= decode_DO_EBREAK;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_ADDRESS_LOW <= execute_MEMORY_ADDRESS_LOW;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_ADDRESS_LOW <= memory_MEMORY_ADDRESS_LOW;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_REGFILE_WRITE_DATA <= _zz_21;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_REGFILE_WRITE_DATA <= _zz_26;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_SHIFT_RIGHT <= execute_SHIFT_RIGHT;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MUL_LL <= execute_MUL_LL;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MUL_LH <= execute_MUL_LH;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MUL_HL <= execute_MUL_HL;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MUL_HH <= execute_MUL_HH;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MUL_HH <= memory_MUL_HH;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_BRANCH_DO <= execute_BRANCH_DO;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_BRANCH_CALC <= execute_BRANCH_CALC;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MUL_LOW <= memory_MUL_LOW;
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_3860 <= (decode_INSTRUCTION[31 : 20] == 12'hf14);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_768 <= (decode_INSTRUCTION[31 : 20] == 12'h300);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_836 <= (decode_INSTRUCTION[31 : 20] == 12'h344);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_772 <= (decode_INSTRUCTION[31 : 20] == 12'h304);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_773 <= (decode_INSTRUCTION[31 : 20] == 12'h305);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_833 <= (decode_INSTRUCTION[31 : 20] == 12'h341);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_834 <= (decode_INSTRUCTION[31 : 20] == 12'h342);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_835 <= (decode_INSTRUCTION[31 : 20] == 12'h343);
    end
    if(execute_CsrPlugin_csr_836)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_mip_MSIP <= _zz_295[0];
      end
    end
    if(execute_CsrPlugin_csr_773)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_mtvec_base <= execute_CsrPlugin_writeData[31 : 2];
        CsrPlugin_mtvec_mode <= execute_CsrPlugin_writeData[1 : 0];
      end
    end
    if(execute_CsrPlugin_csr_833)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_mepc <= execute_CsrPlugin_writeData[31 : 0];
      end
    end
  end

  always @ (posedge io_systemClk) begin
    DebugPlugin_firstCycle <= 1'b0;
    if(debug_bus_cmd_ready)begin
      DebugPlugin_firstCycle <= 1'b1;
    end
    DebugPlugin_secondCycle <= DebugPlugin_firstCycle;
    DebugPlugin_isPipBusy <= (({writeBack_arbitration_isValid,{memory_arbitration_isValid,{execute_arbitration_isValid,decode_arbitration_isValid}}} != (4'b0000)) || IBusCachedPlugin_incomingInstruction);
    if(writeBack_arbitration_isValid)begin
      DebugPlugin_busReadDataReg <= _zz_46;
    end
    _zz_140 <= debug_bus_cmd_payload_address[2];
    if(_zz_180)begin
      DebugPlugin_busReadDataReg <= execute_PC;
    end
    DebugPlugin_resetIt_regNext <= DebugPlugin_resetIt;
  end

  always @ (posedge io_systemClk) begin
    if(debugCd_logic_outputReset) begin
      DebugPlugin_resetIt <= 1'b0;
      DebugPlugin_haltIt <= 1'b0;
      DebugPlugin_stepIt <= 1'b0;
      DebugPlugin_godmode <= 1'b0;
      DebugPlugin_haltedByBreak <= 1'b0;
    end else begin
      if((DebugPlugin_haltIt && (! DebugPlugin_isPipBusy)))begin
        DebugPlugin_godmode <= 1'b1;
      end
      if(debug_bus_cmd_valid)begin
        case(_zz_198)
          6'b000000 : begin
            if(debug_bus_cmd_payload_wr)begin
              DebugPlugin_stepIt <= debug_bus_cmd_payload_data[4];
              if(debug_bus_cmd_payload_data[16])begin
                DebugPlugin_resetIt <= 1'b1;
              end
              if(debug_bus_cmd_payload_data[24])begin
                DebugPlugin_resetIt <= 1'b0;
              end
              if(debug_bus_cmd_payload_data[17])begin
                DebugPlugin_haltIt <= 1'b1;
              end
              if(debug_bus_cmd_payload_data[25])begin
                DebugPlugin_haltIt <= 1'b0;
              end
              if(debug_bus_cmd_payload_data[25])begin
                DebugPlugin_haltedByBreak <= 1'b0;
              end
              if(debug_bus_cmd_payload_data[25])begin
                DebugPlugin_godmode <= 1'b0;
              end
            end
          end
          6'b000001 : begin
          end
          default : begin
          end
        endcase
      end
      if(_zz_180)begin
        if(_zz_181)begin
          DebugPlugin_haltIt <= 1'b1;
          DebugPlugin_haltedByBreak <= 1'b1;
        end
      end
      if(_zz_184)begin
        if(decode_arbitration_isValid)begin
          DebugPlugin_haltIt <= 1'b1;
        end
      end
    end
  end


endmodule

module BufferCC_26_e12a9decc0704226832aec4017b36e8d (
  input               io_initial,
  input               io_dataIn,
  output              io_dataOut,
  input               io_systemClk,
  input               ddrCd_logic_outputReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge io_systemClk or posedge ddrCd_logic_outputReset) begin
    if (ddrCd_logic_outputReset) begin
      buffers_0 <= io_initial;
      buffers_1 <= io_initial;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_25_e12a9decc0704226832aec4017b36e8d (
  input               io_initial,
  input               io_dataIn,
  output              io_dataOut,
  input               io_memoryClk,
  input               debugCd_logic_outputReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge io_memoryClk or posedge debugCd_logic_outputReset) begin
    if (debugCd_logic_outputReset) begin
      buffers_0 <= io_initial;
      buffers_1 <= io_initial;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_24_e12a9decc0704226832aec4017b36e8d (
  input               io_initial,
  input               io_dataIn,
  output              io_dataOut,
  input               io_systemClk,
  input               io_asyncReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge io_systemClk or posedge io_asyncReset) begin
    if (io_asyncReset) begin
      buffers_0 <= io_initial;
      buffers_1 <= io_initial;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_23_e12a9decc0704226832aec4017b36e8d (
  input               io_dataIn,
  output              io_dataOut,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge io_systemClk) begin
    buffers_0 <= io_dataIn;
    buffers_1 <= buffers_0;
  end


endmodule

module Apb3Gpio2_e12a9decc0704226832aec4017b36e8d (
  input      [7:0]    io_gpio_read,
  output reg [7:0]    io_gpio_write,
  output reg [7:0]    io_gpio_writeEnable,
  input      [11:0]   io_bus_PADDR,
  input      [0:0]    io_bus_PSEL,
  input               io_bus_PENABLE,
  output              io_bus_PREADY,
  input               io_bus_PWRITE,
  input      [31:0]   io_bus_PWDATA,
  output reg [31:0]   io_bus_PRDATA,
  output              io_bus_PSLVERROR,
  output reg [7:0]    io_interrupt,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  wire       [7:0]    io_gpio_read_buffercc_io_dataOut;
  wire       [0:0]    _zz_25;
  wire       [0:0]    _zz_26;
  wire       [0:0]    _zz_27;
  wire       [0:0]    _zz_28;
  wire       [0:0]    _zz_29;
  wire       [0:0]    _zz_30;
  wire       [0:0]    _zz_31;
  wire       [0:0]    _zz_32;
  wire       [0:0]    _zz_33;
  wire       [0:0]    _zz_34;
  wire       [0:0]    _zz_35;
  wire       [0:0]    _zz_36;
  wire       [0:0]    _zz_37;
  wire       [0:0]    _zz_38;
  wire       [0:0]    _zz_39;
  wire       [0:0]    _zz_40;
  wire       [0:0]    _zz_41;
  wire       [0:0]    _zz_42;
  wire       [0:0]    _zz_43;
  wire       [0:0]    _zz_44;
  wire       [0:0]    _zz_45;
  wire       [0:0]    _zz_46;
  wire       [0:0]    _zz_47;
  wire       [0:0]    _zz_48;
  wire                mapper_askWrite;
  wire                mapper_askRead;
  wire                mapper_doWrite;
  wire                mapper_doRead;
  wire       [7:0]    syncronized;
  reg        [7:0]    last;
  reg                 _zz_1;
  reg                 _zz_2;
  reg                 _zz_3;
  reg                 _zz_4;
  reg                 _zz_5;
  reg                 _zz_6;
  reg                 _zz_7;
  reg                 _zz_8;
  reg                 _zz_9;
  reg                 _zz_10;
  reg                 _zz_11;
  reg                 _zz_12;
  reg                 _zz_13;
  reg                 _zz_14;
  reg                 _zz_15;
  reg                 _zz_16;
  reg        [7:0]    interrupt_enable_high;
  reg        [7:0]    interrupt_enable_low;
  reg        [7:0]    interrupt_enable_rise;
  reg        [7:0]    interrupt_enable_fall;
  wire       [7:0]    interrupt_valid;
  reg                 _zz_17;
  reg                 _zz_18;
  reg                 _zz_19;
  reg                 _zz_20;
  reg                 _zz_21;
  reg                 _zz_22;
  reg                 _zz_23;
  reg                 _zz_24;

  assign _zz_25 = io_bus_PWDATA[0 : 0];
  assign _zz_26 = io_bus_PWDATA[1 : 1];
  assign _zz_27 = io_bus_PWDATA[2 : 2];
  assign _zz_28 = io_bus_PWDATA[3 : 3];
  assign _zz_29 = io_bus_PWDATA[4 : 4];
  assign _zz_30 = io_bus_PWDATA[5 : 5];
  assign _zz_31 = io_bus_PWDATA[6 : 6];
  assign _zz_32 = io_bus_PWDATA[7 : 7];
  assign _zz_33 = io_bus_PWDATA[0 : 0];
  assign _zz_34 = io_bus_PWDATA[1 : 1];
  assign _zz_35 = io_bus_PWDATA[2 : 2];
  assign _zz_36 = io_bus_PWDATA[3 : 3];
  assign _zz_37 = io_bus_PWDATA[4 : 4];
  assign _zz_38 = io_bus_PWDATA[5 : 5];
  assign _zz_39 = io_bus_PWDATA[6 : 6];
  assign _zz_40 = io_bus_PWDATA[7 : 7];
  assign _zz_41 = io_bus_PWDATA[0 : 0];
  assign _zz_42 = io_bus_PWDATA[1 : 1];
  assign _zz_43 = io_bus_PWDATA[0 : 0];
  assign _zz_44 = io_bus_PWDATA[1 : 1];
  assign _zz_45 = io_bus_PWDATA[0 : 0];
  assign _zz_46 = io_bus_PWDATA[1 : 1];
  assign _zz_47 = io_bus_PWDATA[0 : 0];
  assign _zz_48 = io_bus_PWDATA[1 : 1];
  BufferCC_22_e12a9decc0704226832aec4017b36e8d io_gpio_read_buffercc (
    .io_dataIn                     (io_gpio_read[7:0]                      ), //i
    .io_dataOut                    (io_gpio_read_buffercc_io_dataOut[7:0]  ), //o
    .io_systemClk                  (io_systemClk                           ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset             )  //i
  );
  assign io_bus_PREADY = 1'b1;
  always @ (*) begin
    io_bus_PRDATA = 32'h0;
    case(io_bus_PADDR)
      12'b000000000000 : begin
        io_bus_PRDATA[0 : 0] = syncronized[0];
        io_bus_PRDATA[1 : 1] = syncronized[1];
        io_bus_PRDATA[2 : 2] = syncronized[2];
        io_bus_PRDATA[3 : 3] = syncronized[3];
        io_bus_PRDATA[4 : 4] = syncronized[4];
        io_bus_PRDATA[5 : 5] = syncronized[5];
        io_bus_PRDATA[6 : 6] = syncronized[6];
        io_bus_PRDATA[7 : 7] = syncronized[7];
      end
      12'b000000000100 : begin
        io_bus_PRDATA[0 : 0] = _zz_1;
        io_bus_PRDATA[1 : 1] = _zz_3;
        io_bus_PRDATA[2 : 2] = _zz_5;
        io_bus_PRDATA[3 : 3] = _zz_7;
        io_bus_PRDATA[4 : 4] = _zz_9;
        io_bus_PRDATA[5 : 5] = _zz_11;
        io_bus_PRDATA[6 : 6] = _zz_13;
        io_bus_PRDATA[7 : 7] = _zz_15;
      end
      12'b000000001000 : begin
        io_bus_PRDATA[0 : 0] = _zz_2;
        io_bus_PRDATA[1 : 1] = _zz_4;
        io_bus_PRDATA[2 : 2] = _zz_6;
        io_bus_PRDATA[3 : 3] = _zz_8;
        io_bus_PRDATA[4 : 4] = _zz_10;
        io_bus_PRDATA[5 : 5] = _zz_12;
        io_bus_PRDATA[6 : 6] = _zz_14;
        io_bus_PRDATA[7 : 7] = _zz_16;
      end
      12'b000000100000 : begin
        io_bus_PRDATA[0 : 0] = _zz_17;
        io_bus_PRDATA[1 : 1] = _zz_21;
      end
      12'b000000100100 : begin
        io_bus_PRDATA[0 : 0] = _zz_18;
        io_bus_PRDATA[1 : 1] = _zz_22;
      end
      12'b000000101000 : begin
        io_bus_PRDATA[0 : 0] = _zz_19;
        io_bus_PRDATA[1 : 1] = _zz_23;
      end
      12'b000000101100 : begin
        io_bus_PRDATA[0 : 0] = _zz_20;
        io_bus_PRDATA[1 : 1] = _zz_24;
      end
      default : begin
      end
    endcase
  end

  assign io_bus_PSLVERROR = 1'b0;
  assign mapper_askWrite = ((io_bus_PSEL[0] && io_bus_PENABLE) && io_bus_PWRITE);
  assign mapper_askRead = ((io_bus_PSEL[0] && io_bus_PENABLE) && (! io_bus_PWRITE));
  assign mapper_doWrite = (((io_bus_PSEL[0] && io_bus_PENABLE) && io_bus_PREADY) && io_bus_PWRITE);
  assign mapper_doRead = (((io_bus_PSEL[0] && io_bus_PENABLE) && io_bus_PREADY) && (! io_bus_PWRITE));
  assign syncronized = io_gpio_read_buffercc_io_dataOut;
  always @ (*) begin
    io_gpio_write[0] = _zz_1;
    io_gpio_write[1] = _zz_3;
    io_gpio_write[2] = _zz_5;
    io_gpio_write[3] = _zz_7;
    io_gpio_write[4] = _zz_9;
    io_gpio_write[5] = _zz_11;
    io_gpio_write[6] = _zz_13;
    io_gpio_write[7] = _zz_15;
  end

  always @ (*) begin
    io_gpio_writeEnable[0] = _zz_2;
    io_gpio_writeEnable[1] = _zz_4;
    io_gpio_writeEnable[2] = _zz_6;
    io_gpio_writeEnable[3] = _zz_8;
    io_gpio_writeEnable[4] = _zz_10;
    io_gpio_writeEnable[5] = _zz_12;
    io_gpio_writeEnable[6] = _zz_14;
    io_gpio_writeEnable[7] = _zz_16;
  end

  assign interrupt_valid = ((((interrupt_enable_high & syncronized) | (interrupt_enable_low & (~ syncronized))) | (interrupt_enable_rise & (syncronized & (~ last)))) | (interrupt_enable_fall & ((~ syncronized) & last)));
  always @ (*) begin
    io_interrupt[0] = interrupt_valid[0];
    io_interrupt[1] = interrupt_valid[1];
    io_interrupt[2] = 1'b0;
    io_interrupt[3] = 1'b0;
    io_interrupt[4] = 1'b0;
    io_interrupt[5] = 1'b0;
    io_interrupt[6] = 1'b0;
    io_interrupt[7] = 1'b0;
  end

  always @ (*) begin
    interrupt_enable_rise[0] = _zz_17;
    interrupt_enable_rise[1] = _zz_21;
    interrupt_enable_rise[2] = 1'b0;
    interrupt_enable_rise[3] = 1'b0;
    interrupt_enable_rise[4] = 1'b0;
    interrupt_enable_rise[5] = 1'b0;
    interrupt_enable_rise[6] = 1'b0;
    interrupt_enable_rise[7] = 1'b0;
  end

  always @ (*) begin
    interrupt_enable_fall[0] = _zz_18;
    interrupt_enable_fall[1] = _zz_22;
    interrupt_enable_fall[2] = 1'b0;
    interrupt_enable_fall[3] = 1'b0;
    interrupt_enable_fall[4] = 1'b0;
    interrupt_enable_fall[5] = 1'b0;
    interrupt_enable_fall[6] = 1'b0;
    interrupt_enable_fall[7] = 1'b0;
  end

  always @ (*) begin
    interrupt_enable_high[0] = _zz_19;
    interrupt_enable_high[1] = _zz_23;
    interrupt_enable_high[2] = 1'b0;
    interrupt_enable_high[3] = 1'b0;
    interrupt_enable_high[4] = 1'b0;
    interrupt_enable_high[5] = 1'b0;
    interrupt_enable_high[6] = 1'b0;
    interrupt_enable_high[7] = 1'b0;
  end

  always @ (*) begin
    interrupt_enable_low[0] = _zz_20;
    interrupt_enable_low[1] = _zz_24;
    interrupt_enable_low[2] = 1'b0;
    interrupt_enable_low[3] = 1'b0;
    interrupt_enable_low[4] = 1'b0;
    interrupt_enable_low[5] = 1'b0;
    interrupt_enable_low[6] = 1'b0;
    interrupt_enable_low[7] = 1'b0;
  end

  always @ (posedge io_systemClk) begin
    last <= syncronized;
    case(io_bus_PADDR)
      12'b000000000000 : begin
      end
      12'b000000000100 : begin
        if(mapper_doWrite)begin
          _zz_1 <= _zz_25[0];
          _zz_3 <= _zz_26[0];
          _zz_5 <= _zz_27[0];
          _zz_7 <= _zz_28[0];
          _zz_9 <= _zz_29[0];
          _zz_11 <= _zz_30[0];
          _zz_13 <= _zz_31[0];
          _zz_15 <= _zz_32[0];
        end
      end
      12'b000000001000 : begin
      end
      12'b000000100000 : begin
      end
      12'b000000100100 : begin
      end
      12'b000000101000 : begin
      end
      12'b000000101100 : begin
      end
      default : begin
      end
    endcase
  end

  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      _zz_2 <= 1'b0;
      _zz_4 <= 1'b0;
      _zz_6 <= 1'b0;
      _zz_8 <= 1'b0;
      _zz_10 <= 1'b0;
      _zz_12 <= 1'b0;
      _zz_14 <= 1'b0;
      _zz_16 <= 1'b0;
      _zz_17 <= 1'b0;
      _zz_18 <= 1'b0;
      _zz_19 <= 1'b0;
      _zz_20 <= 1'b0;
      _zz_21 <= 1'b0;
      _zz_22 <= 1'b0;
      _zz_23 <= 1'b0;
      _zz_24 <= 1'b0;
    end else begin
      case(io_bus_PADDR)
        12'b000000000000 : begin
        end
        12'b000000000100 : begin
        end
        12'b000000001000 : begin
          if(mapper_doWrite)begin
            _zz_2 <= _zz_33[0];
            _zz_4 <= _zz_34[0];
            _zz_6 <= _zz_35[0];
            _zz_8 <= _zz_36[0];
            _zz_10 <= _zz_37[0];
            _zz_12 <= _zz_38[0];
            _zz_14 <= _zz_39[0];
            _zz_16 <= _zz_40[0];
          end
        end
        12'b000000100000 : begin
          if(mapper_doWrite)begin
            _zz_17 <= _zz_41[0];
            _zz_21 <= _zz_42[0];
          end
        end
        12'b000000100100 : begin
          if(mapper_doWrite)begin
            _zz_18 <= _zz_43[0];
            _zz_22 <= _zz_44[0];
          end
        end
        12'b000000101000 : begin
          if(mapper_doWrite)begin
            _zz_19 <= _zz_45[0];
            _zz_23 <= _zz_46[0];
          end
        end
        12'b000000101100 : begin
          if(mapper_doWrite)begin
            _zz_20 <= _zz_47[0];
            _zz_24 <= _zz_48[0];
          end
        end
        default : begin
        end
      endcase
    end
  end


endmodule

module Apb3I2cCtrl_e12a9decc0704226832aec4017b36e8d (
  input      [7:0]    io_apb_PADDR,
  input      [0:0]    io_apb_PSEL,
  input               io_apb_PENABLE,
  output              io_apb_PREADY,
  input               io_apb_PWRITE,
  input      [31:0]   io_apb_PWDATA,
  output reg [31:0]   io_apb_PRDATA,
  output              io_i2c_sda_write,
  input               io_i2c_sda_read,
  output              io_i2c_scl_write,
  input               io_i2c_scl_read,
  output              io_interrupt,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg                 _zz_17;
  reg                 _zz_18;
  reg                 _zz_19;
  wire                i2cCtrl_io_i2c_scl_write;
  wire                i2cCtrl_io_i2c_sda_write;
  wire       `I2cSlaveCmdMode_defaultEncoding_type i2cCtrl_io_bus_cmd_kind;
  wire                i2cCtrl_io_bus_cmd_data;
  wire                i2cCtrl_io_internals_inFrame;
  wire                i2cCtrl_io_internals_sdaRead;
  wire                i2cCtrl_io_internals_sclRead;
  wire                _zz_20;
  wire                _zz_21;
  wire                _zz_22;
  wire                _zz_23;
  wire                _zz_24;
  wire                _zz_25;
  wire                _zz_26;
  wire                _zz_27;
  wire                _zz_28;
  wire       [6:0]    _zz_29;
  wire       [6:0]    _zz_30;
  wire       [0:0]    _zz_31;
  wire       [0:0]    _zz_32;
  wire       [0:0]    _zz_33;
  wire       [0:0]    _zz_34;
  wire       [0:0]    _zz_35;
  wire       [0:0]    _zz_36;
  wire       [0:0]    _zz_37;
  wire       [11:0]   _zz_38;
  wire       [2:0]    _zz_39;
  wire       [2:0]    _zz_40;
  wire       [0:0]    _zz_41;
  wire       [0:0]    _zz_42;
  wire       [0:0]    _zz_43;
  wire       [0:0]    _zz_44;
  wire       [0:0]    _zz_45;
  wire       [0:0]    _zz_46;
  wire       [0:0]    _zz_47;
  wire       [0:0]    _zz_48;
  wire       [0:0]    _zz_49;
  wire       [0:0]    _zz_50;
  wire       [0:0]    _zz_51;
  wire       [0:0]    _zz_52;
  wire       [0:0]    _zz_53;
  wire       [0:0]    _zz_54;
  wire       [0:0]    _zz_55;
  wire       [0:0]    _zz_56;
  wire       [0:0]    _zz_57;
  wire       [0:0]    _zz_58;
  wire       [0:0]    _zz_59;
  wire       [0:0]    _zz_60;
  wire       [0:0]    _zz_61;
  wire       [0:0]    _zz_62;
  wire       [0:0]    _zz_63;
  wire       [0:0]    _zz_64;
  wire       [0:0]    _zz_65;
  wire       [0:0]    _zz_66;
  wire       [0:0]    _zz_67;
  wire       [0:0]    _zz_68;
  wire       [0:0]    _zz_69;
  wire       [0:0]    _zz_70;
  wire       [0:0]    _zz_71;
  wire       [0:0]    _zz_72;
  wire       [0:0]    _zz_73;
  wire       [0:0]    _zz_74;
  wire       [0:0]    _zz_75;
  wire       [0:0]    _zz_76;
  wire       [0:0]    _zz_77;
  wire                busCtrl_askWrite;
  wire                busCtrl_askRead;
  wire                busCtrl_doWrite;
  wire                busCtrl_doRead;
  reg                 bridge_frameReset;
  reg                 bridge_i2cBuffer_sda_write;
  wire                bridge_i2cBuffer_sda_read;
  reg                 bridge_i2cBuffer_scl_write;
  wire                bridge_i2cBuffer_scl_read;
  reg                 bridge_rxData_event;
  reg                 bridge_rxData_listen;
  reg                 bridge_rxData_valid;
  reg        [7:0]    bridge_rxData_value;
  reg                 _zz_1;
  reg                 bridge_rxAck_listen;
  reg                 bridge_rxAck_valid;
  reg                 bridge_rxAck_value;
  reg                 _zz_2;
  reg                 bridge_txData_valid;
  reg                 bridge_txData_repeat;
  reg                 bridge_txData_enable;
  reg        [7:0]    bridge_txData_value;
  reg                 bridge_txData_forceDisable;
  reg                 bridge_txData_disableOnDataConflict;
  reg                 bridge_txAck_valid;
  reg                 bridge_txAck_repeat;
  reg                 bridge_txAck_enable;
  reg                 bridge_txAck_value;
  reg                 bridge_txAck_forceAck;
  reg                 bridge_txAck_disableOnDataConflict;
  reg                 bridge_addressFilter_addresses_0_enable;
  reg        [9:0]    bridge_addressFilter_addresses_0_value;
  reg                 bridge_addressFilter_addresses_0_is10Bit;
  reg                 bridge_addressFilter_addresses_1_enable;
  reg        [9:0]    bridge_addressFilter_addresses_1_value;
  reg                 bridge_addressFilter_addresses_1_is10Bit;
  reg        [1:0]    bridge_addressFilter_state;
  reg        [7:0]    bridge_addressFilter_byte0;
  reg        [7:0]    bridge_addressFilter_byte1;
  wire                bridge_addressFilter_byte0Is10Bit;
  wire                bridge_addressFilter_hits_0;
  wire                bridge_addressFilter_hits_1;
  wire                _zz_3;
  reg                 _zz_3_regNext;
  reg                 bridge_masterLogic_start;
  reg                 _zz_4;
  reg                 bridge_masterLogic_stop;
  reg                 _zz_5;
  reg                 bridge_masterLogic_drop;
  reg                 _zz_6;
  reg        [11:0]   bridge_masterLogic_timer_value;
  reg        [11:0]   bridge_masterLogic_timer_tLow;
  reg        [11:0]   bridge_masterLogic_timer_tHigh;
  reg        [11:0]   bridge_masterLogic_timer_tBuf;
  wire                bridge_masterLogic_timer_done;
  wire                bridge_masterLogic_txReady;
  wire                bridge_masterLogic_fsm_wantExit;
  reg                 bridge_masterLogic_fsm_inFrameLate;
  wire                bridge_masterLogic_fsm_isBusy;
  reg        [2:0]    bridge_dataCounter;
  reg                 bridge_inAckState;
  reg                 bridge_wasntAck;
  reg                 bridge_interruptCtrl_rxDataEnable;
  reg                 bridge_interruptCtrl_rxAckEnable;
  reg                 bridge_interruptCtrl_txDataEnable;
  reg                 bridge_interruptCtrl_txAckEnable;
  reg                 bridge_interruptCtrl_interrupt;
  reg                 bridge_interruptCtrl_start_enable;
  reg                 bridge_interruptCtrl_start_flag;
  reg                 _zz_7;
  reg                 bridge_interruptCtrl_restart_enable;
  reg                 bridge_interruptCtrl_restart_flag;
  reg                 _zz_8;
  reg                 bridge_interruptCtrl_end_enable;
  reg                 bridge_interruptCtrl_end_flag;
  reg                 _zz_9;
  reg                 bridge_interruptCtrl_drop_enable;
  reg                 bridge_interruptCtrl_drop_flag;
  reg                 _zz_10;
  wire                _zz_11;
  reg                 _zz_11_regNext;
  reg                 bridge_interruptCtrl_filterGen_enable;
  reg                 bridge_interruptCtrl_filterGen_flag;
  reg                 _zz_12;
  reg                 bridge_masterLogic_fsm_isBusy_regNext;
  reg                 bridge_interruptCtrl_clockGen_enable;
  reg                 bridge_interruptCtrl_clockGen_flag;
  reg                 _zz_13;
  reg        [9:0]    _zz_14;
  reg        [19:0]   _zz_15 = 20'b00000000000000000000;
  reg        [5:0]    _zz_16 = 6'b000000;
  reg                 bridge_i2cBuffer_scl_write_regNext;
  reg                 bridge_i2cBuffer_sda_write_regNext;
  reg        `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_type bridge_masterLogic_fsm_stateReg;
  reg        `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_type bridge_masterLogic_fsm_stateNext;
  reg                 i2cCtrl_io_internals_inFrame_regNext;
  `ifndef SYNTHESIS
  reg [239:0] bridge_masterLogic_fsm_stateReg_string;
  reg [239:0] bridge_masterLogic_fsm_stateNext_string;
  `endif


  assign _zz_20 = (bridge_masterLogic_stop && (! bridge_inAckState));
  assign _zz_21 = (bridge_masterLogic_start && (! bridge_inAckState));
  assign _zz_22 = ((i2cCtrl_io_bus_cmd_kind == `I2cSlaveCmdMode_defaultEncoding_STOP) || (i2cCtrl_io_bus_cmd_kind == `I2cSlaveCmdMode_defaultEncoding_DROP));
  assign _zz_23 = (! bridge_inAckState);
  assign _zz_24 = (bridge_wasntAck && (! bridge_masterLogic_fsm_isBusy));
  assign _zz_25 = ((! i2cCtrl_io_internals_inFrame) && i2cCtrl_io_internals_inFrame_regNext);
  assign _zz_26 = (bridge_masterLogic_start && (! bridge_masterLogic_fsm_inFrameLate));
  assign _zz_27 = (bridge_masterLogic_drop || ((! (bridge_masterLogic_fsm_stateReg == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_IDLE)) && (i2cCtrl_io_bus_cmd_kind == `I2cSlaveCmdMode_defaultEncoding_DROP)));
  assign _zz_28 = (! bridge_inAckState);
  assign _zz_29 = (bridge_addressFilter_byte0 >>> 1);
  assign _zz_30 = (bridge_addressFilter_byte0 >>> 1);
  assign _zz_31 = io_apb_PWDATA[4 : 4];
  assign _zz_32 = (1'b1);
  assign _zz_33 = io_apb_PWDATA[5 : 5];
  assign _zz_34 = (1'b1);
  assign _zz_35 = io_apb_PWDATA[6 : 6];
  assign _zz_36 = (1'b1);
  assign _zz_37 = (! bridge_masterLogic_timer_done);
  assign _zz_38 = {11'd0, _zz_37};
  assign _zz_39 = ((3'b111) - bridge_dataCounter);
  assign _zz_40 = ((3'b111) - bridge_dataCounter);
  assign _zz_41 = io_apb_PWDATA[4 : 4];
  assign _zz_42 = (1'b0);
  assign _zz_43 = io_apb_PWDATA[5 : 5];
  assign _zz_44 = (1'b0);
  assign _zz_45 = io_apb_PWDATA[6 : 6];
  assign _zz_46 = (1'b0);
  assign _zz_47 = io_apb_PWDATA[7 : 7];
  assign _zz_48 = (1'b0);
  assign _zz_49 = io_apb_PWDATA[17 : 17];
  assign _zz_50 = (1'b0);
  assign _zz_51 = io_apb_PWDATA[16 : 16];
  assign _zz_52 = (1'b0);
  assign _zz_53 = io_apb_PWDATA[9 : 9];
  assign _zz_54 = io_apb_PWDATA[9 : 9];
  assign _zz_55 = io_apb_PWDATA[10 : 10];
  assign _zz_56 = io_apb_PWDATA[11 : 11];
  assign _zz_57 = io_apb_PWDATA[8 : 8];
  assign _zz_58 = io_apb_PWDATA[9 : 9];
  assign _zz_59 = io_apb_PWDATA[0 : 0];
  assign _zz_60 = io_apb_PWDATA[10 : 10];
  assign _zz_61 = io_apb_PWDATA[11 : 11];
  assign _zz_62 = io_apb_PWDATA[8 : 8];
  assign _zz_63 = io_apb_PWDATA[9 : 9];
  assign _zz_64 = io_apb_PWDATA[14 : 14];
  assign _zz_65 = io_apb_PWDATA[15 : 15];
  assign _zz_66 = io_apb_PWDATA[14 : 14];
  assign _zz_67 = io_apb_PWDATA[15 : 15];
  assign _zz_68 = io_apb_PWDATA[0 : 0];
  assign _zz_69 = io_apb_PWDATA[1 : 1];
  assign _zz_70 = io_apb_PWDATA[2 : 2];
  assign _zz_71 = io_apb_PWDATA[3 : 3];
  assign _zz_72 = io_apb_PWDATA[4 : 4];
  assign _zz_73 = io_apb_PWDATA[5 : 5];
  assign _zz_74 = io_apb_PWDATA[6 : 6];
  assign _zz_75 = io_apb_PWDATA[7 : 7];
  assign _zz_76 = io_apb_PWDATA[17 : 17];
  assign _zz_77 = io_apb_PWDATA[16 : 16];
  I2cSlave_e12a9decc0704226832aec4017b36e8d i2cCtrl (
    .io_i2c_sda_write                  (i2cCtrl_io_i2c_sda_write      ), //o
    .io_i2c_sda_read                   (bridge_i2cBuffer_sda_read     ), //i
    .io_i2c_scl_write                  (i2cCtrl_io_i2c_scl_write      ), //o
    .io_i2c_scl_read                   (bridge_i2cBuffer_scl_read     ), //i
    .io_config_samplingClockDivider    (_zz_14[9:0]                   ), //i
    .io_config_timeout                 (_zz_15[19:0]                  ), //i
    .io_config_tsuData                 (_zz_16[5:0]                   ), //i
    .io_bus_cmd_kind                   (i2cCtrl_io_bus_cmd_kind[2:0]  ), //o
    .io_bus_cmd_data                   (i2cCtrl_io_bus_cmd_data       ), //o
    .io_bus_rsp_valid                  (_zz_17                        ), //i
    .io_bus_rsp_enable                 (_zz_18                        ), //i
    .io_bus_rsp_data                   (_zz_19                        ), //i
    .io_internals_inFrame              (i2cCtrl_io_internals_inFrame  ), //o
    .io_internals_sdaRead              (i2cCtrl_io_internals_sdaRead  ), //o
    .io_internals_sclRead              (i2cCtrl_io_internals_sclRead  ), //o
    .io_systemClk                      (io_systemClk                  ), //i
    .systemCd_logic_outputReset        (systemCd_logic_outputReset    )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(bridge_masterLogic_fsm_stateReg)
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_boot : bridge_masterLogic_fsm_stateReg_string = "boot                          ";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_IDLE : bridge_masterLogic_fsm_stateReg_string = "bridge_masterLogic_fsm_IDLE   ";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START1 : bridge_masterLogic_fsm_stateReg_string = "bridge_masterLogic_fsm_START1 ";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START2 : bridge_masterLogic_fsm_stateReg_string = "bridge_masterLogic_fsm_START2 ";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_LOW : bridge_masterLogic_fsm_stateReg_string = "bridge_masterLogic_fsm_LOW    ";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_HIGH : bridge_masterLogic_fsm_stateReg_string = "bridge_masterLogic_fsm_HIGH   ";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_RESTART : bridge_masterLogic_fsm_stateReg_string = "bridge_masterLogic_fsm_RESTART";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP1 : bridge_masterLogic_fsm_stateReg_string = "bridge_masterLogic_fsm_STOP1  ";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP2 : bridge_masterLogic_fsm_stateReg_string = "bridge_masterLogic_fsm_STOP2  ";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_TBUF : bridge_masterLogic_fsm_stateReg_string = "bridge_masterLogic_fsm_TBUF   ";
      default : bridge_masterLogic_fsm_stateReg_string = "??????????????????????????????";
    endcase
  end
  always @(*) begin
    case(bridge_masterLogic_fsm_stateNext)
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_boot : bridge_masterLogic_fsm_stateNext_string = "boot                          ";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_IDLE : bridge_masterLogic_fsm_stateNext_string = "bridge_masterLogic_fsm_IDLE   ";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START1 : bridge_masterLogic_fsm_stateNext_string = "bridge_masterLogic_fsm_START1 ";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START2 : bridge_masterLogic_fsm_stateNext_string = "bridge_masterLogic_fsm_START2 ";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_LOW : bridge_masterLogic_fsm_stateNext_string = "bridge_masterLogic_fsm_LOW    ";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_HIGH : bridge_masterLogic_fsm_stateNext_string = "bridge_masterLogic_fsm_HIGH   ";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_RESTART : bridge_masterLogic_fsm_stateNext_string = "bridge_masterLogic_fsm_RESTART";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP1 : bridge_masterLogic_fsm_stateNext_string = "bridge_masterLogic_fsm_STOP1  ";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP2 : bridge_masterLogic_fsm_stateNext_string = "bridge_masterLogic_fsm_STOP2  ";
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_TBUF : bridge_masterLogic_fsm_stateNext_string = "bridge_masterLogic_fsm_TBUF   ";
      default : bridge_masterLogic_fsm_stateNext_string = "??????????????????????????????";
    endcase
  end
  `endif

  assign io_apb_PREADY = 1'b1;
  always @ (*) begin
    io_apb_PRDATA = 32'h0;
    case(io_apb_PADDR)
      8'b00001000 : begin
        io_apb_PRDATA[8 : 8] = bridge_rxData_valid;
        io_apb_PRDATA[7 : 0] = bridge_rxData_value;
      end
      8'b00001100 : begin
        io_apb_PRDATA[8 : 8] = bridge_rxAck_valid;
        io_apb_PRDATA[0 : 0] = bridge_rxAck_value;
      end
      8'b00000000 : begin
        io_apb_PRDATA[8 : 8] = bridge_txData_valid;
        io_apb_PRDATA[9 : 9] = bridge_txData_enable;
      end
      8'b00000100 : begin
        io_apb_PRDATA[8 : 8] = bridge_txAck_valid;
        io_apb_PRDATA[9 : 9] = bridge_txAck_enable;
      end
      8'b10001000 : begin
      end
      8'b10001100 : begin
      end
      8'b10000000 : begin
        io_apb_PRDATA[1 : 0] = {bridge_addressFilter_hits_1,bridge_addressFilter_hits_0};
      end
      8'b10000100 : begin
        io_apb_PRDATA[0 : 0] = bridge_addressFilter_byte0[0];
      end
      8'b01000000 : begin
        io_apb_PRDATA[4 : 4] = bridge_masterLogic_start;
        io_apb_PRDATA[5 : 5] = bridge_masterLogic_stop;
        io_apb_PRDATA[6 : 6] = bridge_masterLogic_drop;
        io_apb_PRDATA[0 : 0] = bridge_masterLogic_fsm_isBusy;
      end
      8'b01010000 : begin
      end
      8'b01010100 : begin
      end
      8'b01011000 : begin
      end
      8'b00100000 : begin
        io_apb_PRDATA[0 : 0] = bridge_interruptCtrl_rxDataEnable;
        io_apb_PRDATA[1 : 1] = bridge_interruptCtrl_rxAckEnable;
        io_apb_PRDATA[2 : 2] = bridge_interruptCtrl_txDataEnable;
        io_apb_PRDATA[3 : 3] = bridge_interruptCtrl_txAckEnable;
        io_apb_PRDATA[4 : 4] = bridge_interruptCtrl_start_enable;
        io_apb_PRDATA[5 : 5] = bridge_interruptCtrl_restart_enable;
        io_apb_PRDATA[6 : 6] = bridge_interruptCtrl_end_enable;
        io_apb_PRDATA[7 : 7] = bridge_interruptCtrl_drop_enable;
        io_apb_PRDATA[17 : 17] = bridge_interruptCtrl_filterGen_enable;
        io_apb_PRDATA[16 : 16] = bridge_interruptCtrl_clockGen_enable;
      end
      8'b00100100 : begin
        io_apb_PRDATA[4 : 4] = bridge_interruptCtrl_start_flag;
        io_apb_PRDATA[5 : 5] = bridge_interruptCtrl_restart_flag;
        io_apb_PRDATA[6 : 6] = bridge_interruptCtrl_end_flag;
        io_apb_PRDATA[7 : 7] = bridge_interruptCtrl_drop_flag;
        io_apb_PRDATA[17 : 17] = bridge_interruptCtrl_filterGen_flag;
        io_apb_PRDATA[16 : 16] = bridge_interruptCtrl_clockGen_flag;
      end
      8'b00101000 : begin
      end
      8'b00101100 : begin
      end
      8'b00110000 : begin
      end
      default : begin
      end
    endcase
  end

  assign busCtrl_askWrite = ((io_apb_PSEL[0] && io_apb_PENABLE) && io_apb_PWRITE);
  assign busCtrl_askRead = ((io_apb_PSEL[0] && io_apb_PENABLE) && (! io_apb_PWRITE));
  assign busCtrl_doWrite = (((io_apb_PSEL[0] && io_apb_PENABLE) && io_apb_PREADY) && io_apb_PWRITE);
  assign busCtrl_doRead = (((io_apb_PSEL[0] && io_apb_PENABLE) && io_apb_PREADY) && (! io_apb_PWRITE));
  always @ (*) begin
    bridge_frameReset = 1'b0;
    case(i2cCtrl_io_bus_cmd_kind)
      `I2cSlaveCmdMode_defaultEncoding_START : begin
        bridge_frameReset = 1'b1;
      end
      `I2cSlaveCmdMode_defaultEncoding_RESTART : begin
        bridge_frameReset = 1'b1;
      end
      `I2cSlaveCmdMode_defaultEncoding_STOP : begin
        bridge_frameReset = 1'b1;
      end
      `I2cSlaveCmdMode_defaultEncoding_DROP : begin
        bridge_frameReset = 1'b1;
      end
      `I2cSlaveCmdMode_defaultEncoding_READ : begin
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    bridge_i2cBuffer_sda_write = i2cCtrl_io_i2c_sda_write;
    case(bridge_masterLogic_fsm_stateReg)
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_IDLE : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START1 : begin
        bridge_i2cBuffer_sda_write = 1'b0;
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START2 : begin
        bridge_i2cBuffer_sda_write = 1'b0;
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_LOW : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_HIGH : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_RESTART : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP1 : begin
        bridge_i2cBuffer_sda_write = 1'b0;
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP2 : begin
        bridge_i2cBuffer_sda_write = 1'b0;
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_TBUF : begin
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    bridge_i2cBuffer_scl_write = i2cCtrl_io_i2c_scl_write;
    case(bridge_masterLogic_fsm_stateReg)
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_IDLE : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START1 : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START2 : begin
        bridge_i2cBuffer_scl_write = 1'b0;
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_LOW : begin
        if(bridge_masterLogic_timer_done)begin
          if(_zz_20)begin
            bridge_i2cBuffer_scl_write = 1'b0;
          end else begin
            if(_zz_21)begin
              bridge_i2cBuffer_scl_write = 1'b0;
            end
          end
        end else begin
          bridge_i2cBuffer_scl_write = 1'b0;
        end
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_HIGH : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_RESTART : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP1 : begin
        bridge_i2cBuffer_scl_write = 1'b0;
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP2 : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_TBUF : begin
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    case(io_apb_PADDR)
      8'b00001000 : begin
        if(busCtrl_doRead)begin
          _zz_1 = 1'b1;
        end
      end
      8'b00001100 : begin
      end
      8'b00000000 : begin
      end
      8'b00000100 : begin
      end
      8'b10001000 : begin
      end
      8'b10001100 : begin
      end
      8'b10000000 : begin
      end
      8'b10000100 : begin
      end
      8'b01000000 : begin
      end
      8'b01010000 : begin
      end
      8'b01010100 : begin
      end
      8'b01011000 : begin
      end
      8'b00100000 : begin
      end
      8'b00100100 : begin
      end
      8'b00101000 : begin
      end
      8'b00101100 : begin
      end
      8'b00110000 : begin
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_2 = 1'b0;
    case(io_apb_PADDR)
      8'b00001000 : begin
      end
      8'b00001100 : begin
        if(busCtrl_doRead)begin
          _zz_2 = 1'b1;
        end
      end
      8'b00000000 : begin
      end
      8'b00000100 : begin
      end
      8'b10001000 : begin
      end
      8'b10001100 : begin
      end
      8'b10000000 : begin
      end
      8'b10000100 : begin
      end
      8'b01000000 : begin
      end
      8'b01010000 : begin
      end
      8'b01010100 : begin
      end
      8'b01011000 : begin
      end
      8'b00100000 : begin
      end
      8'b00100100 : begin
      end
      8'b00101000 : begin
      end
      8'b00101100 : begin
      end
      8'b00110000 : begin
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    bridge_txData_forceDisable = 1'b0;
    if(_zz_22)begin
      bridge_txData_forceDisable = 1'b0;
    end
    case(bridge_masterLogic_fsm_stateReg)
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_IDLE : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START1 : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START2 : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_LOW : begin
        if(bridge_masterLogic_timer_done)begin
          if(_zz_20)begin
            bridge_txData_forceDisable = 1'b1;
          end else begin
            if(_zz_21)begin
              bridge_txData_forceDisable = 1'b1;
            end
          end
        end
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_HIGH : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_RESTART : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP1 : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP2 : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_TBUF : begin
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    bridge_txAck_forceAck = 1'b0;
    if(((bridge_addressFilter_byte0Is10Bit && (bridge_addressFilter_state == (2'b01))) && ({((bridge_addressFilter_addresses_1_enable && bridge_addressFilter_addresses_1_is10Bit) && (bridge_addressFilter_byte0[2 : 1] == bridge_addressFilter_addresses_1_value[9 : 8])),((bridge_addressFilter_addresses_0_enable && bridge_addressFilter_addresses_0_is10Bit) && (bridge_addressFilter_byte0[2 : 1] == bridge_addressFilter_addresses_0_value[9 : 8]))} != (2'b00))))begin
      bridge_txAck_forceAck = 1'b1;
    end
  end

  assign bridge_addressFilter_byte0Is10Bit = (bridge_addressFilter_byte0[7 : 3] == 5'h1e);
  assign bridge_addressFilter_hits_0 = (bridge_addressFilter_addresses_0_enable && ((! bridge_addressFilter_addresses_0_is10Bit) ? ((_zz_29 == bridge_addressFilter_addresses_0_value[6 : 0]) && (bridge_addressFilter_state != (2'b00))) : (({bridge_addressFilter_byte0[2 : 1],bridge_addressFilter_byte1} == bridge_addressFilter_addresses_0_value) && (bridge_addressFilter_state == (2'b10)))));
  assign bridge_addressFilter_hits_1 = (bridge_addressFilter_addresses_1_enable && ((! bridge_addressFilter_addresses_1_is10Bit) ? ((_zz_30 == bridge_addressFilter_addresses_1_value[6 : 0]) && (bridge_addressFilter_state != (2'b00))) : (({bridge_addressFilter_byte0[2 : 1],bridge_addressFilter_byte1} == bridge_addressFilter_addresses_1_value) && (bridge_addressFilter_state == (2'b10)))));
  assign _zz_3 = ({bridge_addressFilter_hits_1,bridge_addressFilter_hits_0} != (2'b00));
  always @ (*) begin
    _zz_4 = 1'b0;
    case(io_apb_PADDR)
      8'b00001000 : begin
      end
      8'b00001100 : begin
      end
      8'b00000000 : begin
      end
      8'b00000100 : begin
      end
      8'b10001000 : begin
      end
      8'b10001100 : begin
      end
      8'b10000000 : begin
      end
      8'b10000100 : begin
      end
      8'b01000000 : begin
        if(busCtrl_doWrite)begin
          _zz_4 = 1'b1;
        end
      end
      8'b01010000 : begin
      end
      8'b01010100 : begin
      end
      8'b01011000 : begin
      end
      8'b00100000 : begin
      end
      8'b00100100 : begin
      end
      8'b00101000 : begin
      end
      8'b00101100 : begin
      end
      8'b00110000 : begin
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_5 = 1'b0;
    case(io_apb_PADDR)
      8'b00001000 : begin
      end
      8'b00001100 : begin
      end
      8'b00000000 : begin
      end
      8'b00000100 : begin
      end
      8'b10001000 : begin
      end
      8'b10001100 : begin
      end
      8'b10000000 : begin
      end
      8'b10000100 : begin
      end
      8'b01000000 : begin
        if(busCtrl_doWrite)begin
          _zz_5 = 1'b1;
        end
      end
      8'b01010000 : begin
      end
      8'b01010100 : begin
      end
      8'b01011000 : begin
      end
      8'b00100000 : begin
      end
      8'b00100100 : begin
      end
      8'b00101000 : begin
      end
      8'b00101100 : begin
      end
      8'b00110000 : begin
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_6 = 1'b0;
    case(io_apb_PADDR)
      8'b00001000 : begin
      end
      8'b00001100 : begin
      end
      8'b00000000 : begin
      end
      8'b00000100 : begin
      end
      8'b10001000 : begin
      end
      8'b10001100 : begin
      end
      8'b10000000 : begin
      end
      8'b10000100 : begin
      end
      8'b01000000 : begin
        if(busCtrl_doWrite)begin
          _zz_6 = 1'b1;
        end
      end
      8'b01010000 : begin
      end
      8'b01010100 : begin
      end
      8'b01011000 : begin
      end
      8'b00100000 : begin
      end
      8'b00100100 : begin
      end
      8'b00101000 : begin
      end
      8'b00101100 : begin
      end
      8'b00110000 : begin
      end
      default : begin
      end
    endcase
  end

  assign bridge_masterLogic_timer_done = (bridge_masterLogic_timer_value == 12'h0);
  assign bridge_masterLogic_fsm_wantExit = 1'b0;
  assign bridge_masterLogic_fsm_isBusy = ((! (bridge_masterLogic_fsm_stateReg == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_IDLE)) && (! (bridge_masterLogic_fsm_stateReg == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_TBUF)));
  assign bridge_masterLogic_txReady = (bridge_inAckState ? bridge_txAck_valid : bridge_txData_valid);
  always @ (*) begin
    if(_zz_23)begin
      _zz_17 = ((bridge_txData_valid && (! (bridge_rxData_valid && bridge_rxData_listen))) && (i2cCtrl_io_bus_cmd_kind == `I2cSlaveCmdMode_defaultEncoding_DRIVE));
      if(bridge_txData_forceDisable)begin
        _zz_17 = 1'b1;
      end
    end else begin
      _zz_17 = ((bridge_txAck_valid && (! (bridge_rxAck_valid && bridge_rxAck_listen))) && (i2cCtrl_io_bus_cmd_kind == `I2cSlaveCmdMode_defaultEncoding_DRIVE));
      if(bridge_txAck_forceAck)begin
        _zz_17 = 1'b1;
      end
    end
    if(_zz_24)begin
      _zz_17 = (i2cCtrl_io_bus_cmd_kind == `I2cSlaveCmdMode_defaultEncoding_DRIVE);
    end
  end

  always @ (*) begin
    if(_zz_23)begin
      _zz_18 = bridge_txData_enable;
      if(bridge_txData_forceDisable)begin
        _zz_18 = 1'b0;
      end
    end else begin
      _zz_18 = bridge_txAck_enable;
      if(bridge_txAck_forceAck)begin
        _zz_18 = 1'b1;
      end
    end
    if(_zz_24)begin
      _zz_18 = 1'b0;
    end
  end

  always @ (*) begin
    if(_zz_23)begin
      _zz_19 = bridge_txData_value[_zz_39];
    end else begin
      _zz_19 = bridge_txAck_value;
      if(bridge_txAck_forceAck)begin
        _zz_19 = 1'b0;
      end
    end
  end

  always @ (*) begin
    bridge_interruptCtrl_interrupt = ((((bridge_interruptCtrl_rxDataEnable && bridge_rxData_valid) || (bridge_interruptCtrl_rxAckEnable && bridge_rxAck_valid)) || (bridge_interruptCtrl_txDataEnable && (! bridge_txData_valid))) || (bridge_interruptCtrl_txAckEnable && (! bridge_txAck_valid)));
    if(bridge_interruptCtrl_start_flag)begin
      bridge_interruptCtrl_interrupt = 1'b1;
    end
    if(bridge_interruptCtrl_restart_flag)begin
      bridge_interruptCtrl_interrupt = 1'b1;
    end
    if(bridge_interruptCtrl_end_flag)begin
      bridge_interruptCtrl_interrupt = 1'b1;
    end
    if(bridge_interruptCtrl_drop_flag)begin
      bridge_interruptCtrl_interrupt = 1'b1;
    end
    if(bridge_interruptCtrl_filterGen_flag)begin
      bridge_interruptCtrl_interrupt = 1'b1;
    end
    if(bridge_interruptCtrl_clockGen_flag)begin
      bridge_interruptCtrl_interrupt = 1'b1;
    end
  end

  always @ (*) begin
    _zz_7 = 1'b0;
    case(io_apb_PADDR)
      8'b00001000 : begin
      end
      8'b00001100 : begin
      end
      8'b00000000 : begin
      end
      8'b00000100 : begin
      end
      8'b10001000 : begin
      end
      8'b10001100 : begin
      end
      8'b10000000 : begin
      end
      8'b10000100 : begin
      end
      8'b01000000 : begin
      end
      8'b01010000 : begin
      end
      8'b01010100 : begin
      end
      8'b01011000 : begin
      end
      8'b00100000 : begin
      end
      8'b00100100 : begin
        if(busCtrl_doWrite)begin
          _zz_7 = 1'b1;
        end
      end
      8'b00101000 : begin
      end
      8'b00101100 : begin
      end
      8'b00110000 : begin
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_8 = 1'b0;
    case(io_apb_PADDR)
      8'b00001000 : begin
      end
      8'b00001100 : begin
      end
      8'b00000000 : begin
      end
      8'b00000100 : begin
      end
      8'b10001000 : begin
      end
      8'b10001100 : begin
      end
      8'b10000000 : begin
      end
      8'b10000100 : begin
      end
      8'b01000000 : begin
      end
      8'b01010000 : begin
      end
      8'b01010100 : begin
      end
      8'b01011000 : begin
      end
      8'b00100000 : begin
      end
      8'b00100100 : begin
        if(busCtrl_doWrite)begin
          _zz_8 = 1'b1;
        end
      end
      8'b00101000 : begin
      end
      8'b00101100 : begin
      end
      8'b00110000 : begin
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_9 = 1'b0;
    case(io_apb_PADDR)
      8'b00001000 : begin
      end
      8'b00001100 : begin
      end
      8'b00000000 : begin
      end
      8'b00000100 : begin
      end
      8'b10001000 : begin
      end
      8'b10001100 : begin
      end
      8'b10000000 : begin
      end
      8'b10000100 : begin
      end
      8'b01000000 : begin
      end
      8'b01010000 : begin
      end
      8'b01010100 : begin
      end
      8'b01011000 : begin
      end
      8'b00100000 : begin
      end
      8'b00100100 : begin
        if(busCtrl_doWrite)begin
          _zz_9 = 1'b1;
        end
      end
      8'b00101000 : begin
      end
      8'b00101100 : begin
      end
      8'b00110000 : begin
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_10 = 1'b0;
    case(io_apb_PADDR)
      8'b00001000 : begin
      end
      8'b00001100 : begin
      end
      8'b00000000 : begin
      end
      8'b00000100 : begin
      end
      8'b10001000 : begin
      end
      8'b10001100 : begin
      end
      8'b10000000 : begin
      end
      8'b10000100 : begin
      end
      8'b01000000 : begin
      end
      8'b01010000 : begin
      end
      8'b01010100 : begin
      end
      8'b01011000 : begin
      end
      8'b00100000 : begin
      end
      8'b00100100 : begin
        if(busCtrl_doWrite)begin
          _zz_10 = 1'b1;
        end
      end
      8'b00101000 : begin
      end
      8'b00101100 : begin
      end
      8'b00110000 : begin
      end
      default : begin
      end
    endcase
  end

  assign _zz_11 = ({bridge_addressFilter_hits_1,bridge_addressFilter_hits_0} != (2'b00));
  always @ (*) begin
    _zz_12 = 1'b0;
    case(io_apb_PADDR)
      8'b00001000 : begin
      end
      8'b00001100 : begin
      end
      8'b00000000 : begin
      end
      8'b00000100 : begin
      end
      8'b10001000 : begin
      end
      8'b10001100 : begin
      end
      8'b10000000 : begin
      end
      8'b10000100 : begin
      end
      8'b01000000 : begin
      end
      8'b01010000 : begin
      end
      8'b01010100 : begin
      end
      8'b01011000 : begin
      end
      8'b00100000 : begin
      end
      8'b00100100 : begin
        if(busCtrl_doWrite)begin
          _zz_12 = 1'b1;
        end
      end
      8'b00101000 : begin
      end
      8'b00101100 : begin
      end
      8'b00110000 : begin
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_13 = 1'b0;
    case(io_apb_PADDR)
      8'b00001000 : begin
      end
      8'b00001100 : begin
      end
      8'b00000000 : begin
      end
      8'b00000100 : begin
      end
      8'b10001000 : begin
      end
      8'b10001100 : begin
      end
      8'b10000000 : begin
      end
      8'b10000100 : begin
      end
      8'b01000000 : begin
      end
      8'b01010000 : begin
      end
      8'b01010100 : begin
      end
      8'b01011000 : begin
      end
      8'b00100000 : begin
      end
      8'b00100100 : begin
        if(busCtrl_doWrite)begin
          _zz_13 = 1'b1;
        end
      end
      8'b00101000 : begin
      end
      8'b00101100 : begin
      end
      8'b00110000 : begin
      end
      default : begin
      end
    endcase
  end

  assign io_i2c_scl_write = bridge_i2cBuffer_scl_write_regNext;
  assign io_i2c_sda_write = bridge_i2cBuffer_sda_write_regNext;
  assign bridge_i2cBuffer_scl_read = io_i2c_scl_read;
  assign bridge_i2cBuffer_sda_read = io_i2c_sda_read;
  assign io_interrupt = bridge_interruptCtrl_interrupt;
  always @ (*) begin
    bridge_masterLogic_fsm_stateNext = bridge_masterLogic_fsm_stateReg;
    case(bridge_masterLogic_fsm_stateReg)
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_IDLE : begin
        if(_zz_25)begin
          bridge_masterLogic_fsm_stateNext = `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_TBUF;
        end else begin
          if(_zz_26)begin
            bridge_masterLogic_fsm_stateNext = `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START1;
          end
        end
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START1 : begin
        if((bridge_masterLogic_timer_done || (! i2cCtrl_io_internals_sclRead)))begin
          bridge_masterLogic_fsm_stateNext = `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START2;
        end
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START2 : begin
        if(bridge_masterLogic_timer_done)begin
          bridge_masterLogic_fsm_stateNext = `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_LOW;
        end
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_LOW : begin
        if(bridge_masterLogic_timer_done)begin
          if(_zz_20)begin
            bridge_masterLogic_fsm_stateNext = `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP1;
          end else begin
            if(_zz_21)begin
              bridge_masterLogic_fsm_stateNext = `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_RESTART;
            end else begin
              if(i2cCtrl_io_internals_sclRead)begin
                bridge_masterLogic_fsm_stateNext = `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_HIGH;
              end
            end
          end
        end
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_HIGH : begin
        if((bridge_masterLogic_timer_done || (! i2cCtrl_io_internals_sclRead)))begin
          bridge_masterLogic_fsm_stateNext = `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_LOW;
        end
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_RESTART : begin
        if(bridge_masterLogic_timer_done)begin
          bridge_masterLogic_fsm_stateNext = `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START1;
        end
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP1 : begin
        if(bridge_masterLogic_timer_done)begin
          bridge_masterLogic_fsm_stateNext = `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP2;
        end
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP2 : begin
        if(bridge_masterLogic_timer_done)begin
          bridge_masterLogic_fsm_stateNext = `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_TBUF;
        end
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_TBUF : begin
        if(bridge_masterLogic_timer_done)begin
          bridge_masterLogic_fsm_stateNext = `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_IDLE;
        end
      end
      default : begin
        bridge_masterLogic_fsm_stateNext = `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_IDLE;
      end
    endcase
    if(_zz_27)begin
      bridge_masterLogic_fsm_stateNext = `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_TBUF;
    end
  end

  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      bridge_rxData_event <= 1'b0;
      bridge_rxData_listen <= 1'b0;
      bridge_rxData_valid <= 1'b0;
      bridge_rxAck_listen <= 1'b0;
      bridge_rxAck_valid <= 1'b0;
      bridge_txData_valid <= 1'b1;
      bridge_txData_repeat <= 1'b1;
      bridge_txData_enable <= 1'b0;
      bridge_txAck_valid <= 1'b1;
      bridge_txAck_repeat <= 1'b1;
      bridge_txAck_enable <= 1'b0;
      bridge_addressFilter_addresses_0_enable <= 1'b0;
      bridge_addressFilter_addresses_1_enable <= 1'b0;
      bridge_addressFilter_state <= (2'b00);
      bridge_masterLogic_start <= 1'b0;
      bridge_masterLogic_stop <= 1'b0;
      bridge_masterLogic_drop <= 1'b0;
      bridge_dataCounter <= (3'b000);
      bridge_inAckState <= 1'b0;
      bridge_wasntAck <= 1'b0;
      bridge_interruptCtrl_rxDataEnable <= 1'b0;
      bridge_interruptCtrl_rxAckEnable <= 1'b0;
      bridge_interruptCtrl_txDataEnable <= 1'b0;
      bridge_interruptCtrl_txAckEnable <= 1'b0;
      bridge_interruptCtrl_start_enable <= 1'b0;
      bridge_interruptCtrl_start_flag <= 1'b0;
      bridge_interruptCtrl_restart_enable <= 1'b0;
      bridge_interruptCtrl_restart_flag <= 1'b0;
      bridge_interruptCtrl_end_enable <= 1'b0;
      bridge_interruptCtrl_end_flag <= 1'b0;
      bridge_interruptCtrl_drop_enable <= 1'b0;
      bridge_interruptCtrl_drop_flag <= 1'b0;
      bridge_interruptCtrl_filterGen_enable <= 1'b0;
      bridge_interruptCtrl_filterGen_flag <= 1'b0;
      bridge_interruptCtrl_clockGen_enable <= 1'b0;
      bridge_interruptCtrl_clockGen_flag <= 1'b0;
      _zz_14 <= 10'h0;
      bridge_i2cBuffer_scl_write_regNext <= 1'b1;
      bridge_i2cBuffer_sda_write_regNext <= 1'b1;
      bridge_masterLogic_fsm_stateReg <= `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_boot;
    end else begin
      bridge_rxData_event <= 1'b0;
      if(_zz_1)begin
        bridge_rxData_valid <= 1'b0;
      end
      if(_zz_2)begin
        bridge_rxAck_valid <= 1'b0;
      end
      if(bridge_rxData_event)begin
        case(bridge_addressFilter_state)
          2'b00 : begin
            bridge_addressFilter_state <= (2'b01);
          end
          2'b01 : begin
            bridge_addressFilter_state <= (2'b10);
          end
          default : begin
          end
        endcase
      end
      if(bridge_frameReset)begin
        bridge_addressFilter_state <= (2'b00);
      end
      if((_zz_3 && (! _zz_3_regNext)))begin
        bridge_txAck_valid <= 1'b0;
      end
      if(_zz_4)begin
        if(_zz_31[0])begin
          bridge_masterLogic_start <= _zz_32[0];
        end
      end
      if(_zz_5)begin
        if(_zz_33[0])begin
          bridge_masterLogic_stop <= _zz_34[0];
        end
      end
      if(_zz_6)begin
        if(_zz_35[0])begin
          bridge_masterLogic_drop <= _zz_36[0];
        end
      end
      case(i2cCtrl_io_bus_cmd_kind)
        `I2cSlaveCmdMode_defaultEncoding_START : begin
        end
        `I2cSlaveCmdMode_defaultEncoding_RESTART : begin
        end
        `I2cSlaveCmdMode_defaultEncoding_STOP : begin
        end
        `I2cSlaveCmdMode_defaultEncoding_DROP : begin
        end
        `I2cSlaveCmdMode_defaultEncoding_READ : begin
          if(_zz_28)begin
            bridge_dataCounter <= (bridge_dataCounter + (3'b001));
            if((_zz_19 != i2cCtrl_io_bus_cmd_data))begin
              if(bridge_txData_disableOnDataConflict)begin
                bridge_txData_enable <= 1'b0;
              end
              if(bridge_txAck_disableOnDataConflict)begin
                bridge_txAck_enable <= 1'b0;
              end
            end
            if((bridge_dataCounter == (3'b111)))begin
              if(bridge_rxData_listen)begin
                bridge_rxData_valid <= 1'b1;
              end
              bridge_rxData_event <= 1'b1;
              bridge_inAckState <= 1'b1;
              if((bridge_txData_valid && (! bridge_txData_repeat)))begin
                bridge_txData_valid <= 1'b0;
              end
            end
          end else begin
            if(bridge_rxAck_listen)begin
              bridge_rxAck_valid <= 1'b1;
            end
            bridge_inAckState <= 1'b0;
            bridge_wasntAck <= i2cCtrl_io_bus_cmd_data;
            if((bridge_txAck_valid && (! bridge_txAck_repeat)))begin
              bridge_txAck_valid <= 1'b0;
            end
          end
        end
        default : begin
        end
      endcase
      if(bridge_frameReset)begin
        bridge_inAckState <= 1'b0;
        bridge_dataCounter <= (3'b000);
        bridge_wasntAck <= 1'b0;
      end
      if(_zz_22)begin
        bridge_txData_valid <= 1'b1;
        bridge_txData_enable <= 1'b0;
        bridge_txData_repeat <= 1'b1;
        bridge_txAck_valid <= 1'b1;
        bridge_txAck_enable <= 1'b0;
        bridge_txAck_repeat <= 1'b1;
        bridge_rxData_listen <= 1'b0;
        bridge_rxAck_listen <= 1'b0;
      end
      if((i2cCtrl_io_bus_cmd_kind == `I2cSlaveCmdMode_defaultEncoding_START))begin
        bridge_interruptCtrl_start_flag <= 1'b1;
      end
      if((! bridge_interruptCtrl_start_enable))begin
        bridge_interruptCtrl_start_flag <= 1'b0;
      end
      if(_zz_7)begin
        if(_zz_41[0])begin
          bridge_interruptCtrl_start_flag <= _zz_42[0];
        end
      end
      if((i2cCtrl_io_bus_cmd_kind == `I2cSlaveCmdMode_defaultEncoding_RESTART))begin
        bridge_interruptCtrl_restart_flag <= 1'b1;
      end
      if((! bridge_interruptCtrl_restart_enable))begin
        bridge_interruptCtrl_restart_flag <= 1'b0;
      end
      if(_zz_8)begin
        if(_zz_43[0])begin
          bridge_interruptCtrl_restart_flag <= _zz_44[0];
        end
      end
      if((i2cCtrl_io_bus_cmd_kind == `I2cSlaveCmdMode_defaultEncoding_STOP))begin
        bridge_interruptCtrl_end_flag <= 1'b1;
      end
      if((! bridge_interruptCtrl_end_enable))begin
        bridge_interruptCtrl_end_flag <= 1'b0;
      end
      if(_zz_9)begin
        if(_zz_45[0])begin
          bridge_interruptCtrl_end_flag <= _zz_46[0];
        end
      end
      if((i2cCtrl_io_bus_cmd_kind == `I2cSlaveCmdMode_defaultEncoding_DROP))begin
        bridge_interruptCtrl_drop_flag <= 1'b1;
      end
      if((! bridge_interruptCtrl_drop_enable))begin
        bridge_interruptCtrl_drop_flag <= 1'b0;
      end
      if(_zz_10)begin
        if(_zz_47[0])begin
          bridge_interruptCtrl_drop_flag <= _zz_48[0];
        end
      end
      if((_zz_11 && (! _zz_11_regNext)))begin
        bridge_interruptCtrl_filterGen_flag <= 1'b1;
      end
      if((! bridge_interruptCtrl_filterGen_enable))begin
        bridge_interruptCtrl_filterGen_flag <= 1'b0;
      end
      if(_zz_12)begin
        if(_zz_49[0])begin
          bridge_interruptCtrl_filterGen_flag <= _zz_50[0];
        end
      end
      if((bridge_masterLogic_fsm_isBusy && (! bridge_masterLogic_fsm_isBusy_regNext)))begin
        bridge_interruptCtrl_clockGen_flag <= 1'b1;
      end
      if((! bridge_interruptCtrl_clockGen_enable))begin
        bridge_interruptCtrl_clockGen_flag <= 1'b0;
      end
      if(_zz_13)begin
        if(_zz_51[0])begin
          bridge_interruptCtrl_clockGen_flag <= _zz_52[0];
        end
      end
      bridge_i2cBuffer_scl_write_regNext <= bridge_i2cBuffer_scl_write;
      bridge_i2cBuffer_sda_write_regNext <= bridge_i2cBuffer_sda_write;
      case(io_apb_PADDR)
        8'b00001000 : begin
          if(busCtrl_doWrite)begin
            bridge_rxData_listen <= _zz_53[0];
          end
        end
        8'b00001100 : begin
          if(busCtrl_doWrite)begin
            bridge_rxAck_listen <= _zz_54[0];
          end
        end
        8'b00000000 : begin
          if(busCtrl_doWrite)begin
            bridge_txData_repeat <= _zz_55[0];
            bridge_txData_valid <= _zz_57[0];
            bridge_txData_enable <= _zz_58[0];
          end
        end
        8'b00000100 : begin
          if(busCtrl_doWrite)begin
            bridge_txAck_repeat <= _zz_60[0];
            bridge_txAck_valid <= _zz_62[0];
            bridge_txAck_enable <= _zz_63[0];
          end
        end
        8'b10001000 : begin
          if(busCtrl_doWrite)begin
            bridge_addressFilter_addresses_0_enable <= _zz_65[0];
          end
        end
        8'b10001100 : begin
          if(busCtrl_doWrite)begin
            bridge_addressFilter_addresses_1_enable <= _zz_67[0];
          end
        end
        8'b10000000 : begin
        end
        8'b10000100 : begin
        end
        8'b01000000 : begin
        end
        8'b01010000 : begin
        end
        8'b01010100 : begin
        end
        8'b01011000 : begin
        end
        8'b00100000 : begin
          if(busCtrl_doWrite)begin
            bridge_interruptCtrl_rxDataEnable <= _zz_68[0];
            bridge_interruptCtrl_rxAckEnable <= _zz_69[0];
            bridge_interruptCtrl_txDataEnable <= _zz_70[0];
            bridge_interruptCtrl_txAckEnable <= _zz_71[0];
            bridge_interruptCtrl_start_enable <= _zz_72[0];
            bridge_interruptCtrl_restart_enable <= _zz_73[0];
            bridge_interruptCtrl_end_enable <= _zz_74[0];
            bridge_interruptCtrl_drop_enable <= _zz_75[0];
            bridge_interruptCtrl_filterGen_enable <= _zz_76[0];
            bridge_interruptCtrl_clockGen_enable <= _zz_77[0];
          end
        end
        8'b00100100 : begin
        end
        8'b00101000 : begin
          if(busCtrl_doWrite)begin
            _zz_14 <= io_apb_PWDATA[9 : 0];
          end
        end
        8'b00101100 : begin
        end
        8'b00110000 : begin
        end
        default : begin
        end
      endcase
      bridge_masterLogic_fsm_stateReg <= bridge_masterLogic_fsm_stateNext;
      case(bridge_masterLogic_fsm_stateReg)
        `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_IDLE : begin
          if(! _zz_25) begin
            if(_zz_26)begin
              bridge_txData_valid <= 1'b0;
            end
          end
        end
        `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START1 : begin
        end
        `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START2 : begin
          if(bridge_masterLogic_timer_done)begin
            bridge_masterLogic_start <= 1'b0;
          end
        end
        `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_LOW : begin
        end
        `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_HIGH : begin
        end
        `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_RESTART : begin
        end
        `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP1 : begin
        end
        `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP2 : begin
          if(bridge_masterLogic_timer_done)begin
            bridge_masterLogic_stop <= 1'b0;
          end
        end
        `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_TBUF : begin
        end
        default : begin
        end
      endcase
      if(_zz_27)begin
        bridge_masterLogic_start <= 1'b0;
        bridge_masterLogic_stop <= 1'b0;
        bridge_masterLogic_drop <= 1'b0;
      end
    end
  end

  always @ (posedge io_systemClk) begin
    if(bridge_rxData_event)begin
      case(bridge_addressFilter_state)
        2'b00 : begin
          bridge_addressFilter_byte0 <= bridge_rxData_value;
        end
        2'b01 : begin
          bridge_addressFilter_byte1 <= bridge_rxData_value;
        end
        default : begin
        end
      endcase
    end
    _zz_3_regNext <= _zz_3;
    bridge_masterLogic_timer_value <= (bridge_masterLogic_timer_value - _zz_38);
    if((! i2cCtrl_io_internals_sclRead))begin
      bridge_masterLogic_fsm_inFrameLate <= 1'b1;
    end
    if((! i2cCtrl_io_internals_inFrame))begin
      bridge_masterLogic_fsm_inFrameLate <= 1'b0;
    end
    case(i2cCtrl_io_bus_cmd_kind)
      `I2cSlaveCmdMode_defaultEncoding_START : begin
      end
      `I2cSlaveCmdMode_defaultEncoding_RESTART : begin
      end
      `I2cSlaveCmdMode_defaultEncoding_STOP : begin
      end
      `I2cSlaveCmdMode_defaultEncoding_DROP : begin
      end
      `I2cSlaveCmdMode_defaultEncoding_READ : begin
        if(_zz_28)begin
          bridge_rxData_value[_zz_40] <= i2cCtrl_io_bus_cmd_data;
        end else begin
          bridge_rxAck_value <= i2cCtrl_io_bus_cmd_data;
        end
      end
      default : begin
      end
    endcase
    if(_zz_22)begin
      bridge_txData_disableOnDataConflict <= 1'b0;
      bridge_txAck_disableOnDataConflict <= 1'b0;
    end
    _zz_11_regNext <= _zz_11;
    bridge_masterLogic_fsm_isBusy_regNext <= bridge_masterLogic_fsm_isBusy;
    case(io_apb_PADDR)
      8'b00001000 : begin
      end
      8'b00001100 : begin
      end
      8'b00000000 : begin
        if(busCtrl_doWrite)begin
          bridge_txData_value <= io_apb_PWDATA[7 : 0];
          bridge_txData_disableOnDataConflict <= _zz_56[0];
        end
      end
      8'b00000100 : begin
        if(busCtrl_doWrite)begin
          bridge_txAck_value <= _zz_59[0];
          bridge_txAck_disableOnDataConflict <= _zz_61[0];
        end
      end
      8'b10001000 : begin
        if(busCtrl_doWrite)begin
          bridge_addressFilter_addresses_0_value <= io_apb_PWDATA[9 : 0];
          bridge_addressFilter_addresses_0_is10Bit <= _zz_64[0];
        end
      end
      8'b10001100 : begin
        if(busCtrl_doWrite)begin
          bridge_addressFilter_addresses_1_value <= io_apb_PWDATA[9 : 0];
          bridge_addressFilter_addresses_1_is10Bit <= _zz_66[0];
        end
      end
      8'b10000000 : begin
      end
      8'b10000100 : begin
      end
      8'b01000000 : begin
      end
      8'b01010000 : begin
        if(busCtrl_doWrite)begin
          bridge_masterLogic_timer_tLow <= io_apb_PWDATA[11 : 0];
        end
      end
      8'b01010100 : begin
        if(busCtrl_doWrite)begin
          bridge_masterLogic_timer_tHigh <= io_apb_PWDATA[11 : 0];
        end
      end
      8'b01011000 : begin
        if(busCtrl_doWrite)begin
          bridge_masterLogic_timer_tBuf <= io_apb_PWDATA[11 : 0];
        end
      end
      8'b00100000 : begin
      end
      8'b00100100 : begin
      end
      8'b00101000 : begin
      end
      8'b00101100 : begin
        if(busCtrl_doWrite)begin
          _zz_15 <= io_apb_PWDATA[19 : 0];
        end
      end
      8'b00110000 : begin
        if(busCtrl_doWrite)begin
          _zz_16 <= io_apb_PWDATA[5 : 0];
        end
      end
      default : begin
      end
    endcase
    case(bridge_masterLogic_fsm_stateReg)
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_IDLE : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START1 : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START2 : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_LOW : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_HIGH : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_RESTART : begin
        if((! i2cCtrl_io_internals_sclRead))begin
          bridge_masterLogic_timer_value <= bridge_masterLogic_timer_tHigh;
        end
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP1 : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP2 : begin
      end
      `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_TBUF : begin
      end
      default : begin
      end
    endcase
    if(((! (bridge_masterLogic_fsm_stateReg == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START1)) && (bridge_masterLogic_fsm_stateNext == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START1)))begin
      bridge_masterLogic_timer_value <= bridge_masterLogic_timer_tHigh;
    end
    if(((! (bridge_masterLogic_fsm_stateReg == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START2)) && (bridge_masterLogic_fsm_stateNext == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_START2)))begin
      bridge_masterLogic_timer_value <= bridge_masterLogic_timer_tLow;
    end
    if(((! (bridge_masterLogic_fsm_stateReg == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_LOW)) && (bridge_masterLogic_fsm_stateNext == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_LOW)))begin
      bridge_masterLogic_timer_value <= bridge_masterLogic_timer_tLow;
    end
    if(((! (bridge_masterLogic_fsm_stateReg == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_HIGH)) && (bridge_masterLogic_fsm_stateNext == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_HIGH)))begin
      bridge_masterLogic_timer_value <= bridge_masterLogic_timer_tHigh;
    end
    if(((! (bridge_masterLogic_fsm_stateReg == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_RESTART)) && (bridge_masterLogic_fsm_stateNext == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_RESTART)))begin
      bridge_masterLogic_timer_value <= bridge_masterLogic_timer_tHigh;
    end
    if(((! (bridge_masterLogic_fsm_stateReg == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP1)) && (bridge_masterLogic_fsm_stateNext == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP1)))begin
      bridge_masterLogic_timer_value <= bridge_masterLogic_timer_tHigh;
    end
    if(((! (bridge_masterLogic_fsm_stateReg == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP2)) && (bridge_masterLogic_fsm_stateNext == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_STOP2)))begin
      bridge_masterLogic_timer_value <= bridge_masterLogic_timer_tHigh;
    end
    if(((! (bridge_masterLogic_fsm_stateReg == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_TBUF)) && (bridge_masterLogic_fsm_stateNext == `bridge_masterLogic_fsm_enumDefinition_defaultEncoding_bridge_masterLogic_fsm_TBUF)))begin
      bridge_masterLogic_timer_value <= bridge_masterLogic_timer_tBuf;
    end
  end

  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      i2cCtrl_io_internals_inFrame_regNext <= 1'b0;
    end else begin
      i2cCtrl_io_internals_inFrame_regNext <= i2cCtrl_io_internals_inFrame;
    end
  end


endmodule

module Apb3UartCtrl_e12a9decc0704226832aec4017b36e8d (
  input      [4:0]    io_apb_PADDR,
  input      [0:0]    io_apb_PSEL,
  input               io_apb_PENABLE,
  output              io_apb_PREADY,
  input               io_apb_PWRITE,
  input      [31:0]   io_apb_PWDATA,
  output reg [31:0]   io_apb_PRDATA,
  output              io_uart_txd,
  input               io_uart_rxd,
  output              io_interrupt,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  wire                _zz_9;
  reg                 _zz_10;
  wire                _zz_11;
  wire                uartCtrl_1_io_write_ready;
  wire                uartCtrl_1_io_read_valid;
  wire       [7:0]    uartCtrl_1_io_read_payload;
  wire                uartCtrl_1_io_uart_txd;
  wire                uartCtrl_1_io_readError;
  wire                uartCtrl_1_io_readBreak;
  wire                bridge_write_streamUnbuffered_queueWithOccupancy_io_push_ready;
  wire                bridge_write_streamUnbuffered_queueWithOccupancy_io_pop_valid;
  wire       [7:0]    bridge_write_streamUnbuffered_queueWithOccupancy_io_pop_payload;
  wire       [4:0]    bridge_write_streamUnbuffered_queueWithOccupancy_io_occupancy;
  wire       [4:0]    bridge_write_streamUnbuffered_queueWithOccupancy_io_availability;
  wire                uartCtrl_1_io_read_queueWithOccupancy_io_push_ready;
  wire                uartCtrl_1_io_read_queueWithOccupancy_io_pop_valid;
  wire       [7:0]    uartCtrl_1_io_read_queueWithOccupancy_io_pop_payload;
  wire       [4:0]    uartCtrl_1_io_read_queueWithOccupancy_io_occupancy;
  wire       [4:0]    uartCtrl_1_io_read_queueWithOccupancy_io_availability;
  wire       [0:0]    _zz_12;
  wire       [0:0]    _zz_13;
  wire       [0:0]    _zz_14;
  wire       [0:0]    _zz_15;
  wire       [0:0]    _zz_16;
  wire       [0:0]    _zz_17;
  wire       [0:0]    _zz_18;
  wire       [0:0]    _zz_19;
  wire       [0:0]    _zz_20;
  wire       [0:0]    _zz_21;
  wire       [19:0]   _zz_22;
  wire       [19:0]   _zz_23;
  wire       [0:0]    _zz_24;
  wire       [0:0]    _zz_25;
  wire       [4:0]    _zz_26;
  wire                busCtrl_askWrite;
  wire                busCtrl_askRead;
  wire                busCtrl_doWrite;
  wire                busCtrl_doRead;
  reg        [2:0]    bridge_uartConfigReg_frame_dataLength;
  reg        `UartStopType_defaultEncoding_type bridge_uartConfigReg_frame_stop;
  reg        `UartParityType_defaultEncoding_type bridge_uartConfigReg_frame_parity;
  reg        [19:0]   bridge_uartConfigReg_clockDivider;
  reg                 _zz_1;
  wire                bridge_write_streamUnbuffered_valid;
  wire                bridge_write_streamUnbuffered_ready;
  wire       [7:0]    bridge_write_streamUnbuffered_payload;
  reg                 bridge_read_streamBreaked_valid;
  reg                 bridge_read_streamBreaked_ready;
  wire       [7:0]    bridge_read_streamBreaked_payload;
  reg                 bridge_interruptCtrl_writeIntEnable;
  reg                 bridge_interruptCtrl_readIntEnable;
  wire                bridge_interruptCtrl_readInt;
  wire                bridge_interruptCtrl_writeInt;
  wire                bridge_interruptCtrl_interrupt;
  reg                 bridge_misc_readError;
  reg                 _zz_2;
  reg                 bridge_misc_readOverflowError;
  reg                 _zz_3;
  reg                 bridge_misc_breakDetected;
  reg                 uartCtrl_1_io_readBreak_regNext;
  reg                 _zz_4;
  reg                 bridge_misc_doBreak;
  reg                 _zz_5;
  reg                 _zz_6;
  wire       `UartParityType_defaultEncoding_type _zz_7;
  wire       `UartStopType_defaultEncoding_type _zz_8;
  `ifndef SYNTHESIS
  reg [23:0] bridge_uartConfigReg_frame_stop_string;
  reg [31:0] bridge_uartConfigReg_frame_parity_string;
  reg [31:0] _zz_7_string;
  reg [23:0] _zz_8_string;
  `endif


  assign _zz_12 = io_apb_PWDATA[0 : 0];
  assign _zz_13 = (1'b0);
  assign _zz_14 = io_apb_PWDATA[1 : 1];
  assign _zz_15 = (1'b0);
  assign _zz_16 = io_apb_PWDATA[9 : 9];
  assign _zz_17 = (1'b0);
  assign _zz_18 = io_apb_PWDATA[10 : 10];
  assign _zz_19 = (1'b1);
  assign _zz_20 = io_apb_PWDATA[11 : 11];
  assign _zz_21 = (1'b0);
  assign _zz_22 = io_apb_PWDATA[19 : 0];
  assign _zz_23 = _zz_22;
  assign _zz_24 = io_apb_PWDATA[0 : 0];
  assign _zz_25 = io_apb_PWDATA[1 : 1];
  assign _zz_26 = (5'h10 - bridge_write_streamUnbuffered_queueWithOccupancy_io_occupancy);
  UartCtrl_e12a9decc0704226832aec4017b36e8d uartCtrl_1 (
    .io_config_frame_dataLength    (bridge_uartConfigReg_frame_dataLength[2:0]                            ), //i
    .io_config_frame_stop          (bridge_uartConfigReg_frame_stop                                       ), //i
    .io_config_frame_parity        (bridge_uartConfigReg_frame_parity[1:0]                                ), //i
    .io_config_clockDivider        (bridge_uartConfigReg_clockDivider[19:0]                               ), //i
    .io_write_valid                (bridge_write_streamUnbuffered_queueWithOccupancy_io_pop_valid         ), //i
    .io_write_ready                (uartCtrl_1_io_write_ready                                             ), //o
    .io_write_payload              (bridge_write_streamUnbuffered_queueWithOccupancy_io_pop_payload[7:0]  ), //i
    .io_read_valid                 (uartCtrl_1_io_read_valid                                              ), //o
    .io_read_ready                 (uartCtrl_1_io_read_queueWithOccupancy_io_push_ready                   ), //i
    .io_read_payload               (uartCtrl_1_io_read_payload[7:0]                                       ), //o
    .io_uart_txd                   (uartCtrl_1_io_uart_txd                                                ), //o
    .io_uart_rxd                   (io_uart_rxd                                                           ), //i
    .io_readError                  (uartCtrl_1_io_readError                                               ), //o
    .io_writeBreak                 (bridge_misc_doBreak                                                   ), //i
    .io_readBreak                  (uartCtrl_1_io_readBreak                                               ), //o
    .io_systemClk                  (io_systemClk                                                          ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                                            )  //i
  );
  StreamFifo_1_e12a9decc0704226832aec4017b36e8d bridge_write_streamUnbuffered_queueWithOccupancy (
    .io_push_valid                 (bridge_write_streamUnbuffered_valid                                    ), //i
    .io_push_ready                 (bridge_write_streamUnbuffered_queueWithOccupancy_io_push_ready         ), //o
    .io_push_payload               (bridge_write_streamUnbuffered_payload[7:0]                             ), //i
    .io_pop_valid                  (bridge_write_streamUnbuffered_queueWithOccupancy_io_pop_valid          ), //o
    .io_pop_ready                  (uartCtrl_1_io_write_ready                                              ), //i
    .io_pop_payload                (bridge_write_streamUnbuffered_queueWithOccupancy_io_pop_payload[7:0]   ), //o
    .io_flush                      (_zz_9                                                                  ), //i
    .io_occupancy                  (bridge_write_streamUnbuffered_queueWithOccupancy_io_occupancy[4:0]     ), //o
    .io_availability               (bridge_write_streamUnbuffered_queueWithOccupancy_io_availability[4:0]  ), //o
    .io_systemClk                  (io_systemClk                                                           ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                                             )  //i
  );
  StreamFifo_1_e12a9decc0704226832aec4017b36e8d uartCtrl_1_io_read_queueWithOccupancy (
    .io_push_valid                 (uartCtrl_1_io_read_valid                                    ), //i
    .io_push_ready                 (uartCtrl_1_io_read_queueWithOccupancy_io_push_ready         ), //o
    .io_push_payload               (uartCtrl_1_io_read_payload[7:0]                             ), //i
    .io_pop_valid                  (uartCtrl_1_io_read_queueWithOccupancy_io_pop_valid          ), //o
    .io_pop_ready                  (_zz_10                                                      ), //i
    .io_pop_payload                (uartCtrl_1_io_read_queueWithOccupancy_io_pop_payload[7:0]   ), //o
    .io_flush                      (_zz_11                                                      ), //i
    .io_occupancy                  (uartCtrl_1_io_read_queueWithOccupancy_io_occupancy[4:0]     ), //o
    .io_availability               (uartCtrl_1_io_read_queueWithOccupancy_io_availability[4:0]  ), //o
    .io_systemClk                  (io_systemClk                                                ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset                                  )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(bridge_uartConfigReg_frame_stop)
      `UartStopType_defaultEncoding_ONE : bridge_uartConfigReg_frame_stop_string = "ONE";
      `UartStopType_defaultEncoding_TWO : bridge_uartConfigReg_frame_stop_string = "TWO";
      default : bridge_uartConfigReg_frame_stop_string = "???";
    endcase
  end
  always @(*) begin
    case(bridge_uartConfigReg_frame_parity)
      `UartParityType_defaultEncoding_NONE : bridge_uartConfigReg_frame_parity_string = "NONE";
      `UartParityType_defaultEncoding_EVEN : bridge_uartConfigReg_frame_parity_string = "EVEN";
      `UartParityType_defaultEncoding_ODD : bridge_uartConfigReg_frame_parity_string = "ODD ";
      default : bridge_uartConfigReg_frame_parity_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_7)
      `UartParityType_defaultEncoding_NONE : _zz_7_string = "NONE";
      `UartParityType_defaultEncoding_EVEN : _zz_7_string = "EVEN";
      `UartParityType_defaultEncoding_ODD : _zz_7_string = "ODD ";
      default : _zz_7_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_8)
      `UartStopType_defaultEncoding_ONE : _zz_8_string = "ONE";
      `UartStopType_defaultEncoding_TWO : _zz_8_string = "TWO";
      default : _zz_8_string = "???";
    endcase
  end
  `endif

  assign io_uart_txd = uartCtrl_1_io_uart_txd;
  assign io_apb_PREADY = 1'b1;
  always @ (*) begin
    io_apb_PRDATA = 32'h0;
    case(io_apb_PADDR)
      5'b01000 : begin
      end
      5'b01100 : begin
      end
      5'b00000 : begin
        io_apb_PRDATA[16 : 16] = (bridge_read_streamBreaked_valid ^ 1'b0);
        io_apb_PRDATA[7 : 0] = bridge_read_streamBreaked_payload;
      end
      5'b00100 : begin
        io_apb_PRDATA[20 : 16] = _zz_26;
        io_apb_PRDATA[15 : 15] = bridge_write_streamUnbuffered_queueWithOccupancy_io_pop_valid;
        io_apb_PRDATA[28 : 24] = uartCtrl_1_io_read_queueWithOccupancy_io_occupancy;
        io_apb_PRDATA[0 : 0] = bridge_interruptCtrl_writeIntEnable;
        io_apb_PRDATA[1 : 1] = bridge_interruptCtrl_readIntEnable;
        io_apb_PRDATA[8 : 8] = bridge_interruptCtrl_writeInt;
        io_apb_PRDATA[9 : 9] = bridge_interruptCtrl_readInt;
      end
      5'b10000 : begin
        io_apb_PRDATA[0 : 0] = bridge_misc_readError;
        io_apb_PRDATA[1 : 1] = bridge_misc_readOverflowError;
        io_apb_PRDATA[8 : 8] = uartCtrl_1_io_readBreak;
        io_apb_PRDATA[9 : 9] = bridge_misc_breakDetected;
      end
      default : begin
      end
    endcase
  end

  assign busCtrl_askWrite = ((io_apb_PSEL[0] && io_apb_PENABLE) && io_apb_PWRITE);
  assign busCtrl_askRead = ((io_apb_PSEL[0] && io_apb_PENABLE) && (! io_apb_PWRITE));
  assign busCtrl_doWrite = (((io_apb_PSEL[0] && io_apb_PENABLE) && io_apb_PREADY) && io_apb_PWRITE);
  assign busCtrl_doRead = (((io_apb_PSEL[0] && io_apb_PENABLE) && io_apb_PREADY) && (! io_apb_PWRITE));
  always @ (*) begin
    _zz_1 = 1'b0;
    case(io_apb_PADDR)
      5'b01000 : begin
      end
      5'b01100 : begin
      end
      5'b00000 : begin
        if(busCtrl_doWrite)begin
          _zz_1 = 1'b1;
        end
      end
      5'b00100 : begin
      end
      5'b10000 : begin
      end
      default : begin
      end
    endcase
  end

  assign bridge_write_streamUnbuffered_valid = _zz_1;
  assign bridge_write_streamUnbuffered_payload = io_apb_PWDATA[7 : 0];
  assign bridge_write_streamUnbuffered_ready = bridge_write_streamUnbuffered_queueWithOccupancy_io_push_ready;
  always @ (*) begin
    bridge_read_streamBreaked_valid = uartCtrl_1_io_read_queueWithOccupancy_io_pop_valid;
    if(uartCtrl_1_io_readBreak)begin
      bridge_read_streamBreaked_valid = 1'b0;
    end
  end

  always @ (*) begin
    _zz_10 = bridge_read_streamBreaked_ready;
    if(uartCtrl_1_io_readBreak)begin
      _zz_10 = 1'b1;
    end
  end

  assign bridge_read_streamBreaked_payload = uartCtrl_1_io_read_queueWithOccupancy_io_pop_payload;
  always @ (*) begin
    bridge_read_streamBreaked_ready = 1'b0;
    case(io_apb_PADDR)
      5'b01000 : begin
      end
      5'b01100 : begin
      end
      5'b00000 : begin
        if(busCtrl_doRead)begin
          bridge_read_streamBreaked_ready = 1'b1;
        end
      end
      5'b00100 : begin
      end
      5'b10000 : begin
      end
      default : begin
      end
    endcase
  end

  assign bridge_interruptCtrl_readInt = (bridge_interruptCtrl_readIntEnable && bridge_read_streamBreaked_valid);
  assign bridge_interruptCtrl_writeInt = (bridge_interruptCtrl_writeIntEnable && (! bridge_write_streamUnbuffered_queueWithOccupancy_io_pop_valid));
  assign bridge_interruptCtrl_interrupt = (bridge_interruptCtrl_readInt || bridge_interruptCtrl_writeInt);
  always @ (*) begin
    _zz_2 = 1'b0;
    case(io_apb_PADDR)
      5'b01000 : begin
      end
      5'b01100 : begin
      end
      5'b00000 : begin
      end
      5'b00100 : begin
      end
      5'b10000 : begin
        if(busCtrl_doWrite)begin
          _zz_2 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_3 = 1'b0;
    case(io_apb_PADDR)
      5'b01000 : begin
      end
      5'b01100 : begin
      end
      5'b00000 : begin
      end
      5'b00100 : begin
      end
      5'b10000 : begin
        if(busCtrl_doWrite)begin
          _zz_3 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_4 = 1'b0;
    case(io_apb_PADDR)
      5'b01000 : begin
      end
      5'b01100 : begin
      end
      5'b00000 : begin
      end
      5'b00100 : begin
      end
      5'b10000 : begin
        if(busCtrl_doWrite)begin
          _zz_4 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_5 = 1'b0;
    case(io_apb_PADDR)
      5'b01000 : begin
      end
      5'b01100 : begin
      end
      5'b00000 : begin
      end
      5'b00100 : begin
      end
      5'b10000 : begin
        if(busCtrl_doWrite)begin
          _zz_5 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_6 = 1'b0;
    case(io_apb_PADDR)
      5'b01000 : begin
      end
      5'b01100 : begin
      end
      5'b00000 : begin
      end
      5'b00100 : begin
      end
      5'b10000 : begin
        if(busCtrl_doWrite)begin
          _zz_6 = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  assign io_interrupt = bridge_interruptCtrl_interrupt;
  assign _zz_7 = io_apb_PWDATA[9 : 8];
  assign _zz_8 = io_apb_PWDATA[16 : 16];
  assign _zz_9 = 1'b0;
  assign _zz_11 = 1'b0;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      bridge_uartConfigReg_clockDivider <= 20'h0;
      bridge_uartConfigReg_clockDivider <= 20'h0006b;
      bridge_uartConfigReg_frame_dataLength <= (3'b111);
      bridge_uartConfigReg_frame_parity <= `UartParityType_defaultEncoding_NONE;
      bridge_uartConfigReg_frame_stop <= `UartStopType_defaultEncoding_ONE;
      bridge_interruptCtrl_writeIntEnable <= 1'b0;
      bridge_interruptCtrl_readIntEnable <= 1'b0;
      bridge_misc_readError <= 1'b0;
      bridge_misc_readOverflowError <= 1'b0;
      bridge_misc_breakDetected <= 1'b0;
      bridge_misc_doBreak <= 1'b0;
    end else begin
      if(_zz_2)begin
        if(_zz_12[0])begin
          bridge_misc_readError <= _zz_13[0];
        end
      end
      if(uartCtrl_1_io_readError)begin
        bridge_misc_readError <= 1'b1;
      end
      if(_zz_3)begin
        if(_zz_14[0])begin
          bridge_misc_readOverflowError <= _zz_15[0];
        end
      end
      if((uartCtrl_1_io_read_valid && (! uartCtrl_1_io_read_queueWithOccupancy_io_push_ready)))begin
        bridge_misc_readOverflowError <= 1'b1;
      end
      if((uartCtrl_1_io_readBreak && (! uartCtrl_1_io_readBreak_regNext)))begin
        bridge_misc_breakDetected <= 1'b1;
      end
      if(_zz_4)begin
        if(_zz_16[0])begin
          bridge_misc_breakDetected <= _zz_17[0];
        end
      end
      if(_zz_5)begin
        if(_zz_18[0])begin
          bridge_misc_doBreak <= _zz_19[0];
        end
      end
      if(_zz_6)begin
        if(_zz_20[0])begin
          bridge_misc_doBreak <= _zz_21[0];
        end
      end
      case(io_apb_PADDR)
        5'b01000 : begin
          if(busCtrl_doWrite)begin
            bridge_uartConfigReg_clockDivider[19 : 0] <= _zz_23;
          end
        end
        5'b01100 : begin
          if(busCtrl_doWrite)begin
            bridge_uartConfigReg_frame_dataLength <= io_apb_PWDATA[2 : 0];
            bridge_uartConfigReg_frame_parity <= _zz_7;
            bridge_uartConfigReg_frame_stop <= _zz_8;
          end
        end
        5'b00000 : begin
        end
        5'b00100 : begin
          if(busCtrl_doWrite)begin
            bridge_interruptCtrl_writeIntEnable <= _zz_24[0];
            bridge_interruptCtrl_readIntEnable <= _zz_25[0];
          end
        end
        5'b10000 : begin
        end
        default : begin
        end
      endcase
    end
  end

  always @ (posedge io_systemClk) begin
    uartCtrl_1_io_readBreak_regNext <= uartCtrl_1_io_readBreak;
  end


endmodule

module MachineTimer_e12a9decc0704226832aec4017b36e8d (
  input      [3:0]    io_bus_PADDR,
  input      [0:0]    io_bus_PSEL,
  input               io_bus_PENABLE,
  output              io_bus_PREADY,
  input               io_bus_PWRITE,
  input      [31:0]   io_bus_PWDATA,
  output reg [31:0]   io_bus_PRDATA,
  output              io_bus_PSLVERROR,
  output              io_mTimeInterrupt,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  wire       [63:0]   _zz_2;
  wire       [31:0]   _zz_3;
  wire       [31:0]   _zz_4;
  wire       [31:0]   _zz_5;
  wire       [31:0]   _zz_6;
  wire                mapper_askWrite;
  wire                mapper_askRead;
  wire                mapper_doWrite;
  wire                mapper_doRead;
  reg        [63:0]   counter;
  reg        [63:0]   cmp;
  reg                 interrupt;
  wire       [63:0]   _zz_1;

  assign _zz_2 = (counter - cmp);
  assign _zz_3 = io_bus_PWDATA[31 : 0];
  assign _zz_4 = _zz_3;
  assign _zz_5 = io_bus_PWDATA[31 : 0];
  assign _zz_6 = _zz_5;
  assign io_bus_PREADY = 1'b1;
  always @ (*) begin
    io_bus_PRDATA = 32'h0;
    case(io_bus_PADDR)
      4'b0000 : begin
        io_bus_PRDATA[31 : 0] = _zz_1[31 : 0];
      end
      4'b0100 : begin
        io_bus_PRDATA[31 : 0] = _zz_1[63 : 32];
      end
      4'b1000 : begin
      end
      4'b1100 : begin
      end
      default : begin
      end
    endcase
  end

  assign io_bus_PSLVERROR = 1'b0;
  assign mapper_askWrite = ((io_bus_PSEL[0] && io_bus_PENABLE) && io_bus_PWRITE);
  assign mapper_askRead = ((io_bus_PSEL[0] && io_bus_PENABLE) && (! io_bus_PWRITE));
  assign mapper_doWrite = (((io_bus_PSEL[0] && io_bus_PENABLE) && io_bus_PREADY) && io_bus_PWRITE);
  assign mapper_doRead = (((io_bus_PSEL[0] && io_bus_PENABLE) && io_bus_PREADY) && (! io_bus_PWRITE));
  assign io_mTimeInterrupt = interrupt;
  assign _zz_1 = counter;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      counter <= 64'h0;
    end else begin
      counter <= (counter + 64'h0000000000000001);
    end
  end

  always @ (posedge io_systemClk) begin
    interrupt <= (! _zz_2[63]);
    case(io_bus_PADDR)
      4'b0000 : begin
      end
      4'b0100 : begin
      end
      4'b1000 : begin
        if(mapper_doWrite)begin
          cmp[31 : 0] <= _zz_4;
        end
      end
      4'b1100 : begin
        if(mapper_doWrite)begin
          cmp[63 : 32] <= _zz_6;
        end
      end
      default : begin
      end
    endcase
  end


endmodule

module StreamFifo_6_e12a9decc0704226832aec4017b36e8d (
  input               io_push_valid,
  output              io_push_ready,
  input      [0:0]    io_push_payload_source,
  input      [0:0]    io_push_payload_context,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [0:0]    io_pop_payload_source,
  output     [0:0]    io_pop_payload_context,
  input               io_flush,
  output     [3:0]    io_occupancy,
  output     [3:0]    io_availability,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg        [1:0]    _zz_4;
  wire       [0:0]    _zz_5;
  wire       [2:0]    _zz_6;
  wire       [0:0]    _zz_7;
  wire       [2:0]    _zz_8;
  wire       [2:0]    _zz_9;
  wire                _zz_10;
  wire       [1:0]    _zz_11;
  reg                 _zz_1;
  reg                 logic_pushPtr_willIncrement;
  reg                 logic_pushPtr_willClear;
  reg        [2:0]    logic_pushPtr_valueNext;
  reg        [2:0]    logic_pushPtr_value;
  wire                logic_pushPtr_willOverflowIfInc;
  wire                logic_pushPtr_willOverflow;
  reg                 logic_popPtr_willIncrement;
  reg                 logic_popPtr_willClear;
  reg        [2:0]    logic_popPtr_valueNext;
  reg        [2:0]    logic_popPtr_value;
  wire                logic_popPtr_willOverflowIfInc;
  wire                logic_popPtr_willOverflow;
  wire                logic_ptrMatch;
  reg                 logic_risingOccupancy;
  wire                logic_pushing;
  wire                logic_popping;
  wire                logic_empty;
  wire                logic_full;
  reg                 _zz_2;
  wire       [1:0]    _zz_3;
  wire       [2:0]    logic_ptrDif;
  reg [1:0] logic_ram [0:7];

  assign _zz_5 = logic_pushPtr_willIncrement;
  assign _zz_6 = {2'd0, _zz_5};
  assign _zz_7 = logic_popPtr_willIncrement;
  assign _zz_8 = {2'd0, _zz_7};
  assign _zz_9 = (logic_popPtr_value - logic_pushPtr_value);
  assign _zz_10 = 1'b1;
  assign _zz_11 = {io_push_payload_context,io_push_payload_source};
  always @ (posedge io_systemClk) begin
    if(_zz_10) begin
      _zz_4 <= logic_ram[logic_popPtr_valueNext];
    end
  end

  always @ (posedge io_systemClk) begin
    if(_zz_1) begin
      logic_ram[logic_pushPtr_value] <= _zz_11;
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(logic_pushing)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willIncrement = 1'b0;
    if(logic_pushing)begin
      logic_pushPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_pushPtr_willClear = 1'b1;
    end
  end

  assign logic_pushPtr_willOverflowIfInc = (logic_pushPtr_value == (3'b111));
  assign logic_pushPtr_willOverflow = (logic_pushPtr_willOverflowIfInc && logic_pushPtr_willIncrement);
  always @ (*) begin
    logic_pushPtr_valueNext = (logic_pushPtr_value + _zz_6);
    if(logic_pushPtr_willClear)begin
      logic_pushPtr_valueNext = (3'b000);
    end
  end

  always @ (*) begin
    logic_popPtr_willIncrement = 1'b0;
    if(logic_popping)begin
      logic_popPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_popPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_popPtr_willClear = 1'b1;
    end
  end

  assign logic_popPtr_willOverflowIfInc = (logic_popPtr_value == (3'b111));
  assign logic_popPtr_willOverflow = (logic_popPtr_willOverflowIfInc && logic_popPtr_willIncrement);
  always @ (*) begin
    logic_popPtr_valueNext = (logic_popPtr_value + _zz_8);
    if(logic_popPtr_willClear)begin
      logic_popPtr_valueNext = (3'b000);
    end
  end

  assign logic_ptrMatch = (logic_pushPtr_value == logic_popPtr_value);
  assign logic_pushing = (io_push_valid && io_push_ready);
  assign logic_popping = (io_pop_valid && io_pop_ready);
  assign logic_empty = (logic_ptrMatch && (! logic_risingOccupancy));
  assign logic_full = (logic_ptrMatch && logic_risingOccupancy);
  assign io_push_ready = (! logic_full);
  assign io_pop_valid = ((! logic_empty) && (! (_zz_2 && (! logic_full))));
  assign _zz_3 = _zz_4;
  assign io_pop_payload_source = _zz_3[0 : 0];
  assign io_pop_payload_context = _zz_3[1 : 1];
  assign logic_ptrDif = (logic_pushPtr_value - logic_popPtr_value);
  assign io_occupancy = {(logic_risingOccupancy && logic_ptrMatch),logic_ptrDif};
  assign io_availability = {((! logic_risingOccupancy) && logic_ptrMatch),_zz_9};
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      logic_pushPtr_value <= (3'b000);
      logic_popPtr_value <= (3'b000);
      logic_risingOccupancy <= 1'b0;
      _zz_2 <= 1'b0;
    end else begin
      logic_pushPtr_value <= logic_pushPtr_valueNext;
      logic_popPtr_value <= logic_popPtr_valueNext;
      _zz_2 <= (logic_popPtr_valueNext == logic_pushPtr_value);
      if((logic_pushing != logic_popping))begin
        logic_risingOccupancy <= logic_pushing;
      end
      if(io_flush)begin
        logic_risingOccupancy <= 1'b0;
      end
    end
  end


endmodule

module StreamFork_4_e12a9decc0704226832aec4017b36e8d (
  input               io_input_valid,
  output reg          io_input_ready,
  input               io_input_payload_last,
  input      [0:0]    io_input_payload_fragment_source,
  input      [0:0]    io_input_payload_fragment_opcode,
  input      [31:0]   io_input_payload_fragment_address,
  input      [4:0]    io_input_payload_fragment_length,
  input      [31:0]   io_input_payload_fragment_data,
  input      [3:0]    io_input_payload_fragment_mask,
  input      [0:0]    io_input_payload_fragment_context,
  output              io_outputs_0_valid,
  input               io_outputs_0_ready,
  output              io_outputs_0_payload_last,
  output     [0:0]    io_outputs_0_payload_fragment_source,
  output     [0:0]    io_outputs_0_payload_fragment_opcode,
  output     [31:0]   io_outputs_0_payload_fragment_address,
  output     [4:0]    io_outputs_0_payload_fragment_length,
  output     [31:0]   io_outputs_0_payload_fragment_data,
  output     [3:0]    io_outputs_0_payload_fragment_mask,
  output     [0:0]    io_outputs_0_payload_fragment_context,
  output              io_outputs_1_valid,
  input               io_outputs_1_ready,
  output              io_outputs_1_payload_last,
  output     [0:0]    io_outputs_1_payload_fragment_source,
  output     [0:0]    io_outputs_1_payload_fragment_opcode,
  output     [31:0]   io_outputs_1_payload_fragment_address,
  output     [4:0]    io_outputs_1_payload_fragment_length,
  output     [31:0]   io_outputs_1_payload_fragment_data,
  output     [3:0]    io_outputs_1_payload_fragment_mask,
  output     [0:0]    io_outputs_1_payload_fragment_context,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg                 _zz_1;
  reg                 _zz_2;

  always @ (*) begin
    io_input_ready = 1'b1;
    if(((! io_outputs_0_ready) && _zz_1))begin
      io_input_ready = 1'b0;
    end
    if(((! io_outputs_1_ready) && _zz_2))begin
      io_input_ready = 1'b0;
    end
  end

  assign io_outputs_0_valid = (io_input_valid && _zz_1);
  assign io_outputs_0_payload_last = io_input_payload_last;
  assign io_outputs_0_payload_fragment_source = io_input_payload_fragment_source;
  assign io_outputs_0_payload_fragment_opcode = io_input_payload_fragment_opcode;
  assign io_outputs_0_payload_fragment_address = io_input_payload_fragment_address;
  assign io_outputs_0_payload_fragment_length = io_input_payload_fragment_length;
  assign io_outputs_0_payload_fragment_data = io_input_payload_fragment_data;
  assign io_outputs_0_payload_fragment_mask = io_input_payload_fragment_mask;
  assign io_outputs_0_payload_fragment_context = io_input_payload_fragment_context;
  assign io_outputs_1_valid = (io_input_valid && _zz_2);
  assign io_outputs_1_payload_last = io_input_payload_last;
  assign io_outputs_1_payload_fragment_source = io_input_payload_fragment_source;
  assign io_outputs_1_payload_fragment_opcode = io_input_payload_fragment_opcode;
  assign io_outputs_1_payload_fragment_address = io_input_payload_fragment_address;
  assign io_outputs_1_payload_fragment_length = io_input_payload_fragment_length;
  assign io_outputs_1_payload_fragment_data = io_input_payload_fragment_data;
  assign io_outputs_1_payload_fragment_mask = io_input_payload_fragment_mask;
  assign io_outputs_1_payload_fragment_context = io_input_payload_fragment_context;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      _zz_1 <= 1'b1;
      _zz_2 <= 1'b1;
    end else begin
      if((io_outputs_0_valid && io_outputs_0_ready))begin
        _zz_1 <= 1'b0;
      end
      if((io_outputs_1_valid && io_outputs_1_ready))begin
        _zz_2 <= 1'b0;
      end
      if(io_input_ready)begin
        _zz_1 <= 1'b1;
        _zz_2 <= 1'b1;
      end
    end
  end


endmodule

module StreamFifo_5_e12a9decc0704226832aec4017b36e8d (
  input               io_push_valid,
  output              io_push_ready,
  input      [7:0]    io_push_payload_data,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [7:0]    io_pop_payload_data,
  input               io_flush,
  output     [8:0]    io_occupancy,
  output     [8:0]    io_availability,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg        [7:0]    _zz_3;
  wire       [0:0]    _zz_4;
  wire       [7:0]    _zz_5;
  wire       [0:0]    _zz_6;
  wire       [7:0]    _zz_7;
  wire       [7:0]    _zz_8;
  wire                _zz_9;
  reg                 _zz_1;
  reg                 logic_pushPtr_willIncrement;
  reg                 logic_pushPtr_willClear;
  reg        [7:0]    logic_pushPtr_valueNext;
  reg        [7:0]    logic_pushPtr_value;
  wire                logic_pushPtr_willOverflowIfInc;
  wire                logic_pushPtr_willOverflow;
  reg                 logic_popPtr_willIncrement;
  reg                 logic_popPtr_willClear;
  reg        [7:0]    logic_popPtr_valueNext;
  reg        [7:0]    logic_popPtr_value;
  wire                logic_popPtr_willOverflowIfInc;
  wire                logic_popPtr_willOverflow;
  wire                logic_ptrMatch;
  reg                 logic_risingOccupancy;
  wire                logic_pushing;
  wire                logic_popping;
  wire                logic_empty;
  wire                logic_full;
  reg                 _zz_2;
  wire       [7:0]    logic_ptrDif;
  reg [7:0] logic_ram [0:255];

  assign _zz_4 = logic_pushPtr_willIncrement;
  assign _zz_5 = {7'd0, _zz_4};
  assign _zz_6 = logic_popPtr_willIncrement;
  assign _zz_7 = {7'd0, _zz_6};
  assign _zz_8 = (logic_popPtr_value - logic_pushPtr_value);
  assign _zz_9 = 1'b1;
  always @ (posedge io_systemClk) begin
    if(_zz_9) begin
      _zz_3 <= logic_ram[logic_popPtr_valueNext];
    end
  end

  always @ (posedge io_systemClk) begin
    if(_zz_1) begin
      logic_ram[logic_pushPtr_value] <= io_push_payload_data;
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(logic_pushing)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willIncrement = 1'b0;
    if(logic_pushing)begin
      logic_pushPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_pushPtr_willClear = 1'b1;
    end
  end

  assign logic_pushPtr_willOverflowIfInc = (logic_pushPtr_value == 8'hff);
  assign logic_pushPtr_willOverflow = (logic_pushPtr_willOverflowIfInc && logic_pushPtr_willIncrement);
  always @ (*) begin
    logic_pushPtr_valueNext = (logic_pushPtr_value + _zz_5);
    if(logic_pushPtr_willClear)begin
      logic_pushPtr_valueNext = 8'h0;
    end
  end

  always @ (*) begin
    logic_popPtr_willIncrement = 1'b0;
    if(logic_popping)begin
      logic_popPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_popPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_popPtr_willClear = 1'b1;
    end
  end

  assign logic_popPtr_willOverflowIfInc = (logic_popPtr_value == 8'hff);
  assign logic_popPtr_willOverflow = (logic_popPtr_willOverflowIfInc && logic_popPtr_willIncrement);
  always @ (*) begin
    logic_popPtr_valueNext = (logic_popPtr_value + _zz_7);
    if(logic_popPtr_willClear)begin
      logic_popPtr_valueNext = 8'h0;
    end
  end

  assign logic_ptrMatch = (logic_pushPtr_value == logic_popPtr_value);
  assign logic_pushing = (io_push_valid && io_push_ready);
  assign logic_popping = (io_pop_valid && io_pop_ready);
  assign logic_empty = (logic_ptrMatch && (! logic_risingOccupancy));
  assign logic_full = (logic_ptrMatch && logic_risingOccupancy);
  assign io_push_ready = (! logic_full);
  assign io_pop_valid = ((! logic_empty) && (! (_zz_2 && (! logic_full))));
  assign io_pop_payload_data = _zz_3[7 : 0];
  assign logic_ptrDif = (logic_pushPtr_value - logic_popPtr_value);
  assign io_occupancy = {(logic_risingOccupancy && logic_ptrMatch),logic_ptrDif};
  assign io_availability = {((! logic_risingOccupancy) && logic_ptrMatch),_zz_8};
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      logic_pushPtr_value <= 8'h0;
      logic_popPtr_value <= 8'h0;
      logic_risingOccupancy <= 1'b0;
      _zz_2 <= 1'b0;
    end else begin
      logic_pushPtr_value <= logic_pushPtr_valueNext;
      logic_popPtr_value <= logic_popPtr_valueNext;
      _zz_2 <= (logic_popPtr_valueNext == logic_pushPtr_value);
      if((logic_pushing != logic_popping))begin
        logic_risingOccupancy <= logic_pushing;
      end
      if(io_flush)begin
        logic_risingOccupancy <= 1'b0;
      end
    end
  end


endmodule

module StreamFifo_4_e12a9decc0704226832aec4017b36e8d (
  input               io_push_valid,
  output              io_push_ready,
  input               io_push_payload_kind,
  input               io_push_payload_read,
  input               io_push_payload_write,
  input      [7:0]    io_push_payload_data,
  output              io_pop_valid,
  input               io_pop_ready,
  output              io_pop_payload_kind,
  output              io_pop_payload_read,
  output              io_pop_payload_write,
  output     [7:0]    io_pop_payload_data,
  input               io_flush,
  output     [8:0]    io_occupancy,
  output     [8:0]    io_availability,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg        [10:0]   _zz_4;
  wire       [0:0]    _zz_5;
  wire       [7:0]    _zz_6;
  wire       [0:0]    _zz_7;
  wire       [7:0]    _zz_8;
  wire       [0:0]    _zz_9;
  wire       [0:0]    _zz_10;
  wire       [0:0]    _zz_11;
  wire       [7:0]    _zz_12;
  wire                _zz_13;
  wire       [10:0]   _zz_14;
  reg                 _zz_1;
  reg                 logic_pushPtr_willIncrement;
  reg                 logic_pushPtr_willClear;
  reg        [7:0]    logic_pushPtr_valueNext;
  reg        [7:0]    logic_pushPtr_value;
  wire                logic_pushPtr_willOverflowIfInc;
  wire                logic_pushPtr_willOverflow;
  reg                 logic_popPtr_willIncrement;
  reg                 logic_popPtr_willClear;
  reg        [7:0]    logic_popPtr_valueNext;
  reg        [7:0]    logic_popPtr_value;
  wire                logic_popPtr_willOverflowIfInc;
  wire                logic_popPtr_willOverflow;
  wire                logic_ptrMatch;
  reg                 logic_risingOccupancy;
  wire                logic_pushing;
  wire                logic_popping;
  wire                logic_empty;
  wire                logic_full;
  reg                 _zz_2;
  wire       [10:0]   _zz_3;
  wire       [7:0]    logic_ptrDif;
  reg [10:0] logic_ram [0:255];

  assign _zz_5 = logic_pushPtr_willIncrement;
  assign _zz_6 = {7'd0, _zz_5};
  assign _zz_7 = logic_popPtr_willIncrement;
  assign _zz_8 = {7'd0, _zz_7};
  assign _zz_9 = _zz_3[0 : 0];
  assign _zz_10 = _zz_3[1 : 1];
  assign _zz_11 = _zz_3[2 : 2];
  assign _zz_12 = (logic_popPtr_value - logic_pushPtr_value);
  assign _zz_13 = 1'b1;
  assign _zz_14 = {io_push_payload_data,{io_push_payload_write,{io_push_payload_read,io_push_payload_kind}}};
  always @ (posedge io_systemClk) begin
    if(_zz_13) begin
      _zz_4 <= logic_ram[logic_popPtr_valueNext];
    end
  end

  always @ (posedge io_systemClk) begin
    if(_zz_1) begin
      logic_ram[logic_pushPtr_value] <= _zz_14;
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(logic_pushing)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willIncrement = 1'b0;
    if(logic_pushing)begin
      logic_pushPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_pushPtr_willClear = 1'b1;
    end
  end

  assign logic_pushPtr_willOverflowIfInc = (logic_pushPtr_value == 8'hff);
  assign logic_pushPtr_willOverflow = (logic_pushPtr_willOverflowIfInc && logic_pushPtr_willIncrement);
  always @ (*) begin
    logic_pushPtr_valueNext = (logic_pushPtr_value + _zz_6);
    if(logic_pushPtr_willClear)begin
      logic_pushPtr_valueNext = 8'h0;
    end
  end

  always @ (*) begin
    logic_popPtr_willIncrement = 1'b0;
    if(logic_popping)begin
      logic_popPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_popPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_popPtr_willClear = 1'b1;
    end
  end

  assign logic_popPtr_willOverflowIfInc = (logic_popPtr_value == 8'hff);
  assign logic_popPtr_willOverflow = (logic_popPtr_willOverflowIfInc && logic_popPtr_willIncrement);
  always @ (*) begin
    logic_popPtr_valueNext = (logic_popPtr_value + _zz_8);
    if(logic_popPtr_willClear)begin
      logic_popPtr_valueNext = 8'h0;
    end
  end

  assign logic_ptrMatch = (logic_pushPtr_value == logic_popPtr_value);
  assign logic_pushing = (io_push_valid && io_push_ready);
  assign logic_popping = (io_pop_valid && io_pop_ready);
  assign logic_empty = (logic_ptrMatch && (! logic_risingOccupancy));
  assign logic_full = (logic_ptrMatch && logic_risingOccupancy);
  assign io_push_ready = (! logic_full);
  assign io_pop_valid = ((! logic_empty) && (! (_zz_2 && (! logic_full))));
  assign _zz_3 = _zz_4;
  assign io_pop_payload_kind = _zz_9[0];
  assign io_pop_payload_read = _zz_10[0];
  assign io_pop_payload_write = _zz_11[0];
  assign io_pop_payload_data = _zz_3[10 : 3];
  assign logic_ptrDif = (logic_pushPtr_value - logic_popPtr_value);
  assign io_occupancy = {(logic_risingOccupancy && logic_ptrMatch),logic_ptrDif};
  assign io_availability = {((! logic_risingOccupancy) && logic_ptrMatch),_zz_12};
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      logic_pushPtr_value <= 8'h0;
      logic_popPtr_value <= 8'h0;
      logic_risingOccupancy <= 1'b0;
      _zz_2 <= 1'b0;
    end else begin
      logic_pushPtr_value <= logic_pushPtr_valueNext;
      logic_popPtr_value <= logic_popPtr_valueNext;
      _zz_2 <= (logic_popPtr_valueNext == logic_pushPtr_value);
      if((logic_pushing != logic_popping))begin
        logic_risingOccupancy <= logic_pushing;
      end
      if(io_flush)begin
        logic_risingOccupancy <= 1'b0;
      end
    end
  end


endmodule

module SpiXdrMasterCtrl_e12a9decc0704226832aec4017b36e8d (
  input               io_config_kind_cpol,
  input               io_config_kind_cpha,
  input      [11:0]   io_config_sclkToogle,
  input      [1:0]    io_config_mod,
  input      [0:0]    io_config_ss_activeHigh,
  input      [11:0]   io_config_ss_setup,
  input      [11:0]   io_config_ss_hold,
  input      [11:0]   io_config_ss_disable,
  input               io_cmd_valid,
  output reg          io_cmd_ready,
  input               io_cmd_payload_kind,
  input               io_cmd_payload_read,
  input               io_cmd_payload_write,
  input      [7:0]    io_cmd_payload_data,
  output              io_rsp_valid,
  output     [7:0]    io_rsp_payload_data,
  output     [0:0]    io_spi_sclk_write,
  output reg          io_spi_data_0_writeEnable,
  input      [0:0]    io_spi_data_0_read,
  output reg [0:0]    io_spi_data_0_write,
  output reg          io_spi_data_1_writeEnable,
  input      [0:0]    io_spi_data_1_read,
  output reg [0:0]    io_spi_data_1_write,
  output reg          io_spi_data_2_writeEnable,
  input      [0:0]    io_spi_data_2_read,
  output reg [0:0]    io_spi_data_2_write,
  output reg          io_spi_data_3_writeEnable,
  input      [0:0]    io_spi_data_3_read,
  output reg [0:0]    io_spi_data_3_write,
  output     [0:0]    io_spi_ss,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg        [0:0]    _zz_3;
  reg        [1:0]    _zz_4;
  reg        [3:0]    _zz_5;
  wire                _zz_6;
  wire                _zz_7;
  wire                _zz_8;
  wire                _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  wire                _zz_12;
  wire                _zz_13;
  wire       [2:0]    _zz_14;
  wire       [1:0]    _zz_15;
  wire       [0:0]    _zz_16;
  wire       [3:0]    _zz_17;
  wire       [3:0]    _zz_18;
  wire       [3:0]    _zz_19;
  wire       [3:0]    _zz_20;
  wire       [3:0]    _zz_21;
  wire       [3:0]    _zz_22;
  wire       [3:0]    _zz_23;
  wire       [8:0]    _zz_24;
  wire       [10:0]   _zz_25;
  reg        [11:0]   timer_counter;
  reg                 timer_reset;
  wire                timer_ss_setupHit;
  wire                timer_ss_holdHit;
  wire                timer_ss_disableHit;
  wire                timer_sclkToogleHit;
  reg                 fsm_state;
  reg        [2:0]    fsm_counter;
  reg        [2:0]    _zz_1;
  wire       [2:0]    fsm_counterPlus;
  reg                 fsm_fastRate;
  reg                 fsm_isDdr;
  reg                 fsm_readFill;
  reg                 fsm_readDone;
  reg        [0:0]    fsm_ss;
  reg        [0:0]    outputPhy_sclkWrite;
  wire       [0:0]    _zz_2;
  reg        [3:0]    outputPhy_dataWrite;
  reg        [2:0]    outputPhy_widthSel;
  reg        [1:0]    io_config_mod_delay_1;
  reg        [1:0]    inputPhy_mod;
  reg                 fsm_readFill_delay_1;
  reg                 inputPhy_readFill;
  reg                 fsm_readDone_delay_1;
  reg                 inputPhy_readDone;
  reg        [6:0]    inputPhy_buffer;
  reg        [7:0]    inputPhy_bufferNext;
  reg        [2:0]    inputPhy_widthSel;
  wire       [3:0]    inputPhy_dataWrite;
  reg        [3:0]    inputPhy_dataRead;
  reg                 fsm_state_delay_1;
  reg                 fsm_state_delay_2;
  reg        [3:0]    inputPhy_dataReadBuffer;

  assign _zz_6 = (! io_cmd_payload_kind);
  assign _zz_7 = io_cmd_payload_data[7];
  assign _zz_8 = (! fsm_state);
  assign _zz_9 = ((! io_cmd_valid) || io_cmd_ready);
  assign _zz_10 = ((timer_sclkToogleHit && (fsm_state || fsm_isDdr)) || fsm_fastRate);
  assign _zz_11 = (fsm_counterPlus == (3'b000));
  assign _zz_12 = (io_cmd_valid && io_cmd_payload_write);
  assign _zz_13 = (io_cmd_valid && io_cmd_payload_write);
  assign _zz_14 = (fsm_counter >>> 0);
  assign _zz_15 = (fsm_counter >>> 1);
  assign _zz_16 = (fsm_counter >>> 2);
  assign _zz_17 = {io_spi_data_3_read[0],{io_spi_data_2_read[0],{io_spi_data_1_read[0],io_spi_data_0_read[0]}}};
  assign _zz_18 = {io_spi_data_3_read[0],{io_spi_data_2_read[0],{io_spi_data_1_read[0],io_spi_data_0_read[0]}}};
  assign _zz_19 = {io_spi_data_3_read[0],{io_spi_data_2_read[0],{io_spi_data_1_read[0],io_spi_data_0_read[0]}}};
  assign _zz_20 = {io_spi_data_3_read[0],{io_spi_data_2_read[0],{io_spi_data_1_read[0],io_spi_data_0_read[0]}}};
  assign _zz_21 = {io_spi_data_3_read[0],{io_spi_data_2_read[0],{io_spi_data_1_read[0],io_spi_data_0_read[0]}}};
  assign _zz_22 = {io_spi_data_3_read[0],{io_spi_data_2_read[0],{io_spi_data_1_read[0],io_spi_data_0_read[0]}}};
  assign _zz_23 = {io_spi_data_3_read[0],{io_spi_data_2_read[0],{io_spi_data_1_read[0],io_spi_data_0_read[0]}}};
  assign _zz_24 = {inputPhy_buffer,inputPhy_dataRead[1 : 0]};
  assign _zz_25 = {inputPhy_buffer,inputPhy_dataRead[3 : 0]};
  always @(*) begin
    case(_zz_14)
      3'b000 : begin
        _zz_3 = io_cmd_payload_data[7 : 7];
      end
      3'b001 : begin
        _zz_3 = io_cmd_payload_data[6 : 6];
      end
      3'b010 : begin
        _zz_3 = io_cmd_payload_data[5 : 5];
      end
      3'b011 : begin
        _zz_3 = io_cmd_payload_data[4 : 4];
      end
      3'b100 : begin
        _zz_3 = io_cmd_payload_data[3 : 3];
      end
      3'b101 : begin
        _zz_3 = io_cmd_payload_data[2 : 2];
      end
      3'b110 : begin
        _zz_3 = io_cmd_payload_data[1 : 1];
      end
      default : begin
        _zz_3 = io_cmd_payload_data[0 : 0];
      end
    endcase
  end

  always @(*) begin
    case(_zz_15)
      2'b00 : begin
        _zz_4 = io_cmd_payload_data[7 : 6];
      end
      2'b01 : begin
        _zz_4 = io_cmd_payload_data[5 : 4];
      end
      2'b10 : begin
        _zz_4 = io_cmd_payload_data[3 : 2];
      end
      default : begin
        _zz_4 = io_cmd_payload_data[1 : 0];
      end
    endcase
  end

  always @(*) begin
    case(_zz_16)
      1'b0 : begin
        _zz_5 = io_cmd_payload_data[7 : 4];
      end
      default : begin
        _zz_5 = io_cmd_payload_data[3 : 0];
      end
    endcase
  end

  always @ (*) begin
    timer_reset = 1'b0;
    if(io_cmd_valid)begin
      if(_zz_6)begin
        timer_reset = timer_sclkToogleHit;
      end else begin
        if(! _zz_7) begin
          if(_zz_8)begin
            if(timer_ss_holdHit)begin
              timer_reset = 1'b1;
            end
          end
        end
      end
    end
    if(_zz_9)begin
      timer_reset = 1'b1;
    end
  end

  assign timer_ss_setupHit = (timer_counter == io_config_ss_setup);
  assign timer_ss_holdHit = (timer_counter == io_config_ss_hold);
  assign timer_ss_disableHit = (timer_counter == io_config_ss_disable);
  assign timer_sclkToogleHit = (timer_counter == io_config_sclkToogle);
  always @ (*) begin
    _zz_1 = (3'bxxx);
    case(io_config_mod)
      2'b00 : begin
        _zz_1 = (3'b001);
      end
      2'b01 : begin
        _zz_1 = (3'b010);
      end
      2'b10 : begin
        _zz_1 = (3'b100);
      end
      default : begin
      end
    endcase
  end

  assign fsm_counterPlus = (fsm_counter + _zz_1);
  always @ (*) begin
    fsm_fastRate = 1'bx;
    case(io_config_mod)
      2'b00 : begin
        fsm_fastRate = 1'b0;
      end
      2'b01 : begin
        fsm_fastRate = 1'b0;
      end
      2'b10 : begin
        fsm_fastRate = 1'b0;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    fsm_isDdr = 1'bx;
    case(io_config_mod)
      2'b00 : begin
        fsm_isDdr = 1'b0;
      end
      2'b01 : begin
        fsm_isDdr = 1'b0;
      end
      2'b10 : begin
        fsm_isDdr = 1'b0;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    fsm_readFill = 1'b0;
    if(io_cmd_valid)begin
      if(_zz_6)begin
        if(_zz_10)begin
          fsm_readFill = 1'b1;
        end
      end
    end
  end

  always @ (*) begin
    fsm_readDone = 1'b0;
    if(io_cmd_valid)begin
      if(_zz_6)begin
        if(_zz_10)begin
          if(_zz_11)begin
            fsm_readDone = io_cmd_payload_read;
          end
        end
      end
    end
  end

  assign io_spi_ss = (~ (fsm_ss ^ io_config_ss_activeHigh));
  always @ (*) begin
    io_cmd_ready = 1'b0;
    if(io_cmd_valid)begin
      if(_zz_6)begin
        if(_zz_10)begin
          if(_zz_11)begin
            io_cmd_ready = 1'b1;
          end
        end
      end else begin
        if(_zz_7)begin
          if(timer_ss_setupHit)begin
            io_cmd_ready = 1'b1;
          end
        end else begin
          if(! _zz_8) begin
            if(timer_ss_disableHit)begin
              io_cmd_ready = 1'b1;
            end
          end
        end
      end
    end
  end

  always @ (*) begin
    outputPhy_sclkWrite = (1'b0);
    if((io_cmd_valid && (! io_cmd_payload_kind)))begin
      case(io_config_mod)
        2'b00 : begin
          outputPhy_sclkWrite = ((fsm_state ^ io_config_kind_cpha) ? (1'b1) : (1'b0));
        end
        2'b01 : begin
          outputPhy_sclkWrite = ((fsm_state ^ io_config_kind_cpha) ? (1'b1) : (1'b0));
        end
        2'b10 : begin
          outputPhy_sclkWrite = ((fsm_state ^ io_config_kind_cpha) ? (1'b1) : (1'b0));
        end
        default : begin
        end
      endcase
    end
  end

  assign _zz_2[0] = io_config_kind_cpol;
  assign io_spi_sclk_write = (outputPhy_sclkWrite ^ _zz_2);
  always @ (*) begin
    outputPhy_widthSel = (3'bxxx);
    case(io_config_mod)
      2'b00 : begin
        outputPhy_widthSel = (3'b000);
      end
      2'b01 : begin
        outputPhy_widthSel = (3'b001);
      end
      2'b10 : begin
        outputPhy_widthSel = (3'b010);
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    outputPhy_dataWrite = (4'bxxxx);
    case(outputPhy_widthSel)
      3'b000 : begin
        outputPhy_dataWrite[0 : 0] = _zz_3;
      end
      3'b001 : begin
        outputPhy_dataWrite[1 : 0] = _zz_4;
      end
      3'b010 : begin
        outputPhy_dataWrite[3 : 0] = _zz_5;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    io_spi_data_0_writeEnable = 1'b0;
    case(io_config_mod)
      2'b00 : begin
        io_spi_data_0_writeEnable = 1'b1;
      end
      2'b01 : begin
        if(_zz_12)begin
          io_spi_data_0_writeEnable = 1'b1;
        end
      end
      2'b10 : begin
        if(_zz_13)begin
          io_spi_data_0_writeEnable = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    io_spi_data_1_writeEnable = 1'b0;
    case(io_config_mod)
      2'b00 : begin
      end
      2'b01 : begin
        if(_zz_12)begin
          io_spi_data_1_writeEnable = 1'b1;
        end
      end
      2'b10 : begin
        if(_zz_13)begin
          io_spi_data_1_writeEnable = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    io_spi_data_2_writeEnable = 1'b0;
    case(io_config_mod)
      2'b00 : begin
      end
      2'b01 : begin
      end
      2'b10 : begin
        if(_zz_13)begin
          io_spi_data_2_writeEnable = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    io_spi_data_3_writeEnable = 1'b0;
    case(io_config_mod)
      2'b00 : begin
      end
      2'b01 : begin
      end
      2'b10 : begin
        if(_zz_13)begin
          io_spi_data_3_writeEnable = 1'b1;
        end
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    io_spi_data_0_write = (1'bx);
    case(io_config_mod)
      2'b00 : begin
        io_spi_data_0_write[0] = (outputPhy_dataWrite[0] || (! (io_cmd_valid && io_cmd_payload_write)));
      end
      2'b01 : begin
        io_spi_data_0_write[0] = outputPhy_dataWrite[0];
      end
      2'b10 : begin
        io_spi_data_0_write[0] = outputPhy_dataWrite[0];
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    io_spi_data_1_write = (1'bx);
    case(io_config_mod)
      2'b00 : begin
      end
      2'b01 : begin
        io_spi_data_1_write[0] = outputPhy_dataWrite[1];
      end
      2'b10 : begin
        io_spi_data_1_write[0] = outputPhy_dataWrite[1];
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    io_spi_data_2_write = (1'bx);
    case(io_config_mod)
      2'b00 : begin
      end
      2'b01 : begin
      end
      2'b10 : begin
        io_spi_data_2_write[0] = outputPhy_dataWrite[2];
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    io_spi_data_3_write = (1'bx);
    case(io_config_mod)
      2'b00 : begin
      end
      2'b01 : begin
      end
      2'b10 : begin
        io_spi_data_3_write[0] = outputPhy_dataWrite[3];
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    inputPhy_bufferNext = 8'h0;
    case(inputPhy_widthSel)
      3'b000 : begin
        inputPhy_bufferNext = {inputPhy_buffer,inputPhy_dataRead[0 : 0]};
      end
      3'b001 : begin
        inputPhy_bufferNext = _zz_24[7:0];
      end
      3'b010 : begin
        inputPhy_bufferNext = _zz_25[7:0];
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    inputPhy_widthSel = (3'bxxx);
    case(inputPhy_mod)
      2'b00 : begin
        inputPhy_widthSel = (3'b000);
      end
      2'b01 : begin
        inputPhy_widthSel = (3'b001);
      end
      2'b10 : begin
        inputPhy_widthSel = (3'b010);
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    inputPhy_dataRead = (4'bxxxx);
    case(inputPhy_mod)
      2'b00 : begin
        inputPhy_dataRead[0] = _zz_17[1];
      end
      2'b01 : begin
        inputPhy_dataRead[0] = _zz_18[0];
        inputPhy_dataRead[1] = _zz_19[1];
      end
      2'b10 : begin
        inputPhy_dataRead[0] = _zz_20[0];
        inputPhy_dataRead[1] = _zz_21[1];
        inputPhy_dataRead[2] = _zz_22[2];
        inputPhy_dataRead[3] = _zz_23[3];
      end
      default : begin
      end
    endcase
  end

  assign io_rsp_valid = inputPhy_readDone;
  assign io_rsp_payload_data = inputPhy_bufferNext;
  always @ (posedge io_systemClk) begin
    timer_counter <= (timer_counter + 12'h001);
    if(timer_reset)begin
      timer_counter <= 12'h0;
    end
    io_config_mod_delay_1 <= io_config_mod;
    inputPhy_mod <= io_config_mod_delay_1;
    fsm_state_delay_1 <= fsm_state;
    fsm_state_delay_2 <= fsm_state_delay_1;
    if((! fsm_state_delay_2))begin
      inputPhy_dataReadBuffer <= {io_spi_data_3_read[0],{io_spi_data_2_read[0],{io_spi_data_1_read[0],io_spi_data_0_read[0]}}};
    end
    case(inputPhy_widthSel)
      3'b000 : begin
        if(inputPhy_readFill)begin
          inputPhy_buffer <= inputPhy_bufferNext[6:0];
        end
      end
      3'b001 : begin
        if(inputPhy_readFill)begin
          inputPhy_buffer <= inputPhy_bufferNext[6:0];
        end
      end
      3'b010 : begin
        if(inputPhy_readFill)begin
          inputPhy_buffer <= inputPhy_bufferNext[6:0];
        end
      end
      default : begin
      end
    endcase
  end

  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      fsm_state <= 1'b0;
      fsm_counter <= (3'b000);
      fsm_ss <= (1'b0);
      fsm_readFill_delay_1 <= 1'b0;
      inputPhy_readFill <= 1'b0;
      fsm_readDone_delay_1 <= 1'b0;
      inputPhy_readDone <= 1'b0;
    end else begin
      if(io_cmd_valid)begin
        if(_zz_6)begin
          if(timer_sclkToogleHit)begin
            fsm_state <= (! fsm_state);
          end
          if(_zz_10)begin
            fsm_counter <= fsm_counterPlus;
            if(_zz_11)begin
              fsm_state <= 1'b0;
            end
          end
        end else begin
          if(_zz_7)begin
            fsm_ss[0] <= 1'b1;
          end else begin
            if(_zz_8)begin
              if(timer_ss_holdHit)begin
                fsm_state <= 1'b1;
              end
            end else begin
              fsm_ss[0] <= 1'b0;
            end
          end
        end
      end
      if(_zz_9)begin
        fsm_state <= 1'b0;
        fsm_counter <= (3'b000);
      end
      fsm_readFill_delay_1 <= fsm_readFill;
      inputPhy_readFill <= fsm_readFill_delay_1;
      fsm_readDone_delay_1 <= fsm_readDone;
      inputPhy_readDone <= fsm_readDone_delay_1;
    end
  end


endmodule

module Axi4WriteOnlyUpsizer_e12a9decc0704226832aec4017b36e8d (
  input               io_input_aw_valid,
  output              io_input_aw_ready,
  input      [31:0]   io_input_aw_payload_addr,
  input      [3:0]    io_input_aw_payload_id,
  input      [3:0]    io_input_aw_payload_region,
  input      [7:0]    io_input_aw_payload_len,
  input      [2:0]    io_input_aw_payload_size,
  input      [1:0]    io_input_aw_payload_burst,
  input      [0:0]    io_input_aw_payload_lock,
  input      [3:0]    io_input_aw_payload_cache,
  input      [3:0]    io_input_aw_payload_qos,
  input      [2:0]    io_input_aw_payload_prot,
  input               io_input_w_valid,
  output              io_input_w_ready,
  input      [31:0]   io_input_w_payload_data,
  input      [3:0]    io_input_w_payload_strb,
  input               io_input_w_payload_last,
  output              io_input_b_valid,
  input               io_input_b_ready,
  output     [3:0]    io_input_b_payload_id,
  output     [1:0]    io_input_b_payload_resp,
  output              io_output_aw_valid,
  input               io_output_aw_ready,
  output     [31:0]   io_output_aw_payload_addr,
  output     [3:0]    io_output_aw_payload_id,
  output     [3:0]    io_output_aw_payload_region,
  output reg [7:0]    io_output_aw_payload_len,
  output reg [2:0]    io_output_aw_payload_size,
  output     [1:0]    io_output_aw_payload_burst,
  output     [0:0]    io_output_aw_payload_lock,
  output     [3:0]    io_output_aw_payload_cache,
  output     [3:0]    io_output_aw_payload_qos,
  output     [2:0]    io_output_aw_payload_prot,
  output              io_output_w_valid,
  input               io_output_w_ready,
  output     [127:0]  io_output_w_payload_data,
  output     [15:0]   io_output_w_payload_strb,
  output              io_output_w_payload_last,
  input               io_output_b_valid,
  output              io_output_b_ready,
  input      [3:0]    io_output_b_payload_id,
  input      [1:0]    io_output_b_payload_resp,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  wire                _zz_1;
  reg        [15:0]   _zz_2;
  wire                io_input_aw_fork_io_input_ready;
  wire                io_input_aw_fork_io_outputs_0_valid;
  wire       [31:0]   io_input_aw_fork_io_outputs_0_payload_addr;
  wire       [3:0]    io_input_aw_fork_io_outputs_0_payload_id;
  wire       [3:0]    io_input_aw_fork_io_outputs_0_payload_region;
  wire       [7:0]    io_input_aw_fork_io_outputs_0_payload_len;
  wire       [2:0]    io_input_aw_fork_io_outputs_0_payload_size;
  wire       [1:0]    io_input_aw_fork_io_outputs_0_payload_burst;
  wire       [0:0]    io_input_aw_fork_io_outputs_0_payload_lock;
  wire       [3:0]    io_input_aw_fork_io_outputs_0_payload_cache;
  wire       [3:0]    io_input_aw_fork_io_outputs_0_payload_qos;
  wire       [2:0]    io_input_aw_fork_io_outputs_0_payload_prot;
  wire                io_input_aw_fork_io_outputs_1_valid;
  wire       [31:0]   io_input_aw_fork_io_outputs_1_payload_addr;
  wire       [3:0]    io_input_aw_fork_io_outputs_1_payload_id;
  wire       [3:0]    io_input_aw_fork_io_outputs_1_payload_region;
  wire       [7:0]    io_input_aw_fork_io_outputs_1_payload_len;
  wire       [2:0]    io_input_aw_fork_io_outputs_1_payload_size;
  wire       [1:0]    io_input_aw_fork_io_outputs_1_payload_burst;
  wire       [0:0]    io_input_aw_fork_io_outputs_1_payload_lock;
  wire       [3:0]    io_input_aw_fork_io_outputs_1_payload_cache;
  wire       [3:0]    io_input_aw_fork_io_outputs_1_payload_qos;
  wire       [2:0]    io_input_aw_fork_io_outputs_1_payload_prot;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  wire                _zz_7;
  wire                _zz_8;
  wire                _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  wire                _zz_12;
  wire                _zz_13;
  wire                _zz_14;
  wire                _zz_15;
  wire                _zz_16;
  wire                _zz_17;
  wire                _zz_18;
  wire                _zz_19;
  wire                _zz_20;
  wire                _zz_21;
  wire       [14:0]   _zz_22;
  wire       [12:0]   _zz_23;
  wire       [3:0]    _zz_24;
  wire       [12:0]   _zz_25;
  wire       [7:0]    _zz_26;
  wire       [4:0]    _zz_27;
  wire       [1:0]    _zz_28;
  wire       [11:0]   cmdLogic_byteCount;
  wire       [8:0]    cmdLogic_incrLen;
  reg        [3:0]    dataLogic_byteCounter;
  reg        [2:0]    dataLogic_size;
  reg                 dataLogic_outputValid;
  reg                 dataLogic_outputLast;
  reg                 dataLogic_busy;
  reg                 dataLogic_incrementByteCounter;
  reg                 dataLogic_alwaysFire;
  wire       [4:0]    dataLogic_byteCounterNext;
  reg        [127:0]  dataLogic_dataBuffer;
  reg        [15:0]   dataLogic_maskBuffer;
  wire       [15:0]   dataLogic_byteActivity;

  assign _zz_3 = (io_output_aw_payload_burst == (2'b01));
  assign _zz_4 = (io_input_w_valid && io_input_w_ready);
  assign _zz_5 = dataLogic_byteActivity[0];
  assign _zz_6 = dataLogic_byteActivity[1];
  assign _zz_7 = dataLogic_byteActivity[2];
  assign _zz_8 = dataLogic_byteActivity[3];
  assign _zz_9 = dataLogic_byteActivity[4];
  assign _zz_10 = dataLogic_byteActivity[5];
  assign _zz_11 = dataLogic_byteActivity[6];
  assign _zz_12 = dataLogic_byteActivity[7];
  assign _zz_13 = dataLogic_byteActivity[8];
  assign _zz_14 = dataLogic_byteActivity[9];
  assign _zz_15 = dataLogic_byteActivity[10];
  assign _zz_16 = dataLogic_byteActivity[11];
  assign _zz_17 = dataLogic_byteActivity[12];
  assign _zz_18 = dataLogic_byteActivity[13];
  assign _zz_19 = dataLogic_byteActivity[14];
  assign _zz_20 = dataLogic_byteActivity[15];
  assign _zz_21 = (io_input_aw_fork_io_outputs_1_valid && _zz_1);
  assign _zz_22 = ({7'd0,io_input_aw_payload_len} <<< io_input_aw_payload_size);
  assign _zz_23 = ({(1'b0),cmdLogic_byteCount} + _zz_25);
  assign _zz_24 = io_input_aw_payload_addr[3 : 0];
  assign _zz_25 = {9'd0, _zz_24};
  assign _zz_26 = ({7'd0,(1'b1)} <<< dataLogic_size);
  assign _zz_27 = _zz_26[4:0];
  assign _zz_28 = dataLogic_size[1:0];
  StreamFork_e12a9decc0704226832aec4017b36e8d io_input_aw_fork (
    .io_input_valid                 (io_input_aw_valid                                  ), //i
    .io_input_ready                 (io_input_aw_fork_io_input_ready                    ), //o
    .io_input_payload_addr          (io_input_aw_payload_addr[31:0]                     ), //i
    .io_input_payload_id            (io_input_aw_payload_id[3:0]                        ), //i
    .io_input_payload_region        (io_input_aw_payload_region[3:0]                    ), //i
    .io_input_payload_len           (io_input_aw_payload_len[7:0]                       ), //i
    .io_input_payload_size          (io_input_aw_payload_size[2:0]                      ), //i
    .io_input_payload_burst         (io_input_aw_payload_burst[1:0]                     ), //i
    .io_input_payload_lock          (io_input_aw_payload_lock                           ), //i
    .io_input_payload_cache         (io_input_aw_payload_cache[3:0]                     ), //i
    .io_input_payload_qos           (io_input_aw_payload_qos[3:0]                       ), //i
    .io_input_payload_prot          (io_input_aw_payload_prot[2:0]                      ), //i
    .io_outputs_0_valid             (io_input_aw_fork_io_outputs_0_valid                ), //o
    .io_outputs_0_ready             (io_output_aw_ready                                 ), //i
    .io_outputs_0_payload_addr      (io_input_aw_fork_io_outputs_0_payload_addr[31:0]   ), //o
    .io_outputs_0_payload_id        (io_input_aw_fork_io_outputs_0_payload_id[3:0]      ), //o
    .io_outputs_0_payload_region    (io_input_aw_fork_io_outputs_0_payload_region[3:0]  ), //o
    .io_outputs_0_payload_len       (io_input_aw_fork_io_outputs_0_payload_len[7:0]     ), //o
    .io_outputs_0_payload_size      (io_input_aw_fork_io_outputs_0_payload_size[2:0]    ), //o
    .io_outputs_0_payload_burst     (io_input_aw_fork_io_outputs_0_payload_burst[1:0]   ), //o
    .io_outputs_0_payload_lock      (io_input_aw_fork_io_outputs_0_payload_lock         ), //o
    .io_outputs_0_payload_cache     (io_input_aw_fork_io_outputs_0_payload_cache[3:0]   ), //o
    .io_outputs_0_payload_qos       (io_input_aw_fork_io_outputs_0_payload_qos[3:0]     ), //o
    .io_outputs_0_payload_prot      (io_input_aw_fork_io_outputs_0_payload_prot[2:0]    ), //o
    .io_outputs_1_valid             (io_input_aw_fork_io_outputs_1_valid                ), //o
    .io_outputs_1_ready             (_zz_1                                              ), //i
    .io_outputs_1_payload_addr      (io_input_aw_fork_io_outputs_1_payload_addr[31:0]   ), //o
    .io_outputs_1_payload_id        (io_input_aw_fork_io_outputs_1_payload_id[3:0]      ), //o
    .io_outputs_1_payload_region    (io_input_aw_fork_io_outputs_1_payload_region[3:0]  ), //o
    .io_outputs_1_payload_len       (io_input_aw_fork_io_outputs_1_payload_len[7:0]     ), //o
    .io_outputs_1_payload_size      (io_input_aw_fork_io_outputs_1_payload_size[2:0]    ), //o
    .io_outputs_1_payload_burst     (io_input_aw_fork_io_outputs_1_payload_burst[1:0]   ), //o
    .io_outputs_1_payload_lock      (io_input_aw_fork_io_outputs_1_payload_lock         ), //o
    .io_outputs_1_payload_cache     (io_input_aw_fork_io_outputs_1_payload_cache[3:0]   ), //o
    .io_outputs_1_payload_qos       (io_input_aw_fork_io_outputs_1_payload_qos[3:0]     ), //o
    .io_outputs_1_payload_prot      (io_input_aw_fork_io_outputs_1_payload_prot[2:0]    ), //o
    .io_memoryClk                   (io_memoryClk                                       ), //i
    .ddrCd_logic_outputReset        (ddrCd_logic_outputReset                            )  //i
  );
  always @(*) begin
    case(_zz_28)
      2'b00 : begin
        _zz_2 = 16'h0001;
      end
      2'b01 : begin
        _zz_2 = 16'h0003;
      end
      2'b10 : begin
        _zz_2 = 16'h000f;
      end
      default : begin
        _zz_2 = 16'h00ff;
      end
    endcase
  end

  assign io_input_aw_ready = io_input_aw_fork_io_input_ready;
  assign io_output_aw_valid = io_input_aw_fork_io_outputs_0_valid;
  assign io_output_aw_payload_addr = io_input_aw_fork_io_outputs_0_payload_addr;
  assign io_output_aw_payload_id = io_input_aw_fork_io_outputs_0_payload_id;
  assign io_output_aw_payload_region = io_input_aw_fork_io_outputs_0_payload_region;
  always @ (*) begin
    io_output_aw_payload_len = io_input_aw_fork_io_outputs_0_payload_len;
    if(_zz_3)begin
      io_output_aw_payload_len = cmdLogic_incrLen[7:0];
    end
  end

  always @ (*) begin
    io_output_aw_payload_size = io_input_aw_fork_io_outputs_0_payload_size;
    if(_zz_3)begin
      io_output_aw_payload_size = (3'b100);
    end
  end

  assign io_output_aw_payload_burst = io_input_aw_fork_io_outputs_0_payload_burst;
  assign io_output_aw_payload_lock = io_input_aw_fork_io_outputs_0_payload_lock;
  assign io_output_aw_payload_cache = io_input_aw_fork_io_outputs_0_payload_cache;
  assign io_output_aw_payload_qos = io_input_aw_fork_io_outputs_0_payload_qos;
  assign io_output_aw_payload_prot = io_input_aw_fork_io_outputs_0_payload_prot;
  assign cmdLogic_byteCount = _zz_22[11:0];
  assign cmdLogic_incrLen = _zz_23[12 : 4];
  assign dataLogic_byteCounterNext = ({(1'b0),dataLogic_byteCounter} + _zz_27);
  assign dataLogic_byteActivity = (_zz_2 <<< dataLogic_byteCounter);
  assign io_output_w_valid = dataLogic_outputValid;
  assign io_input_w_ready = (dataLogic_busy && (! (io_output_w_valid && (! io_output_w_ready))));
  assign io_output_w_payload_data = dataLogic_dataBuffer;
  assign io_output_w_payload_strb = dataLogic_maskBuffer;
  assign io_output_w_payload_last = dataLogic_outputLast;
  assign _zz_1 = (! dataLogic_busy);
  assign io_input_b_valid = io_output_b_valid;
  assign io_output_b_ready = io_input_b_ready;
  assign io_input_b_payload_id = io_output_b_payload_id;
  assign io_input_b_payload_resp = io_output_b_payload_resp;
  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      dataLogic_outputValid <= 1'b0;
      dataLogic_busy <= 1'b0;
      dataLogic_maskBuffer <= 16'h0;
    end else begin
      if(io_output_w_ready)begin
        dataLogic_outputValid <= 1'b0;
      end
      if((io_output_w_valid && io_output_w_ready))begin
        dataLogic_maskBuffer <= 16'h0;
      end
      if(_zz_4)begin
        dataLogic_outputValid <= ((dataLogic_byteCounterNext[4] || io_input_w_payload_last) || dataLogic_alwaysFire);
        if(io_input_w_payload_last)begin
          dataLogic_busy <= 1'b0;
        end
        if(_zz_5)begin
          dataLogic_maskBuffer[0] <= io_input_w_payload_strb[0];
        end
        if(_zz_6)begin
          dataLogic_maskBuffer[1] <= io_input_w_payload_strb[1];
        end
        if(_zz_7)begin
          dataLogic_maskBuffer[2] <= io_input_w_payload_strb[2];
        end
        if(_zz_8)begin
          dataLogic_maskBuffer[3] <= io_input_w_payload_strb[3];
        end
        if(_zz_9)begin
          dataLogic_maskBuffer[4] <= io_input_w_payload_strb[0];
        end
        if(_zz_10)begin
          dataLogic_maskBuffer[5] <= io_input_w_payload_strb[1];
        end
        if(_zz_11)begin
          dataLogic_maskBuffer[6] <= io_input_w_payload_strb[2];
        end
        if(_zz_12)begin
          dataLogic_maskBuffer[7] <= io_input_w_payload_strb[3];
        end
        if(_zz_13)begin
          dataLogic_maskBuffer[8] <= io_input_w_payload_strb[0];
        end
        if(_zz_14)begin
          dataLogic_maskBuffer[9] <= io_input_w_payload_strb[1];
        end
        if(_zz_15)begin
          dataLogic_maskBuffer[10] <= io_input_w_payload_strb[2];
        end
        if(_zz_16)begin
          dataLogic_maskBuffer[11] <= io_input_w_payload_strb[3];
        end
        if(_zz_17)begin
          dataLogic_maskBuffer[12] <= io_input_w_payload_strb[0];
        end
        if(_zz_18)begin
          dataLogic_maskBuffer[13] <= io_input_w_payload_strb[1];
        end
        if(_zz_19)begin
          dataLogic_maskBuffer[14] <= io_input_w_payload_strb[2];
        end
        if(_zz_20)begin
          dataLogic_maskBuffer[15] <= io_input_w_payload_strb[3];
        end
      end
      if(_zz_21)begin
        dataLogic_busy <= 1'b1;
      end
    end
  end

  always @ (posedge io_memoryClk) begin
    if(_zz_4)begin
      if(dataLogic_incrementByteCounter)begin
        dataLogic_byteCounter <= dataLogic_byteCounterNext[3:0];
      end
      dataLogic_outputLast <= io_input_w_payload_last;
      if(_zz_5)begin
        dataLogic_dataBuffer[7 : 0] <= io_input_w_payload_data[7 : 0];
      end
      if(_zz_6)begin
        dataLogic_dataBuffer[15 : 8] <= io_input_w_payload_data[15 : 8];
      end
      if(_zz_7)begin
        dataLogic_dataBuffer[23 : 16] <= io_input_w_payload_data[23 : 16];
      end
      if(_zz_8)begin
        dataLogic_dataBuffer[31 : 24] <= io_input_w_payload_data[31 : 24];
      end
      if(_zz_9)begin
        dataLogic_dataBuffer[39 : 32] <= io_input_w_payload_data[7 : 0];
      end
      if(_zz_10)begin
        dataLogic_dataBuffer[47 : 40] <= io_input_w_payload_data[15 : 8];
      end
      if(_zz_11)begin
        dataLogic_dataBuffer[55 : 48] <= io_input_w_payload_data[23 : 16];
      end
      if(_zz_12)begin
        dataLogic_dataBuffer[63 : 56] <= io_input_w_payload_data[31 : 24];
      end
      if(_zz_13)begin
        dataLogic_dataBuffer[71 : 64] <= io_input_w_payload_data[7 : 0];
      end
      if(_zz_14)begin
        dataLogic_dataBuffer[79 : 72] <= io_input_w_payload_data[15 : 8];
      end
      if(_zz_15)begin
        dataLogic_dataBuffer[87 : 80] <= io_input_w_payload_data[23 : 16];
      end
      if(_zz_16)begin
        dataLogic_dataBuffer[95 : 88] <= io_input_w_payload_data[31 : 24];
      end
      if(_zz_17)begin
        dataLogic_dataBuffer[103 : 96] <= io_input_w_payload_data[7 : 0];
      end
      if(_zz_18)begin
        dataLogic_dataBuffer[111 : 104] <= io_input_w_payload_data[15 : 8];
      end
      if(_zz_19)begin
        dataLogic_dataBuffer[119 : 112] <= io_input_w_payload_data[23 : 16];
      end
      if(_zz_20)begin
        dataLogic_dataBuffer[127 : 120] <= io_input_w_payload_data[31 : 24];
      end
    end
    if(_zz_21)begin
      dataLogic_byteCounter <= io_input_aw_fork_io_outputs_1_payload_addr[3:0];
      if(((3'b000) < io_input_aw_fork_io_outputs_1_payload_size))begin
        dataLogic_byteCounter[0] <= 1'b0;
      end
      if(((3'b001) < io_input_aw_fork_io_outputs_1_payload_size))begin
        dataLogic_byteCounter[1] <= 1'b0;
      end
      if(((3'b010) < io_input_aw_fork_io_outputs_1_payload_size))begin
        dataLogic_byteCounter[2] <= 1'b0;
      end
      if(((3'b011) < io_input_aw_fork_io_outputs_1_payload_size))begin
        dataLogic_byteCounter[3] <= 1'b0;
      end
      dataLogic_size <= io_input_aw_fork_io_outputs_1_payload_size;
      dataLogic_alwaysFire <= (! (io_input_aw_fork_io_outputs_1_payload_burst == (2'b01)));
      dataLogic_incrementByteCounter <= (! (io_input_aw_fork_io_outputs_1_payload_burst == (2'b00)));
    end
  end


endmodule

module Axi4ReadOnlyUpsizer_e12a9decc0704226832aec4017b36e8d (
  input               io_input_ar_valid,
  output              io_input_ar_ready,
  input      [31:0]   io_input_ar_payload_addr,
  input      [3:0]    io_input_ar_payload_id,
  input      [3:0]    io_input_ar_payload_region,
  input      [7:0]    io_input_ar_payload_len,
  input      [2:0]    io_input_ar_payload_size,
  input      [1:0]    io_input_ar_payload_burst,
  input      [0:0]    io_input_ar_payload_lock,
  input      [3:0]    io_input_ar_payload_cache,
  input      [3:0]    io_input_ar_payload_qos,
  input      [2:0]    io_input_ar_payload_prot,
  output              io_input_r_valid,
  input               io_input_r_ready,
  output     [31:0]   io_input_r_payload_data,
  output     [3:0]    io_input_r_payload_id,
  output     [1:0]    io_input_r_payload_resp,
  output              io_input_r_payload_last,
  output              io_output_ar_valid,
  input               io_output_ar_ready,
  output     [31:0]   io_output_ar_payload_addr,
  output     [3:0]    io_output_ar_payload_id,
  output     [3:0]    io_output_ar_payload_region,
  output     [7:0]    io_output_ar_payload_len,
  output     [2:0]    io_output_ar_payload_size,
  output     [1:0]    io_output_ar_payload_burst,
  output     [0:0]    io_output_ar_payload_lock,
  output     [3:0]    io_output_ar_payload_cache,
  output     [3:0]    io_output_ar_payload_qos,
  output     [2:0]    io_output_ar_payload_prot,
  input               io_output_r_valid,
  output              io_output_r_ready,
  input      [127:0]  io_output_r_payload_data,
  input      [3:0]    io_output_r_payload_id,
  input      [1:0]    io_output_r_payload_resp,
  input               io_output_r_payload_last,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  wire                _zz_1;
  wire                _zz_2;
  reg        [31:0]   _zz_3;
  wire                io_input_ar_fork_io_input_ready;
  wire                io_input_ar_fork_io_outputs_0_valid;
  wire       [31:0]   io_input_ar_fork_io_outputs_0_payload_addr;
  wire       [3:0]    io_input_ar_fork_io_outputs_0_payload_id;
  wire       [3:0]    io_input_ar_fork_io_outputs_0_payload_region;
  wire       [7:0]    io_input_ar_fork_io_outputs_0_payload_len;
  wire       [2:0]    io_input_ar_fork_io_outputs_0_payload_size;
  wire       [1:0]    io_input_ar_fork_io_outputs_0_payload_burst;
  wire       [0:0]    io_input_ar_fork_io_outputs_0_payload_lock;
  wire       [3:0]    io_input_ar_fork_io_outputs_0_payload_cache;
  wire       [3:0]    io_input_ar_fork_io_outputs_0_payload_qos;
  wire       [2:0]    io_input_ar_fork_io_outputs_0_payload_prot;
  wire                io_input_ar_fork_io_outputs_1_valid;
  wire       [31:0]   io_input_ar_fork_io_outputs_1_payload_addr;
  wire       [3:0]    io_input_ar_fork_io_outputs_1_payload_id;
  wire       [3:0]    io_input_ar_fork_io_outputs_1_payload_region;
  wire       [7:0]    io_input_ar_fork_io_outputs_1_payload_len;
  wire       [2:0]    io_input_ar_fork_io_outputs_1_payload_size;
  wire       [1:0]    io_input_ar_fork_io_outputs_1_payload_burst;
  wire       [0:0]    io_input_ar_fork_io_outputs_1_payload_lock;
  wire       [3:0]    io_input_ar_fork_io_outputs_1_payload_cache;
  wire       [3:0]    io_input_ar_fork_io_outputs_1_payload_qos;
  wire       [2:0]    io_input_ar_fork_io_outputs_1_payload_prot;
  wire                dataLogic_cmdPush_fifo_io_push_ready;
  wire                dataLogic_cmdPush_fifo_io_pop_valid;
  wire       [3:0]    dataLogic_cmdPush_fifo_io_pop_payload_startAt;
  wire       [3:0]    dataLogic_cmdPush_fifo_io_pop_payload_endAt;
  wire       [2:0]    dataLogic_cmdPush_fifo_io_pop_payload_size;
  wire       [3:0]    dataLogic_cmdPush_fifo_io_pop_payload_id;
  wire       [2:0]    dataLogic_cmdPush_fifo_io_occupancy;
  wire       [2:0]    dataLogic_cmdPush_fifo_io_availability;
  wire                _zz_4;
  wire                _zz_5;
  wire       [14:0]   _zz_6;
  wire       [12:0]   _zz_7;
  wire       [3:0]    _zz_8;
  wire       [12:0]   _zz_9;
  wire       [31:0]   _zz_10;
  wire       [14:0]   _zz_11;
  wire       [31:0]   _zz_12;
  wire       [7:0]    _zz_13;
  wire       [4:0]    _zz_14;
  wire       [1:0]    _zz_15;
  wire       [11:0]   cmdLogic_byteCount;
  wire       [8:0]    cmdLogic_incrLen;
  wire                dataLogic_cmdPush_valid;
  wire                dataLogic_cmdPush_ready;
  wire       [3:0]    dataLogic_cmdPush_payload_startAt;
  wire       [3:0]    dataLogic_cmdPush_payload_endAt;
  wire       [2:0]    dataLogic_cmdPush_payload_size;
  wire       [3:0]    dataLogic_cmdPush_payload_id;
  reg        [2:0]    dataLogic_size;
  reg                 dataLogic_busy;
  reg        [3:0]    dataLogic_id;
  reg        [3:0]    dataLogic_byteCounter;
  reg        [3:0]    dataLogic_byteCounterLast;
  wire       [4:0]    dataLogic_byteCounterNext;

  assign _zz_4 = (dataLogic_cmdPush_fifo_io_pop_valid && _zz_1);
  assign _zz_5 = (io_input_r_valid && io_input_r_ready);
  assign _zz_6 = ({7'd0,io_input_ar_payload_len} <<< io_input_ar_payload_size);
  assign _zz_7 = ({(1'b0),cmdLogic_byteCount} + _zz_9);
  assign _zz_8 = io_input_ar_payload_addr[3 : 0];
  assign _zz_9 = {9'd0, _zz_8};
  assign _zz_10 = (io_input_ar_fork_io_outputs_1_payload_addr + _zz_12);
  assign _zz_11 = ({7'd0,io_input_ar_fork_io_outputs_1_payload_len} <<< io_input_ar_fork_io_outputs_1_payload_size);
  assign _zz_12 = {17'd0, _zz_11};
  assign _zz_13 = ({7'd0,(1'b1)} <<< dataLogic_size);
  assign _zz_14 = _zz_13[4:0];
  assign _zz_15 = (dataLogic_byteCounter >>> 2);
  StreamFork_e12a9decc0704226832aec4017b36e8d io_input_ar_fork (
    .io_input_valid                 (io_input_ar_valid                                  ), //i
    .io_input_ready                 (io_input_ar_fork_io_input_ready                    ), //o
    .io_input_payload_addr          (io_input_ar_payload_addr[31:0]                     ), //i
    .io_input_payload_id            (io_input_ar_payload_id[3:0]                        ), //i
    .io_input_payload_region        (io_input_ar_payload_region[3:0]                    ), //i
    .io_input_payload_len           (io_input_ar_payload_len[7:0]                       ), //i
    .io_input_payload_size          (io_input_ar_payload_size[2:0]                      ), //i
    .io_input_payload_burst         (io_input_ar_payload_burst[1:0]                     ), //i
    .io_input_payload_lock          (io_input_ar_payload_lock                           ), //i
    .io_input_payload_cache         (io_input_ar_payload_cache[3:0]                     ), //i
    .io_input_payload_qos           (io_input_ar_payload_qos[3:0]                       ), //i
    .io_input_payload_prot          (io_input_ar_payload_prot[2:0]                      ), //i
    .io_outputs_0_valid             (io_input_ar_fork_io_outputs_0_valid                ), //o
    .io_outputs_0_ready             (io_output_ar_ready                                 ), //i
    .io_outputs_0_payload_addr      (io_input_ar_fork_io_outputs_0_payload_addr[31:0]   ), //o
    .io_outputs_0_payload_id        (io_input_ar_fork_io_outputs_0_payload_id[3:0]      ), //o
    .io_outputs_0_payload_region    (io_input_ar_fork_io_outputs_0_payload_region[3:0]  ), //o
    .io_outputs_0_payload_len       (io_input_ar_fork_io_outputs_0_payload_len[7:0]     ), //o
    .io_outputs_0_payload_size      (io_input_ar_fork_io_outputs_0_payload_size[2:0]    ), //o
    .io_outputs_0_payload_burst     (io_input_ar_fork_io_outputs_0_payload_burst[1:0]   ), //o
    .io_outputs_0_payload_lock      (io_input_ar_fork_io_outputs_0_payload_lock         ), //o
    .io_outputs_0_payload_cache     (io_input_ar_fork_io_outputs_0_payload_cache[3:0]   ), //o
    .io_outputs_0_payload_qos       (io_input_ar_fork_io_outputs_0_payload_qos[3:0]     ), //o
    .io_outputs_0_payload_prot      (io_input_ar_fork_io_outputs_0_payload_prot[2:0]    ), //o
    .io_outputs_1_valid             (io_input_ar_fork_io_outputs_1_valid                ), //o
    .io_outputs_1_ready             (dataLogic_cmdPush_ready                            ), //i
    .io_outputs_1_payload_addr      (io_input_ar_fork_io_outputs_1_payload_addr[31:0]   ), //o
    .io_outputs_1_payload_id        (io_input_ar_fork_io_outputs_1_payload_id[3:0]      ), //o
    .io_outputs_1_payload_region    (io_input_ar_fork_io_outputs_1_payload_region[3:0]  ), //o
    .io_outputs_1_payload_len       (io_input_ar_fork_io_outputs_1_payload_len[7:0]     ), //o
    .io_outputs_1_payload_size      (io_input_ar_fork_io_outputs_1_payload_size[2:0]    ), //o
    .io_outputs_1_payload_burst     (io_input_ar_fork_io_outputs_1_payload_burst[1:0]   ), //o
    .io_outputs_1_payload_lock      (io_input_ar_fork_io_outputs_1_payload_lock         ), //o
    .io_outputs_1_payload_cache     (io_input_ar_fork_io_outputs_1_payload_cache[3:0]   ), //o
    .io_outputs_1_payload_qos       (io_input_ar_fork_io_outputs_1_payload_qos[3:0]     ), //o
    .io_outputs_1_payload_prot      (io_input_ar_fork_io_outputs_1_payload_prot[2:0]    ), //o
    .io_memoryClk                   (io_memoryClk                                       ), //i
    .ddrCd_logic_outputReset        (ddrCd_logic_outputReset                            )  //i
  );
  StreamFifo_e12a9decc0704226832aec4017b36e8d dataLogic_cmdPush_fifo (
    .io_push_valid              (dataLogic_cmdPush_valid                             ), //i
    .io_push_ready              (dataLogic_cmdPush_fifo_io_push_ready                ), //o
    .io_push_payload_startAt    (dataLogic_cmdPush_payload_startAt[3:0]              ), //i
    .io_push_payload_endAt      (dataLogic_cmdPush_payload_endAt[3:0]                ), //i
    .io_push_payload_size       (dataLogic_cmdPush_payload_size[2:0]                 ), //i
    .io_push_payload_id         (dataLogic_cmdPush_payload_id[3:0]                   ), //i
    .io_pop_valid               (dataLogic_cmdPush_fifo_io_pop_valid                 ), //o
    .io_pop_ready               (_zz_1                                               ), //i
    .io_pop_payload_startAt     (dataLogic_cmdPush_fifo_io_pop_payload_startAt[3:0]  ), //o
    .io_pop_payload_endAt       (dataLogic_cmdPush_fifo_io_pop_payload_endAt[3:0]    ), //o
    .io_pop_payload_size        (dataLogic_cmdPush_fifo_io_pop_payload_size[2:0]     ), //o
    .io_pop_payload_id          (dataLogic_cmdPush_fifo_io_pop_payload_id[3:0]       ), //o
    .io_flush                   (_zz_2                                               ), //i
    .io_occupancy               (dataLogic_cmdPush_fifo_io_occupancy[2:0]            ), //o
    .io_availability            (dataLogic_cmdPush_fifo_io_availability[2:0]         ), //o
    .io_memoryClk               (io_memoryClk                                        ), //i
    .ddrCd_logic_outputReset    (ddrCd_logic_outputReset                             )  //i
  );
  always @(*) begin
    case(_zz_15)
      2'b00 : begin
        _zz_3 = io_output_r_payload_data[31 : 0];
      end
      2'b01 : begin
        _zz_3 = io_output_r_payload_data[63 : 32];
      end
      2'b10 : begin
        _zz_3 = io_output_r_payload_data[95 : 64];
      end
      default : begin
        _zz_3 = io_output_r_payload_data[127 : 96];
      end
    endcase
  end

  assign io_input_ar_ready = io_input_ar_fork_io_input_ready;
  assign io_output_ar_valid = io_input_ar_fork_io_outputs_0_valid;
  assign io_output_ar_payload_addr = io_input_ar_fork_io_outputs_0_payload_addr;
  assign io_output_ar_payload_region = io_input_ar_fork_io_outputs_0_payload_region;
  assign io_output_ar_payload_burst = io_input_ar_fork_io_outputs_0_payload_burst;
  assign io_output_ar_payload_lock = io_input_ar_fork_io_outputs_0_payload_lock;
  assign io_output_ar_payload_cache = io_input_ar_fork_io_outputs_0_payload_cache;
  assign io_output_ar_payload_qos = io_input_ar_fork_io_outputs_0_payload_qos;
  assign io_output_ar_payload_prot = io_input_ar_fork_io_outputs_0_payload_prot;
  assign cmdLogic_byteCount = _zz_6[11:0];
  assign cmdLogic_incrLen = _zz_7[12 : 4];
  assign io_output_ar_payload_size = (3'b100);
  assign io_output_ar_payload_len = cmdLogic_incrLen[7:0];
  assign io_output_ar_payload_id = (4'b0000);
  assign dataLogic_cmdPush_valid = io_input_ar_fork_io_outputs_1_valid;
  assign dataLogic_cmdPush_payload_startAt = io_input_ar_fork_io_outputs_1_payload_addr[3:0];
  assign dataLogic_cmdPush_payload_endAt = _zz_10[3:0];
  assign dataLogic_cmdPush_payload_size = io_input_ar_fork_io_outputs_1_payload_size;
  assign dataLogic_cmdPush_payload_id = io_input_ar_fork_io_outputs_1_payload_id;
  assign dataLogic_cmdPush_ready = dataLogic_cmdPush_fifo_io_push_ready;
  assign dataLogic_byteCounterNext = ({(1'b0),dataLogic_byteCounter} + _zz_14);
  assign _zz_1 = (! dataLogic_busy);
  assign io_input_r_valid = (io_output_r_valid && dataLogic_busy);
  assign io_input_r_payload_last = (io_output_r_payload_last && (dataLogic_byteCounter == dataLogic_byteCounterLast));
  assign io_input_r_payload_resp = io_output_r_payload_resp;
  assign io_input_r_payload_data = _zz_3;
  assign io_input_r_payload_id = dataLogic_id;
  assign io_output_r_ready = ((dataLogic_busy && io_input_r_ready) && (io_input_r_payload_last || dataLogic_byteCounterNext[4]));
  assign _zz_2 = 1'b0;
  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      dataLogic_busy <= 1'b0;
    end else begin
      if(_zz_4)begin
        dataLogic_busy <= 1'b1;
      end
      if(_zz_5)begin
        if(io_input_r_payload_last)begin
          dataLogic_busy <= 1'b0;
        end
      end
    end
  end

  always @ (posedge io_memoryClk) begin
    if(_zz_4)begin
      dataLogic_byteCounter <= dataLogic_cmdPush_fifo_io_pop_payload_startAt;
      dataLogic_byteCounterLast <= dataLogic_cmdPush_fifo_io_pop_payload_endAt;
      dataLogic_size <= dataLogic_cmdPush_fifo_io_pop_payload_size;
      dataLogic_id <= dataLogic_cmdPush_fifo_io_pop_payload_id;
    end
    if(_zz_5)begin
      dataLogic_byteCounter <= dataLogic_byteCounterNext[3:0];
    end
  end


endmodule

module StreamFifoCC_8_e12a9decc0704226832aec4017b36e8d (
  input               io_push_valid,
  output              io_push_ready,
  input      [3:0]    io_push_payload_id,
  input      [1:0]    io_push_payload_resp,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [3:0]    io_pop_payload_id,
  output     [1:0]    io_pop_payload_resp,
  output     [4:0]    io_pushOccupancy,
  output     [4:0]    io_popOccupancy,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset,
  input               io_ddrMasters_0_clk,
  input               io_ddrMasters_0_reset
);
  wire       [4:0]    _zz_12;
  wire       [4:0]    _zz_13;
  reg        [5:0]    _zz_14;
  wire       [4:0]    popToPushGray_buffercc_io_dataOut;
  wire       [4:0]    pushToPopGray_buffercc_io_dataOut;
  wire                _zz_15;
  wire       [4:0]    _zz_16;
  wire       [3:0]    _zz_17;
  wire       [4:0]    _zz_18;
  wire       [3:0]    _zz_19;
  wire       [5:0]    _zz_20;
  wire                _zz_21;
  reg                 _zz_1;
  wire       [4:0]    popToPushGray;
  wire       [4:0]    pushToPopGray;
  reg        [4:0]    pushCC_pushPtr;
  wire       [4:0]    pushCC_pushPtrPlus;
  reg        [4:0]    pushCC_pushPtrGray;
  wire       [4:0]    pushCC_popPtrGray;
  wire                pushCC_full;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  reg        [4:0]    popCC_popPtr;
  wire       [4:0]    popCC_popPtrPlus;
  reg        [4:0]    popCC_popPtrGray;
  wire       [4:0]    popCC_pushPtrGray;
  wire                popCC_empty;
  wire       [4:0]    _zz_6;
  wire       [5:0]    _zz_7;
  wire                _zz_8;
  wire                _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  reg [5:0] ram [0:15];

  assign _zz_15 = (io_push_valid && io_push_ready);
  assign _zz_16 = (pushCC_pushPtrPlus >>> (1'b1));
  assign _zz_17 = pushCC_pushPtr[3:0];
  assign _zz_18 = (popCC_popPtrPlus >>> (1'b1));
  assign _zz_19 = _zz_6[3:0];
  assign _zz_20 = {io_push_payload_resp,io_push_payload_id};
  assign _zz_21 = 1'b1;
  always @ (posedge io_memoryClk) begin
    if(_zz_1) begin
      ram[_zz_17] <= _zz_20;
    end
  end

  always @ (posedge io_ddrMasters_0_clk) begin
    if(_zz_21) begin
      _zz_14 <= ram[_zz_19];
    end
  end

  BufferCC_5_e12a9decc0704226832aec4017b36e8d popToPushGray_buffercc (
    .io_initial                 (_zz_12[4:0]                             ), //i
    .io_dataIn                  (popToPushGray[4:0]                      ), //i
    .io_dataOut                 (popToPushGray_buffercc_io_dataOut[4:0]  ), //o
    .io_memoryClk               (io_memoryClk                            ), //i
    .ddrCd_logic_outputReset    (ddrCd_logic_outputReset                 )  //i
  );
  BufferCC_12_e12a9decc0704226832aec4017b36e8d pushToPopGray_buffercc (
    .io_initial               (_zz_13[4:0]                             ), //i
    .io_dataIn                (pushToPopGray[4:0]                      ), //i
    .io_dataOut               (pushToPopGray_buffercc_io_dataOut[4:0]  ), //o
    .io_ddrMasters_0_clk      (io_ddrMasters_0_clk                     ), //i
    .io_ddrMasters_0_reset    (io_ddrMasters_0_reset                   )  //i
  );
  always @ (*) begin
    _zz_1 = 1'b0;
    if(_zz_15)begin
      _zz_1 = 1'b1;
    end
  end

  assign pushCC_pushPtrPlus = (pushCC_pushPtr + 5'h01);
  assign _zz_12 = 5'h0;
  assign pushCC_popPtrGray = popToPushGray_buffercc_io_dataOut;
  assign pushCC_full = ((pushCC_pushPtrGray[4 : 3] == (~ pushCC_popPtrGray[4 : 3])) && (pushCC_pushPtrGray[2 : 0] == pushCC_popPtrGray[2 : 0]));
  assign io_push_ready = (! pushCC_full);
  assign _zz_2 = (pushCC_popPtrGray[1] ^ _zz_3);
  assign _zz_3 = (pushCC_popPtrGray[2] ^ _zz_4);
  assign _zz_4 = (pushCC_popPtrGray[3] ^ _zz_5);
  assign _zz_5 = pushCC_popPtrGray[4];
  assign io_pushOccupancy = (pushCC_pushPtr - {_zz_5,{_zz_4,{_zz_3,{_zz_2,(pushCC_popPtrGray[0] ^ _zz_2)}}}});
  assign popCC_popPtrPlus = (popCC_popPtr + 5'h01);
  assign _zz_13 = 5'h0;
  assign popCC_pushPtrGray = pushToPopGray_buffercc_io_dataOut;
  assign popCC_empty = (popCC_popPtrGray == popCC_pushPtrGray);
  assign io_pop_valid = (! popCC_empty);
  assign _zz_6 = ((io_pop_valid && io_pop_ready) ? popCC_popPtrPlus : popCC_popPtr);
  assign _zz_7 = _zz_14;
  assign io_pop_payload_id = _zz_7[3 : 0];
  assign io_pop_payload_resp = _zz_7[5 : 4];
  assign _zz_8 = (popCC_pushPtrGray[1] ^ _zz_9);
  assign _zz_9 = (popCC_pushPtrGray[2] ^ _zz_10);
  assign _zz_10 = (popCC_pushPtrGray[3] ^ _zz_11);
  assign _zz_11 = popCC_pushPtrGray[4];
  assign io_popOccupancy = ({_zz_11,{_zz_10,{_zz_9,{_zz_8,(popCC_pushPtrGray[0] ^ _zz_8)}}}} - popCC_popPtr);
  assign pushToPopGray = pushCC_pushPtrGray;
  assign popToPushGray = popCC_popPtrGray;
  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      pushCC_pushPtr <= 5'h0;
      pushCC_pushPtrGray <= 5'h0;
    end else begin
      if((io_push_valid && io_push_ready))begin
        pushCC_pushPtrGray <= (_zz_16 ^ pushCC_pushPtrPlus);
      end
      if(_zz_15)begin
        pushCC_pushPtr <= pushCC_pushPtrPlus;
      end
    end
  end

  always @ (posedge io_ddrMasters_0_clk) begin
    if(io_ddrMasters_0_reset) begin
      popCC_popPtr <= 5'h0;
      popCC_popPtrGray <= 5'h0;
    end else begin
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtrGray <= (_zz_18 ^ popCC_popPtrPlus);
      end
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtr <= popCC_popPtrPlus;
      end
    end
  end


endmodule

module StreamFifoCC_7_e12a9decc0704226832aec4017b36e8d (
  input               io_push_valid,
  output              io_push_ready,
  input      [31:0]   io_push_payload_data,
  input      [3:0]    io_push_payload_strb,
  input               io_push_payload_last,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [31:0]   io_pop_payload_data,
  output     [3:0]    io_pop_payload_strb,
  output              io_pop_payload_last,
  output     [4:0]    io_pushOccupancy,
  output     [4:0]    io_popOccupancy,
  input               io_ddrMasters_0_clk,
  input               io_ddrMasters_0_reset,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  wire       [4:0]    _zz_12;
  wire       [4:0]    _zz_13;
  reg        [36:0]   _zz_14;
  wire       [4:0]    popToPushGray_buffercc_io_dataOut;
  wire       [4:0]    pushToPopGray_buffercc_io_dataOut;
  wire                _zz_15;
  wire       [4:0]    _zz_16;
  wire       [3:0]    _zz_17;
  wire       [4:0]    _zz_18;
  wire       [3:0]    _zz_19;
  wire       [0:0]    _zz_20;
  wire       [36:0]   _zz_21;
  wire                _zz_22;
  reg                 _zz_1;
  wire       [4:0]    popToPushGray;
  wire       [4:0]    pushToPopGray;
  reg        [4:0]    pushCC_pushPtr;
  wire       [4:0]    pushCC_pushPtrPlus;
  reg        [4:0]    pushCC_pushPtrGray;
  wire       [4:0]    pushCC_popPtrGray;
  wire                pushCC_full;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  reg        [4:0]    popCC_popPtr;
  wire       [4:0]    popCC_popPtrPlus;
  reg        [4:0]    popCC_popPtrGray;
  wire       [4:0]    popCC_pushPtrGray;
  wire                popCC_empty;
  wire       [4:0]    _zz_6;
  wire       [36:0]   _zz_7;
  wire                _zz_8;
  wire                _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  reg [36:0] ram [0:15];

  assign _zz_15 = (io_push_valid && io_push_ready);
  assign _zz_16 = (pushCC_pushPtrPlus >>> (1'b1));
  assign _zz_17 = pushCC_pushPtr[3:0];
  assign _zz_18 = (popCC_popPtrPlus >>> (1'b1));
  assign _zz_19 = _zz_6[3:0];
  assign _zz_20 = _zz_7[36 : 36];
  assign _zz_21 = {io_push_payload_last,{io_push_payload_strb,io_push_payload_data}};
  assign _zz_22 = 1'b1;
  always @ (posedge io_ddrMasters_0_clk) begin
    if(_zz_1) begin
      ram[_zz_17] <= _zz_21;
    end
  end

  always @ (posedge io_memoryClk) begin
    if(_zz_22) begin
      _zz_14 <= ram[_zz_19];
    end
  end

  BufferCC_12_e12a9decc0704226832aec4017b36e8d popToPushGray_buffercc (
    .io_initial               (_zz_12[4:0]                             ), //i
    .io_dataIn                (popToPushGray[4:0]                      ), //i
    .io_dataOut               (popToPushGray_buffercc_io_dataOut[4:0]  ), //o
    .io_ddrMasters_0_clk      (io_ddrMasters_0_clk                     ), //i
    .io_ddrMasters_0_reset    (io_ddrMasters_0_reset                   )  //i
  );
  BufferCC_5_e12a9decc0704226832aec4017b36e8d pushToPopGray_buffercc (
    .io_initial                 (_zz_13[4:0]                             ), //i
    .io_dataIn                  (pushToPopGray[4:0]                      ), //i
    .io_dataOut                 (pushToPopGray_buffercc_io_dataOut[4:0]  ), //o
    .io_memoryClk               (io_memoryClk                            ), //i
    .ddrCd_logic_outputReset    (ddrCd_logic_outputReset                 )  //i
  );
  always @ (*) begin
    _zz_1 = 1'b0;
    if(_zz_15)begin
      _zz_1 = 1'b1;
    end
  end

  assign pushCC_pushPtrPlus = (pushCC_pushPtr + 5'h01);
  assign _zz_12 = 5'h0;
  assign pushCC_popPtrGray = popToPushGray_buffercc_io_dataOut;
  assign pushCC_full = ((pushCC_pushPtrGray[4 : 3] == (~ pushCC_popPtrGray[4 : 3])) && (pushCC_pushPtrGray[2 : 0] == pushCC_popPtrGray[2 : 0]));
  assign io_push_ready = (! pushCC_full);
  assign _zz_2 = (pushCC_popPtrGray[1] ^ _zz_3);
  assign _zz_3 = (pushCC_popPtrGray[2] ^ _zz_4);
  assign _zz_4 = (pushCC_popPtrGray[3] ^ _zz_5);
  assign _zz_5 = pushCC_popPtrGray[4];
  assign io_pushOccupancy = (pushCC_pushPtr - {_zz_5,{_zz_4,{_zz_3,{_zz_2,(pushCC_popPtrGray[0] ^ _zz_2)}}}});
  assign popCC_popPtrPlus = (popCC_popPtr + 5'h01);
  assign _zz_13 = 5'h0;
  assign popCC_pushPtrGray = pushToPopGray_buffercc_io_dataOut;
  assign popCC_empty = (popCC_popPtrGray == popCC_pushPtrGray);
  assign io_pop_valid = (! popCC_empty);
  assign _zz_6 = ((io_pop_valid && io_pop_ready) ? popCC_popPtrPlus : popCC_popPtr);
  assign _zz_7 = _zz_14;
  assign io_pop_payload_data = _zz_7[31 : 0];
  assign io_pop_payload_strb = _zz_7[35 : 32];
  assign io_pop_payload_last = _zz_20[0];
  assign _zz_8 = (popCC_pushPtrGray[1] ^ _zz_9);
  assign _zz_9 = (popCC_pushPtrGray[2] ^ _zz_10);
  assign _zz_10 = (popCC_pushPtrGray[3] ^ _zz_11);
  assign _zz_11 = popCC_pushPtrGray[4];
  assign io_popOccupancy = ({_zz_11,{_zz_10,{_zz_9,{_zz_8,(popCC_pushPtrGray[0] ^ _zz_8)}}}} - popCC_popPtr);
  assign pushToPopGray = pushCC_pushPtrGray;
  assign popToPushGray = popCC_popPtrGray;
  always @ (posedge io_ddrMasters_0_clk) begin
    if(io_ddrMasters_0_reset) begin
      pushCC_pushPtr <= 5'h0;
      pushCC_pushPtrGray <= 5'h0;
    end else begin
      if((io_push_valid && io_push_ready))begin
        pushCC_pushPtrGray <= (_zz_16 ^ pushCC_pushPtrPlus);
      end
      if(_zz_15)begin
        pushCC_pushPtr <= pushCC_pushPtrPlus;
      end
    end
  end

  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      popCC_popPtr <= 5'h0;
      popCC_popPtrGray <= 5'h0;
    end else begin
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtrGray <= (_zz_18 ^ popCC_popPtrPlus);
      end
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtr <= popCC_popPtrPlus;
      end
    end
  end


endmodule

//StreamFifoCC_4_e12a9decc0704226832aec4017b36e8d replaced by StreamFifoCC_4_e12a9decc0704226832aec4017b36e8d

module StreamFifoCC_5_e12a9decc0704226832aec4017b36e8d (
  input               io_push_valid,
  output              io_push_ready,
  input      [31:0]   io_push_payload_data,
  input      [3:0]    io_push_payload_id,
  input      [1:0]    io_push_payload_resp,
  input               io_push_payload_last,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [31:0]   io_pop_payload_data,
  output     [3:0]    io_pop_payload_id,
  output     [1:0]    io_pop_payload_resp,
  output              io_pop_payload_last,
  output     [4:0]    io_pushOccupancy,
  output     [4:0]    io_popOccupancy,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset,
  input               io_ddrMasters_0_clk,
  input               io_ddrMasters_0_reset
);
  wire       [4:0]    _zz_12;
  wire       [4:0]    _zz_13;
  reg        [38:0]   _zz_14;
  wire       [4:0]    popToPushGray_buffercc_io_dataOut;
  wire       [4:0]    pushToPopGray_buffercc_io_dataOut;
  wire                _zz_15;
  wire       [4:0]    _zz_16;
  wire       [3:0]    _zz_17;
  wire       [4:0]    _zz_18;
  wire       [3:0]    _zz_19;
  wire       [0:0]    _zz_20;
  wire       [38:0]   _zz_21;
  wire                _zz_22;
  reg                 _zz_1;
  wire       [4:0]    popToPushGray;
  wire       [4:0]    pushToPopGray;
  reg        [4:0]    pushCC_pushPtr;
  wire       [4:0]    pushCC_pushPtrPlus;
  reg        [4:0]    pushCC_pushPtrGray;
  wire       [4:0]    pushCC_popPtrGray;
  wire                pushCC_full;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  reg        [4:0]    popCC_popPtr;
  wire       [4:0]    popCC_popPtrPlus;
  reg        [4:0]    popCC_popPtrGray;
  wire       [4:0]    popCC_pushPtrGray;
  wire                popCC_empty;
  wire       [4:0]    _zz_6;
  wire       [38:0]   _zz_7;
  wire                _zz_8;
  wire                _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  reg [38:0] ram [0:15];

  assign _zz_15 = (io_push_valid && io_push_ready);
  assign _zz_16 = (pushCC_pushPtrPlus >>> (1'b1));
  assign _zz_17 = pushCC_pushPtr[3:0];
  assign _zz_18 = (popCC_popPtrPlus >>> (1'b1));
  assign _zz_19 = _zz_6[3:0];
  assign _zz_20 = _zz_7[38 : 38];
  assign _zz_21 = {io_push_payload_last,{io_push_payload_resp,{io_push_payload_id,io_push_payload_data}}};
  assign _zz_22 = 1'b1;
  always @ (posedge io_memoryClk) begin
    if(_zz_1) begin
      ram[_zz_17] <= _zz_21;
    end
  end

  always @ (posedge io_ddrMasters_0_clk) begin
    if(_zz_22) begin
      _zz_14 <= ram[_zz_19];
    end
  end

  BufferCC_5_e12a9decc0704226832aec4017b36e8d popToPushGray_buffercc (
    .io_initial                 (_zz_12[4:0]                             ), //i
    .io_dataIn                  (popToPushGray[4:0]                      ), //i
    .io_dataOut                 (popToPushGray_buffercc_io_dataOut[4:0]  ), //o
    .io_memoryClk               (io_memoryClk                            ), //i
    .ddrCd_logic_outputReset    (ddrCd_logic_outputReset                 )  //i
  );
  BufferCC_12_e12a9decc0704226832aec4017b36e8d pushToPopGray_buffercc (
    .io_initial               (_zz_13[4:0]                             ), //i
    .io_dataIn                (pushToPopGray[4:0]                      ), //i
    .io_dataOut               (pushToPopGray_buffercc_io_dataOut[4:0]  ), //o
    .io_ddrMasters_0_clk      (io_ddrMasters_0_clk                     ), //i
    .io_ddrMasters_0_reset    (io_ddrMasters_0_reset                   )  //i
  );
  always @ (*) begin
    _zz_1 = 1'b0;
    if(_zz_15)begin
      _zz_1 = 1'b1;
    end
  end

  assign pushCC_pushPtrPlus = (pushCC_pushPtr + 5'h01);
  assign _zz_12 = 5'h0;
  assign pushCC_popPtrGray = popToPushGray_buffercc_io_dataOut;
  assign pushCC_full = ((pushCC_pushPtrGray[4 : 3] == (~ pushCC_popPtrGray[4 : 3])) && (pushCC_pushPtrGray[2 : 0] == pushCC_popPtrGray[2 : 0]));
  assign io_push_ready = (! pushCC_full);
  assign _zz_2 = (pushCC_popPtrGray[1] ^ _zz_3);
  assign _zz_3 = (pushCC_popPtrGray[2] ^ _zz_4);
  assign _zz_4 = (pushCC_popPtrGray[3] ^ _zz_5);
  assign _zz_5 = pushCC_popPtrGray[4];
  assign io_pushOccupancy = (pushCC_pushPtr - {_zz_5,{_zz_4,{_zz_3,{_zz_2,(pushCC_popPtrGray[0] ^ _zz_2)}}}});
  assign popCC_popPtrPlus = (popCC_popPtr + 5'h01);
  assign _zz_13 = 5'h0;
  assign popCC_pushPtrGray = pushToPopGray_buffercc_io_dataOut;
  assign popCC_empty = (popCC_popPtrGray == popCC_pushPtrGray);
  assign io_pop_valid = (! popCC_empty);
  assign _zz_6 = ((io_pop_valid && io_pop_ready) ? popCC_popPtrPlus : popCC_popPtr);
  assign _zz_7 = _zz_14;
  assign io_pop_payload_data = _zz_7[31 : 0];
  assign io_pop_payload_id = _zz_7[35 : 32];
  assign io_pop_payload_resp = _zz_7[37 : 36];
  assign io_pop_payload_last = _zz_20[0];
  assign _zz_8 = (popCC_pushPtrGray[1] ^ _zz_9);
  assign _zz_9 = (popCC_pushPtrGray[2] ^ _zz_10);
  assign _zz_10 = (popCC_pushPtrGray[3] ^ _zz_11);
  assign _zz_11 = popCC_pushPtrGray[4];
  assign io_popOccupancy = ({_zz_11,{_zz_10,{_zz_9,{_zz_8,(popCC_pushPtrGray[0] ^ _zz_8)}}}} - popCC_popPtr);
  assign pushToPopGray = pushCC_pushPtrGray;
  assign popToPushGray = popCC_popPtrGray;
  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      pushCC_pushPtr <= 5'h0;
      pushCC_pushPtrGray <= 5'h0;
    end else begin
      if((io_push_valid && io_push_ready))begin
        pushCC_pushPtrGray <= (_zz_16 ^ pushCC_pushPtrPlus);
      end
      if(_zz_15)begin
        pushCC_pushPtr <= pushCC_pushPtrPlus;
      end
    end
  end

  always @ (posedge io_ddrMasters_0_clk) begin
    if(io_ddrMasters_0_reset) begin
      popCC_popPtr <= 5'h0;
      popCC_popPtrGray <= 5'h0;
    end else begin
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtrGray <= (_zz_18 ^ popCC_popPtrPlus);
      end
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtr <= popCC_popPtrPlus;
      end
    end
  end


endmodule

module StreamFifoCC_4_e12a9decc0704226832aec4017b36e8d (
  input               io_push_valid,
  output              io_push_ready,
  input      [31:0]   io_push_payload_addr,
  input      [3:0]    io_push_payload_id,
  input      [3:0]    io_push_payload_region,
  input      [7:0]    io_push_payload_len,
  input      [2:0]    io_push_payload_size,
  input      [1:0]    io_push_payload_burst,
  input      [0:0]    io_push_payload_lock,
  input      [3:0]    io_push_payload_cache,
  input      [3:0]    io_push_payload_qos,
  input      [2:0]    io_push_payload_prot,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [31:0]   io_pop_payload_addr,
  output     [3:0]    io_pop_payload_id,
  output     [3:0]    io_pop_payload_region,
  output     [7:0]    io_pop_payload_len,
  output     [2:0]    io_pop_payload_size,
  output     [1:0]    io_pop_payload_burst,
  output     [0:0]    io_pop_payload_lock,
  output     [3:0]    io_pop_payload_cache,
  output     [3:0]    io_pop_payload_qos,
  output     [2:0]    io_pop_payload_prot,
  output     [4:0]    io_pushOccupancy,
  output     [4:0]    io_popOccupancy,
  input               io_ddrMasters_0_clk,
  input               io_ddrMasters_0_reset,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  wire       [4:0]    _zz_12;
  wire       [4:0]    _zz_13;
  reg        [64:0]   _zz_14;
  wire       [4:0]    popToPushGray_buffercc_io_dataOut;
  wire       [4:0]    pushToPopGray_buffercc_io_dataOut;
  wire                _zz_15;
  wire       [4:0]    _zz_16;
  wire       [3:0]    _zz_17;
  wire       [4:0]    _zz_18;
  wire       [3:0]    _zz_19;
  wire       [64:0]   _zz_20;
  wire                _zz_21;
  reg                 _zz_1;
  wire       [4:0]    popToPushGray;
  wire       [4:0]    pushToPopGray;
  reg        [4:0]    pushCC_pushPtr;
  wire       [4:0]    pushCC_pushPtrPlus;
  reg        [4:0]    pushCC_pushPtrGray;
  wire       [4:0]    pushCC_popPtrGray;
  wire                pushCC_full;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  reg        [4:0]    popCC_popPtr;
  wire       [4:0]    popCC_popPtrPlus;
  reg        [4:0]    popCC_popPtrGray;
  wire       [4:0]    popCC_pushPtrGray;
  wire                popCC_empty;
  wire       [4:0]    _zz_6;
  wire       [64:0]   _zz_7;
  wire                _zz_8;
  wire                _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  reg [64:0] ram [0:15];

  assign _zz_15 = (io_push_valid && io_push_ready);
  assign _zz_16 = (pushCC_pushPtrPlus >>> (1'b1));
  assign _zz_17 = pushCC_pushPtr[3:0];
  assign _zz_18 = (popCC_popPtrPlus >>> (1'b1));
  assign _zz_19 = _zz_6[3:0];
  assign _zz_20 = {io_push_payload_prot,{io_push_payload_qos,{io_push_payload_cache,{io_push_payload_lock,{io_push_payload_burst,{io_push_payload_size,{io_push_payload_len,{io_push_payload_region,{io_push_payload_id,io_push_payload_addr}}}}}}}}};
  assign _zz_21 = 1'b1;
  always @ (posedge io_ddrMasters_0_clk) begin
    if(_zz_1) begin
      ram[_zz_17] <= _zz_20;
    end
  end

  always @ (posedge io_memoryClk) begin
    if(_zz_21) begin
      _zz_14 <= ram[_zz_19];
    end
  end

  BufferCC_12_e12a9decc0704226832aec4017b36e8d popToPushGray_buffercc (
    .io_initial               (_zz_12[4:0]                             ), //i
    .io_dataIn                (popToPushGray[4:0]                      ), //i
    .io_dataOut               (popToPushGray_buffercc_io_dataOut[4:0]  ), //o
    .io_ddrMasters_0_clk      (io_ddrMasters_0_clk                     ), //i
    .io_ddrMasters_0_reset    (io_ddrMasters_0_reset                   )  //i
  );
  BufferCC_5_e12a9decc0704226832aec4017b36e8d pushToPopGray_buffercc (
    .io_initial                 (_zz_13[4:0]                             ), //i
    .io_dataIn                  (pushToPopGray[4:0]                      ), //i
    .io_dataOut                 (pushToPopGray_buffercc_io_dataOut[4:0]  ), //o
    .io_memoryClk               (io_memoryClk                            ), //i
    .ddrCd_logic_outputReset    (ddrCd_logic_outputReset                 )  //i
  );
  always @ (*) begin
    _zz_1 = 1'b0;
    if(_zz_15)begin
      _zz_1 = 1'b1;
    end
  end

  assign pushCC_pushPtrPlus = (pushCC_pushPtr + 5'h01);
  assign _zz_12 = 5'h0;
  assign pushCC_popPtrGray = popToPushGray_buffercc_io_dataOut;
  assign pushCC_full = ((pushCC_pushPtrGray[4 : 3] == (~ pushCC_popPtrGray[4 : 3])) && (pushCC_pushPtrGray[2 : 0] == pushCC_popPtrGray[2 : 0]));
  assign io_push_ready = (! pushCC_full);
  assign _zz_2 = (pushCC_popPtrGray[1] ^ _zz_3);
  assign _zz_3 = (pushCC_popPtrGray[2] ^ _zz_4);
  assign _zz_4 = (pushCC_popPtrGray[3] ^ _zz_5);
  assign _zz_5 = pushCC_popPtrGray[4];
  assign io_pushOccupancy = (pushCC_pushPtr - {_zz_5,{_zz_4,{_zz_3,{_zz_2,(pushCC_popPtrGray[0] ^ _zz_2)}}}});
  assign popCC_popPtrPlus = (popCC_popPtr + 5'h01);
  assign _zz_13 = 5'h0;
  assign popCC_pushPtrGray = pushToPopGray_buffercc_io_dataOut;
  assign popCC_empty = (popCC_popPtrGray == popCC_pushPtrGray);
  assign io_pop_valid = (! popCC_empty);
  assign _zz_6 = ((io_pop_valid && io_pop_ready) ? popCC_popPtrPlus : popCC_popPtr);
  assign _zz_7 = _zz_14;
  assign io_pop_payload_addr = _zz_7[31 : 0];
  assign io_pop_payload_id = _zz_7[35 : 32];
  assign io_pop_payload_region = _zz_7[39 : 36];
  assign io_pop_payload_len = _zz_7[47 : 40];
  assign io_pop_payload_size = _zz_7[50 : 48];
  assign io_pop_payload_burst = _zz_7[52 : 51];
  assign io_pop_payload_lock = _zz_7[53 : 53];
  assign io_pop_payload_cache = _zz_7[57 : 54];
  assign io_pop_payload_qos = _zz_7[61 : 58];
  assign io_pop_payload_prot = _zz_7[64 : 62];
  assign _zz_8 = (popCC_pushPtrGray[1] ^ _zz_9);
  assign _zz_9 = (popCC_pushPtrGray[2] ^ _zz_10);
  assign _zz_10 = (popCC_pushPtrGray[3] ^ _zz_11);
  assign _zz_11 = popCC_pushPtrGray[4];
  assign io_popOccupancy = ({_zz_11,{_zz_10,{_zz_9,{_zz_8,(popCC_pushPtrGray[0] ^ _zz_8)}}}} - popCC_popPtr);
  assign pushToPopGray = pushCC_pushPtrGray;
  assign popToPushGray = popCC_popPtrGray;
  always @ (posedge io_ddrMasters_0_clk) begin
    if(io_ddrMasters_0_reset) begin
      pushCC_pushPtr <= 5'h0;
      pushCC_pushPtrGray <= 5'h0;
    end else begin
      if((io_push_valid && io_push_ready))begin
        pushCC_pushPtrGray <= (_zz_16 ^ pushCC_pushPtrPlus);
      end
      if(_zz_15)begin
        pushCC_pushPtr <= pushCC_pushPtrPlus;
      end
    end
  end

  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      popCC_popPtr <= 5'h0;
      popCC_popPtrGray <= 5'h0;
    end else begin
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtrGray <= (_zz_18 ^ popCC_popPtrPlus);
      end
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtr <= popCC_popPtrPlus;
      end
    end
  end


endmodule

module StreamFifoLowLatency_e12a9decc0704226832aec4017b36e8d (
  input               io_push_valid,
  output              io_push_ready,
  input      [0:0]    io_push_payload,
  output reg          io_pop_valid,
  input               io_pop_ready,
  output reg [0:0]    io_pop_payload,
  input               io_flush,
  output     [2:0]    io_occupancy,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  wire       [0:0]    _zz_2;
  wire                _zz_3;
  wire       [0:0]    _zz_4;
  wire       [1:0]    _zz_5;
  wire       [0:0]    _zz_6;
  wire       [1:0]    _zz_7;
  wire       [0:0]    _zz_8;
  reg                 _zz_1;
  reg                 pushPtr_willIncrement;
  reg                 pushPtr_willClear;
  reg        [1:0]    pushPtr_valueNext;
  reg        [1:0]    pushPtr_value;
  wire                pushPtr_willOverflowIfInc;
  wire                pushPtr_willOverflow;
  reg                 popPtr_willIncrement;
  reg                 popPtr_willClear;
  reg        [1:0]    popPtr_valueNext;
  reg        [1:0]    popPtr_value;
  wire                popPtr_willOverflowIfInc;
  wire                popPtr_willOverflow;
  wire                ptrMatch;
  reg                 risingOccupancy;
  wire                empty;
  wire                full;
  wire                pushing;
  wire                popping;
  wire       [1:0]    ptrDif;
  reg [0:0] ram [0:3];

  assign _zz_3 = (! empty);
  assign _zz_4 = pushPtr_willIncrement;
  assign _zz_5 = {1'd0, _zz_4};
  assign _zz_6 = popPtr_willIncrement;
  assign _zz_7 = {1'd0, _zz_6};
  assign _zz_8 = io_push_payload;
  assign _zz_2 = ram[popPtr_value];
  always @ (posedge io_memoryClk) begin
    if(_zz_1) begin
      ram[pushPtr_value] <= _zz_8;
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(pushing)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    pushPtr_willIncrement = 1'b0;
    if(pushing)begin
      pushPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    pushPtr_willClear = 1'b0;
    if(io_flush)begin
      pushPtr_willClear = 1'b1;
    end
  end

  assign pushPtr_willOverflowIfInc = (pushPtr_value == (2'b11));
  assign pushPtr_willOverflow = (pushPtr_willOverflowIfInc && pushPtr_willIncrement);
  always @ (*) begin
    pushPtr_valueNext = (pushPtr_value + _zz_5);
    if(pushPtr_willClear)begin
      pushPtr_valueNext = (2'b00);
    end
  end

  always @ (*) begin
    popPtr_willIncrement = 1'b0;
    if(popping)begin
      popPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    popPtr_willClear = 1'b0;
    if(io_flush)begin
      popPtr_willClear = 1'b1;
    end
  end

  assign popPtr_willOverflowIfInc = (popPtr_value == (2'b11));
  assign popPtr_willOverflow = (popPtr_willOverflowIfInc && popPtr_willIncrement);
  always @ (*) begin
    popPtr_valueNext = (popPtr_value + _zz_7);
    if(popPtr_willClear)begin
      popPtr_valueNext = (2'b00);
    end
  end

  assign ptrMatch = (pushPtr_value == popPtr_value);
  assign empty = (ptrMatch && (! risingOccupancy));
  assign full = (ptrMatch && risingOccupancy);
  assign pushing = (io_push_valid && io_push_ready);
  assign popping = (io_pop_valid && io_pop_ready);
  assign io_push_ready = (! full);
  always @ (*) begin
    if(_zz_3)begin
      io_pop_valid = 1'b1;
    end else begin
      io_pop_valid = io_push_valid;
    end
  end

  always @ (*) begin
    if(_zz_3)begin
      io_pop_payload = _zz_2;
    end else begin
      io_pop_payload = io_push_payload;
    end
  end

  assign ptrDif = (pushPtr_value - popPtr_value);
  assign io_occupancy = {(risingOccupancy && ptrMatch),ptrDif};
  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      pushPtr_value <= (2'b00);
      popPtr_value <= (2'b00);
      risingOccupancy <= 1'b0;
    end else begin
      pushPtr_value <= pushPtr_valueNext;
      popPtr_value <= popPtr_valueNext;
      if((pushing != popping))begin
        risingOccupancy <= pushing;
      end
      if(io_flush)begin
        risingOccupancy <= 1'b0;
      end
    end
  end


endmodule

module StreamFork_3_e12a9decc0704226832aec4017b36e8d (
  input               io_input_valid,
  output reg          io_input_ready,
  input      [31:0]   io_input_payload_addr,
  input      [6:0]    io_input_payload_id,
  input      [3:0]    io_input_payload_region,
  input      [7:0]    io_input_payload_len,
  input      [2:0]    io_input_payload_size,
  input      [1:0]    io_input_payload_burst,
  input      [0:0]    io_input_payload_lock,
  input      [3:0]    io_input_payload_cache,
  input      [3:0]    io_input_payload_qos,
  input      [2:0]    io_input_payload_prot,
  input               io_input_payload_write,
  output              io_outputs_0_valid,
  input               io_outputs_0_ready,
  output     [31:0]   io_outputs_0_payload_addr,
  output     [6:0]    io_outputs_0_payload_id,
  output     [3:0]    io_outputs_0_payload_region,
  output     [7:0]    io_outputs_0_payload_len,
  output     [2:0]    io_outputs_0_payload_size,
  output     [1:0]    io_outputs_0_payload_burst,
  output     [0:0]    io_outputs_0_payload_lock,
  output     [3:0]    io_outputs_0_payload_cache,
  output     [3:0]    io_outputs_0_payload_qos,
  output     [2:0]    io_outputs_0_payload_prot,
  output              io_outputs_0_payload_write,
  output              io_outputs_1_valid,
  input               io_outputs_1_ready,
  output     [31:0]   io_outputs_1_payload_addr,
  output     [6:0]    io_outputs_1_payload_id,
  output     [3:0]    io_outputs_1_payload_region,
  output     [7:0]    io_outputs_1_payload_len,
  output     [2:0]    io_outputs_1_payload_size,
  output     [1:0]    io_outputs_1_payload_burst,
  output     [0:0]    io_outputs_1_payload_lock,
  output     [3:0]    io_outputs_1_payload_cache,
  output     [3:0]    io_outputs_1_payload_qos,
  output     [2:0]    io_outputs_1_payload_prot,
  output              io_outputs_1_payload_write,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  reg                 _zz_1;
  reg                 _zz_2;

  always @ (*) begin
    io_input_ready = 1'b1;
    if(((! io_outputs_0_ready) && _zz_1))begin
      io_input_ready = 1'b0;
    end
    if(((! io_outputs_1_ready) && _zz_2))begin
      io_input_ready = 1'b0;
    end
  end

  assign io_outputs_0_valid = (io_input_valid && _zz_1);
  assign io_outputs_0_payload_addr = io_input_payload_addr;
  assign io_outputs_0_payload_id = io_input_payload_id;
  assign io_outputs_0_payload_region = io_input_payload_region;
  assign io_outputs_0_payload_len = io_input_payload_len;
  assign io_outputs_0_payload_size = io_input_payload_size;
  assign io_outputs_0_payload_burst = io_input_payload_burst;
  assign io_outputs_0_payload_lock = io_input_payload_lock;
  assign io_outputs_0_payload_cache = io_input_payload_cache;
  assign io_outputs_0_payload_qos = io_input_payload_qos;
  assign io_outputs_0_payload_prot = io_input_payload_prot;
  assign io_outputs_0_payload_write = io_input_payload_write;
  assign io_outputs_1_valid = (io_input_valid && _zz_2);
  assign io_outputs_1_payload_addr = io_input_payload_addr;
  assign io_outputs_1_payload_id = io_input_payload_id;
  assign io_outputs_1_payload_region = io_input_payload_region;
  assign io_outputs_1_payload_len = io_input_payload_len;
  assign io_outputs_1_payload_size = io_input_payload_size;
  assign io_outputs_1_payload_burst = io_input_payload_burst;
  assign io_outputs_1_payload_lock = io_input_payload_lock;
  assign io_outputs_1_payload_cache = io_input_payload_cache;
  assign io_outputs_1_payload_qos = io_input_payload_qos;
  assign io_outputs_1_payload_prot = io_input_payload_prot;
  assign io_outputs_1_payload_write = io_input_payload_write;
  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      _zz_1 <= 1'b1;
      _zz_2 <= 1'b1;
    end else begin
      if((io_outputs_0_valid && io_outputs_0_ready))begin
        _zz_1 <= 1'b0;
      end
      if((io_outputs_1_valid && io_outputs_1_ready))begin
        _zz_2 <= 1'b0;
      end
      if(io_input_ready)begin
        _zz_1 <= 1'b1;
        _zz_2 <= 1'b1;
      end
    end
  end


endmodule

module StreamArbiter_1_e12a9decc0704226832aec4017b36e8d (
  input               io_inputs_0_valid,
  output              io_inputs_0_ready,
  input      [31:0]   io_inputs_0_payload_addr,
  input      [6:0]    io_inputs_0_payload_id,
  input      [3:0]    io_inputs_0_payload_region,
  input      [7:0]    io_inputs_0_payload_len,
  input      [2:0]    io_inputs_0_payload_size,
  input      [1:0]    io_inputs_0_payload_burst,
  input      [0:0]    io_inputs_0_payload_lock,
  input      [3:0]    io_inputs_0_payload_cache,
  input      [3:0]    io_inputs_0_payload_qos,
  input      [2:0]    io_inputs_0_payload_prot,
  input               io_inputs_0_payload_write,
  input               io_inputs_1_valid,
  output              io_inputs_1_ready,
  input      [31:0]   io_inputs_1_payload_addr,
  input      [6:0]    io_inputs_1_payload_id,
  input      [3:0]    io_inputs_1_payload_region,
  input      [7:0]    io_inputs_1_payload_len,
  input      [2:0]    io_inputs_1_payload_size,
  input      [1:0]    io_inputs_1_payload_burst,
  input      [0:0]    io_inputs_1_payload_lock,
  input      [3:0]    io_inputs_1_payload_cache,
  input      [3:0]    io_inputs_1_payload_qos,
  input      [2:0]    io_inputs_1_payload_prot,
  input               io_inputs_1_payload_write,
  output              io_output_valid,
  input               io_output_ready,
  output     [31:0]   io_output_payload_addr,
  output     [6:0]    io_output_payload_id,
  output     [3:0]    io_output_payload_region,
  output     [7:0]    io_output_payload_len,
  output     [2:0]    io_output_payload_size,
  output     [1:0]    io_output_payload_burst,
  output     [0:0]    io_output_payload_lock,
  output     [3:0]    io_output_payload_cache,
  output     [3:0]    io_output_payload_qos,
  output     [2:0]    io_output_payload_prot,
  output              io_output_payload_write,
  output     [0:0]    io_chosen,
  output     [1:0]    io_chosenOH,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  wire       [3:0]    _zz_6;
  wire       [1:0]    _zz_7;
  wire       [3:0]    _zz_8;
  wire       [0:0]    _zz_9;
  wire       [0:0]    _zz_10;
  reg                 locked;
  wire                maskProposal_0;
  wire                maskProposal_1;
  reg                 maskLocked_0;
  reg                 maskLocked_1;
  wire                maskRouted_0;
  wire                maskRouted_1;
  wire       [1:0]    _zz_1;
  wire       [3:0]    _zz_2;
  wire       [3:0]    _zz_3;
  wire       [1:0]    _zz_4;
  wire                _zz_5;

  assign _zz_6 = (_zz_2 - _zz_8);
  assign _zz_7 = {maskLocked_0,maskLocked_1};
  assign _zz_8 = {2'd0, _zz_7};
  assign _zz_9 = _zz_4[0 : 0];
  assign _zz_10 = _zz_4[1 : 1];
  assign maskRouted_0 = (locked ? maskLocked_0 : maskProposal_0);
  assign maskRouted_1 = (locked ? maskLocked_1 : maskProposal_1);
  assign _zz_1 = {io_inputs_1_valid,io_inputs_0_valid};
  assign _zz_2 = {_zz_1,_zz_1};
  assign _zz_3 = (_zz_2 & (~ _zz_6));
  assign _zz_4 = (_zz_3[3 : 2] | _zz_3[1 : 0]);
  assign maskProposal_0 = _zz_9[0];
  assign maskProposal_1 = _zz_10[0];
  assign io_output_valid = ((io_inputs_0_valid && maskRouted_0) || (io_inputs_1_valid && maskRouted_1));
  assign io_output_payload_addr = (maskRouted_0 ? io_inputs_0_payload_addr : io_inputs_1_payload_addr);
  assign io_output_payload_id = (maskRouted_0 ? io_inputs_0_payload_id : io_inputs_1_payload_id);
  assign io_output_payload_region = (maskRouted_0 ? io_inputs_0_payload_region : io_inputs_1_payload_region);
  assign io_output_payload_len = (maskRouted_0 ? io_inputs_0_payload_len : io_inputs_1_payload_len);
  assign io_output_payload_size = (maskRouted_0 ? io_inputs_0_payload_size : io_inputs_1_payload_size);
  assign io_output_payload_burst = (maskRouted_0 ? io_inputs_0_payload_burst : io_inputs_1_payload_burst);
  assign io_output_payload_lock = (maskRouted_0 ? io_inputs_0_payload_lock : io_inputs_1_payload_lock);
  assign io_output_payload_cache = (maskRouted_0 ? io_inputs_0_payload_cache : io_inputs_1_payload_cache);
  assign io_output_payload_qos = (maskRouted_0 ? io_inputs_0_payload_qos : io_inputs_1_payload_qos);
  assign io_output_payload_prot = (maskRouted_0 ? io_inputs_0_payload_prot : io_inputs_1_payload_prot);
  assign io_output_payload_write = (maskRouted_0 ? io_inputs_0_payload_write : io_inputs_1_payload_write);
  assign io_inputs_0_ready = (maskRouted_0 && io_output_ready);
  assign io_inputs_1_ready = (maskRouted_1 && io_output_ready);
  assign io_chosenOH = {maskRouted_1,maskRouted_0};
  assign _zz_5 = io_chosenOH[1];
  assign io_chosen = _zz_5;
  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      locked <= 1'b0;
      maskLocked_0 <= 1'b0;
      maskLocked_1 <= 1'b1;
    end else begin
      if(io_output_valid)begin
        maskLocked_0 <= maskRouted_0;
        maskLocked_1 <= maskRouted_1;
      end
      if(io_output_valid)begin
        locked <= 1'b1;
      end
      if((io_output_valid && io_output_ready))begin
        locked <= 1'b0;
      end
    end
  end


endmodule

module StreamFifoCC_3_e12a9decc0704226832aec4017b36e8d (
  input               io_push_valid,
  output              io_push_ready,
  input      [1:0]    io_push_payload_id,
  input      [1:0]    io_push_payload_resp,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [1:0]    io_pop_payload_id,
  output     [1:0]    io_pop_payload_resp,
  output     [4:0]    io_pushOccupancy,
  output     [4:0]    io_popOccupancy,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  wire       [4:0]    _zz_12;
  wire       [4:0]    _zz_13;
  reg        [3:0]    _zz_14;
  wire       [4:0]    popToPushGray_buffercc_io_dataOut;
  wire       [4:0]    pushToPopGray_buffercc_io_dataOut;
  wire                _zz_15;
  wire       [4:0]    _zz_16;
  wire       [3:0]    _zz_17;
  wire       [4:0]    _zz_18;
  wire       [3:0]    _zz_19;
  wire       [3:0]    _zz_20;
  wire                _zz_21;
  reg                 _zz_1;
  wire       [4:0]    popToPushGray;
  wire       [4:0]    pushToPopGray;
  reg        [4:0]    pushCC_pushPtr;
  wire       [4:0]    pushCC_pushPtrPlus;
  reg        [4:0]    pushCC_pushPtrGray;
  wire       [4:0]    pushCC_popPtrGray;
  wire                pushCC_full;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  reg        [4:0]    popCC_popPtr;
  wire       [4:0]    popCC_popPtrPlus;
  reg        [4:0]    popCC_popPtrGray;
  wire       [4:0]    popCC_pushPtrGray;
  wire                popCC_empty;
  wire       [4:0]    _zz_6;
  wire       [3:0]    _zz_7;
  wire                _zz_8;
  wire                _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  reg [3:0] ram [0:15];

  assign _zz_15 = (io_push_valid && io_push_ready);
  assign _zz_16 = (pushCC_pushPtrPlus >>> (1'b1));
  assign _zz_17 = pushCC_pushPtr[3:0];
  assign _zz_18 = (popCC_popPtrPlus >>> (1'b1));
  assign _zz_19 = _zz_6[3:0];
  assign _zz_20 = {io_push_payload_resp,io_push_payload_id};
  assign _zz_21 = 1'b1;
  always @ (posedge io_memoryClk) begin
    if(_zz_1) begin
      ram[_zz_17] <= _zz_20;
    end
  end

  always @ (posedge io_systemClk) begin
    if(_zz_21) begin
      _zz_14 <= ram[_zz_19];
    end
  end

  BufferCC_5_e12a9decc0704226832aec4017b36e8d popToPushGray_buffercc (
    .io_initial                 (_zz_12[4:0]                             ), //i
    .io_dataIn                  (popToPushGray[4:0]                      ), //i
    .io_dataOut                 (popToPushGray_buffercc_io_dataOut[4:0]  ), //o
    .io_memoryClk               (io_memoryClk                            ), //i
    .ddrCd_logic_outputReset    (ddrCd_logic_outputReset                 )  //i
  );
  BufferCC_4_e12a9decc0704226832aec4017b36e8d pushToPopGray_buffercc (
    .io_initial                    (_zz_13[4:0]                             ), //i
    .io_dataIn                     (pushToPopGray[4:0]                      ), //i
    .io_dataOut                    (pushToPopGray_buffercc_io_dataOut[4:0]  ), //o
    .io_systemClk                  (io_systemClk                            ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset              )  //i
  );
  always @ (*) begin
    _zz_1 = 1'b0;
    if(_zz_15)begin
      _zz_1 = 1'b1;
    end
  end

  assign pushCC_pushPtrPlus = (pushCC_pushPtr + 5'h01);
  assign _zz_12 = 5'h0;
  assign pushCC_popPtrGray = popToPushGray_buffercc_io_dataOut;
  assign pushCC_full = ((pushCC_pushPtrGray[4 : 3] == (~ pushCC_popPtrGray[4 : 3])) && (pushCC_pushPtrGray[2 : 0] == pushCC_popPtrGray[2 : 0]));
  assign io_push_ready = (! pushCC_full);
  assign _zz_2 = (pushCC_popPtrGray[1] ^ _zz_3);
  assign _zz_3 = (pushCC_popPtrGray[2] ^ _zz_4);
  assign _zz_4 = (pushCC_popPtrGray[3] ^ _zz_5);
  assign _zz_5 = pushCC_popPtrGray[4];
  assign io_pushOccupancy = (pushCC_pushPtr - {_zz_5,{_zz_4,{_zz_3,{_zz_2,(pushCC_popPtrGray[0] ^ _zz_2)}}}});
  assign popCC_popPtrPlus = (popCC_popPtr + 5'h01);
  assign _zz_13 = 5'h0;
  assign popCC_pushPtrGray = pushToPopGray_buffercc_io_dataOut;
  assign popCC_empty = (popCC_popPtrGray == popCC_pushPtrGray);
  assign io_pop_valid = (! popCC_empty);
  assign _zz_6 = ((io_pop_valid && io_pop_ready) ? popCC_popPtrPlus : popCC_popPtr);
  assign _zz_7 = _zz_14;
  assign io_pop_payload_id = _zz_7[1 : 0];
  assign io_pop_payload_resp = _zz_7[3 : 2];
  assign _zz_8 = (popCC_pushPtrGray[1] ^ _zz_9);
  assign _zz_9 = (popCC_pushPtrGray[2] ^ _zz_10);
  assign _zz_10 = (popCC_pushPtrGray[3] ^ _zz_11);
  assign _zz_11 = popCC_pushPtrGray[4];
  assign io_popOccupancy = ({_zz_11,{_zz_10,{_zz_9,{_zz_8,(popCC_pushPtrGray[0] ^ _zz_8)}}}} - popCC_popPtr);
  assign pushToPopGray = pushCC_pushPtrGray;
  assign popToPushGray = popCC_popPtrGray;
  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      pushCC_pushPtr <= 5'h0;
      pushCC_pushPtrGray <= 5'h0;
    end else begin
      if((io_push_valid && io_push_ready))begin
        pushCC_pushPtrGray <= (_zz_16 ^ pushCC_pushPtrPlus);
      end
      if(_zz_15)begin
        pushCC_pushPtr <= pushCC_pushPtrPlus;
      end
    end
  end

  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      popCC_popPtr <= 5'h0;
      popCC_popPtrGray <= 5'h0;
    end else begin
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtrGray <= (_zz_18 ^ popCC_popPtrPlus);
      end
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtr <= popCC_popPtrPlus;
      end
    end
  end


endmodule

module StreamFifoCC_2_e12a9decc0704226832aec4017b36e8d (
  input               io_push_valid,
  output              io_push_ready,
  input      [127:0]  io_push_payload_data,
  input      [15:0]   io_push_payload_strb,
  input               io_push_payload_last,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [127:0]  io_pop_payload_data,
  output     [15:0]   io_pop_payload_strb,
  output              io_pop_payload_last,
  output     [6:0]    io_pushOccupancy,
  output     [6:0]    io_popOccupancy,
  input               io_systemClk,
  input               systemCd_logic_outputReset,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  wire       [6:0]    _zz_16;
  wire       [6:0]    _zz_17;
  reg        [144:0]  _zz_18;
  wire       [6:0]    popToPushGray_buffercc_io_dataOut;
  wire       [6:0]    pushToPopGray_buffercc_io_dataOut;
  wire                _zz_19;
  wire       [6:0]    _zz_20;
  wire       [5:0]    _zz_21;
  wire       [6:0]    _zz_22;
  wire       [5:0]    _zz_23;
  wire       [0:0]    _zz_24;
  wire       [144:0]  _zz_25;
  wire                _zz_26;
  reg                 _zz_1;
  wire       [6:0]    popToPushGray;
  wire       [6:0]    pushToPopGray;
  reg        [6:0]    pushCC_pushPtr;
  wire       [6:0]    pushCC_pushPtrPlus;
  reg        [6:0]    pushCC_pushPtrGray;
  wire       [6:0]    pushCC_popPtrGray;
  wire                pushCC_full;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  wire                _zz_7;
  reg        [6:0]    popCC_popPtr;
  wire       [6:0]    popCC_popPtrPlus;
  reg        [6:0]    popCC_popPtrGray;
  wire       [6:0]    popCC_pushPtrGray;
  wire                popCC_empty;
  wire       [6:0]    _zz_8;
  wire       [144:0]  _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  wire                _zz_12;
  wire                _zz_13;
  wire                _zz_14;
  wire                _zz_15;
  reg [144:0] ram [0:63];

  assign _zz_19 = (io_push_valid && io_push_ready);
  assign _zz_20 = (pushCC_pushPtrPlus >>> (1'b1));
  assign _zz_21 = pushCC_pushPtr[5:0];
  assign _zz_22 = (popCC_popPtrPlus >>> (1'b1));
  assign _zz_23 = _zz_8[5:0];
  assign _zz_24 = _zz_9[144 : 144];
  assign _zz_25 = {io_push_payload_last,{io_push_payload_strb,io_push_payload_data}};
  assign _zz_26 = 1'b1;
  always @ (posedge io_systemClk) begin
    if(_zz_1) begin
      ram[_zz_21] <= _zz_25;
    end
  end

  always @ (posedge io_memoryClk) begin
    if(_zz_26) begin
      _zz_18 <= ram[_zz_23];
    end
  end

  BufferCC_7_e12a9decc0704226832aec4017b36e8d popToPushGray_buffercc (
    .io_initial                    (_zz_16[6:0]                             ), //i
    .io_dataIn                     (popToPushGray[6:0]                      ), //i
    .io_dataOut                    (popToPushGray_buffercc_io_dataOut[6:0]  ), //o
    .io_systemClk                  (io_systemClk                            ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset              )  //i
  );
  BufferCC_6_e12a9decc0704226832aec4017b36e8d pushToPopGray_buffercc (
    .io_initial                 (_zz_17[6:0]                             ), //i
    .io_dataIn                  (pushToPopGray[6:0]                      ), //i
    .io_dataOut                 (pushToPopGray_buffercc_io_dataOut[6:0]  ), //o
    .io_memoryClk               (io_memoryClk                            ), //i
    .ddrCd_logic_outputReset    (ddrCd_logic_outputReset                 )  //i
  );
  always @ (*) begin
    _zz_1 = 1'b0;
    if(_zz_19)begin
      _zz_1 = 1'b1;
    end
  end

  assign pushCC_pushPtrPlus = (pushCC_pushPtr + 7'h01);
  assign _zz_16 = 7'h0;
  assign pushCC_popPtrGray = popToPushGray_buffercc_io_dataOut;
  assign pushCC_full = ((pushCC_pushPtrGray[6 : 5] == (~ pushCC_popPtrGray[6 : 5])) && (pushCC_pushPtrGray[4 : 0] == pushCC_popPtrGray[4 : 0]));
  assign io_push_ready = (! pushCC_full);
  assign _zz_2 = (pushCC_popPtrGray[1] ^ _zz_3);
  assign _zz_3 = (pushCC_popPtrGray[2] ^ _zz_4);
  assign _zz_4 = (pushCC_popPtrGray[3] ^ _zz_5);
  assign _zz_5 = (pushCC_popPtrGray[4] ^ _zz_6);
  assign _zz_6 = (pushCC_popPtrGray[5] ^ _zz_7);
  assign _zz_7 = pushCC_popPtrGray[6];
  assign io_pushOccupancy = (pushCC_pushPtr - {_zz_7,{_zz_6,{_zz_5,{_zz_4,{_zz_3,{_zz_2,(pushCC_popPtrGray[0] ^ _zz_2)}}}}}});
  assign popCC_popPtrPlus = (popCC_popPtr + 7'h01);
  assign _zz_17 = 7'h0;
  assign popCC_pushPtrGray = pushToPopGray_buffercc_io_dataOut;
  assign popCC_empty = (popCC_popPtrGray == popCC_pushPtrGray);
  assign io_pop_valid = (! popCC_empty);
  assign _zz_8 = ((io_pop_valid && io_pop_ready) ? popCC_popPtrPlus : popCC_popPtr);
  assign _zz_9 = _zz_18;
  assign io_pop_payload_data = _zz_9[127 : 0];
  assign io_pop_payload_strb = _zz_9[143 : 128];
  assign io_pop_payload_last = _zz_24[0];
  assign _zz_10 = (popCC_pushPtrGray[1] ^ _zz_11);
  assign _zz_11 = (popCC_pushPtrGray[2] ^ _zz_12);
  assign _zz_12 = (popCC_pushPtrGray[3] ^ _zz_13);
  assign _zz_13 = (popCC_pushPtrGray[4] ^ _zz_14);
  assign _zz_14 = (popCC_pushPtrGray[5] ^ _zz_15);
  assign _zz_15 = popCC_pushPtrGray[6];
  assign io_popOccupancy = ({_zz_15,{_zz_14,{_zz_13,{_zz_12,{_zz_11,{_zz_10,(popCC_pushPtrGray[0] ^ _zz_10)}}}}}} - popCC_popPtr);
  assign pushToPopGray = pushCC_pushPtrGray;
  assign popToPushGray = popCC_popPtrGray;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      pushCC_pushPtr <= 7'h0;
      pushCC_pushPtrGray <= 7'h0;
    end else begin
      if((io_push_valid && io_push_ready))begin
        pushCC_pushPtrGray <= (_zz_20 ^ pushCC_pushPtrPlus);
      end
      if(_zz_19)begin
        pushCC_pushPtr <= pushCC_pushPtrPlus;
      end
    end
  end

  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      popCC_popPtr <= 7'h0;
      popCC_popPtrGray <= 7'h0;
    end else begin
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtrGray <= (_zz_22 ^ popCC_popPtrPlus);
      end
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtr <= popCC_popPtrPlus;
      end
    end
  end


endmodule

module StreamFifoCC_1_e12a9decc0704226832aec4017b36e8d (
  input               io_push_valid,
  output              io_push_ready,
  input      [127:0]  io_push_payload_data,
  input      [1:0]    io_push_payload_id,
  input      [1:0]    io_push_payload_resp,
  input               io_push_payload_last,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [127:0]  io_pop_payload_data,
  output     [1:0]    io_pop_payload_id,
  output     [1:0]    io_pop_payload_resp,
  output              io_pop_payload_last,
  output     [6:0]    io_pushOccupancy,
  output     [6:0]    io_popOccupancy,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  wire       [6:0]    _zz_16;
  wire       [6:0]    _zz_17;
  reg        [132:0]  _zz_18;
  wire       [6:0]    popToPushGray_buffercc_io_dataOut;
  wire       [6:0]    pushToPopGray_buffercc_io_dataOut;
  wire                _zz_19;
  wire       [6:0]    _zz_20;
  wire       [5:0]    _zz_21;
  wire       [6:0]    _zz_22;
  wire       [5:0]    _zz_23;
  wire       [0:0]    _zz_24;
  wire       [132:0]  _zz_25;
  wire                _zz_26;
  reg                 _zz_1;
  wire       [6:0]    popToPushGray;
  wire       [6:0]    pushToPopGray;
  reg        [6:0]    pushCC_pushPtr;
  wire       [6:0]    pushCC_pushPtrPlus;
  reg        [6:0]    pushCC_pushPtrGray;
  wire       [6:0]    pushCC_popPtrGray;
  wire                pushCC_full;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  wire                _zz_7;
  reg        [6:0]    popCC_popPtr;
  wire       [6:0]    popCC_popPtrPlus;
  reg        [6:0]    popCC_popPtrGray;
  wire       [6:0]    popCC_pushPtrGray;
  wire                popCC_empty;
  wire       [6:0]    _zz_8;
  wire       [132:0]  _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  wire                _zz_12;
  wire                _zz_13;
  wire                _zz_14;
  wire                _zz_15;
  reg [132:0] ram [0:63];

  assign _zz_19 = (io_push_valid && io_push_ready);
  assign _zz_20 = (pushCC_pushPtrPlus >>> (1'b1));
  assign _zz_21 = pushCC_pushPtr[5:0];
  assign _zz_22 = (popCC_popPtrPlus >>> (1'b1));
  assign _zz_23 = _zz_8[5:0];
  assign _zz_24 = _zz_9[132 : 132];
  assign _zz_25 = {io_push_payload_last,{io_push_payload_resp,{io_push_payload_id,io_push_payload_data}}};
  assign _zz_26 = 1'b1;
  always @ (posedge io_memoryClk) begin
    if(_zz_1) begin
      ram[_zz_21] <= _zz_25;
    end
  end

  always @ (posedge io_systemClk) begin
    if(_zz_26) begin
      _zz_18 <= ram[_zz_23];
    end
  end

  BufferCC_6_e12a9decc0704226832aec4017b36e8d popToPushGray_buffercc (
    .io_initial                 (_zz_16[6:0]                             ), //i
    .io_dataIn                  (popToPushGray[6:0]                      ), //i
    .io_dataOut                 (popToPushGray_buffercc_io_dataOut[6:0]  ), //o
    .io_memoryClk               (io_memoryClk                            ), //i
    .ddrCd_logic_outputReset    (ddrCd_logic_outputReset                 )  //i
  );
  BufferCC_7_e12a9decc0704226832aec4017b36e8d pushToPopGray_buffercc (
    .io_initial                    (_zz_17[6:0]                             ), //i
    .io_dataIn                     (pushToPopGray[6:0]                      ), //i
    .io_dataOut                    (pushToPopGray_buffercc_io_dataOut[6:0]  ), //o
    .io_systemClk                  (io_systemClk                            ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset              )  //i
  );
  always @ (*) begin
    _zz_1 = 1'b0;
    if(_zz_19)begin
      _zz_1 = 1'b1;
    end
  end

  assign pushCC_pushPtrPlus = (pushCC_pushPtr + 7'h01);
  assign _zz_16 = 7'h0;
  assign pushCC_popPtrGray = popToPushGray_buffercc_io_dataOut;
  assign pushCC_full = ((pushCC_pushPtrGray[6 : 5] == (~ pushCC_popPtrGray[6 : 5])) && (pushCC_pushPtrGray[4 : 0] == pushCC_popPtrGray[4 : 0]));
  assign io_push_ready = (! pushCC_full);
  assign _zz_2 = (pushCC_popPtrGray[1] ^ _zz_3);
  assign _zz_3 = (pushCC_popPtrGray[2] ^ _zz_4);
  assign _zz_4 = (pushCC_popPtrGray[3] ^ _zz_5);
  assign _zz_5 = (pushCC_popPtrGray[4] ^ _zz_6);
  assign _zz_6 = (pushCC_popPtrGray[5] ^ _zz_7);
  assign _zz_7 = pushCC_popPtrGray[6];
  assign io_pushOccupancy = (pushCC_pushPtr - {_zz_7,{_zz_6,{_zz_5,{_zz_4,{_zz_3,{_zz_2,(pushCC_popPtrGray[0] ^ _zz_2)}}}}}});
  assign popCC_popPtrPlus = (popCC_popPtr + 7'h01);
  assign _zz_17 = 7'h0;
  assign popCC_pushPtrGray = pushToPopGray_buffercc_io_dataOut;
  assign popCC_empty = (popCC_popPtrGray == popCC_pushPtrGray);
  assign io_pop_valid = (! popCC_empty);
  assign _zz_8 = ((io_pop_valid && io_pop_ready) ? popCC_popPtrPlus : popCC_popPtr);
  assign _zz_9 = _zz_18;
  assign io_pop_payload_data = _zz_9[127 : 0];
  assign io_pop_payload_id = _zz_9[129 : 128];
  assign io_pop_payload_resp = _zz_9[131 : 130];
  assign io_pop_payload_last = _zz_24[0];
  assign _zz_10 = (popCC_pushPtrGray[1] ^ _zz_11);
  assign _zz_11 = (popCC_pushPtrGray[2] ^ _zz_12);
  assign _zz_12 = (popCC_pushPtrGray[3] ^ _zz_13);
  assign _zz_13 = (popCC_pushPtrGray[4] ^ _zz_14);
  assign _zz_14 = (popCC_pushPtrGray[5] ^ _zz_15);
  assign _zz_15 = popCC_pushPtrGray[6];
  assign io_popOccupancy = ({_zz_15,{_zz_14,{_zz_13,{_zz_12,{_zz_11,{_zz_10,(popCC_pushPtrGray[0] ^ _zz_10)}}}}}} - popCC_popPtr);
  assign pushToPopGray = pushCC_pushPtrGray;
  assign popToPushGray = popCC_popPtrGray;
  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      pushCC_pushPtr <= 7'h0;
      pushCC_pushPtrGray <= 7'h0;
    end else begin
      if((io_push_valid && io_push_ready))begin
        pushCC_pushPtrGray <= (_zz_20 ^ pushCC_pushPtrPlus);
      end
      if(_zz_19)begin
        pushCC_pushPtr <= pushCC_pushPtrPlus;
      end
    end
  end

  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      popCC_popPtr <= 7'h0;
      popCC_popPtrGray <= 7'h0;
    end else begin
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtrGray <= (_zz_22 ^ popCC_popPtrPlus);
      end
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtr <= popCC_popPtrPlus;
      end
    end
  end


endmodule

module StreamFifoCC_e12a9decc0704226832aec4017b36e8d (
  input               io_push_valid,
  output              io_push_ready,
  input      [31:0]   io_push_payload_addr,
  input      [1:0]    io_push_payload_id,
  input      [3:0]    io_push_payload_region,
  input      [7:0]    io_push_payload_len,
  input      [2:0]    io_push_payload_size,
  input      [1:0]    io_push_payload_burst,
  input      [0:0]    io_push_payload_lock,
  input      [3:0]    io_push_payload_cache,
  input      [3:0]    io_push_payload_qos,
  input      [2:0]    io_push_payload_prot,
  input               io_push_payload_write,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [31:0]   io_pop_payload_addr,
  output     [1:0]    io_pop_payload_id,
  output     [3:0]    io_pop_payload_region,
  output     [7:0]    io_pop_payload_len,
  output     [2:0]    io_pop_payload_size,
  output     [1:0]    io_pop_payload_burst,
  output     [0:0]    io_pop_payload_lock,
  output     [3:0]    io_pop_payload_cache,
  output     [3:0]    io_pop_payload_qos,
  output     [2:0]    io_pop_payload_prot,
  output              io_pop_payload_write,
  output     [4:0]    io_pushOccupancy,
  output     [4:0]    io_popOccupancy,
  input               io_systemClk,
  input               systemCd_logic_outputReset,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  wire       [4:0]    _zz_12;
  wire       [4:0]    _zz_13;
  reg        [63:0]   _zz_14;
  wire       [4:0]    popToPushGray_buffercc_io_dataOut;
  wire       [4:0]    pushToPopGray_buffercc_io_dataOut;
  wire                _zz_15;
  wire       [4:0]    _zz_16;
  wire       [3:0]    _zz_17;
  wire       [4:0]    _zz_18;
  wire       [3:0]    _zz_19;
  wire       [0:0]    _zz_20;
  wire       [63:0]   _zz_21;
  wire                _zz_22;
  reg                 _zz_1;
  wire       [4:0]    popToPushGray;
  wire       [4:0]    pushToPopGray;
  reg        [4:0]    pushCC_pushPtr;
  wire       [4:0]    pushCC_pushPtrPlus;
  reg        [4:0]    pushCC_pushPtrGray;
  wire       [4:0]    pushCC_popPtrGray;
  wire                pushCC_full;
  wire                _zz_2;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  reg        [4:0]    popCC_popPtr;
  wire       [4:0]    popCC_popPtrPlus;
  reg        [4:0]    popCC_popPtrGray;
  wire       [4:0]    popCC_pushPtrGray;
  wire                popCC_empty;
  wire       [4:0]    _zz_6;
  wire       [63:0]   _zz_7;
  wire                _zz_8;
  wire                _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  reg [63:0] ram [0:15];

  assign _zz_15 = (io_push_valid && io_push_ready);
  assign _zz_16 = (pushCC_pushPtrPlus >>> (1'b1));
  assign _zz_17 = pushCC_pushPtr[3:0];
  assign _zz_18 = (popCC_popPtrPlus >>> (1'b1));
  assign _zz_19 = _zz_6[3:0];
  assign _zz_20 = _zz_7[63 : 63];
  assign _zz_21 = {io_push_payload_write,{io_push_payload_prot,{io_push_payload_qos,{io_push_payload_cache,{io_push_payload_lock,{io_push_payload_burst,{io_push_payload_size,{io_push_payload_len,{io_push_payload_region,{io_push_payload_id,io_push_payload_addr}}}}}}}}}};
  assign _zz_22 = 1'b1;
  always @ (posedge io_systemClk) begin
    if(_zz_1) begin
      ram[_zz_17] <= _zz_21;
    end
  end

  always @ (posedge io_memoryClk) begin
    if(_zz_22) begin
      _zz_14 <= ram[_zz_19];
    end
  end

  BufferCC_4_e12a9decc0704226832aec4017b36e8d popToPushGray_buffercc (
    .io_initial                    (_zz_12[4:0]                             ), //i
    .io_dataIn                     (popToPushGray[4:0]                      ), //i
    .io_dataOut                    (popToPushGray_buffercc_io_dataOut[4:0]  ), //o
    .io_systemClk                  (io_systemClk                            ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset              )  //i
  );
  BufferCC_5_e12a9decc0704226832aec4017b36e8d pushToPopGray_buffercc (
    .io_initial                 (_zz_13[4:0]                             ), //i
    .io_dataIn                  (pushToPopGray[4:0]                      ), //i
    .io_dataOut                 (pushToPopGray_buffercc_io_dataOut[4:0]  ), //o
    .io_memoryClk               (io_memoryClk                            ), //i
    .ddrCd_logic_outputReset    (ddrCd_logic_outputReset                 )  //i
  );
  always @ (*) begin
    _zz_1 = 1'b0;
    if(_zz_15)begin
      _zz_1 = 1'b1;
    end
  end

  assign pushCC_pushPtrPlus = (pushCC_pushPtr + 5'h01);
  assign _zz_12 = 5'h0;
  assign pushCC_popPtrGray = popToPushGray_buffercc_io_dataOut;
  assign pushCC_full = ((pushCC_pushPtrGray[4 : 3] == (~ pushCC_popPtrGray[4 : 3])) && (pushCC_pushPtrGray[2 : 0] == pushCC_popPtrGray[2 : 0]));
  assign io_push_ready = (! pushCC_full);
  assign _zz_2 = (pushCC_popPtrGray[1] ^ _zz_3);
  assign _zz_3 = (pushCC_popPtrGray[2] ^ _zz_4);
  assign _zz_4 = (pushCC_popPtrGray[3] ^ _zz_5);
  assign _zz_5 = pushCC_popPtrGray[4];
  assign io_pushOccupancy = (pushCC_pushPtr - {_zz_5,{_zz_4,{_zz_3,{_zz_2,(pushCC_popPtrGray[0] ^ _zz_2)}}}});
  assign popCC_popPtrPlus = (popCC_popPtr + 5'h01);
  assign _zz_13 = 5'h0;
  assign popCC_pushPtrGray = pushToPopGray_buffercc_io_dataOut;
  assign popCC_empty = (popCC_popPtrGray == popCC_pushPtrGray);
  assign io_pop_valid = (! popCC_empty);
  assign _zz_6 = ((io_pop_valid && io_pop_ready) ? popCC_popPtrPlus : popCC_popPtr);
  assign _zz_7 = _zz_14;
  assign io_pop_payload_addr = _zz_7[31 : 0];
  assign io_pop_payload_id = _zz_7[33 : 32];
  assign io_pop_payload_region = _zz_7[37 : 34];
  assign io_pop_payload_len = _zz_7[45 : 38];
  assign io_pop_payload_size = _zz_7[48 : 46];
  assign io_pop_payload_burst = _zz_7[50 : 49];
  assign io_pop_payload_lock = _zz_7[51 : 51];
  assign io_pop_payload_cache = _zz_7[55 : 52];
  assign io_pop_payload_qos = _zz_7[59 : 56];
  assign io_pop_payload_prot = _zz_7[62 : 60];
  assign io_pop_payload_write = _zz_20[0];
  assign _zz_8 = (popCC_pushPtrGray[1] ^ _zz_9);
  assign _zz_9 = (popCC_pushPtrGray[2] ^ _zz_10);
  assign _zz_10 = (popCC_pushPtrGray[3] ^ _zz_11);
  assign _zz_11 = popCC_pushPtrGray[4];
  assign io_popOccupancy = ({_zz_11,{_zz_10,{_zz_9,{_zz_8,(popCC_pushPtrGray[0] ^ _zz_8)}}}} - popCC_popPtr);
  assign pushToPopGray = pushCC_pushPtrGray;
  assign popToPushGray = popCC_popPtrGray;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      pushCC_pushPtr <= 5'h0;
      pushCC_pushPtrGray <= 5'h0;
    end else begin
      if((io_push_valid && io_push_ready))begin
        pushCC_pushPtrGray <= (_zz_16 ^ pushCC_pushPtrPlus);
      end
      if(_zz_15)begin
        pushCC_pushPtr <= pushCC_pushPtrPlus;
      end
    end
  end

  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      popCC_popPtr <= 5'h0;
      popCC_popPtrGray <= 5'h0;
    end else begin
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtrGray <= (_zz_18 ^ popCC_popPtrPlus);
      end
      if((io_pop_valid && io_pop_ready))begin
        popCC_popPtr <= popCC_popPtrPlus;
      end
    end
  end


endmodule

module StreamFifo_3_e12a9decc0704226832aec4017b36e8d (
  input               io_push_valid,
  output              io_push_ready,
  input      [5:0]    io_push_payload_context,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [5:0]    io_pop_payload_context,
  input               io_flush,
  output     [3:0]    io_occupancy,
  output     [3:0]    io_availability,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg        [5:0]    _zz_3;
  wire       [0:0]    _zz_4;
  wire       [2:0]    _zz_5;
  wire       [0:0]    _zz_6;
  wire       [2:0]    _zz_7;
  wire       [2:0]    _zz_8;
  wire                _zz_9;
  reg                 _zz_1;
  reg                 logic_pushPtr_willIncrement;
  reg                 logic_pushPtr_willClear;
  reg        [2:0]    logic_pushPtr_valueNext;
  reg        [2:0]    logic_pushPtr_value;
  wire                logic_pushPtr_willOverflowIfInc;
  wire                logic_pushPtr_willOverflow;
  reg                 logic_popPtr_willIncrement;
  reg                 logic_popPtr_willClear;
  reg        [2:0]    logic_popPtr_valueNext;
  reg        [2:0]    logic_popPtr_value;
  wire                logic_popPtr_willOverflowIfInc;
  wire                logic_popPtr_willOverflow;
  wire                logic_ptrMatch;
  reg                 logic_risingOccupancy;
  wire                logic_pushing;
  wire                logic_popping;
  wire                logic_empty;
  wire                logic_full;
  reg                 _zz_2;
  wire       [2:0]    logic_ptrDif;
  reg [5:0] logic_ram [0:7];

  assign _zz_4 = logic_pushPtr_willIncrement;
  assign _zz_5 = {2'd0, _zz_4};
  assign _zz_6 = logic_popPtr_willIncrement;
  assign _zz_7 = {2'd0, _zz_6};
  assign _zz_8 = (logic_popPtr_value - logic_pushPtr_value);
  assign _zz_9 = 1'b1;
  always @ (posedge io_systemClk) begin
    if(_zz_9) begin
      _zz_3 <= logic_ram[logic_popPtr_valueNext];
    end
  end

  always @ (posedge io_systemClk) begin
    if(_zz_1) begin
      logic_ram[logic_pushPtr_value] <= io_push_payload_context;
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(logic_pushing)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willIncrement = 1'b0;
    if(logic_pushing)begin
      logic_pushPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_pushPtr_willClear = 1'b1;
    end
  end

  assign logic_pushPtr_willOverflowIfInc = (logic_pushPtr_value == (3'b111));
  assign logic_pushPtr_willOverflow = (logic_pushPtr_willOverflowIfInc && logic_pushPtr_willIncrement);
  always @ (*) begin
    logic_pushPtr_valueNext = (logic_pushPtr_value + _zz_5);
    if(logic_pushPtr_willClear)begin
      logic_pushPtr_valueNext = (3'b000);
    end
  end

  always @ (*) begin
    logic_popPtr_willIncrement = 1'b0;
    if(logic_popping)begin
      logic_popPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_popPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_popPtr_willClear = 1'b1;
    end
  end

  assign logic_popPtr_willOverflowIfInc = (logic_popPtr_value == (3'b111));
  assign logic_popPtr_willOverflow = (logic_popPtr_willOverflowIfInc && logic_popPtr_willIncrement);
  always @ (*) begin
    logic_popPtr_valueNext = (logic_popPtr_value + _zz_7);
    if(logic_popPtr_willClear)begin
      logic_popPtr_valueNext = (3'b000);
    end
  end

  assign logic_ptrMatch = (logic_pushPtr_value == logic_popPtr_value);
  assign logic_pushing = (io_push_valid && io_push_ready);
  assign logic_popping = (io_pop_valid && io_pop_ready);
  assign logic_empty = (logic_ptrMatch && (! logic_risingOccupancy));
  assign logic_full = (logic_ptrMatch && logic_risingOccupancy);
  assign io_push_ready = (! logic_full);
  assign io_pop_valid = ((! logic_empty) && (! (_zz_2 && (! logic_full))));
  assign io_pop_payload_context = _zz_3[5 : 0];
  assign logic_ptrDif = (logic_pushPtr_value - logic_popPtr_value);
  assign io_occupancy = {(logic_risingOccupancy && logic_ptrMatch),logic_ptrDif};
  assign io_availability = {((! logic_risingOccupancy) && logic_ptrMatch),_zz_8};
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      logic_pushPtr_value <= (3'b000);
      logic_popPtr_value <= (3'b000);
      logic_risingOccupancy <= 1'b0;
      _zz_2 <= 1'b0;
    end else begin
      logic_pushPtr_value <= logic_pushPtr_valueNext;
      logic_popPtr_value <= logic_popPtr_valueNext;
      _zz_2 <= (logic_popPtr_valueNext == logic_pushPtr_value);
      if((logic_pushing != logic_popping))begin
        logic_risingOccupancy <= logic_pushing;
      end
      if(io_flush)begin
        logic_risingOccupancy <= 1'b0;
      end
    end
  end


endmodule

module StreamFork_2_e12a9decc0704226832aec4017b36e8d (
  input               io_input_valid,
  output reg          io_input_ready,
  input               io_input_payload_last,
  input      [0:0]    io_input_payload_fragment_opcode,
  input      [31:0]   io_input_payload_fragment_address,
  input      [4:0]    io_input_payload_fragment_length,
  input      [127:0]  io_input_payload_fragment_data,
  input      [15:0]   io_input_payload_fragment_mask,
  input      [5:0]    io_input_payload_fragment_context,
  output              io_outputs_0_valid,
  input               io_outputs_0_ready,
  output              io_outputs_0_payload_last,
  output     [0:0]    io_outputs_0_payload_fragment_opcode,
  output     [31:0]   io_outputs_0_payload_fragment_address,
  output     [4:0]    io_outputs_0_payload_fragment_length,
  output     [127:0]  io_outputs_0_payload_fragment_data,
  output     [15:0]   io_outputs_0_payload_fragment_mask,
  output     [5:0]    io_outputs_0_payload_fragment_context,
  output              io_outputs_1_valid,
  input               io_outputs_1_ready,
  output              io_outputs_1_payload_last,
  output     [0:0]    io_outputs_1_payload_fragment_opcode,
  output     [31:0]   io_outputs_1_payload_fragment_address,
  output     [4:0]    io_outputs_1_payload_fragment_length,
  output     [127:0]  io_outputs_1_payload_fragment_data,
  output     [15:0]   io_outputs_1_payload_fragment_mask,
  output     [5:0]    io_outputs_1_payload_fragment_context,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg                 _zz_1;
  reg                 _zz_2;

  always @ (*) begin
    io_input_ready = 1'b1;
    if(((! io_outputs_0_ready) && _zz_1))begin
      io_input_ready = 1'b0;
    end
    if(((! io_outputs_1_ready) && _zz_2))begin
      io_input_ready = 1'b0;
    end
  end

  assign io_outputs_0_valid = (io_input_valid && _zz_1);
  assign io_outputs_0_payload_last = io_input_payload_last;
  assign io_outputs_0_payload_fragment_opcode = io_input_payload_fragment_opcode;
  assign io_outputs_0_payload_fragment_address = io_input_payload_fragment_address;
  assign io_outputs_0_payload_fragment_length = io_input_payload_fragment_length;
  assign io_outputs_0_payload_fragment_data = io_input_payload_fragment_data;
  assign io_outputs_0_payload_fragment_mask = io_input_payload_fragment_mask;
  assign io_outputs_0_payload_fragment_context = io_input_payload_fragment_context;
  assign io_outputs_1_valid = (io_input_valid && _zz_2);
  assign io_outputs_1_payload_last = io_input_payload_last;
  assign io_outputs_1_payload_fragment_opcode = io_input_payload_fragment_opcode;
  assign io_outputs_1_payload_fragment_address = io_input_payload_fragment_address;
  assign io_outputs_1_payload_fragment_length = io_input_payload_fragment_length;
  assign io_outputs_1_payload_fragment_data = io_input_payload_fragment_data;
  assign io_outputs_1_payload_fragment_mask = io_input_payload_fragment_mask;
  assign io_outputs_1_payload_fragment_context = io_input_payload_fragment_context;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      _zz_1 <= 1'b1;
      _zz_2 <= 1'b1;
    end else begin
      if((io_outputs_0_valid && io_outputs_0_ready))begin
        _zz_1 <= 1'b0;
      end
      if((io_outputs_1_valid && io_outputs_1_ready))begin
        _zz_2 <= 1'b0;
      end
      if(io_input_ready)begin
        _zz_1 <= 1'b1;
        _zz_2 <= 1'b1;
      end
    end
  end


endmodule

module StreamArbiter_e12a9decc0704226832aec4017b36e8d (
  input               io_inputs_0_valid,
  output              io_inputs_0_ready,
  input               io_inputs_0_payload_last,
  input      [0:0]    io_inputs_0_payload_fragment_source,
  input      [0:0]    io_inputs_0_payload_fragment_opcode,
  input      [31:0]   io_inputs_0_payload_fragment_address,
  input      [4:0]    io_inputs_0_payload_fragment_length,
  input      [31:0]   io_inputs_0_payload_fragment_data,
  input      [3:0]    io_inputs_0_payload_fragment_mask,
  input      [0:0]    io_inputs_0_payload_fragment_context,
  input               io_inputs_1_valid,
  output              io_inputs_1_ready,
  input               io_inputs_1_payload_last,
  input      [0:0]    io_inputs_1_payload_fragment_source,
  input      [0:0]    io_inputs_1_payload_fragment_opcode,
  input      [31:0]   io_inputs_1_payload_fragment_address,
  input      [4:0]    io_inputs_1_payload_fragment_length,
  input      [31:0]   io_inputs_1_payload_fragment_data,
  input      [3:0]    io_inputs_1_payload_fragment_mask,
  input      [0:0]    io_inputs_1_payload_fragment_context,
  output              io_output_valid,
  input               io_output_ready,
  output              io_output_payload_last,
  output     [0:0]    io_output_payload_fragment_source,
  output     [0:0]    io_output_payload_fragment_opcode,
  output     [31:0]   io_output_payload_fragment_address,
  output     [4:0]    io_output_payload_fragment_length,
  output     [31:0]   io_output_payload_fragment_data,
  output     [3:0]    io_output_payload_fragment_mask,
  output     [0:0]    io_output_payload_fragment_context,
  output     [0:0]    io_chosen,
  output     [1:0]    io_chosenOH,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  wire       [1:0]    _zz_3;
  wire       [1:0]    _zz_4;
  reg                 locked;
  wire                maskProposal_0;
  wire                maskProposal_1;
  reg                 maskLocked_0;
  reg                 maskLocked_1;
  wire                maskRouted_0;
  wire                maskRouted_1;
  wire       [1:0]    _zz_1;
  wire                _zz_2;

  assign _zz_3 = (_zz_1 & (~ _zz_4));
  assign _zz_4 = (_zz_1 - (2'b01));
  assign maskRouted_0 = (locked ? maskLocked_0 : maskProposal_0);
  assign maskRouted_1 = (locked ? maskLocked_1 : maskProposal_1);
  assign _zz_1 = {io_inputs_1_valid,io_inputs_0_valid};
  assign maskProposal_0 = io_inputs_0_valid;
  assign maskProposal_1 = _zz_3[1];
  assign io_output_valid = ((io_inputs_0_valid && maskRouted_0) || (io_inputs_1_valid && maskRouted_1));
  assign io_output_payload_last = (maskRouted_0 ? io_inputs_0_payload_last : io_inputs_1_payload_last);
  assign io_output_payload_fragment_source = (maskRouted_0 ? io_inputs_0_payload_fragment_source : io_inputs_1_payload_fragment_source);
  assign io_output_payload_fragment_opcode = (maskRouted_0 ? io_inputs_0_payload_fragment_opcode : io_inputs_1_payload_fragment_opcode);
  assign io_output_payload_fragment_address = (maskRouted_0 ? io_inputs_0_payload_fragment_address : io_inputs_1_payload_fragment_address);
  assign io_output_payload_fragment_length = (maskRouted_0 ? io_inputs_0_payload_fragment_length : io_inputs_1_payload_fragment_length);
  assign io_output_payload_fragment_data = (maskRouted_0 ? io_inputs_0_payload_fragment_data : io_inputs_1_payload_fragment_data);
  assign io_output_payload_fragment_mask = (maskRouted_0 ? io_inputs_0_payload_fragment_mask : io_inputs_1_payload_fragment_mask);
  assign io_output_payload_fragment_context = (maskRouted_0 ? io_inputs_0_payload_fragment_context : io_inputs_1_payload_fragment_context);
  assign io_inputs_0_ready = (maskRouted_0 && io_output_ready);
  assign io_inputs_1_ready = (maskRouted_1 && io_output_ready);
  assign io_chosenOH = {maskRouted_1,maskRouted_0};
  assign _zz_2 = io_chosenOH[1];
  assign io_chosen = _zz_2;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      locked <= 1'b0;
    end else begin
      if(io_output_valid)begin
        locked <= 1'b1;
      end
      if(((io_output_valid && io_output_ready) && io_output_payload_last))begin
        locked <= 1'b0;
      end
    end
  end

  always @ (posedge io_systemClk) begin
    if(io_output_valid)begin
      maskLocked_0 <= maskRouted_0;
      maskLocked_1 <= maskRouted_1;
    end
  end


endmodule

module FlowCCByToggle_e12a9decc0704226832aec4017b36e8d (
  input               io_input_valid,
  input               io_input_payload_last,
  input      [0:0]    io_input_payload_fragment,
  output              io_output_valid,
  output              io_output_payload_last,
  output     [0:0]    io_output_payload_fragment,
  input               jtagCtrl_tck,
  input               io_systemClk,
  input               debugCd_logic_outputReset
);
  wire                inputArea_target_buffercc_io_dataOut;
  wire                outHitSignal;
  reg                 inputArea_target = 0;
  reg                 inputArea_data_last;
  reg        [0:0]    inputArea_data_fragment;
  wire                outputArea_target;
  reg                 outputArea_hit;
  wire                outputArea_flow_valid;
  wire                outputArea_flow_payload_last;
  wire       [0:0]    outputArea_flow_payload_fragment;
  reg                 outputArea_flow_regNext_valid;
  reg                 outputArea_flow_regNext_payload_last;
  reg        [0:0]    outputArea_flow_regNext_payload_fragment;

  BufferCC_3_e12a9decc0704226832aec4017b36e8d inputArea_target_buffercc (
    .io_dataIn                    (inputArea_target                      ), //i
    .io_dataOut                   (inputArea_target_buffercc_io_dataOut  ), //o
    .io_systemClk                 (io_systemClk                          ), //i
    .debugCd_logic_outputReset    (debugCd_logic_outputReset             )  //i
  );
  assign outputArea_target = inputArea_target_buffercc_io_dataOut;
  assign outputArea_flow_valid = (outputArea_target != outputArea_hit);
  assign outputArea_flow_payload_last = inputArea_data_last;
  assign outputArea_flow_payload_fragment = inputArea_data_fragment;
  assign io_output_valid = outputArea_flow_regNext_valid;
  assign io_output_payload_last = outputArea_flow_regNext_payload_last;
  assign io_output_payload_fragment = outputArea_flow_regNext_payload_fragment;
  always @ (posedge jtagCtrl_tck) begin
    if(io_input_valid)begin
      inputArea_target <= (! inputArea_target);
      inputArea_data_last <= io_input_payload_last;
      inputArea_data_fragment <= io_input_payload_fragment;
    end
  end

  always @ (posedge io_systemClk) begin
    outputArea_hit <= outputArea_target;
    outputArea_flow_regNext_payload_last <= outputArea_flow_payload_last;
    outputArea_flow_regNext_payload_fragment <= outputArea_flow_payload_fragment;
  end

  always @ (posedge io_systemClk) begin
    if(debugCd_logic_outputReset) begin
      outputArea_flow_regNext_valid <= 1'b0;
    end else begin
      outputArea_flow_regNext_valid <= outputArea_flow_valid;
    end
  end


endmodule

module DataCache_e12a9decc0704226832aec4017b36e8d (
  input               io_cpu_execute_isValid,
  input      [31:0]   io_cpu_execute_address,
  input               io_cpu_execute_args_wr,
  input      [31:0]   io_cpu_execute_args_data,
  input      [1:0]    io_cpu_execute_args_size,
  input               io_cpu_memory_isValid,
  input               io_cpu_memory_isStuck,
  input               io_cpu_memory_isRemoved,
  output              io_cpu_memory_isWrite,
  input      [31:0]   io_cpu_memory_address,
  output              io_cpu_memory_mmuBus_cmd_isValid,
  output     [31:0]   io_cpu_memory_mmuBus_cmd_virtualAddress,
  output              io_cpu_memory_mmuBus_cmd_bypassTranslation,
  input      [31:0]   io_cpu_memory_mmuBus_rsp_physicalAddress,
  input               io_cpu_memory_mmuBus_rsp_isIoAccess,
  input               io_cpu_memory_mmuBus_rsp_allowRead,
  input               io_cpu_memory_mmuBus_rsp_allowWrite,
  input               io_cpu_memory_mmuBus_rsp_allowExecute,
  input               io_cpu_memory_mmuBus_rsp_exception,
  input               io_cpu_memory_mmuBus_rsp_refilling,
  output              io_cpu_memory_mmuBus_end,
  input               io_cpu_memory_mmuBus_busy,
  input               io_cpu_writeBack_isValid,
  input               io_cpu_writeBack_isStuck,
  input               io_cpu_writeBack_isUser,
  output reg          io_cpu_writeBack_haltIt,
  output              io_cpu_writeBack_isWrite,
  output reg [31:0]   io_cpu_writeBack_data,
  input      [31:0]   io_cpu_writeBack_address,
  output              io_cpu_writeBack_mmuException,
  output              io_cpu_writeBack_unalignedAccess,
  output reg          io_cpu_writeBack_accessError,
  output reg          io_cpu_redo,
  input               io_cpu_flush_valid,
  output reg          io_cpu_flush_ready,
  output reg          io_mem_cmd_valid,
  input               io_mem_cmd_ready,
  output reg          io_mem_cmd_payload_wr,
  output reg [31:0]   io_mem_cmd_payload_address,
  output     [31:0]   io_mem_cmd_payload_data,
  output     [3:0]    io_mem_cmd_payload_mask,
  output reg [2:0]    io_mem_cmd_payload_length,
  output reg          io_mem_cmd_payload_last,
  input               io_mem_rsp_valid,
  input      [31:0]   io_mem_rsp_payload_data,
  input               io_mem_rsp_payload_error,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg        [21:0]   _zz_10;
  reg        [31:0]   _zz_11;
  wire                _zz_12;
  wire                _zz_13;
  wire                _zz_14;
  wire                _zz_15;
  wire                _zz_16;
  wire       [0:0]    _zz_17;
  wire       [0:0]    _zz_18;
  wire       [0:0]    _zz_19;
  wire       [2:0]    _zz_20;
  wire       [1:0]    _zz_21;
  wire       [21:0]   _zz_22;
  reg                 _zz_1;
  reg                 _zz_2;
  wire                haltCpu;
  reg                 tagsReadCmd_valid;
  reg        [6:0]    tagsReadCmd_payload;
  reg                 tagsWriteCmd_valid;
  reg        [0:0]    tagsWriteCmd_payload_way;
  reg        [6:0]    tagsWriteCmd_payload_address;
  reg                 tagsWriteCmd_payload_data_valid;
  reg                 tagsWriteCmd_payload_data_error;
  reg        [19:0]   tagsWriteCmd_payload_data_address;
  reg                 tagsWriteLastCmd_valid;
  reg        [0:0]    tagsWriteLastCmd_payload_way;
  reg        [6:0]    tagsWriteLastCmd_payload_address;
  reg                 tagsWriteLastCmd_payload_data_valid;
  reg                 tagsWriteLastCmd_payload_data_error;
  reg        [19:0]   tagsWriteLastCmd_payload_data_address;
  reg                 dataReadCmd_valid;
  reg        [9:0]    dataReadCmd_payload;
  reg                 dataWriteCmd_valid;
  reg        [0:0]    dataWriteCmd_payload_way;
  reg        [9:0]    dataWriteCmd_payload_address;
  reg        [31:0]   dataWriteCmd_payload_data;
  reg        [3:0]    dataWriteCmd_payload_mask;
  wire                _zz_3;
  wire                ways_0_tagsReadRsp_valid;
  wire                ways_0_tagsReadRsp_error;
  wire       [19:0]   ways_0_tagsReadRsp_address;
  wire       [21:0]   _zz_4;
  wire                _zz_5;
  wire       [31:0]   ways_0_dataReadRsp;
  reg        [3:0]    _zz_6;
  wire       [3:0]    stage0_mask;
  wire       [0:0]    stage0_colisions;
  reg                 stageA_request_wr;
  reg        [31:0]   stageA_request_data;
  reg        [1:0]    stageA_request_size;
  reg        [3:0]    stageA_mask;
  wire                stageA_wayHits_0;
  reg        [0:0]    stage0_colisions_regNextWhen;
  wire       [0:0]    _zz_7;
  wire       [0:0]    stageA_colisions;
  reg                 stageB_request_wr;
  reg        [31:0]   stageB_request_data;
  reg        [1:0]    stageB_request_size;
  reg                 stageB_mmuRspFreeze;
  reg        [31:0]   stageB_mmuRsp_physicalAddress;
  reg                 stageB_mmuRsp_isIoAccess;
  reg                 stageB_mmuRsp_allowRead;
  reg                 stageB_mmuRsp_allowWrite;
  reg                 stageB_mmuRsp_allowExecute;
  reg                 stageB_mmuRsp_exception;
  reg                 stageB_mmuRsp_refilling;
  reg                 stageB_tagsReadRsp_0_valid;
  reg                 stageB_tagsReadRsp_0_error;
  reg        [19:0]   stageB_tagsReadRsp_0_address;
  reg        [31:0]   stageB_dataReadRsp_0;
  wire       [0:0]    _zz_8;
  reg        [0:0]    stageB_waysHits;
  wire                stageB_waysHit;
  wire       [31:0]   stageB_dataMux;
  reg        [3:0]    stageB_mask;
  reg        [0:0]    stageB_colisions;
  reg                 stageB_loaderValid;
  reg                 stageB_flusher_valid;
  reg                 stageB_flusher_start;
  wire       [31:0]   stageB_requestDataBypass;
  wire                stageB_isAmo;
  reg                 stageB_memCmdSent;
  wire       [0:0]    _zz_9;
  reg                 loader_valid;
  reg                 loader_counter_willIncrement;
  wire                loader_counter_willClear;
  reg        [2:0]    loader_counter_valueNext;
  reg        [2:0]    loader_counter_value;
  wire                loader_counter_willOverflowIfInc;
  wire                loader_counter_willOverflow;
  reg        [0:0]    loader_waysAllocator;
  reg                 loader_error;
  reg [21:0] ways_0_tags [0:127];
  reg [7:0] ways_0_data_symbol0 [0:1023];
  reg [7:0] ways_0_data_symbol1 [0:1023];
  reg [7:0] ways_0_data_symbol2 [0:1023];
  reg [7:0] ways_0_data_symbol3 [0:1023];
  reg [7:0] _zz_23;
  reg [7:0] _zz_24;
  reg [7:0] _zz_25;
  reg [7:0] _zz_26;

  assign _zz_12 = (io_cpu_execute_isValid && (! io_cpu_memory_isStuck));
  assign _zz_13 = (((stageB_mmuRsp_refilling || io_cpu_writeBack_accessError) || io_cpu_writeBack_mmuException) || io_cpu_writeBack_unalignedAccess);
  assign _zz_14 = (stageB_waysHit || (stageB_request_wr && (! stageB_isAmo)));
  assign _zz_15 = (loader_valid && io_mem_rsp_valid);
  assign _zz_16 = (stageB_mmuRsp_physicalAddress[11 : 5] != 7'h7f);
  assign _zz_17 = _zz_4[0 : 0];
  assign _zz_18 = _zz_4[1 : 1];
  assign _zz_19 = loader_counter_willIncrement;
  assign _zz_20 = {2'd0, _zz_19};
  assign _zz_21 = {loader_waysAllocator,loader_waysAllocator[0]};
  assign _zz_22 = {tagsWriteCmd_payload_data_address,{tagsWriteCmd_payload_data_error,tagsWriteCmd_payload_data_valid}};
  always @ (posedge io_systemClk) begin
    if(_zz_3) begin
      _zz_10 <= ways_0_tags[tagsReadCmd_payload];
    end
  end

  always @ (posedge io_systemClk) begin
    if(_zz_2) begin
      ways_0_tags[tagsWriteCmd_payload_address] <= _zz_22;
    end
  end

  always @ (*) begin
    _zz_11 = {_zz_26, _zz_25, _zz_24, _zz_23};
  end
  always @ (posedge io_systemClk) begin
    if(_zz_5) begin
      _zz_23 <= ways_0_data_symbol0[dataReadCmd_payload];
      _zz_24 <= ways_0_data_symbol1[dataReadCmd_payload];
      _zz_25 <= ways_0_data_symbol2[dataReadCmd_payload];
      _zz_26 <= ways_0_data_symbol3[dataReadCmd_payload];
    end
  end

  always @ (posedge io_systemClk) begin
    if(dataWriteCmd_payload_mask[0] && _zz_1) begin
      ways_0_data_symbol0[dataWriteCmd_payload_address] <= dataWriteCmd_payload_data[7 : 0];
    end
    if(dataWriteCmd_payload_mask[1] && _zz_1) begin
      ways_0_data_symbol1[dataWriteCmd_payload_address] <= dataWriteCmd_payload_data[15 : 8];
    end
    if(dataWriteCmd_payload_mask[2] && _zz_1) begin
      ways_0_data_symbol2[dataWriteCmd_payload_address] <= dataWriteCmd_payload_data[23 : 16];
    end
    if(dataWriteCmd_payload_mask[3] && _zz_1) begin
      ways_0_data_symbol3[dataWriteCmd_payload_address] <= dataWriteCmd_payload_data[31 : 24];
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if((dataWriteCmd_valid && dataWriteCmd_payload_way[0]))begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_2 = 1'b0;
    if((tagsWriteCmd_valid && tagsWriteCmd_payload_way[0]))begin
      _zz_2 = 1'b1;
    end
  end

  assign haltCpu = 1'b0;
  assign _zz_3 = (tagsReadCmd_valid && (! io_cpu_memory_isStuck));
  assign _zz_4 = _zz_10;
  assign ways_0_tagsReadRsp_valid = _zz_17[0];
  assign ways_0_tagsReadRsp_error = _zz_18[0];
  assign ways_0_tagsReadRsp_address = _zz_4[21 : 2];
  assign _zz_5 = (dataReadCmd_valid && (! io_cpu_memory_isStuck));
  assign ways_0_dataReadRsp = _zz_11;
  always @ (*) begin
    tagsReadCmd_valid = 1'b0;
    if(_zz_12)begin
      tagsReadCmd_valid = 1'b1;
    end
  end

  always @ (*) begin
    tagsReadCmd_payload = 7'h0;
    if(_zz_12)begin
      tagsReadCmd_payload = io_cpu_execute_address[11 : 5];
    end
  end

  always @ (*) begin
    dataReadCmd_valid = 1'b0;
    if(_zz_12)begin
      dataReadCmd_valid = 1'b1;
    end
  end

  always @ (*) begin
    dataReadCmd_payload = 10'h0;
    if(_zz_12)begin
      dataReadCmd_payload = io_cpu_execute_address[11 : 2];
    end
  end

  always @ (*) begin
    tagsWriteCmd_valid = 1'b0;
    if(stageB_flusher_valid)begin
      tagsWriteCmd_valid = stageB_flusher_valid;
    end
    if(_zz_13)begin
      tagsWriteCmd_valid = 1'b0;
    end
    if(loader_counter_willOverflow)begin
      tagsWriteCmd_valid = 1'b1;
    end
  end

  always @ (*) begin
    tagsWriteCmd_payload_way = (1'bx);
    if(stageB_flusher_valid)begin
      tagsWriteCmd_payload_way = (1'b1);
    end
    if(loader_counter_willOverflow)begin
      tagsWriteCmd_payload_way = loader_waysAllocator;
    end
  end

  always @ (*) begin
    tagsWriteCmd_payload_address = 7'h0;
    if(stageB_flusher_valid)begin
      tagsWriteCmd_payload_address = stageB_mmuRsp_physicalAddress[11 : 5];
    end
    if(loader_counter_willOverflow)begin
      tagsWriteCmd_payload_address = stageB_mmuRsp_physicalAddress[11 : 5];
    end
  end

  always @ (*) begin
    tagsWriteCmd_payload_data_valid = 1'bx;
    if(stageB_flusher_valid)begin
      tagsWriteCmd_payload_data_valid = 1'b0;
    end
    if(loader_counter_willOverflow)begin
      tagsWriteCmd_payload_data_valid = 1'b1;
    end
  end

  always @ (*) begin
    tagsWriteCmd_payload_data_error = 1'bx;
    if(loader_counter_willOverflow)begin
      tagsWriteCmd_payload_data_error = (loader_error || io_mem_rsp_payload_error);
    end
  end

  always @ (*) begin
    tagsWriteCmd_payload_data_address = 20'h0;
    if(loader_counter_willOverflow)begin
      tagsWriteCmd_payload_data_address = stageB_mmuRsp_physicalAddress[31 : 12];
    end
  end

  always @ (*) begin
    dataWriteCmd_valid = 1'b0;
    if(io_cpu_writeBack_isValid)begin
      if(! stageB_mmuRsp_isIoAccess) begin
        if(_zz_14)begin
          if((stageB_request_wr && stageB_waysHit))begin
            dataWriteCmd_valid = 1'b1;
          end
        end
      end
    end
    if(_zz_13)begin
      dataWriteCmd_valid = 1'b0;
    end
    if(_zz_15)begin
      dataWriteCmd_valid = 1'b1;
    end
  end

  always @ (*) begin
    dataWriteCmd_payload_way = (1'bx);
    if(io_cpu_writeBack_isValid)begin
      if(! stageB_mmuRsp_isIoAccess) begin
        if(_zz_14)begin
          dataWriteCmd_payload_way = stageB_waysHits;
        end
      end
    end
    if(_zz_15)begin
      dataWriteCmd_payload_way = loader_waysAllocator;
    end
  end

  always @ (*) begin
    dataWriteCmd_payload_address = 10'h0;
    if(io_cpu_writeBack_isValid)begin
      if(! stageB_mmuRsp_isIoAccess) begin
        if(_zz_14)begin
          dataWriteCmd_payload_address = stageB_mmuRsp_physicalAddress[11 : 2];
        end
      end
    end
    if(_zz_15)begin
      dataWriteCmd_payload_address = {stageB_mmuRsp_physicalAddress[11 : 5],loader_counter_value};
    end
  end

  always @ (*) begin
    dataWriteCmd_payload_data = 32'h0;
    if(io_cpu_writeBack_isValid)begin
      if(! stageB_mmuRsp_isIoAccess) begin
        if(_zz_14)begin
          dataWriteCmd_payload_data = stageB_requestDataBypass;
        end
      end
    end
    if(_zz_15)begin
      dataWriteCmd_payload_data = io_mem_rsp_payload_data;
    end
  end

  always @ (*) begin
    dataWriteCmd_payload_mask = (4'bxxxx);
    if(io_cpu_writeBack_isValid)begin
      if(! stageB_mmuRsp_isIoAccess) begin
        if(_zz_14)begin
          dataWriteCmd_payload_mask = stageB_mask;
        end
      end
    end
    if(_zz_15)begin
      dataWriteCmd_payload_mask = (4'b1111);
    end
  end

  always @ (*) begin
    case(io_cpu_execute_args_size)
      2'b00 : begin
        _zz_6 = (4'b0001);
      end
      2'b01 : begin
        _zz_6 = (4'b0011);
      end
      default : begin
        _zz_6 = (4'b1111);
      end
    endcase
  end

  assign stage0_mask = (_zz_6 <<< io_cpu_execute_address[1 : 0]);
  assign stage0_colisions[0] = (((dataWriteCmd_valid && dataWriteCmd_payload_way[0]) && (dataWriteCmd_payload_address == io_cpu_execute_address[11 : 2])) && ((stage0_mask & dataWriteCmd_payload_mask) != (4'b0000)));
  assign io_cpu_memory_mmuBus_cmd_isValid = io_cpu_memory_isValid;
  assign io_cpu_memory_mmuBus_cmd_virtualAddress = io_cpu_memory_address;
  assign io_cpu_memory_mmuBus_cmd_bypassTranslation = 1'b0;
  assign io_cpu_memory_mmuBus_end = ((! io_cpu_memory_isStuck) || io_cpu_memory_isRemoved);
  assign io_cpu_memory_isWrite = stageA_request_wr;
  assign stageA_wayHits_0 = ((io_cpu_memory_mmuBus_rsp_physicalAddress[31 : 12] == ways_0_tagsReadRsp_address) && ways_0_tagsReadRsp_valid);
  assign _zz_7[0] = (((dataWriteCmd_valid && dataWriteCmd_payload_way[0]) && (dataWriteCmd_payload_address == io_cpu_memory_address[11 : 2])) && ((stageA_mask & dataWriteCmd_payload_mask) != (4'b0000)));
  assign stageA_colisions = (stage0_colisions_regNextWhen | _zz_7);
  always @ (*) begin
    stageB_mmuRspFreeze = 1'b0;
    if((stageB_loaderValid || loader_valid))begin
      stageB_mmuRspFreeze = 1'b1;
    end
  end

  assign _zz_8[0] = stageA_wayHits_0;
  assign stageB_waysHit = (stageB_waysHits != (1'b0));
  assign stageB_dataMux = stageB_dataReadRsp_0;
  always @ (*) begin
    stageB_loaderValid = 1'b0;
    if(io_cpu_writeBack_isValid)begin
      if(! stageB_mmuRsp_isIoAccess) begin
        if(! _zz_14) begin
          if(io_mem_cmd_ready)begin
            stageB_loaderValid = 1'b1;
          end
        end
      end
    end
    if(_zz_13)begin
      stageB_loaderValid = 1'b0;
    end
  end

  always @ (*) begin
    io_cpu_writeBack_haltIt = io_cpu_writeBack_isValid;
    if(stageB_flusher_valid)begin
      io_cpu_writeBack_haltIt = 1'b1;
    end
    if(io_cpu_writeBack_isValid)begin
      if(stageB_mmuRsp_isIoAccess)begin
        if((stageB_request_wr ? io_mem_cmd_ready : io_mem_rsp_valid))begin
          io_cpu_writeBack_haltIt = 1'b0;
        end
      end else begin
        if(_zz_14)begin
          if(((! stageB_request_wr) || io_mem_cmd_ready))begin
            io_cpu_writeBack_haltIt = 1'b0;
          end
        end
      end
    end
    if(_zz_13)begin
      io_cpu_writeBack_haltIt = 1'b0;
    end
  end

  always @ (*) begin
    io_cpu_flush_ready = 1'b0;
    if(stageB_flusher_start)begin
      io_cpu_flush_ready = 1'b1;
    end
  end

  assign stageB_requestDataBypass = stageB_request_data;
  assign stageB_isAmo = 1'b0;
  always @ (*) begin
    io_cpu_redo = 1'b0;
    if(io_cpu_writeBack_isValid)begin
      if(! stageB_mmuRsp_isIoAccess) begin
        if(_zz_14)begin
          if((((! stageB_request_wr) || stageB_isAmo) && ((stageB_colisions & stageB_waysHits) != (1'b0))))begin
            io_cpu_redo = 1'b1;
          end
        end
      end
    end
    if((io_cpu_writeBack_isValid && stageB_mmuRsp_refilling))begin
      io_cpu_redo = 1'b1;
    end
    if(loader_valid)begin
      io_cpu_redo = 1'b1;
    end
  end

  always @ (*) begin
    io_cpu_writeBack_accessError = 1'b0;
    if(stageB_mmuRsp_isIoAccess)begin
      io_cpu_writeBack_accessError = (io_mem_rsp_valid && io_mem_rsp_payload_error);
    end else begin
      io_cpu_writeBack_accessError = ((stageB_waysHits & _zz_9) != (1'b0));
    end
  end

  assign io_cpu_writeBack_mmuException = (io_cpu_writeBack_isValid && ((stageB_mmuRsp_exception || ((! stageB_mmuRsp_allowWrite) && stageB_request_wr)) || ((! stageB_mmuRsp_allowRead) && ((! stageB_request_wr) || stageB_isAmo))));
  assign io_cpu_writeBack_unalignedAccess = (io_cpu_writeBack_isValid && (((stageB_request_size == (2'b10)) && (stageB_mmuRsp_physicalAddress[1 : 0] != (2'b00))) || ((stageB_request_size == (2'b01)) && (stageB_mmuRsp_physicalAddress[0 : 0] != (1'b0)))));
  assign io_cpu_writeBack_isWrite = stageB_request_wr;
  always @ (*) begin
    io_mem_cmd_valid = 1'b0;
    if(io_cpu_writeBack_isValid)begin
      if(stageB_mmuRsp_isIoAccess)begin
        io_mem_cmd_valid = (! stageB_memCmdSent);
      end else begin
        if(_zz_14)begin
          if(stageB_request_wr)begin
            io_mem_cmd_valid = 1'b1;
          end
        end else begin
          if((! stageB_memCmdSent))begin
            io_mem_cmd_valid = 1'b1;
          end
        end
      end
    end
    if(_zz_13)begin
      io_mem_cmd_valid = 1'b0;
    end
  end

  always @ (*) begin
    io_mem_cmd_payload_address = 32'h0;
    if(io_cpu_writeBack_isValid)begin
      if(stageB_mmuRsp_isIoAccess)begin
        io_mem_cmd_payload_address = {stageB_mmuRsp_physicalAddress[31 : 2],(2'b00)};
      end else begin
        if(_zz_14)begin
          io_mem_cmd_payload_address = {stageB_mmuRsp_physicalAddress[31 : 2],(2'b00)};
        end else begin
          io_mem_cmd_payload_address = {stageB_mmuRsp_physicalAddress[31 : 5],5'h0};
        end
      end
    end
  end

  always @ (*) begin
    io_mem_cmd_payload_length = (3'bxxx);
    if(io_cpu_writeBack_isValid)begin
      if(stageB_mmuRsp_isIoAccess)begin
        io_mem_cmd_payload_length = (3'b000);
      end else begin
        if(_zz_14)begin
          io_mem_cmd_payload_length = (3'b000);
        end else begin
          io_mem_cmd_payload_length = (3'b111);
        end
      end
    end
  end

  always @ (*) begin
    io_mem_cmd_payload_last = 1'bx;
    if(io_cpu_writeBack_isValid)begin
      if(stageB_mmuRsp_isIoAccess)begin
        io_mem_cmd_payload_last = 1'b1;
      end else begin
        if(_zz_14)begin
          io_mem_cmd_payload_last = 1'b1;
        end else begin
          io_mem_cmd_payload_last = 1'b1;
        end
      end
    end
  end

  always @ (*) begin
    io_mem_cmd_payload_wr = stageB_request_wr;
    if(io_cpu_writeBack_isValid)begin
      if(! stageB_mmuRsp_isIoAccess) begin
        if(! _zz_14) begin
          io_mem_cmd_payload_wr = 1'b0;
        end
      end
    end
  end

  assign io_mem_cmd_payload_mask = stageB_mask;
  assign io_mem_cmd_payload_data = stageB_requestDataBypass;
  always @ (*) begin
    if(stageB_mmuRsp_isIoAccess)begin
      io_cpu_writeBack_data = io_mem_rsp_payload_data;
    end else begin
      io_cpu_writeBack_data = stageB_dataMux;
    end
  end

  assign _zz_9[0] = stageB_tagsReadRsp_0_error;
  always @ (*) begin
    loader_counter_willIncrement = 1'b0;
    if(_zz_15)begin
      loader_counter_willIncrement = 1'b1;
    end
  end

  assign loader_counter_willClear = 1'b0;
  assign loader_counter_willOverflowIfInc = (loader_counter_value == (3'b111));
  assign loader_counter_willOverflow = (loader_counter_willOverflowIfInc && loader_counter_willIncrement);
  always @ (*) begin
    loader_counter_valueNext = (loader_counter_value + _zz_20);
    if(loader_counter_willClear)begin
      loader_counter_valueNext = (3'b000);
    end
  end

  always @ (posedge io_systemClk) begin
    tagsWriteLastCmd_valid <= tagsWriteCmd_valid;
    tagsWriteLastCmd_payload_way <= tagsWriteCmd_payload_way;
    tagsWriteLastCmd_payload_address <= tagsWriteCmd_payload_address;
    tagsWriteLastCmd_payload_data_valid <= tagsWriteCmd_payload_data_valid;
    tagsWriteLastCmd_payload_data_error <= tagsWriteCmd_payload_data_error;
    tagsWriteLastCmd_payload_data_address <= tagsWriteCmd_payload_data_address;
    if((! io_cpu_memory_isStuck))begin
      stageA_request_wr <= io_cpu_execute_args_wr;
      stageA_request_data <= io_cpu_execute_args_data;
      stageA_request_size <= io_cpu_execute_args_size;
    end
    if((! io_cpu_memory_isStuck))begin
      stageA_mask <= stage0_mask;
    end
    if((! io_cpu_memory_isStuck))begin
      stage0_colisions_regNextWhen <= stage0_colisions;
    end
    if((! io_cpu_writeBack_isStuck))begin
      stageB_request_wr <= stageA_request_wr;
      stageB_request_data <= stageA_request_data;
      stageB_request_size <= stageA_request_size;
    end
    if(((! io_cpu_writeBack_isStuck) && (! stageB_mmuRspFreeze)))begin
      stageB_mmuRsp_physicalAddress <= io_cpu_memory_mmuBus_rsp_physicalAddress;
      stageB_mmuRsp_isIoAccess <= io_cpu_memory_mmuBus_rsp_isIoAccess;
      stageB_mmuRsp_allowRead <= io_cpu_memory_mmuBus_rsp_allowRead;
      stageB_mmuRsp_allowWrite <= io_cpu_memory_mmuBus_rsp_allowWrite;
      stageB_mmuRsp_allowExecute <= io_cpu_memory_mmuBus_rsp_allowExecute;
      stageB_mmuRsp_exception <= io_cpu_memory_mmuBus_rsp_exception;
      stageB_mmuRsp_refilling <= io_cpu_memory_mmuBus_rsp_refilling;
    end
    if((! io_cpu_writeBack_isStuck))begin
      stageB_tagsReadRsp_0_valid <= ways_0_tagsReadRsp_valid;
      stageB_tagsReadRsp_0_error <= ways_0_tagsReadRsp_error;
      stageB_tagsReadRsp_0_address <= ways_0_tagsReadRsp_address;
    end
    if((! io_cpu_writeBack_isStuck))begin
      stageB_dataReadRsp_0 <= ways_0_dataReadRsp;
    end
    if((! io_cpu_writeBack_isStuck))begin
      stageB_waysHits <= _zz_8;
    end
    if((! io_cpu_writeBack_isStuck))begin
      stageB_mask <= stageA_mask;
    end
    if((! io_cpu_writeBack_isStuck))begin
      stageB_colisions <= stageA_colisions;
    end
    if(stageB_flusher_valid)begin
      if(_zz_16)begin
        stageB_mmuRsp_physicalAddress[11 : 5] <= (stageB_mmuRsp_physicalAddress[11 : 5] + 7'h01);
      end
    end
    if(stageB_flusher_start)begin
      stageB_mmuRsp_physicalAddress[11 : 5] <= 7'h0;
    end
    `ifndef SYNTHESIS
      `ifdef FORMAL
        assert((! ((io_cpu_writeBack_isValid && (! io_cpu_writeBack_haltIt)) && io_cpu_writeBack_isStuck)))
      `else
        if(!(! ((io_cpu_writeBack_isValid && (! io_cpu_writeBack_haltIt)) && io_cpu_writeBack_isStuck))) begin
          $display("FAILURE writeBack stuck by another plugin is not allowed");
          $finish;
        end
      `endif
    `endif
  end

  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      stageB_flusher_valid <= 1'b0;
      stageB_flusher_start <= 1'b1;
      stageB_memCmdSent <= 1'b0;
      loader_valid <= 1'b0;
      loader_counter_value <= (3'b000);
      loader_waysAllocator <= (1'b1);
      loader_error <= 1'b0;
    end else begin
      if(stageB_flusher_valid)begin
        if(! _zz_16) begin
          stageB_flusher_valid <= 1'b0;
        end
      end
      stageB_flusher_start <= ((((((! stageB_flusher_start) && io_cpu_flush_valid) && (! io_cpu_execute_isValid)) && (! io_cpu_memory_isValid)) && (! io_cpu_writeBack_isValid)) && (! io_cpu_redo));
      if(stageB_flusher_start)begin
        stageB_flusher_valid <= 1'b1;
      end
      if(io_mem_cmd_ready)begin
        stageB_memCmdSent <= 1'b1;
      end
      if((! io_cpu_writeBack_isStuck))begin
        stageB_memCmdSent <= 1'b0;
      end
      if(stageB_loaderValid)begin
        loader_valid <= 1'b1;
      end
      loader_counter_value <= loader_counter_valueNext;
      if(_zz_15)begin
        loader_error <= (loader_error || io_mem_rsp_payload_error);
      end
      if(loader_counter_willOverflow)begin
        loader_valid <= 1'b0;
        loader_error <= 1'b0;
      end
      if((! loader_valid))begin
        loader_waysAllocator <= _zz_21[0:0];
      end
    end
  end


endmodule

module InstructionCache_e12a9decc0704226832aec4017b36e8d (
  input               io_flush,
  input               io_cpu_prefetch_isValid,
  output reg          io_cpu_prefetch_haltIt,
  input      [31:0]   io_cpu_prefetch_pc,
  input               io_cpu_fetch_isValid,
  input               io_cpu_fetch_isStuck,
  input               io_cpu_fetch_isRemoved,
  input      [31:0]   io_cpu_fetch_pc,
  output     [31:0]   io_cpu_fetch_data,
  output              io_cpu_fetch_mmuBus_cmd_isValid,
  output     [31:0]   io_cpu_fetch_mmuBus_cmd_virtualAddress,
  output              io_cpu_fetch_mmuBus_cmd_bypassTranslation,
  input      [31:0]   io_cpu_fetch_mmuBus_rsp_physicalAddress,
  input               io_cpu_fetch_mmuBus_rsp_isIoAccess,
  input               io_cpu_fetch_mmuBus_rsp_allowRead,
  input               io_cpu_fetch_mmuBus_rsp_allowWrite,
  input               io_cpu_fetch_mmuBus_rsp_allowExecute,
  input               io_cpu_fetch_mmuBus_rsp_exception,
  input               io_cpu_fetch_mmuBus_rsp_refilling,
  output              io_cpu_fetch_mmuBus_end,
  input               io_cpu_fetch_mmuBus_busy,
  output     [31:0]   io_cpu_fetch_physicalAddress,
  output              io_cpu_fetch_haltIt,
  input               io_cpu_decode_isValid,
  input               io_cpu_decode_isStuck,
  input      [31:0]   io_cpu_decode_pc,
  output     [31:0]   io_cpu_decode_physicalAddress,
  output     [31:0]   io_cpu_decode_data,
  output              io_cpu_decode_cacheMiss,
  output              io_cpu_decode_error,
  output              io_cpu_decode_mmuRefilling,
  output              io_cpu_decode_mmuException,
  input               io_cpu_decode_isUser,
  input               io_cpu_fill_valid,
  input      [31:0]   io_cpu_fill_payload,
  output              io_mem_cmd_valid,
  input               io_mem_cmd_ready,
  output     [31:0]   io_mem_cmd_payload_address,
  output     [2:0]    io_mem_cmd_payload_size,
  input               io_mem_rsp_valid,
  input      [31:0]   io_mem_rsp_payload_data,
  input               io_mem_rsp_payload_error,
  input      [2:0]    _zz_11,
  input      [31:0]   _zz_12,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg        [21:0]   _zz_13;
  reg        [31:0]   _zz_14;
  wire                _zz_15;
  wire                _zz_16;
  wire       [0:0]    _zz_17;
  wire       [0:0]    _zz_18;
  wire       [21:0]   _zz_19;
  reg                 _zz_1;
  reg                 _zz_2;
  reg                 lineLoader_fire;
  reg                 lineLoader_valid;
  (* keep , syn_keep *) reg        [31:0]   lineLoader_address /* synthesis syn_keep = 1 */ ;
  reg                 lineLoader_hadError;
  reg                 lineLoader_flushPending;
  reg        [7:0]    lineLoader_flushCounter;
  reg                 _zz_3;
  reg                 lineLoader_cmdSent;
  reg                 lineLoader_wayToAllocate_willIncrement;
  wire                lineLoader_wayToAllocate_willClear;
  wire                lineLoader_wayToAllocate_willOverflowIfInc;
  wire                lineLoader_wayToAllocate_willOverflow;
  (* keep , syn_keep *) reg        [2:0]    lineLoader_wordIndex /* synthesis syn_keep = 1 */ ;
  wire                lineLoader_write_tag_0_valid;
  wire       [6:0]    lineLoader_write_tag_0_payload_address;
  wire                lineLoader_write_tag_0_payload_data_valid;
  wire                lineLoader_write_tag_0_payload_data_error;
  wire       [19:0]   lineLoader_write_tag_0_payload_data_address;
  wire                lineLoader_write_data_0_valid;
  wire       [9:0]    lineLoader_write_data_0_payload_address;
  wire       [31:0]   lineLoader_write_data_0_payload_data;
  wire                _zz_4;
  wire       [6:0]    _zz_5;
  wire                _zz_6;
  wire                fetchStage_read_waysValues_0_tag_valid;
  wire                fetchStage_read_waysValues_0_tag_error;
  wire       [19:0]   fetchStage_read_waysValues_0_tag_address;
  wire       [21:0]   _zz_7;
  wire       [9:0]    _zz_8;
  wire                _zz_9;
  wire       [31:0]   fetchStage_read_waysValues_0_data;
  reg        [31:0]   decodeStage_mmuRsp_physicalAddress;
  reg                 decodeStage_mmuRsp_isIoAccess;
  reg                 decodeStage_mmuRsp_allowRead;
  reg                 decodeStage_mmuRsp_allowWrite;
  reg                 decodeStage_mmuRsp_allowExecute;
  reg                 decodeStage_mmuRsp_exception;
  reg                 decodeStage_mmuRsp_refilling;
  reg                 decodeStage_hit_tags_0_valid;
  reg                 decodeStage_hit_tags_0_error;
  reg        [19:0]   decodeStage_hit_tags_0_address;
  wire                decodeStage_hit_hits_0;
  wire                decodeStage_hit_valid;
  reg        [31:0]   _zz_10;
  wire       [31:0]   decodeStage_hit_data;
  reg [21:0] ways_0_tags [0:127];
  reg [31:0] ways_0_datas [0:1023];

  assign _zz_15 = (! lineLoader_flushCounter[7]);
  assign _zz_16 = (lineLoader_flushPending && (! (lineLoader_valid || io_cpu_fetch_isValid)));
  assign _zz_17 = _zz_7[0 : 0];
  assign _zz_18 = _zz_7[1 : 1];
  assign _zz_19 = {lineLoader_write_tag_0_payload_data_address,{lineLoader_write_tag_0_payload_data_error,lineLoader_write_tag_0_payload_data_valid}};
  always @ (posedge io_systemClk) begin
    if(_zz_2) begin
      ways_0_tags[lineLoader_write_tag_0_payload_address] <= _zz_19;
    end
  end

  always @ (posedge io_systemClk) begin
    if(_zz_6) begin
      _zz_13 <= ways_0_tags[_zz_5];
    end
  end

  always @ (posedge io_systemClk) begin
    if(_zz_1) begin
      ways_0_datas[lineLoader_write_data_0_payload_address] <= lineLoader_write_data_0_payload_data;
    end
  end

  always @ (posedge io_systemClk) begin
    if(_zz_9) begin
      _zz_14 <= ways_0_datas[_zz_8];
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(lineLoader_write_data_0_valid)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    _zz_2 = 1'b0;
    if(lineLoader_write_tag_0_valid)begin
      _zz_2 = 1'b1;
    end
  end

  assign io_cpu_fetch_haltIt = io_cpu_fetch_mmuBus_busy;
  always @ (*) begin
    lineLoader_fire = 1'b0;
    if(io_mem_rsp_valid)begin
      if((lineLoader_wordIndex == (3'b111)))begin
        lineLoader_fire = 1'b1;
      end
    end
  end

  always @ (*) begin
    io_cpu_prefetch_haltIt = (lineLoader_valid || lineLoader_flushPending);
    if(_zz_15)begin
      io_cpu_prefetch_haltIt = 1'b1;
    end
    if((! _zz_3))begin
      io_cpu_prefetch_haltIt = 1'b1;
    end
    if(io_flush)begin
      io_cpu_prefetch_haltIt = 1'b1;
    end
  end

  assign io_mem_cmd_valid = (lineLoader_valid && (! lineLoader_cmdSent));
  assign io_mem_cmd_payload_address = {lineLoader_address[31 : 5],5'h0};
  assign io_mem_cmd_payload_size = (3'b101);
  always @ (*) begin
    lineLoader_wayToAllocate_willIncrement = 1'b0;
    if((! lineLoader_valid))begin
      lineLoader_wayToAllocate_willIncrement = 1'b1;
    end
  end

  assign lineLoader_wayToAllocate_willClear = 1'b0;
  assign lineLoader_wayToAllocate_willOverflowIfInc = 1'b1;
  assign lineLoader_wayToAllocate_willOverflow = (lineLoader_wayToAllocate_willOverflowIfInc && lineLoader_wayToAllocate_willIncrement);
  assign _zz_4 = 1'b1;
  assign lineLoader_write_tag_0_valid = ((_zz_4 && lineLoader_fire) || (! lineLoader_flushCounter[7]));
  assign lineLoader_write_tag_0_payload_address = (lineLoader_flushCounter[7] ? lineLoader_address[11 : 5] : lineLoader_flushCounter[6 : 0]);
  assign lineLoader_write_tag_0_payload_data_valid = lineLoader_flushCounter[7];
  assign lineLoader_write_tag_0_payload_data_error = (lineLoader_hadError || io_mem_rsp_payload_error);
  assign lineLoader_write_tag_0_payload_data_address = lineLoader_address[31 : 12];
  assign lineLoader_write_data_0_valid = (io_mem_rsp_valid && _zz_4);
  assign lineLoader_write_data_0_payload_address = {lineLoader_address[11 : 5],lineLoader_wordIndex};
  assign lineLoader_write_data_0_payload_data = io_mem_rsp_payload_data;
  assign _zz_5 = io_cpu_prefetch_pc[11 : 5];
  assign _zz_6 = (! io_cpu_fetch_isStuck);
  assign _zz_7 = _zz_13;
  assign fetchStage_read_waysValues_0_tag_valid = _zz_17[0];
  assign fetchStage_read_waysValues_0_tag_error = _zz_18[0];
  assign fetchStage_read_waysValues_0_tag_address = _zz_7[21 : 2];
  assign _zz_8 = io_cpu_prefetch_pc[11 : 2];
  assign _zz_9 = (! io_cpu_fetch_isStuck);
  assign fetchStage_read_waysValues_0_data = _zz_14;
  assign io_cpu_fetch_data = fetchStage_read_waysValues_0_data;
  assign io_cpu_fetch_mmuBus_cmd_isValid = io_cpu_fetch_isValid;
  assign io_cpu_fetch_mmuBus_cmd_virtualAddress = io_cpu_fetch_pc;
  assign io_cpu_fetch_mmuBus_cmd_bypassTranslation = 1'b0;
  assign io_cpu_fetch_mmuBus_end = ((! io_cpu_fetch_isStuck) || io_cpu_fetch_isRemoved);
  assign io_cpu_fetch_physicalAddress = io_cpu_fetch_mmuBus_rsp_physicalAddress;
  assign decodeStage_hit_hits_0 = (decodeStage_hit_tags_0_valid && (decodeStage_hit_tags_0_address == decodeStage_mmuRsp_physicalAddress[31 : 12]));
  assign decodeStage_hit_valid = (decodeStage_hit_hits_0 != (1'b0));
  assign decodeStage_hit_data = _zz_10;
  assign io_cpu_decode_data = decodeStage_hit_data;
  assign io_cpu_decode_cacheMiss = (! decodeStage_hit_valid);
  assign io_cpu_decode_error = decodeStage_hit_tags_0_error;
  assign io_cpu_decode_mmuRefilling = decodeStage_mmuRsp_refilling;
  assign io_cpu_decode_mmuException = ((! decodeStage_mmuRsp_refilling) && (decodeStage_mmuRsp_exception || (! decodeStage_mmuRsp_allowExecute)));
  assign io_cpu_decode_physicalAddress = decodeStage_mmuRsp_physicalAddress;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      lineLoader_valid <= 1'b0;
      lineLoader_hadError <= 1'b0;
      lineLoader_flushPending <= 1'b1;
      lineLoader_cmdSent <= 1'b0;
      lineLoader_wordIndex <= (3'b000);
    end else begin
      if(lineLoader_fire)begin
        lineLoader_valid <= 1'b0;
      end
      if(lineLoader_fire)begin
        lineLoader_hadError <= 1'b0;
      end
      if(io_cpu_fill_valid)begin
        lineLoader_valid <= 1'b1;
      end
      if(io_flush)begin
        lineLoader_flushPending <= 1'b1;
      end
      if(_zz_16)begin
        lineLoader_flushPending <= 1'b0;
      end
      if((io_mem_cmd_valid && io_mem_cmd_ready))begin
        lineLoader_cmdSent <= 1'b1;
      end
      if(lineLoader_fire)begin
        lineLoader_cmdSent <= 1'b0;
      end
      if(io_mem_rsp_valid)begin
        lineLoader_wordIndex <= (lineLoader_wordIndex + (3'b001));
        if(io_mem_rsp_payload_error)begin
          lineLoader_hadError <= 1'b1;
        end
      end
    end
  end

  always @ (posedge io_systemClk) begin
    if(io_cpu_fill_valid)begin
      lineLoader_address <= io_cpu_fill_payload;
    end
    if(_zz_15)begin
      lineLoader_flushCounter <= (lineLoader_flushCounter + 8'h01);
    end
    _zz_3 <= lineLoader_flushCounter[7];
    if(_zz_16)begin
      lineLoader_flushCounter <= 8'h0;
    end
    if((! io_cpu_decode_isStuck))begin
      decodeStage_mmuRsp_physicalAddress <= io_cpu_fetch_mmuBus_rsp_physicalAddress;
      decodeStage_mmuRsp_isIoAccess <= io_cpu_fetch_mmuBus_rsp_isIoAccess;
      decodeStage_mmuRsp_allowRead <= io_cpu_fetch_mmuBus_rsp_allowRead;
      decodeStage_mmuRsp_allowWrite <= io_cpu_fetch_mmuBus_rsp_allowWrite;
      decodeStage_mmuRsp_allowExecute <= io_cpu_fetch_mmuBus_rsp_allowExecute;
      decodeStage_mmuRsp_exception <= io_cpu_fetch_mmuBus_rsp_exception;
      decodeStage_mmuRsp_refilling <= io_cpu_fetch_mmuBus_rsp_refilling;
    end
    if((! io_cpu_decode_isStuck))begin
      decodeStage_hit_tags_0_valid <= fetchStage_read_waysValues_0_tag_valid;
      decodeStage_hit_tags_0_error <= fetchStage_read_waysValues_0_tag_error;
      decodeStage_hit_tags_0_address <= fetchStage_read_waysValues_0_tag_address;
    end
    if((! io_cpu_decode_isStuck))begin
      _zz_10 <= fetchStage_read_waysValues_0_data;
    end
    if((_zz_11 != (3'b000)))begin
      _zz_10 <= _zz_12;
    end
  end


endmodule

module BufferCC_22_e12a9decc0704226832aec4017b36e8d (
  input      [7:0]    io_dataIn,
  output     [7:0]    io_dataOut,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg        [7:0]    buffers_0;
  reg        [7:0]    buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge io_systemClk) begin
    buffers_0 <= io_dataIn;
    buffers_1 <= buffers_0;
  end


endmodule

module I2cSlave_e12a9decc0704226832aec4017b36e8d (
  output              io_i2c_sda_write,
  input               io_i2c_sda_read,
  output              io_i2c_scl_write,
  input               io_i2c_scl_read,
  input      [9:0]    io_config_samplingClockDivider,
  input      [19:0]   io_config_timeout,
  input      [5:0]    io_config_tsuData,
  output reg `I2cSlaveCmdMode_defaultEncoding_type io_bus_cmd_kind,
  output              io_bus_cmd_data,
  input               io_bus_rsp_valid,
  input               io_bus_rsp_enable,
  input               io_bus_rsp_data,
  output              io_internals_inFrame,
  output              io_internals_sdaRead,
  output              io_internals_sclRead,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  wire                _zz_7;
  wire                _zz_8;
  wire                io_i2c_scl_read_buffercc_io_dataOut;
  wire                io_i2c_sda_read_buffercc_io_dataOut;
  wire                _zz_9;
  wire                _zz_10;
  reg        [9:0]    filter_timer_counter;
  wire                filter_timer_tick;
  wire                filter_sampler_sclSync;
  wire                filter_sampler_sdaSync;
  wire                filter_sampler_sclSamples_0;
  wire                filter_sampler_sclSamples_1;
  wire                filter_sampler_sclSamples_2;
  wire                _zz_1;
  reg                 _zz_2;
  reg                 _zz_3;
  wire                filter_sampler_sdaSamples_0;
  wire                filter_sampler_sdaSamples_1;
  wire                filter_sampler_sdaSamples_2;
  wire                _zz_4;
  reg                 _zz_5;
  reg                 _zz_6;
  reg                 filter_sda;
  reg                 filter_scl;
  wire                sclEdge_rise;
  wire                sclEdge_fall;
  wire                sclEdge_toggle;
  reg                 filter_scl_regNext;
  wire                sdaEdge_rise;
  wire                sdaEdge_fall;
  wire                sdaEdge_toggle;
  reg                 filter_sda_regNext;
  wire                detector_start;
  wire                detector_stop;
  reg        [5:0]    tsuData_counter;
  wire                tsuData_done;
  reg                 tsuData_reset;
  reg                 ctrl_inFrame;
  reg                 ctrl_inFrameData;
  reg                 ctrl_sdaWrite;
  reg                 ctrl_sclWrite;
  wire                ctrl_rspBufferIn_valid;
  wire                ctrl_rspBufferIn_ready;
  wire                ctrl_rspBufferIn_payload_enable;
  wire                ctrl_rspBufferIn_payload_data;
  wire                ctrl_rspBuffer_valid;
  reg                 ctrl_rspBuffer_ready;
  wire                ctrl_rspBuffer_payload_enable;
  wire                ctrl_rspBuffer_payload_data;
  reg                 ctrl_rspBufferIn_m2sPipe_rValid;
  reg                 ctrl_rspBufferIn_m2sPipe_rData_enable;
  reg                 ctrl_rspBufferIn_m2sPipe_rData_data;
  wire                ctrl_rspAhead_valid;
  wire                ctrl_rspAhead_payload_enable;
  wire                ctrl_rspAhead_payload_data;
  reg        [19:0]   timeout_counter;
  reg                 timeout_tick;
  `ifndef SYNTHESIS
  reg [55:0] io_bus_cmd_kind_string;
  `endif


  assign _zz_9 = (detector_stop || timeout_tick);
  assign _zz_10 = (sclEdge_toggle || (! ctrl_inFrame));
  BufferCC_e12a9decc0704226832aec4017b36e8d io_i2c_scl_read_buffercc (
    .io_initial                    (_zz_7                                ), //i
    .io_dataIn                     (io_i2c_scl_read                      ), //i
    .io_dataOut                    (io_i2c_scl_read_buffercc_io_dataOut  ), //o
    .io_systemClk                  (io_systemClk                         ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset           )  //i
  );
  BufferCC_e12a9decc0704226832aec4017b36e8d io_i2c_sda_read_buffercc (
    .io_initial                    (_zz_8                                ), //i
    .io_dataIn                     (io_i2c_sda_read                      ), //i
    .io_dataOut                    (io_i2c_sda_read_buffercc_io_dataOut  ), //o
    .io_systemClk                  (io_systemClk                         ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset           )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(io_bus_cmd_kind)
      `I2cSlaveCmdMode_defaultEncoding_NONE : io_bus_cmd_kind_string = "NONE   ";
      `I2cSlaveCmdMode_defaultEncoding_START : io_bus_cmd_kind_string = "START  ";
      `I2cSlaveCmdMode_defaultEncoding_RESTART : io_bus_cmd_kind_string = "RESTART";
      `I2cSlaveCmdMode_defaultEncoding_STOP : io_bus_cmd_kind_string = "STOP   ";
      `I2cSlaveCmdMode_defaultEncoding_DROP : io_bus_cmd_kind_string = "DROP   ";
      `I2cSlaveCmdMode_defaultEncoding_DRIVE : io_bus_cmd_kind_string = "DRIVE  ";
      `I2cSlaveCmdMode_defaultEncoding_READ : io_bus_cmd_kind_string = "READ   ";
      default : io_bus_cmd_kind_string = "???????";
    endcase
  end
  `endif

  assign filter_timer_tick = (filter_timer_counter == 10'h0);
  assign _zz_7 = 1'b1;
  assign filter_sampler_sclSync = io_i2c_scl_read_buffercc_io_dataOut;
  assign _zz_8 = 1'b1;
  assign filter_sampler_sdaSync = io_i2c_sda_read_buffercc_io_dataOut;
  assign _zz_1 = filter_sampler_sclSync;
  assign filter_sampler_sclSamples_0 = _zz_1;
  assign filter_sampler_sclSamples_1 = _zz_2;
  assign filter_sampler_sclSamples_2 = _zz_3;
  assign _zz_4 = filter_sampler_sdaSync;
  assign filter_sampler_sdaSamples_0 = _zz_4;
  assign filter_sampler_sdaSamples_1 = _zz_5;
  assign filter_sampler_sdaSamples_2 = _zz_6;
  assign sclEdge_rise = ((! filter_scl_regNext) && filter_scl);
  assign sclEdge_fall = (filter_scl_regNext && (! filter_scl));
  assign sclEdge_toggle = (filter_scl_regNext != filter_scl);
  assign sdaEdge_rise = ((! filter_sda_regNext) && filter_sda);
  assign sdaEdge_fall = (filter_sda_regNext && (! filter_sda));
  assign sdaEdge_toggle = (filter_sda_regNext != filter_sda);
  assign detector_start = (filter_scl && sdaEdge_fall);
  assign detector_stop = (filter_scl && sdaEdge_rise);
  assign tsuData_done = (tsuData_counter == 6'h0);
  always @ (*) begin
    tsuData_reset = 1'b0;
    if(ctrl_inFrameData)begin
      tsuData_reset = (! ctrl_rspAhead_valid);
    end
  end

  always @ (*) begin
    ctrl_sdaWrite = 1'b1;
    if(ctrl_inFrameData)begin
      if((ctrl_rspAhead_valid && ctrl_rspAhead_payload_enable))begin
        ctrl_sdaWrite = ctrl_rspAhead_payload_data;
      end
    end
  end

  always @ (*) begin
    ctrl_sclWrite = 1'b1;
    if(ctrl_inFrameData)begin
      if(((! ctrl_rspAhead_valid) || (ctrl_rspAhead_payload_enable && (! tsuData_done))))begin
        ctrl_sclWrite = 1'b0;
      end
    end
  end

  assign ctrl_rspBufferIn_ready = ((1'b1 && (! ctrl_rspBuffer_valid)) || ctrl_rspBuffer_ready);
  assign ctrl_rspBuffer_valid = ctrl_rspBufferIn_m2sPipe_rValid;
  assign ctrl_rspBuffer_payload_enable = ctrl_rspBufferIn_m2sPipe_rData_enable;
  assign ctrl_rspBuffer_payload_data = ctrl_rspBufferIn_m2sPipe_rData_data;
  assign ctrl_rspAhead_valid = (ctrl_rspBuffer_valid ? ctrl_rspBuffer_valid : ctrl_rspBufferIn_valid);
  assign ctrl_rspAhead_payload_enable = (ctrl_rspBuffer_valid ? ctrl_rspBuffer_payload_enable : ctrl_rspBufferIn_payload_enable);
  assign ctrl_rspAhead_payload_data = (ctrl_rspBuffer_valid ? ctrl_rspBuffer_payload_data : ctrl_rspBufferIn_payload_data);
  assign ctrl_rspBufferIn_valid = io_bus_rsp_valid;
  assign ctrl_rspBufferIn_payload_enable = io_bus_rsp_enable;
  assign ctrl_rspBufferIn_payload_data = io_bus_rsp_data;
  always @ (*) begin
    ctrl_rspBuffer_ready = 1'b0;
    if(ctrl_inFrame)begin
      if(sclEdge_fall)begin
        ctrl_rspBuffer_ready = 1'b1;
      end
    end
  end

  always @ (*) begin
    io_bus_cmd_kind = `I2cSlaveCmdMode_defaultEncoding_NONE;
    if(ctrl_inFrame)begin
      if(sclEdge_rise)begin
        io_bus_cmd_kind = `I2cSlaveCmdMode_defaultEncoding_READ;
      end
    end
    if(ctrl_inFrameData)begin
      if(((! ctrl_rspBuffer_valid) || ctrl_rspBuffer_ready))begin
        io_bus_cmd_kind = `I2cSlaveCmdMode_defaultEncoding_DRIVE;
      end
    end
    if(detector_start)begin
      io_bus_cmd_kind = (ctrl_inFrame ? `I2cSlaveCmdMode_defaultEncoding_RESTART : `I2cSlaveCmdMode_defaultEncoding_START);
    end
    if(_zz_9)begin
      if(ctrl_inFrame)begin
        io_bus_cmd_kind = (timeout_tick ? `I2cSlaveCmdMode_defaultEncoding_DROP : `I2cSlaveCmdMode_defaultEncoding_STOP);
      end
    end
  end

  assign io_bus_cmd_data = filter_sda;
  always @ (*) begin
    timeout_tick = (timeout_counter == 20'h0);
    if(_zz_10)begin
      timeout_tick = 1'b0;
    end
  end

  assign io_internals_inFrame = ctrl_inFrame;
  assign io_internals_sdaRead = filter_sda;
  assign io_internals_sclRead = filter_scl;
  assign io_i2c_scl_write = ctrl_sclWrite;
  assign io_i2c_sda_write = ctrl_sdaWrite;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      filter_timer_counter <= 10'h0;
      _zz_2 <= 1'b1;
      _zz_3 <= 1'b1;
      _zz_5 <= 1'b1;
      _zz_6 <= 1'b1;
      filter_sda <= 1'b1;
      filter_scl <= 1'b1;
      filter_scl_regNext <= 1'b1;
      filter_sda_regNext <= 1'b1;
      tsuData_counter <= 6'h0;
      ctrl_inFrame <= 1'b0;
      ctrl_inFrameData <= 1'b0;
      ctrl_rspBufferIn_m2sPipe_rValid <= 1'b0;
      timeout_counter <= 20'h0;
    end else begin
      filter_timer_counter <= (filter_timer_counter - 10'h001);
      if(filter_timer_tick)begin
        filter_timer_counter <= io_config_samplingClockDivider;
      end
      if(filter_timer_tick)begin
        _zz_2 <= _zz_1;
      end
      if(filter_timer_tick)begin
        _zz_3 <= _zz_2;
      end
      if(filter_timer_tick)begin
        _zz_5 <= _zz_4;
      end
      if(filter_timer_tick)begin
        _zz_6 <= _zz_5;
      end
      if(filter_timer_tick)begin
        if((((filter_sampler_sdaSamples_0 != filter_sda) && (filter_sampler_sdaSamples_1 != filter_sda)) && (filter_sampler_sdaSamples_2 != filter_sda)))begin
          filter_sda <= filter_sampler_sdaSamples_2;
        end
        if((((filter_sampler_sclSamples_0 != filter_scl) && (filter_sampler_sclSamples_1 != filter_scl)) && (filter_sampler_sclSamples_2 != filter_scl)))begin
          filter_scl <= filter_sampler_sclSamples_2;
        end
      end
      filter_scl_regNext <= filter_scl;
      filter_sda_regNext <= filter_sda;
      if((! tsuData_done))begin
        tsuData_counter <= (tsuData_counter - 6'h01);
      end
      if(tsuData_reset)begin
        tsuData_counter <= io_config_tsuData;
      end
      if(ctrl_rspBufferIn_ready)begin
        ctrl_rspBufferIn_m2sPipe_rValid <= ctrl_rspBufferIn_valid;
      end
      if(ctrl_inFrame)begin
        if(sclEdge_fall)begin
          ctrl_inFrameData <= 1'b1;
        end
      end
      if(detector_start)begin
        ctrl_inFrame <= 1'b1;
        ctrl_inFrameData <= 1'b0;
      end
      timeout_counter <= (timeout_counter - 20'h00001);
      if(_zz_10)begin
        timeout_counter <= io_config_timeout;
      end
      if(_zz_9)begin
        ctrl_inFrame <= 1'b0;
        ctrl_inFrameData <= 1'b0;
      end
    end
  end

  always @ (posedge io_systemClk) begin
    if(ctrl_rspBufferIn_ready)begin
      ctrl_rspBufferIn_m2sPipe_rData_enable <= ctrl_rspBufferIn_payload_enable;
      ctrl_rspBufferIn_m2sPipe_rData_data <= ctrl_rspBufferIn_payload_data;
    end
  end


endmodule

//StreamFifo_1_e12a9decc0704226832aec4017b36e8d replaced by StreamFifo_1_e12a9decc0704226832aec4017b36e8d

module StreamFifo_1_e12a9decc0704226832aec4017b36e8d (
  input               io_push_valid,
  output              io_push_ready,
  input      [7:0]    io_push_payload,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [7:0]    io_pop_payload,
  input               io_flush,
  output     [4:0]    io_occupancy,
  output     [4:0]    io_availability,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg        [7:0]    _zz_3;
  wire       [0:0]    _zz_4;
  wire       [3:0]    _zz_5;
  wire       [0:0]    _zz_6;
  wire       [3:0]    _zz_7;
  wire       [3:0]    _zz_8;
  wire                _zz_9;
  reg                 _zz_1;
  reg                 logic_pushPtr_willIncrement;
  reg                 logic_pushPtr_willClear;
  reg        [3:0]    logic_pushPtr_valueNext;
  reg        [3:0]    logic_pushPtr_value;
  wire                logic_pushPtr_willOverflowIfInc;
  wire                logic_pushPtr_willOverflow;
  reg                 logic_popPtr_willIncrement;
  reg                 logic_popPtr_willClear;
  reg        [3:0]    logic_popPtr_valueNext;
  reg        [3:0]    logic_popPtr_value;
  wire                logic_popPtr_willOverflowIfInc;
  wire                logic_popPtr_willOverflow;
  wire                logic_ptrMatch;
  reg                 logic_risingOccupancy;
  wire                logic_pushing;
  wire                logic_popping;
  wire                logic_empty;
  wire                logic_full;
  reg                 _zz_2;
  wire       [3:0]    logic_ptrDif;
  reg [7:0] logic_ram [0:15];

  assign _zz_4 = logic_pushPtr_willIncrement;
  assign _zz_5 = {3'd0, _zz_4};
  assign _zz_6 = logic_popPtr_willIncrement;
  assign _zz_7 = {3'd0, _zz_6};
  assign _zz_8 = (logic_popPtr_value - logic_pushPtr_value);
  assign _zz_9 = 1'b1;
  always @ (posedge io_systemClk) begin
    if(_zz_9) begin
      _zz_3 <= logic_ram[logic_popPtr_valueNext];
    end
  end

  always @ (posedge io_systemClk) begin
    if(_zz_1) begin
      logic_ram[logic_pushPtr_value] <= io_push_payload;
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(logic_pushing)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willIncrement = 1'b0;
    if(logic_pushing)begin
      logic_pushPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_pushPtr_willClear = 1'b1;
    end
  end

  assign logic_pushPtr_willOverflowIfInc = (logic_pushPtr_value == (4'b1111));
  assign logic_pushPtr_willOverflow = (logic_pushPtr_willOverflowIfInc && logic_pushPtr_willIncrement);
  always @ (*) begin
    logic_pushPtr_valueNext = (logic_pushPtr_value + _zz_5);
    if(logic_pushPtr_willClear)begin
      logic_pushPtr_valueNext = (4'b0000);
    end
  end

  always @ (*) begin
    logic_popPtr_willIncrement = 1'b0;
    if(logic_popping)begin
      logic_popPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_popPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_popPtr_willClear = 1'b1;
    end
  end

  assign logic_popPtr_willOverflowIfInc = (logic_popPtr_value == (4'b1111));
  assign logic_popPtr_willOverflow = (logic_popPtr_willOverflowIfInc && logic_popPtr_willIncrement);
  always @ (*) begin
    logic_popPtr_valueNext = (logic_popPtr_value + _zz_7);
    if(logic_popPtr_willClear)begin
      logic_popPtr_valueNext = (4'b0000);
    end
  end

  assign logic_ptrMatch = (logic_pushPtr_value == logic_popPtr_value);
  assign logic_pushing = (io_push_valid && io_push_ready);
  assign logic_popping = (io_pop_valid && io_pop_ready);
  assign logic_empty = (logic_ptrMatch && (! logic_risingOccupancy));
  assign logic_full = (logic_ptrMatch && logic_risingOccupancy);
  assign io_push_ready = (! logic_full);
  assign io_pop_valid = ((! logic_empty) && (! (_zz_2 && (! logic_full))));
  assign io_pop_payload = _zz_3;
  assign logic_ptrDif = (logic_pushPtr_value - logic_popPtr_value);
  assign io_occupancy = {(logic_risingOccupancy && logic_ptrMatch),logic_ptrDif};
  assign io_availability = {((! logic_risingOccupancy) && logic_ptrMatch),_zz_8};
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      logic_pushPtr_value <= (4'b0000);
      logic_popPtr_value <= (4'b0000);
      logic_risingOccupancy <= 1'b0;
      _zz_2 <= 1'b0;
    end else begin
      logic_pushPtr_value <= logic_pushPtr_valueNext;
      logic_popPtr_value <= logic_popPtr_valueNext;
      _zz_2 <= (logic_popPtr_valueNext == logic_pushPtr_value);
      if((logic_pushing != logic_popping))begin
        logic_risingOccupancy <= logic_pushing;
      end
      if(io_flush)begin
        logic_risingOccupancy <= 1'b0;
      end
    end
  end


endmodule

module UartCtrl_e12a9decc0704226832aec4017b36e8d (
  input      [2:0]    io_config_frame_dataLength,
  input      `UartStopType_defaultEncoding_type io_config_frame_stop,
  input      `UartParityType_defaultEncoding_type io_config_frame_parity,
  input      [19:0]   io_config_clockDivider,
  input               io_write_valid,
  output reg          io_write_ready,
  input      [7:0]    io_write_payload,
  output              io_read_valid,
  input               io_read_ready,
  output     [7:0]    io_read_payload,
  output              io_uart_txd,
  input               io_uart_rxd,
  output              io_readError,
  input               io_writeBreak,
  output              io_readBreak,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  wire                _zz_1;
  wire                tx_io_write_ready;
  wire                tx_io_txd;
  wire                rx_io_read_valid;
  wire       [7:0]    rx_io_read_payload;
  wire                rx_io_rts;
  wire                rx_io_error;
  wire                rx_io_break;
  reg        [19:0]   clockDivider_counter;
  wire                clockDivider_tick;
  reg                 io_write_thrown_valid;
  wire                io_write_thrown_ready;
  wire       [7:0]    io_write_thrown_payload;
  `ifndef SYNTHESIS
  reg [23:0] io_config_frame_stop_string;
  reg [31:0] io_config_frame_parity_string;
  `endif


  UartCtrlTx_e12a9decc0704226832aec4017b36e8d tx (
    .io_configFrame_dataLength     (io_config_frame_dataLength[2:0]  ), //i
    .io_configFrame_stop           (io_config_frame_stop             ), //i
    .io_configFrame_parity         (io_config_frame_parity[1:0]      ), //i
    .io_samplingTick               (clockDivider_tick                ), //i
    .io_write_valid                (io_write_thrown_valid            ), //i
    .io_write_ready                (tx_io_write_ready                ), //o
    .io_write_payload              (io_write_thrown_payload[7:0]     ), //i
    .io_cts                        (_zz_1                            ), //i
    .io_txd                        (tx_io_txd                        ), //o
    .io_break                      (io_writeBreak                    ), //i
    .io_systemClk                  (io_systemClk                     ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset       )  //i
  );
  UartCtrlRx_e12a9decc0704226832aec4017b36e8d rx (
    .io_configFrame_dataLength     (io_config_frame_dataLength[2:0]  ), //i
    .io_configFrame_stop           (io_config_frame_stop             ), //i
    .io_configFrame_parity         (io_config_frame_parity[1:0]      ), //i
    .io_samplingTick               (clockDivider_tick                ), //i
    .io_read_valid                 (rx_io_read_valid                 ), //o
    .io_read_ready                 (io_read_ready                    ), //i
    .io_read_payload               (rx_io_read_payload[7:0]          ), //o
    .io_rxd                        (io_uart_rxd                      ), //i
    .io_rts                        (rx_io_rts                        ), //o
    .io_error                      (rx_io_error                      ), //o
    .io_break                      (rx_io_break                      ), //o
    .io_systemClk                  (io_systemClk                     ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset       )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(io_config_frame_stop)
      `UartStopType_defaultEncoding_ONE : io_config_frame_stop_string = "ONE";
      `UartStopType_defaultEncoding_TWO : io_config_frame_stop_string = "TWO";
      default : io_config_frame_stop_string = "???";
    endcase
  end
  always @(*) begin
    case(io_config_frame_parity)
      `UartParityType_defaultEncoding_NONE : io_config_frame_parity_string = "NONE";
      `UartParityType_defaultEncoding_EVEN : io_config_frame_parity_string = "EVEN";
      `UartParityType_defaultEncoding_ODD : io_config_frame_parity_string = "ODD ";
      default : io_config_frame_parity_string = "????";
    endcase
  end
  `endif

  assign clockDivider_tick = (clockDivider_counter == 20'h0);
  always @ (*) begin
    io_write_thrown_valid = io_write_valid;
    if(rx_io_break)begin
      io_write_thrown_valid = 1'b0;
    end
  end

  always @ (*) begin
    io_write_ready = io_write_thrown_ready;
    if(rx_io_break)begin
      io_write_ready = 1'b1;
    end
  end

  assign io_write_thrown_payload = io_write_payload;
  assign io_write_thrown_ready = tx_io_write_ready;
  assign io_read_valid = rx_io_read_valid;
  assign io_read_payload = rx_io_read_payload;
  assign io_uart_txd = tx_io_txd;
  assign io_readError = rx_io_error;
  assign _zz_1 = 1'b0;
  assign io_readBreak = rx_io_break;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      clockDivider_counter <= 20'h0;
    end else begin
      clockDivider_counter <= (clockDivider_counter - 20'h00001);
      if(clockDivider_tick)begin
        clockDivider_counter <= io_config_clockDivider;
      end
    end
  end


endmodule

//StreamFork_e12a9decc0704226832aec4017b36e8d replaced by StreamFork_e12a9decc0704226832aec4017b36e8d

module StreamFifo_e12a9decc0704226832aec4017b36e8d (
  input               io_push_valid,
  output              io_push_ready,
  input      [3:0]    io_push_payload_startAt,
  input      [3:0]    io_push_payload_endAt,
  input      [2:0]    io_push_payload_size,
  input      [3:0]    io_push_payload_id,
  output              io_pop_valid,
  input               io_pop_ready,
  output     [3:0]    io_pop_payload_startAt,
  output     [3:0]    io_pop_payload_endAt,
  output     [2:0]    io_pop_payload_size,
  output     [3:0]    io_pop_payload_id,
  input               io_flush,
  output     [2:0]    io_occupancy,
  output     [2:0]    io_availability,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  reg        [14:0]   _zz_4;
  wire       [0:0]    _zz_5;
  wire       [1:0]    _zz_6;
  wire       [0:0]    _zz_7;
  wire       [1:0]    _zz_8;
  wire       [1:0]    _zz_9;
  wire                _zz_10;
  wire       [14:0]   _zz_11;
  reg                 _zz_1;
  reg                 logic_pushPtr_willIncrement;
  reg                 logic_pushPtr_willClear;
  reg        [1:0]    logic_pushPtr_valueNext;
  reg        [1:0]    logic_pushPtr_value;
  wire                logic_pushPtr_willOverflowIfInc;
  wire                logic_pushPtr_willOverflow;
  reg                 logic_popPtr_willIncrement;
  reg                 logic_popPtr_willClear;
  reg        [1:0]    logic_popPtr_valueNext;
  reg        [1:0]    logic_popPtr_value;
  wire                logic_popPtr_willOverflowIfInc;
  wire                logic_popPtr_willOverflow;
  wire                logic_ptrMatch;
  reg                 logic_risingOccupancy;
  wire                logic_pushing;
  wire                logic_popping;
  wire                logic_empty;
  wire                logic_full;
  reg                 _zz_2;
  wire       [14:0]   _zz_3;
  wire       [1:0]    logic_ptrDif;
  reg [14:0] logic_ram [0:3];

  assign _zz_5 = logic_pushPtr_willIncrement;
  assign _zz_6 = {1'd0, _zz_5};
  assign _zz_7 = logic_popPtr_willIncrement;
  assign _zz_8 = {1'd0, _zz_7};
  assign _zz_9 = (logic_popPtr_value - logic_pushPtr_value);
  assign _zz_10 = 1'b1;
  assign _zz_11 = {io_push_payload_id,{io_push_payload_size,{io_push_payload_endAt,io_push_payload_startAt}}};
  always @ (posedge io_memoryClk) begin
    if(_zz_10) begin
      _zz_4 <= logic_ram[logic_popPtr_valueNext];
    end
  end

  always @ (posedge io_memoryClk) begin
    if(_zz_1) begin
      logic_ram[logic_pushPtr_value] <= _zz_11;
    end
  end

  always @ (*) begin
    _zz_1 = 1'b0;
    if(logic_pushing)begin
      _zz_1 = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willIncrement = 1'b0;
    if(logic_pushing)begin
      logic_pushPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_pushPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_pushPtr_willClear = 1'b1;
    end
  end

  assign logic_pushPtr_willOverflowIfInc = (logic_pushPtr_value == (2'b11));
  assign logic_pushPtr_willOverflow = (logic_pushPtr_willOverflowIfInc && logic_pushPtr_willIncrement);
  always @ (*) begin
    logic_pushPtr_valueNext = (logic_pushPtr_value + _zz_6);
    if(logic_pushPtr_willClear)begin
      logic_pushPtr_valueNext = (2'b00);
    end
  end

  always @ (*) begin
    logic_popPtr_willIncrement = 1'b0;
    if(logic_popping)begin
      logic_popPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    logic_popPtr_willClear = 1'b0;
    if(io_flush)begin
      logic_popPtr_willClear = 1'b1;
    end
  end

  assign logic_popPtr_willOverflowIfInc = (logic_popPtr_value == (2'b11));
  assign logic_popPtr_willOverflow = (logic_popPtr_willOverflowIfInc && logic_popPtr_willIncrement);
  always @ (*) begin
    logic_popPtr_valueNext = (logic_popPtr_value + _zz_8);
    if(logic_popPtr_willClear)begin
      logic_popPtr_valueNext = (2'b00);
    end
  end

  assign logic_ptrMatch = (logic_pushPtr_value == logic_popPtr_value);
  assign logic_pushing = (io_push_valid && io_push_ready);
  assign logic_popping = (io_pop_valid && io_pop_ready);
  assign logic_empty = (logic_ptrMatch && (! logic_risingOccupancy));
  assign logic_full = (logic_ptrMatch && logic_risingOccupancy);
  assign io_push_ready = (! logic_full);
  assign io_pop_valid = ((! logic_empty) && (! (_zz_2 && (! logic_full))));
  assign _zz_3 = _zz_4;
  assign io_pop_payload_startAt = _zz_3[3 : 0];
  assign io_pop_payload_endAt = _zz_3[7 : 4];
  assign io_pop_payload_size = _zz_3[10 : 8];
  assign io_pop_payload_id = _zz_3[14 : 11];
  assign logic_ptrDif = (logic_pushPtr_value - logic_popPtr_value);
  assign io_occupancy = {(logic_risingOccupancy && logic_ptrMatch),logic_ptrDif};
  assign io_availability = {((! logic_risingOccupancy) && logic_ptrMatch),_zz_9};
  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      logic_pushPtr_value <= (2'b00);
      logic_popPtr_value <= (2'b00);
      logic_risingOccupancy <= 1'b0;
      _zz_2 <= 1'b0;
    end else begin
      logic_pushPtr_value <= logic_pushPtr_valueNext;
      logic_popPtr_value <= logic_popPtr_valueNext;
      _zz_2 <= (logic_popPtr_valueNext == logic_pushPtr_value);
      if((logic_pushing != logic_popping))begin
        logic_risingOccupancy <= logic_pushing;
      end
      if(io_flush)begin
        logic_risingOccupancy <= 1'b0;
      end
    end
  end


endmodule

module StreamFork_e12a9decc0704226832aec4017b36e8d (
  input               io_input_valid,
  output reg          io_input_ready,
  input      [31:0]   io_input_payload_addr,
  input      [3:0]    io_input_payload_id,
  input      [3:0]    io_input_payload_region,
  input      [7:0]    io_input_payload_len,
  input      [2:0]    io_input_payload_size,
  input      [1:0]    io_input_payload_burst,
  input      [0:0]    io_input_payload_lock,
  input      [3:0]    io_input_payload_cache,
  input      [3:0]    io_input_payload_qos,
  input      [2:0]    io_input_payload_prot,
  output              io_outputs_0_valid,
  input               io_outputs_0_ready,
  output     [31:0]   io_outputs_0_payload_addr,
  output     [3:0]    io_outputs_0_payload_id,
  output     [3:0]    io_outputs_0_payload_region,
  output     [7:0]    io_outputs_0_payload_len,
  output     [2:0]    io_outputs_0_payload_size,
  output     [1:0]    io_outputs_0_payload_burst,
  output     [0:0]    io_outputs_0_payload_lock,
  output     [3:0]    io_outputs_0_payload_cache,
  output     [3:0]    io_outputs_0_payload_qos,
  output     [2:0]    io_outputs_0_payload_prot,
  output              io_outputs_1_valid,
  input               io_outputs_1_ready,
  output     [31:0]   io_outputs_1_payload_addr,
  output     [3:0]    io_outputs_1_payload_id,
  output     [3:0]    io_outputs_1_payload_region,
  output     [7:0]    io_outputs_1_payload_len,
  output     [2:0]    io_outputs_1_payload_size,
  output     [1:0]    io_outputs_1_payload_burst,
  output     [0:0]    io_outputs_1_payload_lock,
  output     [3:0]    io_outputs_1_payload_cache,
  output     [3:0]    io_outputs_1_payload_qos,
  output     [2:0]    io_outputs_1_payload_prot,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  reg                 _zz_1;
  reg                 _zz_2;

  always @ (*) begin
    io_input_ready = 1'b1;
    if(((! io_outputs_0_ready) && _zz_1))begin
      io_input_ready = 1'b0;
    end
    if(((! io_outputs_1_ready) && _zz_2))begin
      io_input_ready = 1'b0;
    end
  end

  assign io_outputs_0_valid = (io_input_valid && _zz_1);
  assign io_outputs_0_payload_addr = io_input_payload_addr;
  assign io_outputs_0_payload_id = io_input_payload_id;
  assign io_outputs_0_payload_region = io_input_payload_region;
  assign io_outputs_0_payload_len = io_input_payload_len;
  assign io_outputs_0_payload_size = io_input_payload_size;
  assign io_outputs_0_payload_burst = io_input_payload_burst;
  assign io_outputs_0_payload_lock = io_input_payload_lock;
  assign io_outputs_0_payload_cache = io_input_payload_cache;
  assign io_outputs_0_payload_qos = io_input_payload_qos;
  assign io_outputs_0_payload_prot = io_input_payload_prot;
  assign io_outputs_1_valid = (io_input_valid && _zz_2);
  assign io_outputs_1_payload_addr = io_input_payload_addr;
  assign io_outputs_1_payload_id = io_input_payload_id;
  assign io_outputs_1_payload_region = io_input_payload_region;
  assign io_outputs_1_payload_len = io_input_payload_len;
  assign io_outputs_1_payload_size = io_input_payload_size;
  assign io_outputs_1_payload_burst = io_input_payload_burst;
  assign io_outputs_1_payload_lock = io_input_payload_lock;
  assign io_outputs_1_payload_cache = io_input_payload_cache;
  assign io_outputs_1_payload_qos = io_input_payload_qos;
  assign io_outputs_1_payload_prot = io_input_payload_prot;
  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      _zz_1 <= 1'b1;
      _zz_2 <= 1'b1;
    end else begin
      if((io_outputs_0_valid && io_outputs_0_ready))begin
        _zz_1 <= 1'b0;
      end
      if((io_outputs_1_valid && io_outputs_1_ready))begin
        _zz_2 <= 1'b0;
      end
      if(io_input_ready)begin
        _zz_1 <= 1'b1;
        _zz_2 <= 1'b1;
      end
    end
  end


endmodule

//BufferCC_12_e12a9decc0704226832aec4017b36e8d replaced by BufferCC_12_e12a9decc0704226832aec4017b36e8d

//BufferCC_5_e12a9decc0704226832aec4017b36e8d replaced by BufferCC_5_e12a9decc0704226832aec4017b36e8d

//BufferCC_5_e12a9decc0704226832aec4017b36e8d replaced by BufferCC_5_e12a9decc0704226832aec4017b36e8d

//BufferCC_12_e12a9decc0704226832aec4017b36e8d replaced by BufferCC_12_e12a9decc0704226832aec4017b36e8d

//BufferCC_5_e12a9decc0704226832aec4017b36e8d replaced by BufferCC_5_e12a9decc0704226832aec4017b36e8d

//BufferCC_12_e12a9decc0704226832aec4017b36e8d replaced by BufferCC_12_e12a9decc0704226832aec4017b36e8d

//BufferCC_12_e12a9decc0704226832aec4017b36e8d replaced by BufferCC_12_e12a9decc0704226832aec4017b36e8d

//BufferCC_5_e12a9decc0704226832aec4017b36e8d replaced by BufferCC_5_e12a9decc0704226832aec4017b36e8d

//BufferCC_5_e12a9decc0704226832aec4017b36e8d replaced by BufferCC_5_e12a9decc0704226832aec4017b36e8d

module BufferCC_12_e12a9decc0704226832aec4017b36e8d (
  input      [4:0]    io_initial,
  input      [4:0]    io_dataIn,
  output     [4:0]    io_dataOut,
  input               io_ddrMasters_0_clk,
  input               io_ddrMasters_0_reset
);
  reg        [4:0]    buffers_0;
  reg        [4:0]    buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge io_ddrMasters_0_clk) begin
    if(io_ddrMasters_0_reset) begin
      buffers_0 <= io_initial;
      buffers_1 <= io_initial;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

//BufferCC_4_e12a9decc0704226832aec4017b36e8d replaced by BufferCC_4_e12a9decc0704226832aec4017b36e8d

//BufferCC_5_e12a9decc0704226832aec4017b36e8d replaced by BufferCC_5_e12a9decc0704226832aec4017b36e8d

//BufferCC_6_e12a9decc0704226832aec4017b36e8d replaced by BufferCC_6_e12a9decc0704226832aec4017b36e8d

//BufferCC_7_e12a9decc0704226832aec4017b36e8d replaced by BufferCC_7_e12a9decc0704226832aec4017b36e8d

module BufferCC_7_e12a9decc0704226832aec4017b36e8d (
  input      [6:0]    io_initial,
  input      [6:0]    io_dataIn,
  output     [6:0]    io_dataOut,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg        [6:0]    buffers_0;
  reg        [6:0]    buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      buffers_0 <= io_initial;
      buffers_1 <= io_initial;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_6_e12a9decc0704226832aec4017b36e8d (
  input      [6:0]    io_initial,
  input      [6:0]    io_dataIn,
  output     [6:0]    io_dataOut,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  reg        [6:0]    buffers_0;
  reg        [6:0]    buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      buffers_0 <= io_initial;
      buffers_1 <= io_initial;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_5_e12a9decc0704226832aec4017b36e8d (
  input      [4:0]    io_initial,
  input      [4:0]    io_dataIn,
  output     [4:0]    io_dataOut,
  input               io_memoryClk,
  input               ddrCd_logic_outputReset
);
  reg        [4:0]    buffers_0;
  reg        [4:0]    buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge io_memoryClk) begin
    if(ddrCd_logic_outputReset) begin
      buffers_0 <= io_initial;
      buffers_1 <= io_initial;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_4_e12a9decc0704226832aec4017b36e8d (
  input      [4:0]    io_initial,
  input      [4:0]    io_dataIn,
  output     [4:0]    io_dataOut,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg        [4:0]    buffers_0;
  reg        [4:0]    buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      buffers_0 <= io_initial;
      buffers_1 <= io_initial;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule

module BufferCC_3_e12a9decc0704226832aec4017b36e8d (
  input               io_dataIn,
  output              io_dataOut,
  input               io_systemClk,
  input               debugCd_logic_outputReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge io_systemClk) begin
    buffers_0 <= io_dataIn;
    buffers_1 <= buffers_0;
  end


endmodule

//BufferCC_e12a9decc0704226832aec4017b36e8d replaced by BufferCC_e12a9decc0704226832aec4017b36e8d

//BufferCC_e12a9decc0704226832aec4017b36e8d replaced by BufferCC_e12a9decc0704226832aec4017b36e8d

module UartCtrlRx_e12a9decc0704226832aec4017b36e8d (
  input      [2:0]    io_configFrame_dataLength,
  input      `UartStopType_defaultEncoding_type io_configFrame_stop,
  input      `UartParityType_defaultEncoding_type io_configFrame_parity,
  input               io_samplingTick,
  output              io_read_valid,
  input               io_read_ready,
  output     [7:0]    io_read_payload,
  input               io_rxd,
  output              io_rts,
  output reg          io_error,
  output              io_break,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  wire                _zz_2;
  wire                io_rxd_buffercc_io_dataOut;
  wire                _zz_3;
  wire                _zz_4;
  wire                _zz_5;
  wire                _zz_6;
  wire       [0:0]    _zz_7;
  wire       [2:0]    _zz_8;
  wire                _zz_9;
  wire                _zz_10;
  wire                _zz_11;
  wire                _zz_12;
  wire                _zz_13;
  wire                _zz_14;
  wire                _zz_15;
  reg                 _zz_1;
  wire                sampler_synchroniser;
  wire                sampler_samples_0;
  reg                 sampler_samples_1;
  reg                 sampler_samples_2;
  reg                 sampler_samples_3;
  reg                 sampler_samples_4;
  reg                 sampler_value;
  reg                 sampler_tick;
  reg        [2:0]    bitTimer_counter;
  reg                 bitTimer_tick;
  reg        [2:0]    bitCounter_value;
  reg        [6:0]    break_counter;
  wire                break_valid;
  reg        `UartCtrlRxState_defaultEncoding_type stateMachine_state;
  reg                 stateMachine_parity;
  reg        [7:0]    stateMachine_shifter;
  reg                 stateMachine_validReg;
  `ifndef SYNTHESIS
  reg [23:0] io_configFrame_stop_string;
  reg [31:0] io_configFrame_parity_string;
  reg [47:0] stateMachine_state_string;
  `endif


  assign _zz_3 = (stateMachine_parity == sampler_value);
  assign _zz_4 = (! sampler_value);
  assign _zz_5 = ((sampler_tick && (! sampler_value)) && (! break_valid));
  assign _zz_6 = (bitCounter_value == io_configFrame_dataLength);
  assign _zz_7 = ((io_configFrame_stop == `UartStopType_defaultEncoding_ONE) ? (1'b0) : (1'b1));
  assign _zz_8 = {2'd0, _zz_7};
  assign _zz_9 = ((((1'b0 || ((_zz_14 && sampler_samples_1) && sampler_samples_2)) || (((_zz_15 && sampler_samples_0) && sampler_samples_1) && sampler_samples_3)) || (((1'b1 && sampler_samples_0) && sampler_samples_2) && sampler_samples_3)) || (((1'b1 && sampler_samples_1) && sampler_samples_2) && sampler_samples_3));
  assign _zz_10 = (((1'b1 && sampler_samples_0) && sampler_samples_1) && sampler_samples_4);
  assign _zz_11 = ((1'b1 && sampler_samples_0) && sampler_samples_2);
  assign _zz_12 = (1'b1 && sampler_samples_1);
  assign _zz_13 = 1'b1;
  assign _zz_14 = (1'b1 && sampler_samples_0);
  assign _zz_15 = 1'b1;
  BufferCC_e12a9decc0704226832aec4017b36e8d io_rxd_buffercc (
    .io_initial                    (_zz_2                       ), //i
    .io_dataIn                     (io_rxd                      ), //i
    .io_dataOut                    (io_rxd_buffercc_io_dataOut  ), //o
    .io_systemClk                  (io_systemClk                ), //i
    .systemCd_logic_outputReset    (systemCd_logic_outputReset  )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(io_configFrame_stop)
      `UartStopType_defaultEncoding_ONE : io_configFrame_stop_string = "ONE";
      `UartStopType_defaultEncoding_TWO : io_configFrame_stop_string = "TWO";
      default : io_configFrame_stop_string = "???";
    endcase
  end
  always @(*) begin
    case(io_configFrame_parity)
      `UartParityType_defaultEncoding_NONE : io_configFrame_parity_string = "NONE";
      `UartParityType_defaultEncoding_EVEN : io_configFrame_parity_string = "EVEN";
      `UartParityType_defaultEncoding_ODD : io_configFrame_parity_string = "ODD ";
      default : io_configFrame_parity_string = "????";
    endcase
  end
  always @(*) begin
    case(stateMachine_state)
      `UartCtrlRxState_defaultEncoding_IDLE : stateMachine_state_string = "IDLE  ";
      `UartCtrlRxState_defaultEncoding_START : stateMachine_state_string = "START ";
      `UartCtrlRxState_defaultEncoding_DATA : stateMachine_state_string = "DATA  ";
      `UartCtrlRxState_defaultEncoding_PARITY : stateMachine_state_string = "PARITY";
      `UartCtrlRxState_defaultEncoding_STOP : stateMachine_state_string = "STOP  ";
      default : stateMachine_state_string = "??????";
    endcase
  end
  `endif

  always @ (*) begin
    io_error = 1'b0;
    case(stateMachine_state)
      `UartCtrlRxState_defaultEncoding_IDLE : begin
      end
      `UartCtrlRxState_defaultEncoding_START : begin
      end
      `UartCtrlRxState_defaultEncoding_DATA : begin
      end
      `UartCtrlRxState_defaultEncoding_PARITY : begin
        if(bitTimer_tick)begin
          if(! _zz_3) begin
            io_error = 1'b1;
          end
        end
      end
      default : begin
        if(bitTimer_tick)begin
          if(_zz_4)begin
            io_error = 1'b1;
          end
        end
      end
    endcase
  end

  assign io_rts = _zz_1;
  assign _zz_2 = 1'b0;
  assign sampler_synchroniser = io_rxd_buffercc_io_dataOut;
  assign sampler_samples_0 = sampler_synchroniser;
  always @ (*) begin
    bitTimer_tick = 1'b0;
    if(sampler_tick)begin
      if((bitTimer_counter == (3'b000)))begin
        bitTimer_tick = 1'b1;
      end
    end
  end

  assign break_valid = (break_counter == 7'h68);
  assign io_break = break_valid;
  assign io_read_valid = stateMachine_validReg;
  assign io_read_payload = stateMachine_shifter;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      _zz_1 <= 1'b0;
      sampler_samples_1 <= 1'b1;
      sampler_samples_2 <= 1'b1;
      sampler_samples_3 <= 1'b1;
      sampler_samples_4 <= 1'b1;
      sampler_value <= 1'b1;
      sampler_tick <= 1'b0;
      break_counter <= 7'h0;
      stateMachine_state <= `UartCtrlRxState_defaultEncoding_IDLE;
      stateMachine_validReg <= 1'b0;
    end else begin
      _zz_1 <= (! io_read_ready);
      if(io_samplingTick)begin
        sampler_samples_1 <= sampler_samples_0;
      end
      if(io_samplingTick)begin
        sampler_samples_2 <= sampler_samples_1;
      end
      if(io_samplingTick)begin
        sampler_samples_3 <= sampler_samples_2;
      end
      if(io_samplingTick)begin
        sampler_samples_4 <= sampler_samples_3;
      end
      sampler_value <= ((((((_zz_9 || _zz_10) || (_zz_11 && sampler_samples_4)) || ((_zz_12 && sampler_samples_2) && sampler_samples_4)) || (((_zz_13 && sampler_samples_0) && sampler_samples_3) && sampler_samples_4)) || (((1'b1 && sampler_samples_1) && sampler_samples_3) && sampler_samples_4)) || (((1'b1 && sampler_samples_2) && sampler_samples_3) && sampler_samples_4));
      sampler_tick <= io_samplingTick;
      if(sampler_value)begin
        break_counter <= 7'h0;
      end else begin
        if((io_samplingTick && (! break_valid)))begin
          break_counter <= (break_counter + 7'h01);
        end
      end
      stateMachine_validReg <= 1'b0;
      case(stateMachine_state)
        `UartCtrlRxState_defaultEncoding_IDLE : begin
          if(_zz_5)begin
            stateMachine_state <= `UartCtrlRxState_defaultEncoding_START;
          end
        end
        `UartCtrlRxState_defaultEncoding_START : begin
          if(bitTimer_tick)begin
            stateMachine_state <= `UartCtrlRxState_defaultEncoding_DATA;
            if((sampler_value == 1'b1))begin
              stateMachine_state <= `UartCtrlRxState_defaultEncoding_IDLE;
            end
          end
        end
        `UartCtrlRxState_defaultEncoding_DATA : begin
          if(bitTimer_tick)begin
            if(_zz_6)begin
              if((io_configFrame_parity == `UartParityType_defaultEncoding_NONE))begin
                stateMachine_state <= `UartCtrlRxState_defaultEncoding_STOP;
                stateMachine_validReg <= 1'b1;
              end else begin
                stateMachine_state <= `UartCtrlRxState_defaultEncoding_PARITY;
              end
            end
          end
        end
        `UartCtrlRxState_defaultEncoding_PARITY : begin
          if(bitTimer_tick)begin
            if(_zz_3)begin
              stateMachine_state <= `UartCtrlRxState_defaultEncoding_STOP;
              stateMachine_validReg <= 1'b1;
            end else begin
              stateMachine_state <= `UartCtrlRxState_defaultEncoding_IDLE;
            end
          end
        end
        default : begin
          if(bitTimer_tick)begin
            if(_zz_4)begin
              stateMachine_state <= `UartCtrlRxState_defaultEncoding_IDLE;
            end else begin
              if((bitCounter_value == _zz_8))begin
                stateMachine_state <= `UartCtrlRxState_defaultEncoding_IDLE;
              end
            end
          end
        end
      endcase
    end
  end

  always @ (posedge io_systemClk) begin
    if(sampler_tick)begin
      bitTimer_counter <= (bitTimer_counter - (3'b001));
    end
    if(bitTimer_tick)begin
      bitCounter_value <= (bitCounter_value + (3'b001));
    end
    if(bitTimer_tick)begin
      stateMachine_parity <= (stateMachine_parity ^ sampler_value);
    end
    case(stateMachine_state)
      `UartCtrlRxState_defaultEncoding_IDLE : begin
        if(_zz_5)begin
          bitTimer_counter <= (3'b010);
        end
      end
      `UartCtrlRxState_defaultEncoding_START : begin
        if(bitTimer_tick)begin
          bitCounter_value <= (3'b000);
          stateMachine_parity <= (io_configFrame_parity == `UartParityType_defaultEncoding_ODD);
        end
      end
      `UartCtrlRxState_defaultEncoding_DATA : begin
        if(bitTimer_tick)begin
          stateMachine_shifter[bitCounter_value] <= sampler_value;
          if(_zz_6)begin
            bitCounter_value <= (3'b000);
          end
        end
      end
      `UartCtrlRxState_defaultEncoding_PARITY : begin
        if(bitTimer_tick)begin
          bitCounter_value <= (3'b000);
        end
      end
      default : begin
      end
    endcase
  end


endmodule

module UartCtrlTx_e12a9decc0704226832aec4017b36e8d (
  input      [2:0]    io_configFrame_dataLength,
  input      `UartStopType_defaultEncoding_type io_configFrame_stop,
  input      `UartParityType_defaultEncoding_type io_configFrame_parity,
  input               io_samplingTick,
  input               io_write_valid,
  output reg          io_write_ready,
  input      [7:0]    io_write_payload,
  input               io_cts,
  output              io_txd,
  input               io_break,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  wire                _zz_2;
  wire       [0:0]    _zz_3;
  wire       [2:0]    _zz_4;
  wire       [0:0]    _zz_5;
  wire       [2:0]    _zz_6;
  reg                 clockDivider_counter_willIncrement;
  wire                clockDivider_counter_willClear;
  reg        [2:0]    clockDivider_counter_valueNext;
  reg        [2:0]    clockDivider_counter_value;
  wire                clockDivider_counter_willOverflowIfInc;
  wire                clockDivider_counter_willOverflow;
  reg        [2:0]    tickCounter_value;
  reg        `UartCtrlTxState_defaultEncoding_type stateMachine_state;
  reg                 stateMachine_parity;
  reg                 stateMachine_txd;
  reg                 _zz_1;
  `ifndef SYNTHESIS
  reg [23:0] io_configFrame_stop_string;
  reg [31:0] io_configFrame_parity_string;
  reg [47:0] stateMachine_state_string;
  `endif


  assign _zz_2 = (tickCounter_value == io_configFrame_dataLength);
  assign _zz_3 = clockDivider_counter_willIncrement;
  assign _zz_4 = {2'd0, _zz_3};
  assign _zz_5 = ((io_configFrame_stop == `UartStopType_defaultEncoding_ONE) ? (1'b0) : (1'b1));
  assign _zz_6 = {2'd0, _zz_5};
  `ifndef SYNTHESIS
  always @(*) begin
    case(io_configFrame_stop)
      `UartStopType_defaultEncoding_ONE : io_configFrame_stop_string = "ONE";
      `UartStopType_defaultEncoding_TWO : io_configFrame_stop_string = "TWO";
      default : io_configFrame_stop_string = "???";
    endcase
  end
  always @(*) begin
    case(io_configFrame_parity)
      `UartParityType_defaultEncoding_NONE : io_configFrame_parity_string = "NONE";
      `UartParityType_defaultEncoding_EVEN : io_configFrame_parity_string = "EVEN";
      `UartParityType_defaultEncoding_ODD : io_configFrame_parity_string = "ODD ";
      default : io_configFrame_parity_string = "????";
    endcase
  end
  always @(*) begin
    case(stateMachine_state)
      `UartCtrlTxState_defaultEncoding_IDLE : stateMachine_state_string = "IDLE  ";
      `UartCtrlTxState_defaultEncoding_START : stateMachine_state_string = "START ";
      `UartCtrlTxState_defaultEncoding_DATA : stateMachine_state_string = "DATA  ";
      `UartCtrlTxState_defaultEncoding_PARITY : stateMachine_state_string = "PARITY";
      `UartCtrlTxState_defaultEncoding_STOP : stateMachine_state_string = "STOP  ";
      default : stateMachine_state_string = "??????";
    endcase
  end
  `endif

  always @ (*) begin
    clockDivider_counter_willIncrement = 1'b0;
    if(io_samplingTick)begin
      clockDivider_counter_willIncrement = 1'b1;
    end
  end

  assign clockDivider_counter_willClear = 1'b0;
  assign clockDivider_counter_willOverflowIfInc = (clockDivider_counter_value == (3'b111));
  assign clockDivider_counter_willOverflow = (clockDivider_counter_willOverflowIfInc && clockDivider_counter_willIncrement);
  always @ (*) begin
    clockDivider_counter_valueNext = (clockDivider_counter_value + _zz_4);
    if(clockDivider_counter_willClear)begin
      clockDivider_counter_valueNext = (3'b000);
    end
  end

  always @ (*) begin
    stateMachine_txd = 1'b1;
    case(stateMachine_state)
      `UartCtrlTxState_defaultEncoding_IDLE : begin
      end
      `UartCtrlTxState_defaultEncoding_START : begin
        stateMachine_txd = 1'b0;
      end
      `UartCtrlTxState_defaultEncoding_DATA : begin
        stateMachine_txd = io_write_payload[tickCounter_value];
      end
      `UartCtrlTxState_defaultEncoding_PARITY : begin
        stateMachine_txd = stateMachine_parity;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    io_write_ready = io_break;
    case(stateMachine_state)
      `UartCtrlTxState_defaultEncoding_IDLE : begin
      end
      `UartCtrlTxState_defaultEncoding_START : begin
      end
      `UartCtrlTxState_defaultEncoding_DATA : begin
        if(clockDivider_counter_willOverflow)begin
          if(_zz_2)begin
            io_write_ready = 1'b1;
          end
        end
      end
      `UartCtrlTxState_defaultEncoding_PARITY : begin
      end
      default : begin
      end
    endcase
  end

  assign io_txd = _zz_1;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      clockDivider_counter_value <= (3'b000);
      stateMachine_state <= `UartCtrlTxState_defaultEncoding_IDLE;
      _zz_1 <= 1'b1;
    end else begin
      clockDivider_counter_value <= clockDivider_counter_valueNext;
      case(stateMachine_state)
        `UartCtrlTxState_defaultEncoding_IDLE : begin
          if(((io_write_valid && (! io_cts)) && clockDivider_counter_willOverflow))begin
            stateMachine_state <= `UartCtrlTxState_defaultEncoding_START;
          end
        end
        `UartCtrlTxState_defaultEncoding_START : begin
          if(clockDivider_counter_willOverflow)begin
            stateMachine_state <= `UartCtrlTxState_defaultEncoding_DATA;
          end
        end
        `UartCtrlTxState_defaultEncoding_DATA : begin
          if(clockDivider_counter_willOverflow)begin
            if(_zz_2)begin
              if((io_configFrame_parity == `UartParityType_defaultEncoding_NONE))begin
                stateMachine_state <= `UartCtrlTxState_defaultEncoding_STOP;
              end else begin
                stateMachine_state <= `UartCtrlTxState_defaultEncoding_PARITY;
              end
            end
          end
        end
        `UartCtrlTxState_defaultEncoding_PARITY : begin
          if(clockDivider_counter_willOverflow)begin
            stateMachine_state <= `UartCtrlTxState_defaultEncoding_STOP;
          end
        end
        default : begin
          if(clockDivider_counter_willOverflow)begin
            if((tickCounter_value == _zz_6))begin
              stateMachine_state <= (io_write_valid ? `UartCtrlTxState_defaultEncoding_START : `UartCtrlTxState_defaultEncoding_IDLE);
            end
          end
        end
      endcase
      _zz_1 <= (stateMachine_txd && (! io_break));
    end
  end

  always @ (posedge io_systemClk) begin
    if(clockDivider_counter_willOverflow)begin
      tickCounter_value <= (tickCounter_value + (3'b001));
    end
    if(clockDivider_counter_willOverflow)begin
      stateMachine_parity <= (stateMachine_parity ^ stateMachine_txd);
    end
    case(stateMachine_state)
      `UartCtrlTxState_defaultEncoding_IDLE : begin
      end
      `UartCtrlTxState_defaultEncoding_START : begin
        if(clockDivider_counter_willOverflow)begin
          stateMachine_parity <= (io_configFrame_parity == `UartParityType_defaultEncoding_ODD);
          tickCounter_value <= (3'b000);
        end
      end
      `UartCtrlTxState_defaultEncoding_DATA : begin
        if(clockDivider_counter_willOverflow)begin
          if(_zz_2)begin
            tickCounter_value <= (3'b000);
          end
        end
      end
      `UartCtrlTxState_defaultEncoding_PARITY : begin
        if(clockDivider_counter_willOverflow)begin
          tickCounter_value <= (3'b000);
        end
      end
      default : begin
      end
    endcase
  end


endmodule

module BufferCC_e12a9decc0704226832aec4017b36e8d (
  input               io_initial,
  input               io_dataIn,
  output              io_dataOut,
  input               io_systemClk,
  input               systemCd_logic_outputReset
);
  reg                 buffers_0;
  reg                 buffers_1;

  assign io_dataOut = buffers_1;
  always @ (posedge io_systemClk) begin
    if(systemCd_logic_outputReset) begin
      buffers_0 <= io_initial;
      buffers_1 <= io_initial;
    end else begin
      buffers_0 <= io_dataIn;
      buffers_1 <= buffers_0;
    end
  end


endmodule
